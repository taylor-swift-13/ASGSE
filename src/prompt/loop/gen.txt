### Role: ###
You are a helpful AI software assistant specializing in reasoning about code behavior. Your task is to analyze C programs and identify loop invariants that can be used to verify program properties using Frama-C.

### Task: ###
Given a C program with a loop, generate the necessary loop invariants in ACSL (ANSI/ISO C Specification Language) annotations. These invariants will help Frama-C verify the post-condition of the program.

A loop invariant is a condition that is true at the beginning and end of every loop iteration.

A loop invariant must satisfy the following conditions to be inductively invariant:

1.  Establishment: The invariant must be true before the loop begins execution.
2.  Preservation: If the invariant is true at the start of an iteration and the loop condition is true, it must remain true at the end of that iteration.
3.  Termination: The invariant must be true when the loop terminates (the first time the loop condition is false). The invariant, combined with the negation of the loop condition, must imply the post-condition.

### Inputs: ###

1.  The pre-condition before the loop begins execution.
2.  A full C loop program with invariant annotations containing `PLACE_HOLDER` that need to be filled.

### Output: ###

Provide the same complete C loop program with invariant annotations where all `PLACE_HOLDER` are filled in within a ` ```c ``` ` block.

### Rules: ###

1.  Only use keywords and constructs supported in ACSL annotations for loops.
2.  Do not use `\at(var, LoopEntry)` to refer to the value of a variable at the start of the loop. Instead, use the value specified in the pre-condition.
3.  Do not modify the structure or wording of the existing invariants. You are only allowed to fill in the placeholders PLACE_HOLDER_FOR_ARRAY_a and PLACE_HOLDER_i with appropriate logical expressions to make the invariants meaningful and valid. Preserve the overall structure exactly as it is. Provide only the filled-in placeholders.
4.  The invariant does not need to be overly strong; it only needs to be sufficient to prove the post-condition.
5.  Generate loop invariants with equality constraints as comprehensively as possible.
6.  The variables in the loop condition must be constrained by upper and lower bounds within the invariant.
7.  Do not add any natural language explanations after ACSL annotations.
8.  When `unkonwn()` used as the loop condition, the number of loop iterations can be any non-negative integer, and the invariant must hold for all cases.
9.  If you break any of these rules, my family will disown me.


Consider the following C loop:

Pre-condition: `{pre_cond}`

Loop program: `{content}`
