[
    {
        "loop_id": 0,
        "condition": "(i == 0) * (pIp == pIp@pre) * (pIp@pre->mat == pIp_mat) * (*pIp_mat == pIp_mat_v) * (pIp@pre->nrow == pIp_nrow) * (pIp@pre->ncol == pIp_ncol) * (pIp@pre->tran == pIp_tran) * (*pIp_tran == pIp_tran_v)",
        "content": "for (; i<pIp -> nrow ; i++ )\n    {\n        int j = 0;\n        \n        for (; j<pIp -> ncol ; j++ )\n        {\n            *(pIp -> tran + j * pIp -> nrow + i) = *(pIp -> mat + i * pIp -> ncol + j) ;\n        }\n    }"
    },
    {
        "loop_id": 1,
        "condition": "0 < pIp_nrow && (j == 0) * (i == 0) * (pIp == pIp@pre) * (pIp@pre->mat == pIp_mat) * (*pIp_mat == pIp_mat_v) * (pIp@pre->nrow == pIp_nrow) * (pIp@pre->ncol == pIp_ncol) * (pIp@pre->tran == pIp_tran) * (*pIp_tran == pIp_tran_v)",
        "content": "for (; j<pIp -> ncol ; j++ )\n        {\n            *(pIp -> tran + j * pIp -> nrow + i) = *(pIp -> mat + i * pIp -> ncol + j) ;\n        }"
    }
]