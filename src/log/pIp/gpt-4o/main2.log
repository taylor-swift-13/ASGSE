2025-08-26 10:32:55,004 - INFO  - 
FUNCTION INITIALIZATION
2025-08-26 10:32:55,004 - INFO  - ========================================

2025-08-26 10:32:55,081 - INFO  - 初始待处理函数: ['main2', 'TripleAbsMaxFun']
2025-08-26 10:32:55,081 - INFO  - 现在处理函数 TripleAbsMaxFun

2025-08-26 10:32:55,089 - INFO  - 
GENERATE ANNOTATION FOR TripleAbsMaxFun
2025-08-26 10:32:55,090 - INFO  - ========================================

2025-08-26 10:32:55,090 - INFO  - 函数 TripleAbsMaxFun 已经初始化
2025-08-26 10:32:55,090 - INFO  - 开始生成 TripleAbsMaxFun 的注释代码
2025-08-26 10:32:55,150 - INFO  - 
GENERATE FUNCTION SUMMARY FOR TripleAbsMaxFun
2025-08-26 10:32:55,150 - INFO  - ========================================

2025-08-26 10:32:55,270 - INFO  - 开始生成完整的 TripleAbsMaxFun 的注释代码
2025-08-26 10:32:55,275 - INFO  - 开始生成 TripleAbsMaxFun 的 ACSL 规约
2025-08-26 10:32:55,290 - INFO  - 
GENERATE ANNOTATION FOR main2
2025-08-26 10:32:55,291 - INFO  - ========================================

2025-08-26 10:32:55,291 - INFO  - 函数 main2 已经初始化
2025-08-26 10:32:55,291 - INFO  - 开始生成 main2 的注释代码
2025-08-26 10:32:55,313 - INFO  - 
GENERATE FUNCTION SUMMARY FOR main2
2025-08-26 10:32:55,313 - INFO  - ========================================

2025-08-26 10:32:55,321 - INFO  - 开始生成 main2 的 ACSL 规约
2025-08-26 10:32:55,322 - INFO  - content before specgen: 


typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2)) ;
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);

ensures -pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

*/

void TripleAbsMaxFun(TripleAbsMax *pIp)

{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-08-26 10:32:55,322 - INFO  - content after specgen: 


typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2)) ;
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);

ensures -pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

*/

void TripleAbsMaxFun(TripleAbsMax *pIp)

{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-08-26 10:33:10,540 - INFO  - syntax Correct
2025-08-26 10:33:18,660 - INFO  - Loop Invariant:
2025-08-26 10:33:18,660 - INFO  - []
2025-08-26 10:33:18,660 - INFO  - 
2025-08-26 10:33:18,661 - INFO  - Assertion:
2025-08-26 10:33:18,661 - INFO  - [False]
2025-08-26 10:33:18,661 - INFO  - 
2025-08-26 10:33:18,661 - INFO  - Post Condition:
2025-08-26 10:33:18,661 - INFO  - [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
2025-08-26 10:33:18,661 - INFO  - 
2025-08-26 10:33:18,661 - INFO  - postconditon before refine: 


typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2)) ;
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);

ensures -pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures -pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[1]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[1];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[0];

ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[0]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[0];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

ensures -pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 && pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]) ==> pIp->tmax == -pIp->abs[2]&&pIp->ret == \old(pIp->ret)&&*\old(pIp->ret) == -pIp->abs[2];

*/

void TripleAbsMaxFun(TripleAbsMax *pIp)

{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-08-26 10:33:28,340 - INFO  - postconditon after refine: 

typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);

ensures pIp->tmax == \max(\abs(pIp->abs[0]), \abs(pIp->abs[1]), \abs(pIp->abs[2]));
ensures *(pIp->ret) == pIp->tmax;
ensures pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]);
ensures pIp->ret == \old(pIp->ret);
*/

void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}

/*@
requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
*/

void main2(TripleAbsMax *pIp)
{
    pIp->abs[0] = 1;
    pIp->abs[1] = 2;
    pIp->abs[2] = -3;

    TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}

2025-08-26 10:33:28,502 - INFO  - syntax Error
[kernel] Parsing output/pIp/main2.c (with preprocessing)
[kernel:annot-error] output/pIp/main2.c:15: Warning: 
  no such predicate or logic function \max(ℤ, ℤ, ℤ). Ignoring logic specification of function TripleAbsMaxFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

2025-08-26 10:33:50,726 - INFO  - syntax Correct
2025-08-26 10:33:52,514 - INFO  - Loop Invariant:
2025-08-26 10:33:52,515 - INFO  - []
2025-08-26 10:33:52,515 - INFO  - 
2025-08-26 10:33:52,515 - INFO  - Assertion:
2025-08-26 10:33:52,515 - INFO  - [True]
2025-08-26 10:33:52,515 - INFO  - 
2025-08-26 10:33:52,515 - INFO  - Post Condition:
2025-08-26 10:33:52,515 - INFO  - [True, True, True, True, True, True, True, True, True, True]
2025-08-26 10:33:52,515 - INFO  - 
2025-08-26 10:33:52,515 - INFO  - 大模型生成的main2.c 的规约的内容为
typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);

ensures pIp->abs[0] >= 0 ==> \abs(pIp->abs[0]) == pIp->abs[0];
ensures pIp->abs[0] < 0 ==> \abs(pIp->abs[0]) == -pIp->abs[0];
ensures pIp->abs[1] >= 0 ==> \abs(pIp->abs[1]) == pIp->abs[1];
ensures pIp->abs[1] < 0 ==> \abs(pIp->abs[1]) == -pIp->abs[1];
ensures pIp->abs[2] >= 0 ==> \abs(pIp->abs[2]) == pIp->abs[2];
ensures pIp->abs[2] < 0 ==> \abs(pIp->abs[2]) == -pIp->abs[2];

ensures pIp->tmax == (\abs(pIp->abs[0]) >= \abs(pIp->abs[1]) && \abs(pIp->abs[0]) >= \abs(pIp->abs[2]) ? \abs(pIp->abs[0]) :
                      (\abs(pIp->abs[1]) >= \abs(pIp->abs[0]) && \abs(pIp->abs[1]) >= \abs(pIp->abs[2]) ? \abs(pIp->abs[1]) :
                      \abs(pIp->abs[2])));

ensures *(pIp->ret) == pIp->tmax;
ensures pIp->abs[0] == \old(pIp->abs[0]) && pIp->abs[1] == \old(pIp->abs[1]) && pIp->abs[2] == \old(pIp->abs[2]);
ensures pIp->ret == \old(pIp->ret);
*/

void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}

/*@
requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
*/

void main2(TripleAbsMax *pIp)
{
    pIp->abs[0] = 1;
    pIp->abs[1] = 2;
    pIp->abs[2] = -3;

    TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}

2025-08-26 10:33:52,516 - INFO  - 
SUMMARY FOR main2
2025-08-26 10:33:52,516 - INFO  - ========================================

2025-08-26 10:33:52,516 - INFO  - 
函数 main2 的 VST Summary 为:
/*@
With pIp_abs_l pIp_abs_0 pIp_abs_1 pIp_abs_2 pIp_tmax pIp_ret_v pIp_ret
Require store_int_array(pIp->abs,3, pIp_abs_l) && pIp_abs_l[0] == pIp_abs_0 && pIp_abs_l[1] == pIp_abs_1 && pIp_abs_l[2] == pIp_abs_2 && pIp->tmax == pIp_tmax && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure emp
*/
2025-08-26 10:33:52,516 - INFO  - 
函数 main2 的 ACSL Summary 为:

2025-08-26 10:33:52,582 - INFO  - 
VERIFICATION FOR main2
2025-08-26 10:33:52,582 - INFO  - ========================================

2025-08-26 10:33:57,515 - INFO  - syntax Correct
2025-08-26 10:33:59,290 - INFO  - Loop Invariant:
2025-08-26 10:33:59,290 - INFO  - []
2025-08-26 10:33:59,290 - INFO  - 
2025-08-26 10:33:59,290 - INFO  - Assertion:
2025-08-26 10:33:59,290 - INFO  - [True]
2025-08-26 10:33:59,291 - INFO  - 
2025-08-26 10:33:59,291 - INFO  - Post Condition:
2025-08-26 10:33:59,291 - INFO  - [True, True, True, True, True, True, True, True, True, True]
2025-08-26 10:33:59,291 - INFO  - 
2025-08-26 10:33:59,291 - INFO  - ========================================
2025-08-26 10:33:59,291 - INFO  - first_pass:
2025-08-26 10:33:59,291 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-26 10:33:59,291 - INFO  - ========================================
