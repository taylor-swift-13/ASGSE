2025-09-08 21:46:47,750 - INFO  - 
FUNCTION INITIALIZATION
2025-09-08 21:46:47,751 - INFO  - ========================================

2025-09-08 21:46:47,814 - INFO  - 初始待处理函数: ['main2', 'TripleAbsMaxFun']
2025-09-08 21:46:47,815 - INFO  - 现在处理函数 TripleAbsMaxFun

2025-09-08 21:46:47,822 - INFO  - 
GENERATE ANNOTATION FOR TripleAbsMaxFun
2025-09-08 21:46:47,822 - INFO  - ========================================

2025-09-08 21:46:47,822 - INFO  - 函数 TripleAbsMaxFun 已经初始化
2025-09-08 21:46:47,822 - INFO  - 开始生成 TripleAbsMaxFun 的注释代码
2025-09-08 21:46:47,833 - INFO  - 待插入模板的 ACSL TripleAbsMaxFun.c文件的内容为: 
typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;
/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2)) ;
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    */
    
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}
2025-09-08 21:46:47,833 - INFO  - 
GENERATE FUNCTION SPECIFICATION FOR TripleAbsMaxFun
2025-09-08 21:46:47,834 - INFO  - ========================================

2025-09-08 21:46:47,939 - INFO  - 开始生成完整的 TripleAbsMaxFun 的注释代码
2025-09-08 21:46:47,945 - INFO  - 开始生成 TripleAbsMaxFun 的 ACSL 规约
2025-09-08 21:46:47,946 - INFO  - content before specgen: 
typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;
/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2)) ;
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
           ensures PLACE_HOLDER; 
    assigns PLACE_HOLDER;
    */
    
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}
2025-09-08 21:46:57,658 - INFO  - content after specgen: 

typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}

2025-09-08 21:47:02,013 - INFO  - syntax Correct
2025-09-08 21:47:02,877 - INFO  - Loop Invariant:
2025-09-08 21:47:02,878 - INFO  - []
2025-09-08 21:47:02,878 - INFO  - 
2025-09-08 21:47:02,878 - INFO  - Assertion:
2025-09-08 21:47:02,878 - INFO  - [True, True, True, True, True, True, True]
2025-09-08 21:47:02,878 - INFO  - 
2025-09-08 21:47:02,878 - INFO  - Post Condition:
2025-09-08 21:47:02,878 - INFO  - [True, True]
2025-09-08 21:47:02,878 - INFO  - 
2025-09-08 21:47:02,878 - INFO  - Model生成的TripleAbsMaxFun.c 的规约的内容为
typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}

2025-09-08 21:47:02,880 - INFO  - 
GENERATE ANNOTATION FOR main2
2025-09-08 21:47:02,880 - INFO  - ========================================

2025-09-08 21:47:02,880 - INFO  - 函数 main2 已经初始化
2025-09-08 21:47:02,880 - INFO  - 开始生成 main2 的注释代码
2025-09-08 21:47:02,892 - INFO  - 待插入模板的 ACSL main2.c文件的内容为: 



typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}
/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-09-08 21:47:02,898 - INFO  - 
GENERATE FUNCTION SPECIFICATION FOR main2
2025-09-08 21:47:02,898 - INFO  - ========================================

2025-09-08 21:47:02,926 - INFO  - 开始生成 main2 的 ACSL 规约
2025-09-08 21:47:02,926 - INFO  - content before specgen: 



typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}
/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-09-08 21:47:02,926 - INFO  - content after specgen: 



typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}
/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-09-08 21:47:07,155 - INFO  - syntax Correct
2025-09-08 21:47:08,390 - INFO  - Loop Invariant:
2025-09-08 21:47:08,391 - INFO  - []
2025-09-08 21:47:08,391 - INFO  - 
2025-09-08 21:47:08,391 - INFO  - Assertion:
2025-09-08 21:47:08,391 - INFO  - [True, True, True, True, True, True, True, True]
2025-09-08 21:47:08,391 - INFO  - 
2025-09-08 21:47:08,391 - INFO  - Post Condition:
2025-09-08 21:47:08,391 - INFO  - [True, True]
2025-09-08 21:47:08,391 - INFO  - 
2025-09-08 21:47:08,391 - INFO  - Model生成的main2.c 的规约的内容为


typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
    requires \valid(pIp); 
    requires \valid(pIp->abs+(0..2));
    requires \valid(pIp->ret);
    requires \separated(pIp, pIp->ret);
    
    ensures pIp->tmax == \max(\abs(pIp->abs[0]), \max(\abs(pIp->abs[1]), \abs(pIp->abs[2])));
    ensures *(pIp->ret) == pIp->tmax;
    
    assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)
{
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;
}
/*@
    requires \valid(pIp);
requires \valid(pIp->abs+(0..2));
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void main2(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert *(pIp->ret) == 3; */
}
2025-09-08 21:47:08,393 - INFO  - 
SPECIFICATION FOR main2
2025-09-08 21:47:08,393 - INFO  - ========================================

2025-09-08 21:47:08,393 - INFO  - 
函数 main2 的 VST Specification 为:
/*@
With pIp_abs_l pIp_tmax pIp_ret_v pIp_ret
Require store_int_array(pIp->abs,3, pIp_abs_l) && pIp->tmax == pIp_tmax && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure emp
*/
2025-09-08 21:47:08,393 - INFO  - 
函数 main2 的 ACSL Specification 为:

2025-09-08 21:47:08,582 - INFO  - 
VERIFICATION FOR main2
2025-09-08 21:47:08,582 - INFO  - ========================================

2025-09-08 21:47:12,807 - INFO  - syntax Correct
2025-09-08 21:47:14,068 - INFO  - Loop Invariant:
2025-09-08 21:47:14,068 - INFO  - []
2025-09-08 21:47:14,068 - INFO  - 
2025-09-08 21:47:14,068 - INFO  - Assertion:
2025-09-08 21:47:14,068 - INFO  - [True, True, True, True, True, True, True, True]
2025-09-08 21:47:14,068 - INFO  - 
2025-09-08 21:47:14,068 - INFO  - Post Condition:
2025-09-08 21:47:14,068 - INFO  - [True, True]
2025-09-08 21:47:14,069 - INFO  - 
2025-09-08 21:47:14,069 - INFO  - ========================================
2025-09-08 21:47:14,069 - INFO  - first_pass:
2025-09-08 21:47:14,069 - INFO  - syntax=1, valid=1,satisfy=1
2025-09-08 21:47:14,069 - INFO  - ========================================
