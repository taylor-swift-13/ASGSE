2025-08-11 21:28:43,796 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:28:43,796 - INFO  - ========================================

2025-08-11 21:28:43,843 - INFO  - 初始待处理函数: ['main30']
2025-08-11 21:28:43,844 - INFO  - 
GENERATE ANNOTATION FOR main30
2025-08-11 21:28:43,844 - INFO  - ========================================

2025-08-11 21:28:43,844 - INFO  - 函数 main30 已经初始化
2025-08-11 21:28:43,891 - INFO  - 
GENERATE LOOP INVARIANT FOR main30
2025-08-11 21:28:43,891 - INFO  - ========================================

2025-08-11 21:28:43,935 - INFO  - file_name: main30
2025-08-11 21:28:43,939 - DEBUG  - INNER_FLAG: False
2025-08-11 21:28:43,984 - INFO  - Variable Maps:[{}]
2025-08-11 21:28:43,984 - INFO  - Path conditions: [None]
2025-08-11 21:28:43,985 - INFO  - Pre condition: 
2025-08-11 21:28:43,985 - INFO  - Loop Condition: n > 0
2025-08-11 21:28:43,985 - INFO  - Array Names: []
2025-08-11 21:28:43,985 - INFO  - Updated Loop Conditions: ['n > 0']
2025-08-11 21:28:43,985 - INFO  - Global Unchanged Variables: []
2025-08-11 21:28:43,985 - INFO  - Non Inductive Variables: []
2025-08-11 21:29:38,208 - INFO  - after const
2025-08-11 21:29:38,209 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 21:29:38,209 - INFO  - after not in
2025-08-11 21:29:38,209 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 21:29:38,209 - INFO  - after vars
2025-08-11 21:29:38,209 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 21:29:38,209 - INFO  - after verification goal
2025-08-11 21:29:38,209 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (n > 0) ==> (() || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 21:29:43,100 - INFO  - 生成循环不变量
2025-08-11 21:29:43,100 - INFO  - int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant z * w >= p * p;
          loop invariant z == ((\at(n, Pre) - n) * x * x);
          loop invariant w == ((\at(n, Pre) - n) * y * y);
          loop invariant p == ((\at(n, Pre) - n) * x * y);
          loop invariant n >= 0;
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}
2025-08-11 21:29:54,186 - INFO  - syntax Correct
2025-08-11 21:29:58,153 - INFO  - Validate:
2025-08-11 21:29:58,154 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:29:58,154 - INFO  - 
2025-08-11 21:29:58,154 - INFO  - Verify:
2025-08-11 21:29:58,154 - INFO  - [True]
2025-08-11 21:29:58,154 - INFO  - 
2025-08-11 21:29:58,154 - INFO  - 注释过不变量的代码
2025-08-11 21:29:58,154 - INFO  - int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant z * w >= p * p;
          loop invariant z == ((\at(n, Pre) - n) * x * x);
          loop invariant w == ((\at(n, Pre) - n) * y * y);
          loop invariant p == ((\at(n, Pre) - n) * x * y);
          loop invariant n >= 0;
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}
2025-08-11 21:30:09,261 - INFO  - syntax Correct
2025-08-11 21:30:13,223 - INFO  - Validate:
2025-08-11 21:30:13,223 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:30:13,223 - INFO  - 
2025-08-11 21:30:13,223 - INFO  - Verify:
2025-08-11 21:30:13,223 - INFO  - [True]
2025-08-11 21:30:13,223 - INFO  - 
2025-08-11 21:30:13,223 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:30:13,223 - INFO  - /*@
          loop invariant z * w >= p * p;
          loop invariant z == ((\at(n, Pre) - n) * x * x);
          loop invariant w == ((\at(n, Pre) - n) * y * y);
          loop invariant p == ((\at(n, Pre) - n) * x * y);
          loop invariant n >= 0;
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 21:30:13,223 - INFO  - VST 格式的循环不变量
2025-08-11 21:30:13,224 - INFO  - /*@ Inv
    (z * w >= p * p) &&
(z == ((n@pre - n) * x * x)) &&
(w == ((n@pre - n) * y * y)) &&
(p == ((n@pre - n) * x * y)) &&
(n >= 0)
    */
    
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 21:30:13,224 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:30:13,224 - INFO  - 继续符号执行
2025-08-11 21:30:13,224 - INFO  - /*@ Inv
    (z * w >= p * p) &&
(z == ((n@pre - n) * x * x)) &&
(w == ((n@pre - n) * y * y)) &&
(p == ((n@pre - n) * x * y)) &&
(n >= 0)
    */
    
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 21:30:24,383 - INFO  - syntax Correct
2025-08-11 21:30:28,340 - INFO  - Validate:
2025-08-11 21:30:28,341 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:30:28,341 - INFO  - 
2025-08-11 21:30:28,341 - INFO  - Verify:
2025-08-11 21:30:28,341 - INFO  - [True]
2025-08-11 21:30:28,341 - INFO  - 
2025-08-11 21:30:28,341 - INFO  - CORRECT INVARIANT
2025-08-11 21:30:39,509 - INFO  - syntax Correct
2025-08-11 21:30:43,479 - INFO  - Validate:
2025-08-11 21:30:43,479 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:30:43,479 - INFO  - 
2025-08-11 21:30:43,479 - INFO  - Verify:
2025-08-11 21:30:43,479 - INFO  - [True]
2025-08-11 21:30:43,479 - INFO  - 
2025-08-11 21:30:43,479 - INFO  - ========================================
2025-08-11 21:30:43,479 - INFO  - first_pass:
2025-08-11 21:30:43,479 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:30:43,479 - INFO  - ========================================
