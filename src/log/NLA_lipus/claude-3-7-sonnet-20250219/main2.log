2025-08-11 21:03:44,099 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:03:44,099 - INFO  - ========================================

2025-08-11 21:03:44,135 - INFO  - 初始待处理函数: ['main2']
2025-08-11 21:03:44,135 - INFO  - 
GENERATE ANNOTATION FOR main2
2025-08-11 21:03:44,135 - INFO  - ========================================

2025-08-11 21:03:44,135 - INFO  - 函数 main2 已经初始化
2025-08-11 21:03:44,178 - INFO  - 
GENERATE LOOP INVARIANT FOR main2
2025-08-11 21:03:44,178 - INFO  - ========================================

2025-08-11 21:03:44,219 - INFO  - file_name: main2
2025-08-11 21:03:44,229 - DEBUG  - INNER_FLAG: False
2025-08-11 21:03:44,271 - INFO  - Variable Maps:[{'r': '0', 'q': '0', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-11 21:03:44,271 - INFO  - Path conditions: ['x@pre > 0 && y@pre > 0']
2025-08-11 21:03:44,271 - INFO  - Pre condition: x@pre > 0 && y@pre > 0 && (r == 0) * (q == 0) * (y == y@pre) * (x == x@pre)
2025-08-11 21:03:44,271 - INFO  - Loop Condition: x > y * q + r
2025-08-11 21:03:44,271 - INFO  - Array Names: []
2025-08-11 21:03:44,271 - INFO  - Updated Loop Conditions: ['x@pre > y@pre * 0 + 0']
2025-08-11 21:03:44,272 - INFO  - Global Unchanged Variables: ['y', 'x']
2025-08-11 21:03:44,272 - INFO  - Non Inductive Variables: ['r']
2025-08-11 21:04:28,409 - INFO  - after const
2025-08-11 21:04:28,409 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-11 21:04:28,409 - INFO  - after not in
2025-08-11 21:04:28,409 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-11 21:04:28,409 - INFO  - after vars
2025-08-11 21:04:28,409 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-11 21:04:28,409 - INFO  - after verification goal
2025-08-11 21:04:28,409 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-11 21:04:34,913 - INFO  - 生成循环不变量
2025-08-11 21:04:34,913 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main2(int x,int y){
 
  int q=0;
  int r=0;
  
  
            
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y && q >= 0));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
  
  /*@ assert q == x / y;*/
  
}
2025-08-11 21:04:45,908 - INFO  - syntax Correct
2025-08-11 21:04:49,807 - INFO  - Validate:
2025-08-11 21:04:49,808 - INFO  - [True, True, True, True, True]
2025-08-11 21:04:49,808 - INFO  - 
2025-08-11 21:04:49,808 - INFO  - Verify:
2025-08-11 21:04:49,808 - INFO  - [True]
2025-08-11 21:04:49,808 - INFO  - 
2025-08-11 21:04:49,808 - INFO  - 注释过不变量的代码
2025-08-11 21:04:49,808 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main2(int x,int y){
 
  int q=0;
  int r=0;
  
  
            
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y && q >= 0));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
  
  /*@ assert q == x / y;*/
  
}
2025-08-11 21:05:00,758 - INFO  - syntax Correct
2025-08-11 21:05:04,649 - INFO  - Validate:
2025-08-11 21:05:04,649 - INFO  - [True, True, True, True, True]
2025-08-11 21:05:04,650 - INFO  - 
2025-08-11 21:05:04,650 - INFO  - Verify:
2025-08-11 21:05:04,650 - INFO  - [True]
2025-08-11 21:05:04,650 - INFO  - 
2025-08-11 21:05:04,650 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:05:04,650 - INFO  - /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y && q >= 0));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-11 21:05:04,650 - INFO  - VST 格式的循环不变量
2025-08-11 21:05:04,650 - INFO  - /*@ Inv
    ((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y && q >= 0))) &&
((x@pre > y@pre * 0 + 0) => (q >= 0) ) &&
((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y))) &&
((!(x@pre > y@pre * 0 + 0)) => ((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre))) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-11 21:05:04,650 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:05:04,651 - INFO  - 继续符号执行
2025-08-11 21:05:04,651 - INFO  - /*@ Inv
    ((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y && q >= 0))) &&
((x@pre > y@pre * 0 + 0) => (q >= 0) ) &&
((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y))) &&
((!(x@pre > y@pre * 0 + 0)) => ((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre))) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-11 21:05:15,643 - INFO  - syntax Correct
2025-08-11 21:05:19,548 - INFO  - Validate:
2025-08-11 21:05:19,548 - INFO  - [True, True, True, True, True]
2025-08-11 21:05:19,548 - INFO  - 
2025-08-11 21:05:19,548 - INFO  - Verify:
2025-08-11 21:05:19,548 - INFO  - [True]
2025-08-11 21:05:19,548 - INFO  - 
2025-08-11 21:05:19,548 - INFO  - CORRECT INVARIANT
2025-08-11 21:05:30,569 - INFO  - syntax Correct
2025-08-11 21:05:34,525 - INFO  - Validate:
2025-08-11 21:05:34,525 - INFO  - [True, True, True, True, True]
2025-08-11 21:05:34,525 - INFO  - 
2025-08-11 21:05:34,525 - INFO  - Verify:
2025-08-11 21:05:34,525 - INFO  - [True]
2025-08-11 21:05:34,525 - INFO  - 
2025-08-11 21:05:34,525 - INFO  - ========================================
2025-08-11 21:05:34,525 - INFO  - first_pass:
2025-08-11 21:05:34,526 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:05:34,526 - INFO  - ========================================
