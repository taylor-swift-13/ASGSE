2025-08-12 02:40:39,725 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 02:40:39,725 - INFO  - ========================================

2025-08-12 02:40:39,748 - INFO  - 初始待处理函数: ['main14']
2025-08-12 02:40:39,749 - INFO  - 
GENERATE ANNOTATION FOR main14
2025-08-12 02:40:39,749 - INFO  - ========================================

2025-08-12 02:40:39,749 - INFO  - 函数 main14 已经初始化
2025-08-12 02:40:39,794 - INFO  - 
GENERATE LOOP INVARIANT FOR main14
2025-08-12 02:40:39,794 - INFO  - ========================================

2025-08-12 02:40:39,837 - INFO  - file_name: main14
2025-08-12 02:40:39,851 - DEBUG  - INNER_FLAG: False
2025-08-12 02:40:39,894 - INFO  - Variable Maps:[{'z': '0', 'y': 'b@pre', 'x': 'a@pre', 'b': 'b@pre', 'a': 'a@pre'}]
2025-08-12 02:40:39,894 - INFO  - Path conditions: ['a@pre >= 0 && b@pre >= 0']
2025-08-12 02:40:39,895 - INFO  - Pre condition: a@pre >= 0 && b@pre >= 0 && (z == 0) * (y == b@pre) * (x == a@pre) * (b == b@pre) * (a == a@pre)
2025-08-12 02:40:39,895 - INFO  - Loop Condition: y!=0
2025-08-12 02:40:39,895 - INFO  - Array Names: []
2025-08-12 02:40:39,895 - INFO  - Updated Loop Conditions: ['b@pre!=0']
2025-08-12 02:40:39,895 - INFO  - Global Unchanged Variables: ['b', 'a']
2025-08-12 02:40:39,895 - INFO  - Non Inductive Variables: []
2025-08-12 02:40:50,951 - INFO  - after const
2025-08-12 02:40:50,951 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
        
            /*@
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-12 02:40:50,951 - INFO  - after not in
2025-08-12 02:40:50,951 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-12 02:40:50,951 - INFO  - after vars
2025-08-12 02:40:50,951 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
        
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-12 02:40:50,951 - INFO  - after verification goal
2025-08-12 02:40:50,952 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
        
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-12 02:40:56,048 - INFO  - 生成循环不变量
2025-08-12 02:40:56,048 - INFO  - /*@
    requires a >= 0 && b >= 0;
    int main14(int a,int b){
       
        int x=a;
        int y=b;
        int z=0;

        // loop body
        
                
            /* >>> LOOP INVARIANT TO FILL <<< */
            /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
            
                /*@
                loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + y * x == a * b));
                loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y)));
                loop invariant (\at(b,Pre)!=0) ==> (y == \at(b,Pre) / (1 << (log2(y) - log2(y))));
                loop invariant (\at(b,Pre)!=0) ==> (z == sum(x, 0, \at(b,Pre) - y));
                loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
                loop invariant b == \at(b,Pre);
                loop invariant a == \at(a,Pre);
                */
                while(y!=0) {
         
         if (y%2 ==1 ){
              z = z+x;
              y = y-1;
         }
         x = 2*x;
         y = y/2;
        }
                
        /*@ assert z == a*b; */
    }
2025-08-12 02:41:07,060 - INFO  - syntax Correct
2025-08-12 02:41:10,969 - INFO  - Validate:
2025-08-12 02:41:10,969 - INFO  - [True, True, True, True, True]
2025-08-12 02:41:10,969 - INFO  - 
2025-08-12 02:41:10,970 - INFO  - Verify:
2025-08-12 02:41:10,970 - INFO  - [True]
2025-08-12 02:41:10,970 - INFO  - 
2025-08-12 02:41:10,970 - INFO  - 注释过不变量的代码
2025-08-12 02:41:10,970 - INFO  - /*@
    requires a >= 0 && b >= 0;
    int main14(int a,int b){
       
        int x=a;
        int y=b;
        int z=0;

        // loop body
        
                
            /* >>> LOOP INVARIANT TO FILL <<< */
            /* >>> PRECONDITION OF THE LOOP : \at(a,Pre) >= 0 && \at(b,Pre) >= 0 && (z == 0) * (y == \at(b,Pre)) * (x == \at(a,Pre)) * (b == \at(b,Pre)) * (a == \at(a,Pre)) <<< */
            
                /*@
                loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + y * x == a * b));
                loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y)));
                loop invariant (\at(b,Pre)!=0) ==> (y == \at(b,Pre) / (1 << (log2(y) - log2(y))));
                loop invariant (\at(b,Pre)!=0) ==> (z == sum(x, 0, \at(b,Pre) - y));
                loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
                loop invariant b == \at(b,Pre);
                loop invariant a == \at(a,Pre);
                */
                while(y!=0) {
         
         if (y%2 ==1 ){
              z = z+x;
              y = y-1;
         }
         x = 2*x;
         y = y/2;
        }
                
        /*@ assert z == a*b; */
    }
2025-08-12 02:41:21,932 - INFO  - syntax Correct
2025-08-12 02:41:25,845 - INFO  - Validate:
2025-08-12 02:41:25,845 - INFO  - [True, True, True, True, True]
2025-08-12 02:41:25,845 - INFO  - 
2025-08-12 02:41:25,845 - INFO  - Verify:
2025-08-12 02:41:25,845 - INFO  - [True]
2025-08-12 02:41:25,845 - INFO  - 
2025-08-12 02:41:25,845 - INFO  - ACSL 格式的循环不变量
2025-08-12 02:41:25,845 - INFO  - /*@
                loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + y * x == a * b));
                loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y)));
                loop invariant (\at(b,Pre)!=0) ==> (y == \at(b,Pre) / (1 << (log2(y) - log2(y))));
                loop invariant (\at(b,Pre)!=0) ==> (z == sum(x, 0, \at(b,Pre) - y));
                loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
                loop invariant b == \at(b,Pre);
                loop invariant a == \at(a,Pre);
                */
                while(y!=0) {
         
         if (y%2 ==1 ){
              z = z+x;
              y = y-1;
         }
         x = 2*x;
         y = y/2;
        }
2025-08-12 02:41:25,845 - INFO  - VST 格式的循环不变量
2025-08-12 02:41:25,845 - INFO  - /*@ Inv
    ((b@pre!=0) => (((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (z + y * x == a * b))) &&
((b@pre!=0) => (x == a@pre * (1 << (b@pre - y)))) &&
((b@pre!=0) => (y == b@pre / (1 << (log2(y) - log2(y))))) &&
((b@pre!=0) => (z == sum(x, 0, b@pre - y))) &&
((!(b@pre!=0)) => ((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(b == b@pre) &&
(a == a@pre)
    */
    
                while(y!=0) {
         
         if (y%2 ==1 ){
              z = z+x;
              y = y-1;
         }
         x = 2*x;
         y = y/2;
        }
2025-08-12 02:41:25,846 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 02:41:25,846 - INFO  - 继续符号执行
2025-08-12 02:41:25,846 - INFO  - /*@ Inv
    ((b@pre!=0) => (((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (z + y * x == a * b))) &&
((b@pre!=0) => (x == a@pre * (1 << (b@pre - y)))) &&
((b@pre!=0) => (y == b@pre / (1 << (log2(y) - log2(y))))) &&
((b@pre!=0) => (z == sum(x, 0, b@pre - y))) &&
((!(b@pre!=0)) => ((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(b == b@pre) &&
(a == a@pre)
    */
    
                while(y!=0) {
         
         if (y%2 ==1 ){
              z = z+x;
              y = y-1;
         }
         x = 2*x;
         y = y/2;
        }
2025-08-12 02:41:36,820 - INFO  - syntax Correct
2025-08-12 02:41:40,740 - INFO  - Validate:
2025-08-12 02:41:40,740 - INFO  - [True, True, True, True, True]
2025-08-12 02:41:40,741 - INFO  - 
2025-08-12 02:41:40,741 - INFO  - Verify:
2025-08-12 02:41:40,741 - INFO  - [True]
2025-08-12 02:41:40,741 - INFO  - 
2025-08-12 02:41:40,741 - INFO  - CORRECT INVARIANT
2025-08-12 02:41:51,720 - INFO  - syntax Correct
2025-08-12 02:41:55,642 - INFO  - Validate:
2025-08-12 02:41:55,642 - INFO  - [True, True, True, True, True]
2025-08-12 02:41:55,642 - INFO  - 
2025-08-12 02:41:55,642 - INFO  - Verify:
2025-08-12 02:41:55,643 - INFO  - [True]
2025-08-12 02:41:55,643 - INFO  - 
2025-08-12 02:41:55,643 - INFO  - ========================================
2025-08-12 02:41:55,643 - INFO  - first_pass:
2025-08-12 02:41:55,643 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 02:41:55,643 - INFO  - ========================================
