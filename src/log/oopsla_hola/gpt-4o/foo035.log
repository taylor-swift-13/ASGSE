2025-08-14 13:38:54,510 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 13:38:54,510 - INFO  - ========================================

2025-08-14 13:38:54,521 - INFO  - 初始待处理函数: ['foo035']
2025-08-14 13:38:54,521 - INFO  - 
GENERATE ANNOTATION FOR foo035
2025-08-14 13:38:54,521 - INFO  - ========================================

2025-08-14 13:38:54,521 - INFO  - 函数 foo035 已经初始化
2025-08-14 13:38:54,536 - INFO  - 
GENERATE LOOP INVARIANT FOR foo035
2025-08-14 13:38:54,536 - INFO  - ========================================

2025-08-14 13:38:54,550 - INFO  - file_name: foo035
2025-08-14 13:38:54,559 - DEBUG  - INNER_FLAG: False
2025-08-14 13:38:54,575 - INFO  - Variable Maps:[{'x': '0', 'n': 'n@pre'}]
2025-08-14 13:38:54,575 - INFO  - Path conditions: ['n@pre > 0']
2025-08-14 13:38:54,575 - INFO  - Pre condition: n@pre > 0 && (x == 0) * (n == n@pre)
2025-08-14 13:38:54,575 - INFO  - Loop Condition: x<n
2025-08-14 13:38:54,575 - INFO  - Array Names: []
2025-08-14 13:38:54,575 - INFO  - Updated Loop Conditions: ['0<n@pre']
2025-08-14 13:38:54,576 - INFO  - Global Unchanged Variables: ['n']
2025-08-14 13:38:54,576 - INFO  - Non Inductive Variables: []
2025-08-14 13:39:02,784 - INFO  - after const
2025-08-14 13:39:02,784 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
            
2025-08-14 13:39:02,784 - INFO  - after not in
2025-08-14 13:39:02,785 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
            
2025-08-14 13:39:02,785 - INFO  - after vars
2025-08-14 13:39:02,785 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0<\at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
            
2025-08-14 13:39:02,785 - INFO  - after verification goal
2025-08-14 13:39:02,785 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0<\at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0<\at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
            
2025-08-14 13:39:05,214 - DEBUG  - invgen reasoning
2025-08-14 13:39:05,214 - DEBUG  - ```c
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0<\at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (x <= n));
          loop invariant (0<\at(n,Pre)) ==> (0 <= x <= n);
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}
```
2025-08-14 13:39:05,214 - INFO  - 生成循环不变量
2025-08-14 13:39:05,214 - INFO  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (0<\at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (x <= n));
          loop invariant (0<\at(n,Pre)) ==> (0 <= x <= n);
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:39:15,850 - INFO  - syntax Correct
2025-08-14 13:39:19,436 - INFO  - Validate:
2025-08-14 13:39:19,436 - INFO  - [False, True, True, True]
2025-08-14 13:39:19,436 - INFO  - 
2025-08-14 13:39:19,437 - INFO  - Verify:
2025-08-14 13:39:19,437 - INFO  - [True]
2025-08-14 13:39:19,437 - INFO  - 
2025-08-14 13:39:19,437 - DEBUG  - after mark
2025-08-14 13:39:19,437 - DEBUG  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (0<\at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (x <= n)) [INVARIANT FAILED] ;
          loop invariant (0<\at(n,Pre)) ==> (0 <= x <= n);
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:39:24,940 - DEBUG  - after adjust
2025-08-14 13:39:24,940 - DEBUG  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (0<\at(n,Pre)) ==> (x <= n);
          loop invariant (0<\at(n,Pre)) ==> (0 <= x <= n);
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:39:35,597 - INFO  - syntax Correct
2025-08-14 13:39:39,174 - INFO  - Validate:
2025-08-14 13:39:39,174 - INFO  - [False, True, True, True]
2025-08-14 13:39:39,174 - INFO  - 
2025-08-14 13:39:39,174 - INFO  - Verify:
2025-08-14 13:39:39,175 - INFO  - [True]
2025-08-14 13:39:39,175 - INFO  - 
2025-08-14 13:39:39,175 - DEBUG  - after hudini
2025-08-14 13:39:39,175 - DEBUG  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (0<\at(n,Pre)) ==> (0 <= x <= n);
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:39:49,796 - INFO  - syntax Correct
2025-08-14 13:39:53,388 - INFO  - Validate:
2025-08-14 13:39:53,388 - INFO  - [False, True, True, True]
2025-08-14 13:39:53,388 - INFO  - 
2025-08-14 13:39:53,388 - INFO  - Verify:
2025-08-14 13:39:53,388 - INFO  - [True]
2025-08-14 13:39:53,388 - INFO  - 
2025-08-14 13:39:53,388 - DEBUG  - after hudini
2025-08-14 13:39:53,388 - DEBUG  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:40:04,088 - INFO  - syntax Correct
2025-08-14 13:40:07,690 - INFO  - Validate:
2025-08-14 13:40:07,690 - INFO  - [True, True, True, True]
2025-08-14 13:40:07,690 - INFO  - 
2025-08-14 13:40:07,690 - INFO  - Verify:
2025-08-14 13:40:07,690 - INFO  - [True]
2025-08-14 13:40:07,690 - INFO  - 
2025-08-14 13:40:07,690 - DEBUG  - after hudini
2025-08-14 13:40:07,691 - DEBUG  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:40:18,378 - INFO  - syntax Correct
2025-08-14 13:40:21,949 - INFO  - Validate:
2025-08-14 13:40:21,949 - INFO  - [True, True, True, True]
2025-08-14 13:40:21,949 - INFO  - 
2025-08-14 13:40:21,950 - INFO  - Verify:
2025-08-14 13:40:21,950 - INFO  - [True]
2025-08-14 13:40:21,950 - INFO  - 
2025-08-14 13:40:21,950 - INFO  - 注释过不变量的代码
2025-08-14 13:40:21,950 - INFO  - 
/*@
requires n > 0;
*/
void foo035(int n) {
  int x= 0;
  
            /*@
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
             
  /*@ assert (n > 0) ==> (x == n); */
 
}

2025-08-14 13:40:32,556 - INFO  - syntax Correct
2025-08-14 13:40:36,131 - INFO  - Validate:
2025-08-14 13:40:36,132 - INFO  - [True, True, True, True]
2025-08-14 13:40:36,132 - INFO  - 
2025-08-14 13:40:36,132 - INFO  - Verify:
2025-08-14 13:40:36,132 - INFO  - [True]
2025-08-14 13:40:36,132 - INFO  - 
2025-08-14 13:40:36,132 - INFO  - ACSL 格式的循环不变量
2025-08-14 13:40:36,132 - INFO  - /*@
          loop invariant (!(0<\at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while(x<n) {
    x++;
  }
2025-08-14 13:40:36,132 - INFO  - VST 格式的循环不变量
2025-08-14 13:40:36,132 - INFO  - /*@ Inv
    ((!(0<n@pre)) => ((x == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while(x<n) {
    x++;
  }
2025-08-14 13:40:36,133 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 13:40:36,133 - INFO  - 继续符号执行
2025-08-14 13:40:36,133 - INFO  - /*@ Inv
    ((!(0<n@pre)) => ((x == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while(x<n) {
    x++;
  }
2025-08-14 13:40:46,778 - INFO  - syntax Correct
2025-08-14 13:40:50,364 - INFO  - Validate:
2025-08-14 13:40:50,364 - INFO  - [True, True, True, True]
2025-08-14 13:40:50,364 - INFO  - 
2025-08-14 13:40:50,364 - INFO  - Verify:
2025-08-14 13:40:50,364 - INFO  - [True]
2025-08-14 13:40:50,364 - INFO  - 
2025-08-14 13:40:50,364 - INFO  - CORRECT INVARIANT
2025-08-14 13:41:01,047 - INFO  - syntax Correct
2025-08-14 13:41:04,626 - INFO  - Validate:
2025-08-14 13:41:04,626 - INFO  - [True, True, True, True]
2025-08-14 13:41:04,626 - INFO  - 
2025-08-14 13:41:04,626 - INFO  - Verify:
2025-08-14 13:41:04,627 - INFO  - [True]
2025-08-14 13:41:04,627 - INFO  - 
2025-08-14 13:41:04,627 - INFO  - ========================================
2025-08-14 13:41:04,627 - INFO  - first_pass:
2025-08-14 13:41:04,627 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 13:41:04,627 - INFO  - ========================================
