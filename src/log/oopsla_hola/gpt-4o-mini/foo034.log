2025-08-14 19:04:30,800 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 19:04:30,800 - INFO  - ========================================

2025-08-14 19:04:30,940 - INFO  - 初始待处理函数: ['foo034']
2025-08-14 19:04:30,940 - INFO  - 
GENERATE ANNOTATION FOR foo034
2025-08-14 19:04:30,940 - INFO  - ========================================

2025-08-14 19:04:30,940 - INFO  - 函数 foo034 已经初始化
2025-08-14 19:04:30,954 - INFO  - 
GENERATE LOOP INVARIANT FOR foo034
2025-08-14 19:04:30,954 - INFO  - ========================================

2025-08-14 19:04:30,967 - INFO  - file_name: foo034
2025-08-14 19:04:30,981 - DEBUG  - INNER_FLAG: False
2025-08-14 19:04:30,996 - INFO  - Variable Maps:[{'m': '10', 'i': '0', 'y': '0', 'x': '0', 'n': 'n@pre'}]
2025-08-14 19:04:30,996 - INFO  - Path conditions: [None]
2025-08-14 19:04:30,996 - INFO  - Pre condition: (m == 10) * (i == 0) * (y == 0) * (x == 0) * (n == n@pre)
2025-08-14 19:04:30,996 - INFO  - Loop Condition: i < n
2025-08-14 19:04:30,996 - INFO  - Array Names: []
2025-08-14 19:04:30,996 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-14 19:04:30,996 - INFO  - Global Unchanged Variables: ['m', 'n']
2025-08-14 19:04:30,996 - INFO  - Non Inductive Variables: []
2025-08-14 19:04:42,395 - INFO  - after const
2025-08-14 19:04:42,395 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
2025-08-14 19:04:42,395 - INFO  - after not in
2025-08-14 19:04:42,395 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
2025-08-14 19:04:42,395 - INFO  - after vars
2025-08-14 19:04:42,396 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_y) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
2025-08-14 19:04:42,396 - INFO  - after verification goal
2025-08-14 19:04:42,396 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_y) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
2025-08-14 19:04:46,106 - DEBUG  - invgen reasoning
2025-08-14 19:04:46,106 - DEBUG  - ```c
void foo034(int n) {
  int x=0;
  int y=0;
  int i=0;
  int m=10;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre))) || (i <= n && x == i && y == (i / 2)));
          loop invariant (0 < \at(n,Pre)) ==> (x == i);
          loop invariant (0 < \at(n,Pre)) ==> (y == (i / 2));
          loop invariant (0 < \at(n,Pre)) ==> (0 <= i && i <= n);
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}
```
2025-08-14 19:04:46,106 - INFO  - 生成循环不变量
2025-08-14 19:04:46,106 - INFO  - 
void foo034(int n) {
  int x=0;
  int y=0;
  int i=0;
  int m=10;

            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre))) || (i <= n && x == i && y == (i / 2)));
          loop invariant (0 < \at(n,Pre)) ==> (x == i);
          loop invariant (0 < \at(n,Pre)) ==> (y == (i / 2));
          loop invariant (0 < \at(n,Pre)) ==> (0 <= i && i <= n);
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}

2025-08-14 19:04:56,823 - INFO  - syntax Correct
2025-08-14 19:05:00,411 - INFO  - Validate:
2025-08-14 19:05:00,412 - INFO  - [True, True, True, True, True, True, True]
2025-08-14 19:05:00,412 - INFO  - 
2025-08-14 19:05:00,412 - INFO  - Verify:
2025-08-14 19:05:00,412 - INFO  - [True]
2025-08-14 19:05:00,412 - INFO  - 
2025-08-14 19:05:00,412 - INFO  - 注释过不变量的代码
2025-08-14 19:05:00,412 - INFO  - 
void foo034(int n) {
  int x=0;
  int y=0;
  int i=0;
  int m=10;

            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre))) || (i <= n && x == i && y == (i / 2)));
          loop invariant (0 < \at(n,Pre)) ==> (x == i);
          loop invariant (0 < \at(n,Pre)) ==> (y == (i / 2));
          loop invariant (0 < \at(n,Pre)) ==> (0 <= i && i <= n);
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}

2025-08-14 19:05:11,027 - INFO  - syntax Correct
2025-08-14 19:05:14,632 - INFO  - Validate:
2025-08-14 19:05:14,632 - INFO  - [True, True, True, True, True, True, True]
2025-08-14 19:05:14,632 - INFO  - 
2025-08-14 19:05:14,632 - INFO  - Verify:
2025-08-14 19:05:14,632 - INFO  - [True]
2025-08-14 19:05:14,632 - INFO  - 
2025-08-14 19:05:14,632 - INFO  - ACSL 格式的循环不变量
2025-08-14 19:05:14,633 - INFO  - /*@
          loop invariant (0 < \at(n,Pre)) ==> (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre))) || (i <= n && x == i && y == (i / 2)));
          loop invariant (0 < \at(n,Pre)) ==> (x == i);
          loop invariant (0 < \at(n,Pre)) ==> (y == (i / 2));
          loop invariant (0 < \at(n,Pre)) ==> (0 <= i && i <= n);
          loop invariant (!(0 < \at(n,Pre))) ==> ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == \at(n,Pre)));
          loop invariant m == 10;
          loop invariant n == \at(n,Pre);
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
2025-08-14 19:05:14,633 - INFO  - VST 格式的循环不变量
2025-08-14 19:05:14,633 - INFO  - /*@ Inv
    ((0 < n@pre) => (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == n@pre)) || (i <= n && x == i && y == (i / 2)))) &&
((0 < n@pre) => (x == i)) &&
((0 < n@pre) => (y == (i / 2))) &&
((0 < n@pre) => (0 <= i && i <= n)) &&
((!(0 < n@pre)) => ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == n@pre))) &&
(m == 10) &&
(n == n@pre)
    */
    
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
2025-08-14 19:05:14,633 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 19:05:14,633 - INFO  - 继续符号执行
2025-08-14 19:05:14,633 - INFO  - /*@ Inv
    ((0 < n@pre) => (((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == n@pre)) || (i <= n && x == i && y == (i / 2)))) &&
((0 < n@pre) => (x == i)) &&
((0 < n@pre) => (y == (i / 2))) &&
((0 < n@pre) => (0 <= i && i <= n)) &&
((!(0 < n@pre)) => ((m == 10)&&(i == 0)&&(y == 0)&&(x == 0)&&(n == n@pre))) &&
(m == 10) &&
(n == n@pre)
    */
    
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
2025-08-14 19:05:25,261 - INFO  - syntax Correct
2025-08-14 19:05:28,866 - INFO  - Validate:
2025-08-14 19:05:28,866 - INFO  - [True, True, True, True, True, True, True]
2025-08-14 19:05:28,866 - INFO  - 
2025-08-14 19:05:28,866 - INFO  - Verify:
2025-08-14 19:05:28,866 - INFO  - [True]
2025-08-14 19:05:28,866 - INFO  - 
2025-08-14 19:05:28,866 - INFO  - CORRECT INVARIANT
2025-08-14 19:05:39,496 - INFO  - syntax Correct
2025-08-14 19:05:43,100 - INFO  - Validate:
2025-08-14 19:05:43,100 - INFO  - [True, True, True, True, True, True, True]
2025-08-14 19:05:43,101 - INFO  - 
2025-08-14 19:05:43,101 - INFO  - Verify:
2025-08-14 19:05:43,101 - INFO  - [True]
2025-08-14 19:05:43,101 - INFO  - 
2025-08-14 19:05:43,101 - INFO  - ========================================
2025-08-14 19:05:43,101 - INFO  - first_pass:
2025-08-14 19:05:43,101 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 19:05:43,101 - INFO  - ========================================
