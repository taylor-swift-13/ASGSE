2025-08-14 13:21:39,960 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 13:21:39,960 - INFO  - ========================================

2025-08-14 13:21:39,969 - INFO  - 初始待处理函数: ['foo030']
2025-08-14 13:21:39,970 - INFO  - 
GENERATE ANNOTATION FOR foo030
2025-08-14 13:21:39,970 - INFO  - ========================================

2025-08-14 13:21:39,970 - INFO  - 函数 foo030 已经初始化
2025-08-14 13:21:40,012 - INFO  - 
GENERATE LOOP INVARIANT FOR foo030
2025-08-14 13:21:40,012 - INFO  - ========================================

2025-08-14 13:21:40,027 - INFO  - file_name: foo030
2025-08-14 13:21:40,049 - DEBUG  - INNER_FLAG: False
2025-08-14 13:21:40,067 - INFO  - Variable Maps:[{'c': '0', 'i': '0'}]
2025-08-14 13:21:40,068 - INFO  - Path conditions: [None]
2025-08-14 13:21:40,068 - INFO  - Pre condition: (c == 0) * (i == 0)
2025-08-14 13:21:40,068 - INFO  - Loop Condition: i < 1000
2025-08-14 13:21:40,068 - INFO  - Array Names: []
2025-08-14 13:21:40,068 - INFO  - Updated Loop Conditions: ['0 < 1000']
2025-08-14 13:21:40,068 - INFO  - Global Unchanged Variables: []
2025-08-14 13:21:40,069 - INFO  - Non Inductive Variables: []
2025-08-14 13:22:03,931 - INFO  - after const
2025-08-14 13:22:03,931 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            
2025-08-14 13:22:03,931 - INFO  - after not in
2025-08-14 13:22:03,931 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            
2025-08-14 13:22:03,931 - INFO  - after vars
2025-08-14 13:22:03,931 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant  PLACE_HOLDER_c ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            
2025-08-14 13:22:03,931 - INFO  - after verification goal
2025-08-14 13:22:03,931 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((c == 0)&&(i == 0)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant  PLACE_HOLDER_c ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            
2025-08-14 13:22:08,510 - DEBUG  - invgen reasoning
2025-08-14 13:22:08,510 - DEBUG  - I'll analyze the loop and fill in the placeholders with appropriate loop invariants to help Frama-C verify the post-condition.

```c
void foo030() {

  int i, c;
  i = 0;
  c = 0;
 
  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((c == 0)&&(i == 0)) || (c >= 0) ;
          loop invariant  0 <= i <= 1000 ;
          loop invariant  c == (i * (i - 1)) / 2 ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            

  /*@ assert c >= 0; */
}
```
2025-08-14 13:22:08,511 - INFO  - 生成循环不变量
2025-08-14 13:22:08,511 - INFO  - 
void foo030() {

  int i, c;
  i = 0;
  c = 0;
 
  
            
            /*@
          loop invariant  ((c == 0)&&(i == 0)) || (c >= 0) ;
          loop invariant  0 <= i <= 1000 ;
          loop invariant  c == (i * (i - 1)) / 2 ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            

  /*@ assert c >= 0; */
}

2025-08-14 13:22:19,526 - INFO  - syntax Correct
2025-08-14 13:22:23,169 - INFO  - Validate:
2025-08-14 13:22:23,169 - INFO  - [True, True, True]
2025-08-14 13:22:23,169 - INFO  - 
2025-08-14 13:22:23,170 - INFO  - Verify:
2025-08-14 13:22:23,170 - INFO  - [True]
2025-08-14 13:22:23,170 - INFO  - 
2025-08-14 13:22:23,170 - INFO  - 注释过不变量的代码
2025-08-14 13:22:23,170 - INFO  - 
void foo030() {

  int i, c;
  i = 0;
  c = 0;
 
  
            
            /*@
          loop invariant  ((c == 0)&&(i == 0)) || (c >= 0) ;
          loop invariant  0 <= i <= 1000 ;
          loop invariant  c == (i * (i - 1)) / 2 ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
            

  /*@ assert c >= 0; */
}

2025-08-14 13:22:33,895 - INFO  - syntax Correct
2025-08-14 13:22:37,524 - INFO  - Validate:
2025-08-14 13:22:37,525 - INFO  - [True, True, True]
2025-08-14 13:22:37,525 - INFO  - 
2025-08-14 13:22:37,525 - INFO  - Verify:
2025-08-14 13:22:37,525 - INFO  - [True]
2025-08-14 13:22:37,525 - INFO  - 
2025-08-14 13:22:37,525 - INFO  - ACSL 格式的循环不变量
2025-08-14 13:22:37,525 - INFO  - /*@
          loop invariant  ((c == 0)&&(i == 0)) || (c >= 0) ;
          loop invariant  0 <= i <= 1000 ;
          loop invariant  c == (i * (i - 1)) / 2 ;
            */
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
2025-08-14 13:22:37,526 - INFO  - VST 格式的循环不变量
2025-08-14 13:22:37,526 - INFO  - /*@ Inv
    (((c == 0)&&(i == 0)) || (c >= 0) ) &&
(0 <= i && i <= 1000 ) &&
(c == (i * (i - 1)) / 2 )
    */
    
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
2025-08-14 13:22:37,526 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 13:22:37,526 - INFO  - 继续符号执行
2025-08-14 13:22:37,526 - INFO  - /*@ Inv
    (((c == 0)&&(i == 0)) || (c >= 0) ) &&
(0 <= i && i <= 1000 ) &&
(c == (i * (i - 1)) / 2 )
    */
    
            while (i < 1000) {
    c = c + i;
    i = i + 1;
  }
2025-08-14 13:22:48,243 - INFO  - syntax Correct
2025-08-14 13:22:51,859 - INFO  - Validate:
2025-08-14 13:22:51,859 - INFO  - [True, True, True]
2025-08-14 13:22:51,859 - INFO  - 
2025-08-14 13:22:51,859 - INFO  - Verify:
2025-08-14 13:22:51,859 - INFO  - [True]
2025-08-14 13:22:51,859 - INFO  - 
2025-08-14 13:22:51,859 - INFO  - CORRECT INVARIANT
2025-08-14 13:23:02,562 - INFO  - syntax Correct
2025-08-14 13:23:06,181 - INFO  - Validate:
2025-08-14 13:23:06,181 - INFO  - [True, True, True]
2025-08-14 13:23:06,181 - INFO  - 
2025-08-14 13:23:06,181 - INFO  - Verify:
2025-08-14 13:23:06,181 - INFO  - [True]
2025-08-14 13:23:06,181 - INFO  - 
2025-08-14 13:23:06,181 - INFO  - ========================================
2025-08-14 13:23:06,181 - INFO  - first_pass:
2025-08-14 13:23:06,181 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 13:23:06,181 - INFO  - ========================================
