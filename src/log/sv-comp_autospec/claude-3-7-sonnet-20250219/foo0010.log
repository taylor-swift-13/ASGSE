2025-08-13 16:34:56,412 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 16:34:56,412 - INFO  - ========================================

2025-08-13 16:34:56,442 - INFO  - 初始待处理函数: ['foo0010']
2025-08-13 16:34:56,442 - INFO  - 
GENERATE ANNOTATION FOR foo0010
2025-08-13 16:34:56,442 - INFO  - ========================================

2025-08-13 16:34:56,442 - INFO  - 函数 foo0010 已经初始化
2025-08-13 16:34:56,456 - INFO  - 
GENERATE LOOP INVARIANT FOR foo0010
2025-08-13 16:34:56,457 - INFO  - ========================================

2025-08-13 16:34:56,470 - INFO  - file_name: foo0010
2025-08-13 16:34:56,483 - DEBUG  - INNER_FLAG: False
2025-08-13 16:34:56,499 - INFO  - Variable Maps:[{'z': '0', 'y': 'j@pre', 'x': 'i@pre', 'j': 'j@pre', 'i': 'i@pre'}]
2025-08-13 16:34:56,499 - INFO  - Path conditions: ['0 <= i@pre && i@pre < 1000000 && j@pre >= 0']
2025-08-13 16:34:56,499 - INFO  - Pre condition: 0 <= i@pre && i@pre < 1000000 && j@pre >= 0 && (z == 0) * (y == j@pre) * (x == i@pre) * (j == j@pre) * (i == i@pre)
2025-08-13 16:34:56,499 - INFO  - Loop Condition: x != 0
2025-08-13 16:34:56,500 - INFO  - Array Names: []
2025-08-13 16:34:56,500 - INFO  - Updated Loop Conditions: ['i@pre != 0']
2025-08-13 16:34:56,500 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-13 16:34:56,500 - INFO  - Non Inductive Variables: []
2025-08-13 16:35:26,251 - INFO  - after const
2025-08-13 16:35:26,251 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(i,Pre) && \at(i,Pre) < 1000000 && \at(j,Pre) >= 0 && (z == 0) * (y == \at(j,Pre)) * (x == \at(i,Pre)) * (j == \at(j,Pre)) * (i == \at(i,Pre)) <<< */
        
            /*@
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            
2025-08-13 16:35:26,252 - INFO  - after not in
2025-08-13 16:35:26,252 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(i,Pre) && \at(i,Pre) < 1000000 && \at(j,Pre) >= 0 && (z == 0) * (y == \at(j,Pre)) * (x == \at(i,Pre)) * (j == \at(j,Pre)) * (i == \at(i,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            
2025-08-13 16:35:26,252 - INFO  - after vars
2025-08-13 16:35:26,252 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(i,Pre) && \at(i,Pre) < 1000000 && \at(j,Pre) >= 0 && (z == 0) * (y == \at(j,Pre)) * (x == \at(i,Pre)) * (j == \at(j,Pre)) * (i == \at(i,Pre)) <<< */
        
            /*@
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            
2025-08-13 16:35:26,252 - INFO  - after verification goal
2025-08-13 16:35:26,252 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(i,Pre) && \at(i,Pre) < 1000000 && \at(j,Pre) >= 0 && (z == 0) * (y == \at(j,Pre)) * (x == \at(i,Pre)) * (j == \at(j,Pre)) * (i == \at(i,Pre)) <<< */
        
            /*@
          loop invariant (\at(i,Pre) != 0) ==> (((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(i,Pre) != 0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            
2025-08-13 16:35:34,005 - DEBUG  - invgen reasoning
2025-08-13 16:35:34,005 - DEBUG  - ```c
/*@
requires 0 <= i && i < 1000000;
requires j >= 0;
*/
void foo0010(int i, int j) {

    int x = i;
    int y = j;
    int z = 0;
  
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(i,Pre) && \at(i,Pre) < 1000000 && \at(j,Pre) >= 0 && (z == 0) * (y == \at(j,Pre)) * (x == \at(i,Pre)) * (j == \at(j,Pre)) * (i == \at(i,Pre)) <<< */
        
            /*@
          loop invariant (\at(i,Pre) != 0) ==> (((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre))) || (y + z + z == j));
          loop invariant (\at(i,Pre) != 0) ==> (x + z == \at(i,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (y + 2*z == \at(j,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (0 <= z && z <= \at(i,Pre)) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            

    if (i == j) {
        /*@ assert y == -z; */
    }
    
}
```
2025-08-13 16:35:34,005 - INFO  - 生成循环不变量
2025-08-13 16:35:34,005 - INFO  - 
/*@
requires 0 <= i && i < 1000000;
requires j >= 0;
*/
void foo0010(int i, int j) {

    int x = i;
    int y = j;
    int z = 0;
  
    
            
            /*@
          loop invariant (\at(i,Pre) != 0) ==> (((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre))) || (y + z + z == j));
          loop invariant (\at(i,Pre) != 0) ==> (x + z == \at(i,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (y + 2*z == \at(j,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (0 <= z && z <= \at(i,Pre)) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            

    if (i == j) {
        /*@ assert y == -z; */
    }
    
}

2025-08-13 16:35:44,881 - INFO  - syntax Correct
2025-08-13 16:35:48,445 - INFO  - Validate:
2025-08-13 16:35:48,445 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 16:35:48,445 - INFO  - 
2025-08-13 16:35:48,445 - INFO  - Verify:
2025-08-13 16:35:48,445 - INFO  - [True]
2025-08-13 16:35:48,445 - INFO  - 
2025-08-13 16:35:48,445 - INFO  - 注释过不变量的代码
2025-08-13 16:35:48,445 - INFO  - 
/*@
requires 0 <= i && i < 1000000;
requires j >= 0;
*/
void foo0010(int i, int j) {

    int x = i;
    int y = j;
    int z = 0;
  
    
            
            /*@
          loop invariant (\at(i,Pre) != 0) ==> (((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre))) || (y + z + z == j));
          loop invariant (\at(i,Pre) != 0) ==> (x + z == \at(i,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (y + 2*z == \at(j,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (0 <= z && z <= \at(i,Pre)) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
            

    if (i == j) {
        /*@ assert y == -z; */
    }
    
}

2025-08-13 16:35:59,251 - INFO  - syntax Correct
2025-08-13 16:36:02,815 - INFO  - Validate:
2025-08-13 16:36:02,815 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 16:36:02,815 - INFO  - 
2025-08-13 16:36:02,815 - INFO  - Verify:
2025-08-13 16:36:02,816 - INFO  - [True]
2025-08-13 16:36:02,816 - INFO  - 
2025-08-13 16:36:02,816 - INFO  - ACSL 格式的循环不变量
2025-08-13 16:36:02,816 - INFO  - /*@
          loop invariant (\at(i,Pre) != 0) ==> (((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre))) || (y + z + z == j));
          loop invariant (\at(i,Pre) != 0) ==> (x + z == \at(i,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (y + 2*z == \at(j,Pre)) ;
          loop invariant (\at(i,Pre) != 0) ==> (0 <= z && z <= \at(i,Pre)) ;
          loop invariant (!(\at(i,Pre) != 0)) ==> ((z == 0)&&(y == \at(j,Pre))&&(x == \at(i,Pre))&&(j == \at(j,Pre))&&(i == \at(i,Pre)));
          loop invariant j == \at(j,Pre);
          loop invariant i == \at(i,Pre);
            */
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
2025-08-13 16:36:02,816 - INFO  - VST 格式的循环不变量
2025-08-13 16:36:02,816 - INFO  - /*@ Inv
    ((i@pre != 0) => (((z == 0)&&(y == j@pre)&&(x == i@pre)&&(j == j@pre)&&(i == i@pre)) || (y + z + z == j))) &&
((i@pre != 0) => (x + z == i@pre) ) &&
((i@pre != 0) => (y + 2*z == j@pre) ) &&
((i@pre != 0) => (0 <= z && z <= i@pre) ) &&
((!(i@pre != 0)) => ((z == 0)&&(y == j@pre)&&(x == i@pre)&&(j == j@pre)&&(i == i@pre))) &&
(j == j@pre) &&
(i == i@pre)
    */
    
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
2025-08-13 16:36:02,816 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 16:36:02,817 - INFO  - 继续符号执行
2025-08-13 16:36:02,817 - INFO  - /*@ Inv
    ((i@pre != 0) => (((z == 0)&&(y == j@pre)&&(x == i@pre)&&(j == j@pre)&&(i == i@pre)) || (y + z + z == j))) &&
((i@pre != 0) => (x + z == i@pre) ) &&
((i@pre != 0) => (y + 2*z == j@pre) ) &&
((i@pre != 0) => (0 <= z && z <= i@pre) ) &&
((!(i@pre != 0)) => ((z == 0)&&(y == j@pre)&&(x == i@pre)&&(j == j@pre)&&(i == i@pre))) &&
(j == j@pre) &&
(i == i@pre)
    */
    
            while (x != 0) {
        x--;
        y -= 2;
        z++;
    }
2025-08-13 16:36:13,644 - INFO  - syntax Correct
2025-08-13 16:36:17,208 - INFO  - Validate:
2025-08-13 16:36:17,208 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 16:36:17,208 - INFO  - 
2025-08-13 16:36:17,208 - INFO  - Verify:
2025-08-13 16:36:17,208 - INFO  - [True]
2025-08-13 16:36:17,208 - INFO  - 
2025-08-13 16:36:17,208 - INFO  - CORRECT INVARIANT
2025-08-13 16:36:27,971 - INFO  - syntax Correct
2025-08-13 16:36:31,538 - INFO  - Validate:
2025-08-13 16:36:31,538 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 16:36:31,538 - INFO  - 
2025-08-13 16:36:31,538 - INFO  - Verify:
2025-08-13 16:36:31,538 - INFO  - [True]
2025-08-13 16:36:31,538 - INFO  - 
2025-08-13 16:36:31,538 - INFO  - ========================================
2025-08-13 16:36:31,538 - INFO  - first_pass:
2025-08-13 16:36:31,538 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 16:36:31,538 - INFO  - ========================================
