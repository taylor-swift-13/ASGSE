2025-08-13 16:38:41,695 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 16:38:41,696 - INFO  - ========================================

2025-08-13 16:38:41,729 - INFO  - 初始待处理函数: ['foo001']
2025-08-13 16:38:41,729 - INFO  - 
GENERATE ANNOTATION FOR foo001
2025-08-13 16:38:41,729 - INFO  - ========================================

2025-08-13 16:38:41,729 - INFO  - 函数 foo001 已经初始化
2025-08-13 16:38:41,744 - INFO  - 
GENERATE LOOP INVARIANT FOR foo001
2025-08-13 16:38:41,744 - INFO  - ========================================

2025-08-13 16:38:41,758 - INFO  - file_name: foo001
2025-08-13 16:38:41,770 - DEBUG  - INNER_FLAG: False
2025-08-13 16:38:41,785 - INFO  - Variable Maps:[{'y': '0', 'x': '1'}]
2025-08-13 16:38:41,785 - INFO  - Path conditions: [None]
2025-08-13 16:38:41,786 - INFO  - Pre condition: (y == 0) * (x == 1)
2025-08-13 16:38:41,786 - INFO  - Loop Condition: y < 1000
2025-08-13 16:38:41,786 - INFO  - Array Names: []
2025-08-13 16:38:41,786 - INFO  - Updated Loop Conditions: ['0 < 1000']
2025-08-13 16:38:41,786 - INFO  - Global Unchanged Variables: []
2025-08-13 16:38:41,786 - INFO  - Non Inductive Variables: []
2025-08-13 16:39:18,142 - INFO  - after const
2025-08-13 16:39:18,142 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
2025-08-13 16:39:18,142 - INFO  - after not in
2025-08-13 16:39:18,142 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
2025-08-13 16:39:18,142 - INFO  - after vars
2025-08-13 16:39:18,142 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_x ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
2025-08-13 16:39:18,142 - INFO  - after verification goal
2025-08-13 16:39:18,143 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
2025-08-13 16:39:22,096 - DEBUG  - invgen reasoning
2025-08-13 16:39:22,096 - DEBUG  - ```c
void foo001() {
    int x = 1;
    int y = 0;

   
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x >= y) ;
          loop invariant  x == 1 + (y * (y - 1)) / 2 ;
          loop invariant  0 <= y <= 1000 ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
    /*@ assert x >= y; */
}
```
2025-08-13 16:39:22,096 - INFO  - 生成循环不变量
2025-08-13 16:39:22,096 - INFO  - 
void foo001() {
    int x = 1;
    int y = 0;

   
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x >= y) ;
          loop invariant  x == 1 + (y * (y - 1)) / 2 ;
          loop invariant  0 <= y <= 1000 ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
    /*@ assert x >= y; */
}

2025-08-13 16:39:32,794 - INFO  - syntax Correct
2025-08-13 16:39:36,392 - INFO  - Validate:
2025-08-13 16:39:36,392 - INFO  - [True, True, True]
2025-08-13 16:39:36,392 - INFO  - 
2025-08-13 16:39:36,392 - INFO  - Verify:
2025-08-13 16:39:36,392 - INFO  - [True]
2025-08-13 16:39:36,392 - INFO  - 
2025-08-13 16:39:36,392 - INFO  - 注释过不变量的代码
2025-08-13 16:39:36,392 - INFO  - 
void foo001() {
    int x = 1;
    int y = 0;

   
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x >= y) ;
          loop invariant  x == 1 + (y * (y - 1)) / 2 ;
          loop invariant  0 <= y <= 1000 ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
            
    /*@ assert x >= y; */
}

2025-08-13 16:39:47,037 - INFO  - syntax Correct
2025-08-13 16:39:50,639 - INFO  - Validate:
2025-08-13 16:39:50,639 - INFO  - [True, True, True]
2025-08-13 16:39:50,639 - INFO  - 
2025-08-13 16:39:50,639 - INFO  - Verify:
2025-08-13 16:39:50,639 - INFO  - [True]
2025-08-13 16:39:50,639 - INFO  - 
2025-08-13 16:39:50,640 - INFO  - ACSL 格式的循环不变量
2025-08-13 16:39:50,640 - INFO  - /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x >= y) ;
          loop invariant  x == 1 + (y * (y - 1)) / 2 ;
          loop invariant  0 <= y <= 1000 ;
            */
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
2025-08-13 16:39:50,640 - INFO  - VST 格式的循环不变量
2025-08-13 16:39:50,640 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (x >= y) ) &&
(x == 1 + (y * (y - 1)) / 2 ) &&
(0 <= y && y <= 1000 )
    */
    
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
2025-08-13 16:39:50,640 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 16:39:50,640 - INFO  - 继续符号执行
2025-08-13 16:39:50,640 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (x >= y) ) &&
(x == 1 + (y * (y - 1)) / 2 ) &&
(0 <= y && y <= 1000 )
    */
    
            while (y < 1000 ) {
        x = x + y;
        y = y + 1;
    }
2025-08-13 16:40:01,305 - INFO  - syntax Correct
2025-08-13 16:40:04,898 - INFO  - Validate:
2025-08-13 16:40:04,898 - INFO  - [True, True, True]
2025-08-13 16:40:04,898 - INFO  - 
2025-08-13 16:40:04,898 - INFO  - Verify:
2025-08-13 16:40:04,898 - INFO  - [True]
2025-08-13 16:40:04,898 - INFO  - 
2025-08-13 16:40:04,898 - INFO  - CORRECT INVARIANT
2025-08-13 16:40:15,538 - INFO  - syntax Correct
2025-08-13 16:40:19,135 - INFO  - Validate:
2025-08-13 16:40:19,135 - INFO  - [True, True, True]
2025-08-13 16:40:19,135 - INFO  - 
2025-08-13 16:40:19,135 - INFO  - Verify:
2025-08-13 16:40:19,135 - INFO  - [True]
2025-08-13 16:40:19,135 - INFO  - 
2025-08-13 16:40:19,135 - INFO  - ========================================
2025-08-13 16:40:19,135 - INFO  - first_pass:
2025-08-13 16:40:19,135 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 16:40:19,135 - INFO  - ========================================
