2025-08-13 14:11:24,172 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 14:11:24,172 - INFO  - ========================================

2025-08-13 14:11:24,236 - INFO  - 初始待处理函数: ['foo005']
2025-08-13 14:11:24,236 - INFO  - 
GENERATE ANNOTATION FOR foo005
2025-08-13 14:11:24,236 - INFO  - ========================================

2025-08-13 14:11:24,236 - INFO  - 函数 foo005 已经初始化
2025-08-13 14:11:24,253 - INFO  - 
GENERATE LOOP INVARIANT FOR foo005
2025-08-13 14:11:24,253 - INFO  - ========================================

2025-08-13 14:11:24,268 - INFO  - file_name: foo005
2025-08-13 14:11:24,279 - DEBUG  - INNER_FLAG: False
2025-08-13 14:11:24,296 - INFO  - Variable Maps:[{'y': '0', 'x': 'n@pre', 'n': 'n@pre'}]
2025-08-13 14:11:24,296 - INFO  - Path conditions: ['n@pre > 0 && y@pre == n@pre']
2025-08-13 14:11:24,296 - INFO  - Pre condition: n@pre > 0 && y@pre == n@pre && (y == 0) * (x == n@pre) * (n == n@pre)
2025-08-13 14:11:24,296 - INFO  - Loop Condition: x > 0
2025-08-13 14:11:24,296 - INFO  - Array Names: []
2025-08-13 14:11:24,296 - INFO  - Updated Loop Conditions: ['n@pre > 0']
2025-08-13 14:11:24,297 - INFO  - Global Unchanged Variables: ['n']
2025-08-13 14:11:24,297 - INFO  - Non Inductive Variables: []
2025-08-13 14:11:36,343 - INFO  - after const
2025-08-13 14:11:36,343 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && \at(y,Pre) == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
        x++;
        y--;
    }
            
2025-08-13 14:11:36,343 - INFO  - after not in
2025-08-13 14:11:36,343 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && \at(y,Pre) == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
        x++;
        y--;
    }
            
2025-08-13 14:11:36,343 - INFO  - after vars
2025-08-13 14:11:36,343 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && \at(y,Pre) == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
        x++;
        y--;
    }
            
2025-08-13 14:11:36,343 - INFO  - after verification goal
2025-08-13 14:11:36,343 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && \at(y,Pre) == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
        x++;
        y--;
    }
            
2025-08-13 14:11:41,206 - DEBUG  - invgen reasoning
2025-08-13 14:11:41,206 - DEBUG  - ```c
// count_up_down_true-unreach-call_true-termination.c

/*@
requires n > 0;
ensures y == n;
*/
void foo005(int n, int x, int y) {
    x = n;
    y = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && \at(y,Pre) == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (x + y == n));
      loop invariant (\at(n,Pre) > 0) ==> (x >= n);
      loop invariant (\at(n,Pre) > 0) ==> (y <= 0);
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x++;
        y--;
    }

    //@ assert y == n;
}
```
2025-08-13 14:11:41,206 - INFO  - 生成循环不变量
2025-08-13 14:11:41,206 - INFO  - 
// count_up_down_true-unreach-call_true-termination.c

/*@
requires n > 0;
ensures y == n;
*/
void foo005(int n, int x, int y) {
    x = n;
    y = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && 0 == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (x + y == n));
      loop invariant (\at(n,Pre) > 0) ==> (x >= n);
      loop invariant (\at(n,Pre) > 0) ==> (y <= 0);
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x++;
        y--;
    }

    //@ assert y == n;
}

2025-08-13 14:11:51,845 - INFO  - syntax Correct
2025-08-13 14:11:55,450 - INFO  - Validate:
2025-08-13 14:11:55,450 - INFO  - [True, True, True, True, True]
2025-08-13 14:11:55,450 - INFO  - 
2025-08-13 14:11:55,450 - INFO  - Verify:
2025-08-13 14:11:55,451 - INFO  - [True]
2025-08-13 14:11:55,451 - INFO  - 
2025-08-13 14:11:55,451 - INFO  - 注释过不变量的代码
2025-08-13 14:11:55,451 - INFO  - 
// count_up_down_true-unreach-call_true-termination.c

/*@
requires n > 0;
ensures y == n;
*/
void foo005(int n, int x, int y) {
    x = n;
    y = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : \at(n,Pre) > 0 && 0 == \at(n,Pre) && (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (x + y == n));
      loop invariant (\at(n,Pre) > 0) ==> (x >= n);
      loop invariant (\at(n,Pre) > 0) ==> (y <= 0);
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x++;
        y--;
    }

    //@ assert y == n;
}

2025-08-13 14:12:06,084 - INFO  - syntax Correct
2025-08-13 14:12:09,684 - INFO  - Validate:
2025-08-13 14:12:09,685 - INFO  - [True, True, True, True, True]
2025-08-13 14:12:09,685 - INFO  - 
2025-08-13 14:12:09,685 - INFO  - Verify:
2025-08-13 14:12:09,685 - INFO  - [True]
2025-08-13 14:12:09,685 - INFO  - 
2025-08-13 14:12:09,685 - INFO  - ACSL 格式的循环不变量
2025-08-13 14:12:09,685 - INFO  - /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (x + y == n));
      loop invariant (\at(n,Pre) > 0) ==> (x >= n);
      loop invariant (\at(n,Pre) > 0) ==> (y <= 0);
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x++;
        y--;
    }
2025-08-13 14:12:09,686 - INFO  - VST 格式的循环不变量
2025-08-13 14:12:09,686 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (x + y == n))) &&
((n@pre > 0) => (x >= n)) &&
((n@pre > 0) => (y <= 0)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
        x++;
        y--;
    }
2025-08-13 14:12:09,686 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 14:12:09,686 - INFO  - 继续符号执行
2025-08-13 14:12:09,686 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (x + y == n))) &&
((n@pre > 0) => (x >= n)) &&
((n@pre > 0) => (y <= 0)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
        x++;
        y--;
    }
2025-08-13 14:12:20,366 - INFO  - syntax Correct
2025-08-13 14:12:23,953 - INFO  - Validate:
2025-08-13 14:12:23,954 - INFO  - [True, True, True, True, True]
2025-08-13 14:12:23,954 - INFO  - 
2025-08-13 14:12:23,954 - INFO  - Verify:
2025-08-13 14:12:23,954 - INFO  - [True]
2025-08-13 14:12:23,954 - INFO  - 
2025-08-13 14:12:23,954 - INFO  - CORRECT INVARIANT
2025-08-13 14:12:34,589 - INFO  - syntax Correct
2025-08-13 14:12:38,186 - INFO  - Validate:
2025-08-13 14:12:38,186 - INFO  - [True, True, True, True, True]
2025-08-13 14:12:38,186 - INFO  - 
2025-08-13 14:12:38,186 - INFO  - Verify:
2025-08-13 14:12:38,186 - INFO  - [True]
2025-08-13 14:12:38,186 - INFO  - 
2025-08-13 14:12:38,187 - INFO  - ========================================
2025-08-13 14:12:38,187 - INFO  - first_pass:
2025-08-13 14:12:38,187 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 14:12:38,187 - INFO  - ========================================
