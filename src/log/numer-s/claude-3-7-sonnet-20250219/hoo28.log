2025-08-18 16:13:29,787 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 16:13:29,787 - INFO  - ========================================

2025-08-18 16:13:29,812 - INFO  - 初始待处理函数: ['hoo28']
2025-08-18 16:13:29,812 - INFO  - 
GENERATE ANNOTATION FOR hoo28
2025-08-18 16:13:29,812 - INFO  - ========================================

2025-08-18 16:13:29,812 - INFO  - 函数 hoo28 已经初始化
2025-08-18 16:13:29,827 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo28
2025-08-18 16:13:29,827 - INFO  - ========================================

2025-08-18 16:13:29,842 - INFO  - file_name: hoo28
2025-08-18 16:13:29,852 - DEBUG  - INNER_FLAG: False
2025-08-18 16:13:29,869 - INFO  - Variable Maps:[{'v': '0', 'u': 'b@pre', 'y': 'b@pre', 'x': 'a@pre', 'b': 'b@pre', 'a': 'a@pre'}]
2025-08-18 16:13:29,869 - INFO  - Path conditions: ['a@pre >= 1 && b@pre >= 1']
2025-08-18 16:13:29,869 - INFO  - Pre condition: a@pre >= 1 && b@pre >= 1 && (v == 0) * (u == b@pre) * (y == b@pre) * (x == a@pre) * (b == b@pre) * (a == a@pre)
2025-08-18 16:13:29,869 - INFO  - Loop Condition: x>y
2025-08-18 16:13:29,869 - INFO  - Array Names: []
2025-08-18 16:13:29,869 - INFO  - Updated Loop Conditions: ['a@pre>b@pre']
2025-08-18 16:13:29,870 - INFO  - Global Unchanged Variables: ['u', 'y', 'b', 'a']
2025-08-18 16:13:29,870 - INFO  - Non Inductive Variables: []
2025-08-18 16:13:57,149 - INFO  - after const
2025-08-18 16:13:57,149 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
2025-08-18 16:13:57,149 - INFO  - after not in
2025-08-18 16:13:57,149 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
2025-08-18 16:13:57,149 - INFO  - after vars
2025-08-18 16:13:57,149 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (PLACE_HOLDER_v) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
2025-08-18 16:13:57,149 - INFO  - after verification goal
2025-08-18 16:13:57,149 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (PLACE_HOLDER_v) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
2025-08-18 16:14:03,960 - DEBUG  - invgen reasoning
2025-08-18 16:14:03,960 - DEBUG  - ```c
/*@
  requires a >= 1;
  requires b >= 1;
*/
int hoo28(int a,int b) { 
    int x,y,u,v;
  
    //pre-condition
    x=a;
    y=b;
    u=b;
    v=0;
    
  
    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (x*u + y*v == a*b));
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (x > 0 && x <= a) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (v >= 0 && v <= a*b) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
  
    //post-condition
    /*@ assert x*u + y*v == a*b; */
  }   
```
2025-08-18 16:14:03,960 - INFO  - 生成循环不变量
2025-08-18 16:14:03,961 - INFO  - 
/*@
  requires a >= 1;
  requires b >= 1;
*/
int hoo28(int a,int b) { 
    int x,y,u,v;
  
    //pre-condition
    x=a;
    y=b;
    u=b;
    v=0;
    
  
    //loop-body
    
            
            /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (x*u + y*v == a*b));
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (x > 0 && x <= a) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (v >= 0 && v <= a*b) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
  
    //post-condition
    /*@ assert x*u + y*v == a*b; */
  }   

2025-08-18 16:14:15,316 - INFO  - syntax Correct
2025-08-18 16:14:19,356 - INFO  - Validate:
2025-08-18 16:14:19,356 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-18 16:14:19,357 - INFO  - 
2025-08-18 16:14:19,357 - INFO  - Verify:
2025-08-18 16:14:19,357 - INFO  - [True]
2025-08-18 16:14:19,357 - INFO  - 
2025-08-18 16:14:19,357 - INFO  - 注释过不变量的代码
2025-08-18 16:14:19,357 - INFO  - 
/*@
  requires a >= 1;
  requires b >= 1;
*/
int hoo28(int a,int b) { 
    int x,y,u,v;
  
    //pre-condition
    x=a;
    y=b;
    u=b;
    v=0;
    
  
    //loop-body
    
            
            /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (x*u + y*v == a*b));
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (x > 0 && x <= a) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (v >= 0 && v <= a*b) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
            
  
    //post-condition
    /*@ assert x*u + y*v == a*b; */
  }   

2025-08-18 16:14:30,609 - INFO  - syntax Correct
2025-08-18 16:14:34,648 - INFO  - Validate:
2025-08-18 16:14:34,648 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-18 16:14:34,649 - INFO  - 
2025-08-18 16:14:34,649 - INFO  - Verify:
2025-08-18 16:14:34,649 - INFO  - [True]
2025-08-18 16:14:34,649 - INFO  - 
2025-08-18 16:14:34,649 - INFO  - ACSL 格式的循环不变量
2025-08-18 16:14:34,649 - INFO  - /*@
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (x*u + y*v == a*b));
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (x > 0 && x <= a) ;
          loop invariant (\at(a,Pre)>\at(b,Pre)) ==> (v >= 0 && v <= a*b) ;
          loop invariant (!(\at(a,Pre)>\at(b,Pre))) ==> ((v == 0)&&(u == \at(b,Pre))&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant u == \at(b,Pre);
          loop invariant y == \at(b,Pre);
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(x>y) {
      x=x-y;
      v=v+u;
    }
2025-08-18 16:14:34,649 - INFO  - VST 格式的循环不变量
2025-08-18 16:14:34,649 - INFO  - /*@ Inv
    ((a@pre>b@pre) => (((v == 0)&&(u == b@pre)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (x*u + y*v == a*b))) &&
((a@pre>b@pre) => (x > 0 && x <= a) ) &&
((a@pre>b@pre) => (v >= 0 && v <= a*b) ) &&
((!(a@pre>b@pre)) => ((v == 0)&&(u == b@pre)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(u == b@pre) &&
(y == b@pre) &&
(b == b@pre) &&
(a == a@pre)
    */
    
            while(x>y) {
      x=x-y;
      v=v+u;
    }
2025-08-18 16:14:34,650 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 16:14:34,650 - INFO  - 继续符号执行
2025-08-18 16:14:34,650 - INFO  - /*@ Inv
    ((a@pre>b@pre) => (((v == 0)&&(u == b@pre)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (x*u + y*v == a*b))) &&
((a@pre>b@pre) => (x > 0 && x <= a) ) &&
((a@pre>b@pre) => (v >= 0 && v <= a*b) ) &&
((!(a@pre>b@pre)) => ((v == 0)&&(u == b@pre)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(u == b@pre) &&
(y == b@pre) &&
(b == b@pre) &&
(a == a@pre)
    */
    
            while(x>y) {
      x=x-y;
      v=v+u;
    }
2025-08-18 16:14:45,988 - INFO  - syntax Correct
2025-08-18 16:14:50,022 - INFO  - Validate:
2025-08-18 16:14:50,022 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-18 16:14:50,022 - INFO  - 
2025-08-18 16:14:50,022 - INFO  - Verify:
2025-08-18 16:14:50,022 - INFO  - [True]
2025-08-18 16:14:50,022 - INFO  - 
2025-08-18 16:14:50,022 - INFO  - CORRECT INVARIANT
2025-08-18 16:15:01,333 - INFO  - syntax Correct
2025-08-18 16:15:05,365 - INFO  - Validate:
2025-08-18 16:15:05,365 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-18 16:15:05,365 - INFO  - 
2025-08-18 16:15:05,365 - INFO  - Verify:
2025-08-18 16:15:05,365 - INFO  - [True]
2025-08-18 16:15:05,365 - INFO  - 
2025-08-18 16:15:05,365 - INFO  - ========================================
2025-08-18 16:15:05,365 - INFO  - first_pass:
2025-08-18 16:15:05,365 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 16:15:05,365 - INFO  - ========================================
