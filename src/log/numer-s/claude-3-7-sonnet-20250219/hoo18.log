2025-08-18 16:10:39,490 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 16:10:39,490 - INFO  - ========================================

2025-08-18 16:10:39,510 - INFO  - 初始待处理函数: ['hoo18']
2025-08-18 16:10:39,510 - INFO  - 
GENERATE ANNOTATION FOR hoo18
2025-08-18 16:10:39,510 - INFO  - ========================================

2025-08-18 16:10:39,510 - INFO  - 函数 hoo18 已经初始化
2025-08-18 16:10:39,524 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo18
2025-08-18 16:10:39,524 - INFO  - ========================================

2025-08-18 16:10:39,537 - INFO  - file_name: hoo18
2025-08-18 16:10:39,547 - DEBUG  - INNER_FLAG: False
2025-08-18 16:10:39,563 - INFO  - Variable Maps:[{'ya': 'ya@pre', 'xa': 'xa@pre'}]
2025-08-18 16:10:39,563 - INFO  - Path conditions: ['xa@pre + ya@pre > 0']
2025-08-18 16:10:39,563 - INFO  - Pre condition: xa@pre + ya@pre > 0 && (ya == ya@pre) * (xa == xa@pre)
2025-08-18 16:10:39,563 - INFO  - Loop Condition: xa > 0
2025-08-18 16:10:39,563 - INFO  - Array Names: []
2025-08-18 16:10:39,563 - INFO  - Updated Loop Conditions: ['xa@pre > 0']
2025-08-18 16:10:39,564 - INFO  - Global Unchanged Variables: []
2025-08-18 16:10:39,564 - INFO  - Non Inductive Variables: []
2025-08-18 16:11:03,997 - INFO  - after const
2025-08-18 16:11:03,997 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 16:11:03,997 - INFO  - after not in
2025-08-18 16:11:03,997 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 16:11:03,997 - INFO  - after vars
2025-08-18 16:11:03,997 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_xa) ;
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_ya) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 16:11:03,997 - INFO  - after verification goal
2025-08-18 16:11:03,998 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_xa) ;
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_ya) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 16:11:08,571 - DEBUG  - invgen reasoning
2025-08-18 16:11:08,571 - DEBUG  - ```c
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (xa + ya == \at(xa,Pre) + \at(ya,Pre)));
          loop invariant (\at(xa,Pre) > 0) ==> (xa >= 0) ;
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre)) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}
```
2025-08-18 16:11:08,571 - INFO  - 生成循环不变量
2025-08-18 16:11:08,571 - INFO  - 
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (xa + ya == \at(xa,Pre) + \at(ya,Pre)));
          loop invariant (\at(xa,Pre) > 0) ==> (xa >= 0) ;
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre)) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}

2025-08-18 16:11:19,497 - INFO  - syntax Correct
2025-08-18 16:11:23,277 - INFO  - Validate:
2025-08-18 16:11:23,277 - INFO  - [True, True, True, True]
2025-08-18 16:11:23,277 - INFO  - 
2025-08-18 16:11:23,277 - INFO  - Verify:
2025-08-18 16:11:23,277 - INFO  - [True]
2025-08-18 16:11:23,278 - INFO  - 
2025-08-18 16:11:23,278 - INFO  - 注释过不变量的代码
2025-08-18 16:11:23,278 - INFO  - 
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (xa + ya == \at(xa,Pre) + \at(ya,Pre)));
          loop invariant (\at(xa,Pre) > 0) ==> (xa >= 0) ;
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre)) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}

2025-08-18 16:11:34,162 - INFO  - syntax Correct
2025-08-18 16:11:37,953 - INFO  - Validate:
2025-08-18 16:11:37,954 - INFO  - [True, True, True, True]
2025-08-18 16:11:37,954 - INFO  - 
2025-08-18 16:11:37,954 - INFO  - Verify:
2025-08-18 16:11:37,954 - INFO  - [True]
2025-08-18 16:11:37,954 - INFO  - 
2025-08-18 16:11:37,954 - INFO  - ACSL 格式的循环不变量
2025-08-18 16:11:37,954 - INFO  - /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (xa + ya == \at(xa,Pre) + \at(ya,Pre)));
          loop invariant (\at(xa,Pre) > 0) ==> (xa >= 0) ;
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre)) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 16:11:37,955 - INFO  - VST 格式的循环不变量
2025-08-18 16:11:37,955 - INFO  - /*@ Inv
    ((xa@pre > 0) => (((ya == ya@pre)&&(xa == xa@pre)) || (xa + ya == xa@pre + ya@pre))) &&
((xa@pre > 0) => (xa >= 0) ) &&
((xa@pre > 0) => (ya >= ya@pre) ) &&
((!(xa@pre > 0)) => ((ya == ya@pre)&&(xa == xa@pre)))
    */
    
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 16:11:37,955 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 16:11:37,955 - INFO  - 继续符号执行
2025-08-18 16:11:37,955 - INFO  - /*@ Inv
    ((xa@pre > 0) => (((ya == ya@pre)&&(xa == xa@pre)) || (xa + ya == xa@pre + ya@pre))) &&
((xa@pre > 0) => (xa >= 0) ) &&
((xa@pre > 0) => (ya >= ya@pre) ) &&
((!(xa@pre > 0)) => ((ya == ya@pre)&&(xa == xa@pre)))
    */
    
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 16:11:48,845 - INFO  - syntax Correct
2025-08-18 16:11:52,643 - INFO  - Validate:
2025-08-18 16:11:52,644 - INFO  - [True, True, True, True]
2025-08-18 16:11:52,644 - INFO  - 
2025-08-18 16:11:52,644 - INFO  - Verify:
2025-08-18 16:11:52,644 - INFO  - [True]
2025-08-18 16:11:52,644 - INFO  - 
2025-08-18 16:11:52,644 - INFO  - CORRECT INVARIANT
2025-08-18 16:12:03,477 - INFO  - syntax Correct
2025-08-18 16:12:07,258 - INFO  - Validate:
2025-08-18 16:12:07,258 - INFO  - [True, True, True, True]
2025-08-18 16:12:07,258 - INFO  - 
2025-08-18 16:12:07,258 - INFO  - Verify:
2025-08-18 16:12:07,258 - INFO  - [True]
2025-08-18 16:12:07,258 - INFO  - 
2025-08-18 16:12:07,259 - INFO  - ========================================
2025-08-18 16:12:07,259 - INFO  - first_pass:
2025-08-18 16:12:07,259 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 16:12:07,259 - INFO  - ========================================
