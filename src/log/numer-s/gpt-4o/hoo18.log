2025-08-18 02:25:06,919 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 02:25:06,920 - INFO  - ========================================

2025-08-18 02:25:06,939 - INFO  - 初始待处理函数: ['hoo18']
2025-08-18 02:25:06,939 - INFO  - 
GENERATE ANNOTATION FOR hoo18
2025-08-18 02:25:06,939 - INFO  - ========================================

2025-08-18 02:25:06,939 - INFO  - 函数 hoo18 已经初始化
2025-08-18 02:25:06,953 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo18
2025-08-18 02:25:06,953 - INFO  - ========================================

2025-08-18 02:25:06,966 - INFO  - file_name: hoo18
2025-08-18 02:25:06,975 - DEBUG  - INNER_FLAG: False
2025-08-18 02:25:06,991 - INFO  - Variable Maps:[{'ya': 'ya@pre', 'xa': 'xa@pre'}]
2025-08-18 02:25:06,991 - INFO  - Path conditions: ['xa@pre + ya@pre > 0']
2025-08-18 02:25:06,991 - INFO  - Pre condition: xa@pre + ya@pre > 0 && (ya == ya@pre) * (xa == xa@pre)
2025-08-18 02:25:06,991 - INFO  - Loop Condition: xa > 0
2025-08-18 02:25:06,991 - INFO  - Array Names: []
2025-08-18 02:25:06,991 - INFO  - Updated Loop Conditions: ['xa@pre > 0']
2025-08-18 02:25:06,992 - INFO  - Global Unchanged Variables: []
2025-08-18 02:25:06,992 - INFO  - Non Inductive Variables: []
2025-08-18 02:25:17,340 - INFO  - after const
2025-08-18 02:25:17,340 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 02:25:17,340 - INFO  - after not in
2025-08-18 02:25:17,340 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 02:25:17,340 - INFO  - after vars
2025-08-18 02:25:17,340 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_xa) ;
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_ya) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 02:25:17,341 - INFO  - after verification goal
2025-08-18 02:25:17,341 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_xa) ;
          loop invariant (\at(xa,Pre) > 0) ==> (PLACE_HOLDER_ya) ;
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            
2025-08-18 02:25:20,480 - DEBUG  - invgen reasoning
2025-08-18 02:25:20,480 - DEBUG  - ```c
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (ya == \at(ya,Pre) + (\at(xa,Pre) - xa) && xa >= 0));
          loop invariant (\at(xa,Pre) > 0) ==> (xa + ya == \at(xa,Pre) + \at(ya,Pre));
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre));
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}
```
2025-08-18 02:25:20,480 - INFO  - 生成循环不变量
2025-08-18 02:25:20,480 - INFO  - 
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (ya == \at(ya,Pre) + (\at(xa,Pre) - xa) && xa >= 0));
          loop invariant (\at(xa,Pre) > 0) ==> (xa + ya == \at(xa,Pre) + \at(ya,Pre));
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre));
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}

2025-08-18 02:25:31,348 - INFO  - syntax Correct
2025-08-18 02:25:35,063 - INFO  - Validate:
2025-08-18 02:25:35,063 - INFO  - [True, True, True, True]
2025-08-18 02:25:35,063 - INFO  - 
2025-08-18 02:25:35,063 - INFO  - Verify:
2025-08-18 02:25:35,063 - INFO  - [True]
2025-08-18 02:25:35,064 - INFO  - 
2025-08-18 02:25:35,064 - INFO  - 注释过不变量的代码
2025-08-18 02:25:35,064 - INFO  - 
//svcomp_benchmark50_linear
int unknown();
/*@
  requires xa + ya > 0;
*/
int hoo18(int xa,int ya){

    //pre-condition
   
    //loop-body
    
            
            /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (ya == \at(ya,Pre) + (\at(xa,Pre) - xa) && xa >= 0));
          loop invariant (\at(xa,Pre) > 0) ==> (xa + ya == \at(xa,Pre) + \at(ya,Pre));
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre));
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
            

    //post-condition
    /*@ assert ya >= 0; */
}

2025-08-18 02:25:45,888 - INFO  - syntax Correct
2025-08-18 02:25:49,617 - INFO  - Validate:
2025-08-18 02:25:49,617 - INFO  - [True, True, True, True]
2025-08-18 02:25:49,617 - INFO  - 
2025-08-18 02:25:49,617 - INFO  - Verify:
2025-08-18 02:25:49,617 - INFO  - [True]
2025-08-18 02:25:49,617 - INFO  - 
2025-08-18 02:25:49,617 - INFO  - ACSL 格式的循环不变量
2025-08-18 02:25:49,618 - INFO  - /*@
          loop invariant (\at(xa,Pre) > 0) ==> (((ya == \at(ya,Pre))&&(xa == \at(xa,Pre))) || (ya == \at(ya,Pre) + (\at(xa,Pre) - xa) && xa >= 0));
          loop invariant (\at(xa,Pre) > 0) ==> (xa + ya == \at(xa,Pre) + \at(ya,Pre));
          loop invariant (\at(xa,Pre) > 0) ==> (ya >= \at(ya,Pre));
          loop invariant (!(\at(xa,Pre) > 0)) ==> ((ya == \at(ya,Pre))&&(xa == \at(xa,Pre)));
            */
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 02:25:49,618 - INFO  - VST 格式的循环不变量
2025-08-18 02:25:49,618 - INFO  - /*@ Inv
    ((xa@pre > 0) => (((ya == ya@pre)&&(xa == xa@pre)) || (ya == ya@pre + (xa@pre - xa) && xa >= 0))) &&
((xa@pre > 0) => (xa + ya == xa@pre + ya@pre)) &&
((xa@pre > 0) => (ya >= ya@pre)) &&
((!(xa@pre > 0)) => ((ya == ya@pre)&&(xa == xa@pre)))
    */
    
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 02:25:49,618 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 02:25:49,618 - INFO  - 继续符号执行
2025-08-18 02:25:49,618 - INFO  - /*@ Inv
    ((xa@pre > 0) => (((ya == ya@pre)&&(xa == xa@pre)) || (ya == ya@pre + (xa@pre - xa) && xa >= 0))) &&
((xa@pre > 0) => (xa + ya == xa@pre + ya@pre)) &&
((xa@pre > 0) => (ya >= ya@pre)) &&
((!(xa@pre > 0)) => ((ya == ya@pre)&&(xa == xa@pre)))
    */
    
            while (xa > 0) {
        xa--;
        ya++;
    }
2025-08-18 02:26:00,483 - INFO  - syntax Correct
2025-08-18 02:26:04,207 - INFO  - Validate:
2025-08-18 02:26:04,207 - INFO  - [True, True, True, True]
2025-08-18 02:26:04,207 - INFO  - 
2025-08-18 02:26:04,208 - INFO  - Verify:
2025-08-18 02:26:04,208 - INFO  - [True]
2025-08-18 02:26:04,208 - INFO  - 
2025-08-18 02:26:04,208 - INFO  - CORRECT INVARIANT
2025-08-18 02:26:15,037 - INFO  - syntax Correct
2025-08-18 02:26:18,765 - INFO  - Validate:
2025-08-18 02:26:18,765 - INFO  - [True, True, True, True]
2025-08-18 02:26:18,765 - INFO  - 
2025-08-18 02:26:18,765 - INFO  - Verify:
2025-08-18 02:26:18,765 - INFO  - [True]
2025-08-18 02:26:18,765 - INFO  - 
2025-08-18 02:26:18,765 - INFO  - ========================================
2025-08-18 02:26:18,765 - INFO  - first_pass:
2025-08-18 02:26:18,765 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 02:26:18,766 - INFO  - ========================================
