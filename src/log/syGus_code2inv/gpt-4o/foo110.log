2025-08-11 23:43:24,347 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 23:43:24,347 - INFO  - ========================================

2025-08-11 23:43:24,595 - INFO  - 初始待处理函数: ['foo110']
2025-08-11 23:43:24,595 - INFO  - 
GENERATE ANNOTATION FOR foo110
2025-08-11 23:43:24,595 - INFO  - ========================================

2025-08-11 23:43:24,595 - INFO  - 函数 foo110 已经初始化
2025-08-11 23:43:24,609 - INFO  - 
GENERATE LOOP INVARIANT FOR foo110
2025-08-11 23:43:24,609 - INFO  - ========================================

2025-08-11 23:43:24,622 - INFO  - file_name: foo110
2025-08-11 23:43:24,635 - DEBUG  - INNER_FLAG: False
2025-08-11 23:43:24,651 - INFO  - Variable Maps:[{'sn': '0', 'i': '1', 'n': 'n@pre'}]
2025-08-11 23:43:24,652 - INFO  - Path conditions: ['n@pre >= 1']
2025-08-11 23:43:24,652 - INFO  - Pre condition: n@pre >= 1 && (sn == 0) * (i == 1) * (n == n@pre)
2025-08-11 23:43:24,652 - INFO  - Loop Condition: i <= n
2025-08-11 23:43:24,652 - INFO  - Array Names: []
2025-08-11 23:43:24,652 - INFO  - Updated Loop Conditions: ['1 <= n@pre']
2025-08-11 23:43:24,652 - INFO  - Global Unchanged Variables: ['n']
2025-08-11 23:43:24,652 - INFO  - Non Inductive Variables: []
2025-08-11 23:43:35,247 - INFO  - after const
2025-08-11 23:43:35,247 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:43:35,247 - INFO  - after not in
2025-08-11 23:43:35,248 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:43:35,248 - INFO  - after vars
2025-08-11 23:43:35,248 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:43:35,248 - INFO  - after verification goal
2025-08-11 23:43:35,248 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:43:38,580 - DEBUG  - invgen reasoning
2025-08-11 23:43:38,580 - DEBUG  - ```c
/*@ requires n >= 1;
*/
void foo110(int n) {

    int i = 1;
    int sn = 0;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n,Pre))) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1) ;
          loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
  }
```
2025-08-11 23:43:38,580 - INFO  - 生成循环不变量
2025-08-11 23:43:38,580 - INFO  - 
/*@ requires n >= 1;
*/
void foo110(int n) {

    int i = 1;
    int sn = 0;
    
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n,Pre))) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1) ;
          loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
  }

2025-08-11 23:43:49,289 - INFO  - syntax Correct
2025-08-11 23:43:52,867 - INFO  - Validate:
2025-08-11 23:43:52,867 - INFO  - [True, True, True, True, True]
2025-08-11 23:43:52,867 - INFO  - 
2025-08-11 23:43:52,867 - INFO  - Verify:
2025-08-11 23:43:52,867 - INFO  - [True]
2025-08-11 23:43:52,867 - INFO  - 
2025-08-11 23:43:52,867 - INFO  - 注释过不变量的代码
2025-08-11 23:43:52,867 - INFO  - 
/*@ requires n >= 1;
*/
void foo110(int n) {

    int i = 1;
    int sn = 0;
    
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n,Pre))) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1) ;
          loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
  }

2025-08-11 23:44:03,527 - INFO  - syntax Correct
2025-08-11 23:44:07,089 - INFO  - Validate:
2025-08-11 23:44:07,089 - INFO  - [True, True, True, True, True]
2025-08-11 23:44:07,089 - INFO  - 
2025-08-11 23:44:07,090 - INFO  - Verify:
2025-08-11 23:44:07,090 - INFO  - [True]
2025-08-11 23:44:07,090 - INFO  - 
2025-08-11 23:44:07,090 - INFO  - ACSL 格式的循环不变量
2025-08-11 23:44:07,090 - INFO  - /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n,Pre))) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1) ;
          loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
2025-08-11 23:44:07,090 - INFO  - VST 格式的循环不变量
2025-08-11 23:44:07,090 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(n == n@pre)) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)))) &&
((1 <= n@pre) => (1 <= i && i <= n + 1) ) &&
((1 <= n@pre) => (sn == i - 1) ) &&
((!(1 <= n@pre)) => ((sn == 0)&&(i == 1)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
2025-08-11 23:44:07,091 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 23:44:07,091 - INFO  - 继续符号执行
2025-08-11 23:44:07,091 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(n == n@pre)) || ((sn == i - 1) && (1 <= i) && (i <= n + 1)))) &&
((1 <= n@pre) => (1 <= i && i <= n + 1) ) &&
((1 <= n@pre) => (sn == i - 1) ) &&
((!(1 <= n@pre)) => ((sn == 0)&&(i == 1)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
2025-08-11 23:44:17,725 - INFO  - syntax Correct
2025-08-11 23:44:21,292 - INFO  - Validate:
2025-08-11 23:44:21,293 - INFO  - [True, True, True, True, True]
2025-08-11 23:44:21,293 - INFO  - 
2025-08-11 23:44:21,293 - INFO  - Verify:
2025-08-11 23:44:21,293 - INFO  - [True]
2025-08-11 23:44:21,293 - INFO  - 
2025-08-11 23:44:21,293 - INFO  - CORRECT INVARIANT
2025-08-11 23:44:31,907 - INFO  - syntax Correct
2025-08-11 23:44:35,470 - INFO  - Validate:
2025-08-11 23:44:35,471 - INFO  - [True, True, True, True, True]
2025-08-11 23:44:35,471 - INFO  - 
2025-08-11 23:44:35,471 - INFO  - Verify:
2025-08-11 23:44:35,471 - INFO  - [True]
2025-08-11 23:44:35,471 - INFO  - 
2025-08-11 23:44:35,471 - INFO  - ========================================
2025-08-11 23:44:35,471 - INFO  - first_pass:
2025-08-11 23:44:35,471 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 23:44:35,471 - INFO  - ========================================
