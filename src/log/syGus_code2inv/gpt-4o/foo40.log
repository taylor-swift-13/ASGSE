2025-08-11 18:42:50,245 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 18:42:50,245 - INFO  - ========================================

2025-08-11 18:42:50,297 - INFO  - 初始待处理函数: ['foo40', 'unknown']
2025-08-11 18:42:50,297 - INFO  - 现在处理函数 unknown

2025-08-11 18:42:50,297 - INFO  - 
GENERATE ANNOTATION FOR foo40
2025-08-11 18:42:50,297 - INFO  - ========================================

2025-08-11 18:42:50,297 - INFO  - 函数 foo40 已经初始化
2025-08-11 18:42:50,312 - INFO  - 
GENERATE LOOP INVARIANT FOR foo40
2025-08-11 18:42:50,312 - INFO  - ========================================

2025-08-11 18:42:50,326 - INFO  - file_name: foo40
2025-08-11 18:42:50,335 - DEBUG  - INNER_FLAG: False
2025-08-11 18:42:50,351 - INFO  - Variable Maps:[{'c': '0', 'n': 'n@pre'}]
2025-08-11 18:42:50,351 - INFO  - Path conditions: ['n@pre > 0']
2025-08-11 18:42:50,351 - INFO  - Pre condition: n@pre > 0 && (c == 0) * (n == n@pre)
2025-08-11 18:42:50,351 - INFO  - Loop Condition: unknown()
2025-08-11 18:42:50,351 - INFO  - Array Names: []
2025-08-11 18:42:50,351 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-11 18:42:50,351 - INFO  - Global Unchanged Variables: ['n']
2025-08-11 18:42:50,351 - INFO  - Non Inductive Variables: ['c']
2025-08-11 18:42:59,584 - INFO  - after const
2025-08-11 18:42:59,584 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
2025-08-11 18:42:59,584 - INFO  - after not in
2025-08-11 18:42:59,584 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
2025-08-11 18:42:59,584 - INFO  - after vars
2025-08-11 18:42:59,584 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_c) ;
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
2025-08-11 18:42:59,584 - INFO  - after verification goal
2025-08-11 18:42:59,584 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_c) ;
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
2025-08-11 18:43:02,460 - DEBUG  - invgen reasoning
2025-08-11 18:43:02,460 - DEBUG  - ```c
int unknown();
/*@ requires n > 0; */
void foo40(int n) {

    int c = 0;

    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || ((c != n) && (c >= 0));
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (c >= 0);
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
           
    /*@ assert (c != n) ==> (c >= 0); */

}
```
2025-08-11 18:43:02,461 - INFO  - 生成循环不变量
2025-08-11 18:43:02,461 - INFO  - 
int unknown();
/*@ requires n > 0; */
void foo40(int n) {

    int c = 0;

    
            
            /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || ((c != n) && (c >= 0));
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (c >= 0);
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
           
    /*@ assert (c != n) ==> (c >= 0); */

}

2025-08-11 18:43:13,204 - INFO  - syntax Correct
2025-08-11 18:43:16,832 - INFO  - Validate:
2025-08-11 18:43:16,833 - INFO  - [True, True, True]
2025-08-11 18:43:16,833 - INFO  - 
2025-08-11 18:43:16,833 - INFO  - Verify:
2025-08-11 18:43:16,833 - INFO  - [True]
2025-08-11 18:43:16,833 - INFO  - 
2025-08-11 18:43:16,833 - INFO  - 注释过不变量的代码
2025-08-11 18:43:16,833 - INFO  - 
int unknown();
/*@ requires n > 0; */
void foo40(int n) {

    int c = 0;

    
            
            /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || ((c != n) && (c >= 0));
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (c >= 0);
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
           
    /*@ assert (c != n) ==> (c >= 0); */

}

2025-08-11 18:43:27,547 - INFO  - syntax Correct
2025-08-11 18:43:31,186 - INFO  - Validate:
2025-08-11 18:43:31,186 - INFO  - [True, True, True]
2025-08-11 18:43:31,186 - INFO  - 
2025-08-11 18:43:31,186 - INFO  - Verify:
2025-08-11 18:43:31,186 - INFO  - [True]
2025-08-11 18:43:31,186 - INFO  - 
2025-08-11 18:43:31,187 - INFO  - ACSL 格式的循环不变量
2025-08-11 18:43:31,187 - INFO  - /*@
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || ((c != n) && (c >= 0));
          loop invariant  ((c == 0)&&(n == \at(n,Pre))) || (c >= 0);
          loop invariant n == \at(n,Pre);
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-11 18:43:31,187 - INFO  - VST 格式的循环不变量
2025-08-11 18:43:31,187 - INFO  - /*@ Inv
    (((c == 0)&&(n == n@pre)) || ((c != n) && (c >= 0))) &&
(((c == 0)&&(n == n@pre)) || (c >= 0)) &&
(n == n@pre)
    */
    
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-11 18:43:31,187 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 18:43:31,187 - INFO  - 继续符号执行
2025-08-11 18:43:31,188 - INFO  - /*@ Inv
    (((c == 0)&&(n == n@pre)) || ((c != n) && (c >= 0))) &&
(((c == 0)&&(n == n@pre)) || (c >= 0)) &&
(n == n@pre)
    */
    
            while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-11 18:43:41,944 - INFO  - syntax Correct
2025-08-11 18:43:45,556 - INFO  - Validate:
2025-08-11 18:43:45,556 - INFO  - [True, True, True]
2025-08-11 18:43:45,556 - INFO  - 
2025-08-11 18:43:45,556 - INFO  - Verify:
2025-08-11 18:43:45,556 - INFO  - [True]
2025-08-11 18:43:45,556 - INFO  - 
2025-08-11 18:43:45,556 - INFO  - CORRECT INVARIANT
2025-08-11 18:43:56,230 - INFO  - syntax Correct
2025-08-11 18:43:59,857 - INFO  - Validate:
2025-08-11 18:43:59,857 - INFO  - [True, True, True]
2025-08-11 18:43:59,857 - INFO  - 
2025-08-11 18:43:59,858 - INFO  - Verify:
2025-08-11 18:43:59,858 - INFO  - [True]
2025-08-11 18:43:59,858 - INFO  - 
2025-08-11 18:43:59,858 - INFO  - ========================================
2025-08-11 18:43:59,858 - INFO  - first_pass:
2025-08-11 18:43:59,858 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 18:43:59,858 - INFO  - ========================================
