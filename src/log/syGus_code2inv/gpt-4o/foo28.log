2025-08-11 20:20:47,755 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 20:20:47,755 - INFO  - ========================================

2025-08-11 20:20:47,848 - INFO  - 初始待处理函数: ['foo28']
2025-08-11 20:20:47,849 - INFO  - 
GENERATE ANNOTATION FOR foo28
2025-08-11 20:20:47,849 - INFO  - ========================================

2025-08-11 20:20:47,849 - INFO  - 函数 foo28 已经初始化
2025-08-11 20:20:47,863 - INFO  - 
GENERATE LOOP INVARIANT FOR foo28
2025-08-11 20:20:47,863 - INFO  - ========================================

2025-08-11 20:20:47,877 - INFO  - file_name: foo28
2025-08-11 20:20:47,887 - DEBUG  - INNER_FLAG: False
2025-08-11 20:20:47,902 - INFO  - Variable Maps:[{'x': 'n@pre', 'n': 'n@pre'}]
2025-08-11 20:20:47,902 - INFO  - Path conditions: [None]
2025-08-11 20:20:47,902 - INFO  - Pre condition: (x == n@pre) * (n == n@pre)
2025-08-11 20:20:47,902 - INFO  - Loop Condition: x > 0
2025-08-11 20:20:47,903 - INFO  - Array Names: []
2025-08-11 20:20:47,903 - INFO  - Updated Loop Conditions: ['n@pre > 0']
2025-08-11 20:20:47,903 - INFO  - Global Unchanged Variables: ['n']
2025-08-11 20:20:47,903 - INFO  - Non Inductive Variables: []
2025-08-11 20:20:58,797 - INFO  - after const
2025-08-11 20:20:58,797 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-11 20:20:58,798 - INFO  - after not in
2025-08-11 20:20:58,798 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-11 20:20:58,798 - INFO  - after vars
2025-08-11 20:20:58,798 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-11 20:20:58,798 - INFO  - after verification goal
2025-08-11 20:20:58,798 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-11 20:21:03,748 - DEBUG  - invgen reasoning
2025-08-11 20:21:03,748 - DEBUG  - ```c
void foo28(int n) {

    int x = n;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(n == \at(n,Pre))) || ((x >= 0)&&(x <= \at(n,Pre))));
      loop invariant (\at(n,Pre) > 0) ==> ((x >= 0)&&(x <= \at(n,Pre)));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x = x - 1;
    }
    
    /*@ assert (x != 0) ==> (n < 0); */
}
```
2025-08-11 20:21:03,748 - INFO  - 生成循环不变量
2025-08-11 20:21:03,748 - INFO  - 
void foo28(int n) {

    int x = n;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(n == \at(n,Pre))) || ((x >= 0)&&(x <= \at(n,Pre))));
      loop invariant (\at(n,Pre) > 0) ==> ((x >= 0)&&(x <= \at(n,Pre)));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x = x - 1;
    }
    
    /*@ assert (x != 0) ==> (n < 0); */
}

2025-08-11 20:21:14,413 - INFO  - syntax Correct
2025-08-11 20:21:18,022 - INFO  - Validate:
2025-08-11 20:21:18,022 - INFO  - [True, True, True, True]
2025-08-11 20:21:18,023 - INFO  - 
2025-08-11 20:21:18,023 - INFO  - Verify:
2025-08-11 20:21:18,023 - INFO  - [True]
2025-08-11 20:21:18,023 - INFO  - 
2025-08-11 20:21:18,023 - INFO  - 注释过不变量的代码
2025-08-11 20:21:18,023 - INFO  - 
void foo28(int n) {

    int x = n;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(n == \at(n,Pre))) || ((x >= 0)&&(x <= \at(n,Pre))));
      loop invariant (\at(n,Pre) > 0) ==> ((x >= 0)&&(x <= \at(n,Pre)));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x = x - 1;
    }
    
    /*@ assert (x != 0) ==> (n < 0); */
}

2025-08-11 20:21:28,729 - INFO  - syntax Correct
2025-08-11 20:21:32,340 - INFO  - Validate:
2025-08-11 20:21:32,341 - INFO  - [True, True, True, True]
2025-08-11 20:21:32,341 - INFO  - 
2025-08-11 20:21:32,341 - INFO  - Verify:
2025-08-11 20:21:32,341 - INFO  - [True]
2025-08-11 20:21:32,341 - INFO  - 
2025-08-11 20:21:32,341 - INFO  - ACSL 格式的循环不变量
2025-08-11 20:21:32,341 - INFO  - /*@
      loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(n == \at(n,Pre))) || ((x >= 0)&&(x <= \at(n,Pre))));
      loop invariant (\at(n,Pre) > 0) ==> ((x >= 0)&&(x <= \at(n,Pre)));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
        x = x - 1;
    }
2025-08-11 20:21:32,342 - INFO  - VST 格式的循环不变量
2025-08-11 20:21:32,342 - INFO  - /*@ Inv
    ((n@pre > 0) => (((x == n@pre)&&(n == n@pre)) || ((x >= 0)&&(x <= n@pre)))) &&
((n@pre > 0) => ((x >= 0)&&(x <= n@pre))) &&
((!(n@pre > 0)) => ((x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
        x = x - 1;
    }
2025-08-11 20:21:32,342 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 20:21:32,342 - INFO  - 继续符号执行
2025-08-11 20:21:32,342 - INFO  - /*@ Inv
    ((n@pre > 0) => (((x == n@pre)&&(n == n@pre)) || ((x >= 0)&&(x <= n@pre)))) &&
((n@pre > 0) => ((x >= 0)&&(x <= n@pre))) &&
((!(n@pre > 0)) => ((x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
        x = x - 1;
    }
2025-08-11 20:21:42,992 - INFO  - syntax Correct
2025-08-11 20:21:46,581 - INFO  - Validate:
2025-08-11 20:21:46,582 - INFO  - [True, True, True, True]
2025-08-11 20:21:46,582 - INFO  - 
2025-08-11 20:21:46,582 - INFO  - Verify:
2025-08-11 20:21:46,582 - INFO  - [True]
2025-08-11 20:21:46,582 - INFO  - 
2025-08-11 20:21:46,582 - INFO  - CORRECT INVARIANT
2025-08-11 20:21:57,276 - INFO  - syntax Correct
2025-08-11 20:22:00,893 - INFO  - Validate:
2025-08-11 20:22:00,893 - INFO  - [True, True, True, True]
2025-08-11 20:22:00,893 - INFO  - 
2025-08-11 20:22:00,893 - INFO  - Verify:
2025-08-11 20:22:00,893 - INFO  - [True]
2025-08-11 20:22:00,894 - INFO  - 
2025-08-11 20:22:00,894 - INFO  - ========================================
2025-08-11 20:22:00,894 - INFO  - first_pass:
2025-08-11 20:22:00,894 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 20:22:00,894 - INFO  - ========================================
