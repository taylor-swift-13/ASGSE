2025-08-12 01:30:20,409 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 01:30:20,409 - INFO  - ========================================

2025-08-12 01:30:20,689 - INFO  - 初始待处理函数: ['foo72', 'unknown']
2025-08-12 01:30:20,689 - INFO  - 现在处理函数 unknown

2025-08-12 01:30:20,689 - INFO  - 
GENERATE ANNOTATION FOR foo72
2025-08-12 01:30:20,689 - INFO  - ========================================

2025-08-12 01:30:20,689 - INFO  - 函数 foo72 已经初始化
2025-08-12 01:30:20,703 - INFO  - 
GENERATE LOOP INVARIANT FOR foo72
2025-08-12 01:30:20,703 - INFO  - ========================================

2025-08-12 01:30:20,716 - INFO  - file_name: foo72
2025-08-12 01:30:20,727 - DEBUG  - INNER_FLAG: False
2025-08-12 01:30:20,742 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'y': 'y@pre'}]
2025-08-12 01:30:20,742 - INFO  - Path conditions: ['y@pre >= 0 && y@pre <= 127']
2025-08-12 01:30:20,742 - INFO  - Pre condition: y@pre >= 0 && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (y == y@pre)
2025-08-12 01:30:20,742 - INFO  - Loop Condition: unknown()
2025-08-12 01:30:20,742 - INFO  - Array Names: []
2025-08-12 01:30:20,742 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-12 01:30:20,743 - INFO  - Global Unchanged Variables: ['y']
2025-08-12 01:30:20,743 - INFO  - Non Inductive Variables: []
2025-08-12 01:30:32,151 - INFO  - after const
2025-08-12 01:30:32,151 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 01:30:32,151 - INFO  - after not in
2025-08-12 01:30:32,151 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 01:30:32,151 - INFO  - after vars
2025-08-12 01:30:32,151 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 01:30:32,152 - INFO  - after verification goal
2025-08-12 01:30:32,152 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 01:30:35,965 - DEBUG  - invgen reasoning
2025-08-12 01:30:35,965 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo72(int y) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
  
  /*@
    loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((c <= 36) && (z == 36 * \at(y,Pre) + c));
    loop invariant  0 <= c <= 36 ;
    loop invariant  z >= 36 * \at(y,Pre);
    loop invariant  y == \at(y,Pre);
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}
```
2025-08-12 01:30:35,966 - INFO  - 生成循环不变量
2025-08-12 01:30:35,966 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo72(int y) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
  
  /*@
    loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((c <= 36) && (z == 36 * \at(y,Pre) + c));
    loop invariant  0 <= c <= 36 ;
    loop invariant  z >= 36 * \at(y,Pre);
    loop invariant  y == \at(y,Pre);
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}

2025-08-12 01:30:46,781 - INFO  - syntax Correct
2025-08-12 01:30:50,346 - INFO  - Validate:
2025-08-12 01:30:50,346 - INFO  - [True, True, True, True]
2025-08-12 01:30:50,346 - INFO  - 
2025-08-12 01:30:50,346 - INFO  - Verify:
2025-08-12 01:30:50,346 - INFO  - [True]
2025-08-12 01:30:50,346 - INFO  - 
2025-08-12 01:30:50,346 - INFO  - 注释过不变量的代码
2025-08-12 01:30:50,346 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo72(int y) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
  
  /*@
    loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((c <= 36) && (z == 36 * \at(y,Pre) + c));
    loop invariant  0 <= c <= 36 ;
    loop invariant  z >= 36 * \at(y,Pre);
    loop invariant  y == \at(y,Pre);
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}

2025-08-12 01:31:01,273 - INFO  - syntax Correct
2025-08-12 01:31:04,879 - INFO  - Validate:
2025-08-12 01:31:04,879 - INFO  - [True, True, True, True]
2025-08-12 01:31:04,879 - INFO  - 
2025-08-12 01:31:04,879 - INFO  - Verify:
2025-08-12 01:31:04,879 - INFO  - [True]
2025-08-12 01:31:04,879 - INFO  - 
2025-08-12 01:31:04,879 - INFO  - ACSL 格式的循环不变量
2025-08-12 01:31:04,879 - INFO  - /*@
    loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((c <= 36) && (z == 36 * \at(y,Pre) + c));
    loop invariant  0 <= c <= 36 ;
    loop invariant  z >= 36 * \at(y,Pre);
    loop invariant  y == \at(y,Pre);
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-12 01:31:04,880 - INFO  - VST 格式的循环不变量
2025-08-12 01:31:04,880 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || ((c <= 36) && (z == 36 * y@pre + c))) &&
(0 <= c && c <= 36 ) &&
(z >= 36 * y@pre) &&
(y == y@pre)
    */
    
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-12 01:31:04,880 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 01:31:04,880 - INFO  - 继续符号执行
2025-08-12 01:31:04,880 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || ((c <= 36) && (z == 36 * y@pre + c))) &&
(0 <= c && c <= 36 ) &&
(z >= 36 * y@pre) &&
(y == y@pre)
    */
    
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-12 01:31:15,785 - INFO  - syntax Correct
2025-08-12 01:31:19,378 - INFO  - Validate:
2025-08-12 01:31:19,379 - INFO  - [True, True, True, True]
2025-08-12 01:31:19,379 - INFO  - 
2025-08-12 01:31:19,379 - INFO  - Verify:
2025-08-12 01:31:19,379 - INFO  - [True]
2025-08-12 01:31:19,379 - INFO  - 
2025-08-12 01:31:19,379 - INFO  - CORRECT INVARIANT
2025-08-12 01:31:30,191 - INFO  - syntax Correct
2025-08-12 01:31:33,788 - INFO  - Validate:
2025-08-12 01:31:33,789 - INFO  - [True, True, True, True]
2025-08-12 01:31:33,789 - INFO  - 
2025-08-12 01:31:33,789 - INFO  - Verify:
2025-08-12 01:31:33,789 - INFO  - [True]
2025-08-12 01:31:33,789 - INFO  - 
2025-08-12 01:31:33,789 - INFO  - ========================================
2025-08-12 01:31:33,789 - INFO  - first_pass:
2025-08-12 01:31:33,789 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 01:31:33,789 - INFO  - ========================================
