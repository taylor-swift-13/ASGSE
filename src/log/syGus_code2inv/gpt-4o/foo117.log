2025-08-11 22:39:43,414 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 22:39:43,414 - INFO  - ========================================

2025-08-11 22:39:43,612 - INFO  - 初始待处理函数: ['foo117', 'unknown']
2025-08-11 22:39:43,612 - INFO  - 现在处理函数 unknown

2025-08-11 22:39:43,612 - INFO  - 
GENERATE ANNOTATION FOR foo117
2025-08-11 22:39:43,612 - INFO  - ========================================

2025-08-11 22:39:43,612 - INFO  - 函数 foo117 已经初始化
2025-08-11 22:39:43,628 - INFO  - 
GENERATE LOOP INVARIANT FOR foo117
2025-08-11 22:39:43,628 - INFO  - ========================================

2025-08-11 22:39:43,641 - INFO  - file_name: foo117
2025-08-11 22:39:43,654 - DEBUG  - INNER_FLAG: False
2025-08-11 22:39:43,669 - INFO  - Variable Maps:[{'x': '0', 'sn': '0', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre'}]
2025-08-11 22:39:43,670 - INFO  - Path conditions: [None]
2025-08-11 22:39:43,670 - INFO  - Pre condition: (x == 0) * (sn == 0) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)
2025-08-11 22:39:43,670 - INFO  - Loop Condition: unknown()
2025-08-11 22:39:43,670 - INFO  - Array Names: []
2025-08-11 22:39:43,670 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-11 22:39:43,670 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1']
2025-08-11 22:39:43,670 - INFO  - Non Inductive Variables: []
2025-08-11 22:39:57,623 - INFO  - after const
2025-08-11 22:39:57,623 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 22:39:57,623 - INFO  - after not in
2025-08-11 22:39:57,623 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 22:39:57,623 - INFO  - after vars
2025-08-11 22:39:57,623 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 22:39:57,623 - INFO  - after verification goal
2025-08-11 22:39:57,624 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 22:40:02,150 - DEBUG  - invgen reasoning
2025-08-11 22:40:02,150 - DEBUG  - ```c
int unknown();
void foo117(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x);
      loop invariant  sn >= 0;
      loop invariant  x >= 0;
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != -1) ==> (sn == x); */
}
```
2025-08-11 22:40:02,150 - INFO  - 生成循环不变量
2025-08-11 22:40:02,150 - INFO  - 
int unknown();
void foo117(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x);
      loop invariant  sn >= 0;
      loop invariant  x >= 0;
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != -1) ==> (sn == x); */
}

2025-08-11 22:40:12,824 - INFO  - syntax Correct
2025-08-11 22:40:16,419 - INFO  - Validate:
2025-08-11 22:40:16,419 - INFO  - [True, True, True, True, True, True]
2025-08-11 22:40:16,419 - INFO  - 
2025-08-11 22:40:16,419 - INFO  - Verify:
2025-08-11 22:40:16,419 - INFO  - [True]
2025-08-11 22:40:16,419 - INFO  - 
2025-08-11 22:40:16,419 - INFO  - 注释过不变量的代码
2025-08-11 22:40:16,419 - INFO  - 
int unknown();
void foo117(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x);
      loop invariant  sn >= 0;
      loop invariant  x >= 0;
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != -1) ==> (sn == x); */
}

2025-08-11 22:40:27,057 - INFO  - syntax Correct
2025-08-11 22:40:30,634 - INFO  - Validate:
2025-08-11 22:40:30,634 - INFO  - [True, True, True, True, True, True]
2025-08-11 22:40:30,634 - INFO  - 
2025-08-11 22:40:30,634 - INFO  - Verify:
2025-08-11 22:40:30,634 - INFO  - [True]
2025-08-11 22:40:30,634 - INFO  - 
2025-08-11 22:40:30,635 - INFO  - ACSL 格式的循环不变量
2025-08-11 22:40:30,635 - INFO  - /*@
      loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x);
      loop invariant  sn >= 0;
      loop invariant  x >= 0;
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 22:40:30,635 - INFO  - VST 格式的循环不变量
2025-08-11 22:40:30,635 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || (sn == x)) &&
(sn >= 0) &&
(x >= 0) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
    
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 22:40:30,636 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 22:40:30,636 - INFO  - 继续符号执行
2025-08-11 22:40:30,636 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || (sn == x)) &&
(sn >= 0) &&
(x >= 0) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
    
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 22:40:41,280 - INFO  - syntax Correct
2025-08-11 22:40:44,876 - INFO  - Validate:
2025-08-11 22:40:44,876 - INFO  - [True, True, True, True, True, True]
2025-08-11 22:40:44,876 - INFO  - 
2025-08-11 22:40:44,876 - INFO  - Verify:
2025-08-11 22:40:44,876 - INFO  - [True]
2025-08-11 22:40:44,876 - INFO  - 
2025-08-11 22:40:44,876 - INFO  - CORRECT INVARIANT
2025-08-11 22:40:55,562 - INFO  - syntax Correct
2025-08-11 22:40:59,154 - INFO  - Validate:
2025-08-11 22:40:59,154 - INFO  - [True, True, True, True, True, True]
2025-08-11 22:40:59,154 - INFO  - 
2025-08-11 22:40:59,155 - INFO  - Verify:
2025-08-11 22:40:59,155 - INFO  - [True]
2025-08-11 22:40:59,155 - INFO  - 
2025-08-11 22:40:59,155 - INFO  - ========================================
2025-08-11 22:40:59,155 - INFO  - first_pass:
2025-08-11 22:40:59,155 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 22:40:59,155 - INFO  - ========================================
