2025-08-12 22:03:17,115 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 22:03:17,115 - INFO  - ========================================

2025-08-12 22:03:17,272 - INFO  - 初始待处理函数: ['foo123']
2025-08-12 22:03:17,272 - INFO  - 
GENERATE ANNOTATION FOR foo123
2025-08-12 22:03:17,272 - INFO  - ========================================

2025-08-12 22:03:17,272 - INFO  - 函数 foo123 已经初始化
2025-08-12 22:03:17,286 - INFO  - 
GENERATE LOOP INVARIANT FOR foo123
2025-08-12 22:03:17,287 - INFO  - ========================================

2025-08-12 22:03:17,300 - INFO  - file_name: foo123
2025-08-12 22:03:17,312 - DEBUG  - INNER_FLAG: False
2025-08-12 22:03:17,327 - INFO  - Variable Maps:[{'sn': '0', 'i': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'size': 'size@pre'}]
2025-08-12 22:03:17,328 - INFO  - Path conditions: [None]
2025-08-12 22:03:17,328 - INFO  - Pre condition: (sn == 0) * (i == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (size == size@pre)
2025-08-12 22:03:17,328 - INFO  - Loop Condition: i <= size
2025-08-12 22:03:17,328 - INFO  - Array Names: []
2025-08-12 22:03:17,328 - INFO  - Updated Loop Conditions: ['1 <= size@pre']
2025-08-12 22:03:17,328 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1', 'size']
2025-08-12 22:03:17,329 - INFO  - Non Inductive Variables: []
2025-08-12 22:03:28,913 - INFO  - after const
2025-08-12 22:03:28,913 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-12 22:03:28,913 - INFO  - after not in
2025-08-12 22:03:28,914 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-12 22:03:28,914 - INFO  - after vars
2025-08-12 22:03:28,914 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-12 22:03:28,914 - INFO  - after verification goal
2025-08-12 22:03:28,914 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-12 22:03:34,186 - DEBUG  - invgen reasoning
2025-08-12 22:03:34,186 - DEBUG  - ```c
void foo123(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= \at(size,Pre) + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (sn == i - 1);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
```
2025-08-12 22:03:34,187 - INFO  - 生成循环不变量
2025-08-12 22:03:34,187 - INFO  - 
void foo123(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= \at(size,Pre) + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (sn == i - 1);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }

2025-08-12 22:03:44,853 - INFO  - syntax Correct
2025-08-12 22:03:48,423 - INFO  - Validate:
2025-08-12 22:03:48,423 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-12 22:03:48,423 - INFO  - 
2025-08-12 22:03:48,423 - INFO  - Verify:
2025-08-12 22:03:48,423 - INFO  - [True]
2025-08-12 22:03:48,424 - INFO  - 
2025-08-12 22:03:48,424 - INFO  - 注释过不变量的代码
2025-08-12 22:03:48,424 - INFO  - 
void foo123(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= \at(size,Pre) + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (sn == i - 1);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }

2025-08-12 22:03:59,060 - INFO  - syntax Correct
2025-08-12 22:04:02,630 - INFO  - Validate:
2025-08-12 22:04:02,630 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-12 22:04:02,630 - INFO  - 
2025-08-12 22:04:02,631 - INFO  - Verify:
2025-08-12 22:04:02,631 - INFO  - [True]
2025-08-12 22:04:02,631 - INFO  - 
2025-08-12 22:04:02,631 - INFO  - ACSL 格式的循环不变量
2025-08-12 22:04:02,631 - INFO  - /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= \at(size,Pre) + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (sn == i - 1);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(size == \at(size,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-12 22:04:02,631 - INFO  - VST 格式的循环不变量
2025-08-12 22:04:02,631 - INFO  - /*@ Inv
    ((1 <= size@pre) => (((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(size == size@pre)) || (sn == i - 1))) &&
((1 <= size@pre) => (1 <= i && i <= size@pre + 1)) &&
((1 <= size@pre) => (sn == i - 1)) &&
((!(1 <= size@pre)) => ((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(size == size@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(size == size@pre)
    */
    
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-12 22:04:02,632 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 22:04:02,632 - INFO  - 继续符号执行
2025-08-12 22:04:02,632 - INFO  - /*@ Inv
    ((1 <= size@pre) => (((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(size == size@pre)) || (sn == i - 1))) &&
((1 <= size@pre) => (1 <= i && i <= size@pre + 1)) &&
((1 <= size@pre) => (sn == i - 1)) &&
((!(1 <= size@pre)) => ((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(size == size@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(size == size@pre)
    */
    
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-12 22:04:13,278 - INFO  - syntax Correct
2025-08-12 22:04:16,853 - INFO  - Validate:
2025-08-12 22:04:16,853 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-12 22:04:16,854 - INFO  - 
2025-08-12 22:04:16,854 - INFO  - Verify:
2025-08-12 22:04:16,854 - INFO  - [True]
2025-08-12 22:04:16,854 - INFO  - 
2025-08-12 22:04:16,854 - INFO  - CORRECT INVARIANT
2025-08-12 22:04:27,472 - INFO  - syntax Correct
2025-08-12 22:04:31,064 - INFO  - Validate:
2025-08-12 22:04:31,065 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-12 22:04:31,065 - INFO  - 
2025-08-12 22:04:31,065 - INFO  - Verify:
2025-08-12 22:04:31,065 - INFO  - [True]
2025-08-12 22:04:31,065 - INFO  - 
2025-08-12 22:04:31,065 - INFO  - ========================================
2025-08-12 22:04:31,065 - INFO  - first_pass:
2025-08-12 22:04:31,065 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 22:04:31,065 - INFO  - ========================================
