2025-08-12 20:43:29,425 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 20:43:29,425 - INFO  - ========================================

2025-08-12 20:43:29,525 - INFO  - 初始待处理函数: ['foo73', 'unknown']
2025-08-12 20:43:29,525 - INFO  - 现在处理函数 unknown

2025-08-12 20:43:29,525 - INFO  - 
GENERATE ANNOTATION FOR foo73
2025-08-12 20:43:29,525 - INFO  - ========================================

2025-08-12 20:43:29,525 - INFO  - 函数 foo73 已经初始化
2025-08-12 20:43:29,540 - INFO  - 
GENERATE LOOP INVARIANT FOR foo73
2025-08-12 20:43:29,540 - INFO  - ========================================

2025-08-12 20:43:29,555 - INFO  - file_name: foo73
2025-08-12 20:43:29,565 - DEBUG  - INNER_FLAG: False
2025-08-12 20:43:29,580 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'y': 'y@pre'}]
2025-08-12 20:43:29,580 - INFO  - Path conditions: ['y@pre >= 0 && y@pre <= 127']
2025-08-12 20:43:29,580 - INFO  - Pre condition: y@pre >= 0 && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (y == y@pre)
2025-08-12 20:43:29,580 - INFO  - Loop Condition: unknown()
2025-08-12 20:43:29,580 - INFO  - Array Names: []
2025-08-12 20:43:29,581 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-12 20:43:29,581 - INFO  - Global Unchanged Variables: ['y']
2025-08-12 20:43:29,581 - INFO  - Non Inductive Variables: []
2025-08-12 20:43:46,934 - INFO  - after const
2025-08-12 20:43:46,934 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 20:43:46,934 - INFO  - after not in
2025-08-12 20:43:46,934 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 20:43:46,934 - INFO  - after vars
2025-08-12 20:43:46,934 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 20:43:46,935 - INFO  - after verification goal
2025-08-12 20:43:46,935 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 20:43:51,165 - DEBUG  - invgen reasoning
2025-08-12 20:43:51,165 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo73(int y) {
  int c = 0;
  int z = 36 * y;
  



  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (z == 36 * \at(y,Pre) + c) ;
          loop invariant  (c >= 0 && c <= 36);
          loop invariant  (z == 36 * \at(y,Pre) + c);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            

  /*@ assert  ( z < 0 && z >= 4608) ==> ( c >= 36 ); */

  
}
```
2025-08-12 20:43:51,166 - INFO  - 生成循环不变量
2025-08-12 20:43:51,166 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo73(int y) {
  int c = 0;
  int z = 36 * y;
  



  
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (z == 36 * \at(y,Pre) + c) ;
          loop invariant  (c >= 0 && c <= 36);
          loop invariant  (z == 36 * \at(y,Pre) + c);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            

  /*@ assert  ( z < 0 && z >= 4608) ==> ( c >= 36 ); */

  
}

2025-08-12 20:44:02,093 - INFO  - syntax Correct
2025-08-12 20:44:05,675 - INFO  - Validate:
2025-08-12 20:44:05,675 - INFO  - [True, True, True, True]
2025-08-12 20:44:05,675 - INFO  - 
2025-08-12 20:44:05,675 - INFO  - Verify:
2025-08-12 20:44:05,675 - INFO  - [True]
2025-08-12 20:44:05,675 - INFO  - 
2025-08-12 20:44:05,675 - INFO  - 注释过不变量的代码
2025-08-12 20:44:05,675 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo73(int y) {
  int c = 0;
  int z = 36 * y;
  



  
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (z == 36 * \at(y,Pre) + c) ;
          loop invariant  (c >= 0 && c <= 36);
          loop invariant  (z == 36 * \at(y,Pre) + c);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            

  /*@ assert  ( z < 0 && z >= 4608) ==> ( c >= 36 ); */

  
}

2025-08-12 20:44:16,551 - INFO  - syntax Correct
2025-08-12 20:44:20,129 - INFO  - Validate:
2025-08-12 20:44:20,129 - INFO  - [True, True, True, True]
2025-08-12 20:44:20,129 - INFO  - 
2025-08-12 20:44:20,129 - INFO  - Verify:
2025-08-12 20:44:20,129 - INFO  - [True]
2025-08-12 20:44:20,129 - INFO  - 
2025-08-12 20:44:20,130 - INFO  - ACSL 格式的循环不变量
2025-08-12 20:44:20,130 - INFO  - /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (z == 36 * \at(y,Pre) + c) ;
          loop invariant  (c >= 0 && c <= 36);
          loop invariant  (z == 36 * \at(y,Pre) + c);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 20:44:20,130 - INFO  - VST 格式的循环不变量
2025-08-12 20:44:20,130 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || (z == 36 * y@pre + c) ) &&
((c >= 0 && c <= 36)) &&
((z == 36 * y@pre + c)) &&
(y == y@pre)
    */
    
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 20:44:20,130 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 20:44:20,130 - INFO  - 继续符号执行
2025-08-12 20:44:20,130 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || (z == 36 * y@pre + c) ) &&
((c >= 0 && c <= 36)) &&
((z == 36 * y@pre + c)) &&
(y == y@pre)
    */
    
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 20:44:30,965 - INFO  - syntax Correct
2025-08-12 20:44:34,548 - INFO  - Validate:
2025-08-12 20:44:34,549 - INFO  - [True, True, True, True]
2025-08-12 20:44:34,549 - INFO  - 
2025-08-12 20:44:34,549 - INFO  - Verify:
2025-08-12 20:44:34,549 - INFO  - [True]
2025-08-12 20:44:34,549 - INFO  - 
2025-08-12 20:44:34,549 - INFO  - CORRECT INVARIANT
2025-08-12 20:44:45,478 - INFO  - syntax Correct
2025-08-12 20:44:49,065 - INFO  - Validate:
2025-08-12 20:44:49,065 - INFO  - [True, True, True, True]
2025-08-12 20:44:49,065 - INFO  - 
2025-08-12 20:44:49,065 - INFO  - Verify:
2025-08-12 20:44:49,065 - INFO  - [True]
2025-08-12 20:44:49,065 - INFO  - 
2025-08-12 20:44:49,065 - INFO  - ========================================
2025-08-12 20:44:49,066 - INFO  - first_pass:
2025-08-12 20:44:49,066 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 20:44:49,066 - INFO  - ========================================
