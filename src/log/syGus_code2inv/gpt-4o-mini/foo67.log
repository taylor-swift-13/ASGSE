2025-08-13 02:50:07,710 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 02:50:07,710 - INFO  - ========================================

2025-08-13 02:50:08,144 - INFO  - 初始待处理函数: ['foo67']
2025-08-13 02:50:08,144 - INFO  - 
GENERATE ANNOTATION FOR foo67
2025-08-13 02:50:08,144 - INFO  - ========================================

2025-08-13 02:50:08,144 - INFO  - 函数 foo67 已经初始化
2025-08-13 02:50:08,174 - INFO  - 
GENERATE LOOP INVARIANT FOR foo67
2025-08-13 02:50:08,174 - INFO  - ========================================

2025-08-13 02:50:08,190 - INFO  - file_name: foo67
2025-08-13 02:50:08,202 - DEBUG  - INNER_FLAG: False
2025-08-13 02:50:08,221 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre', 'n': 'n@pre'}]
2025-08-13 02:50:08,221 - INFO  - Path conditions: [None]
2025-08-13 02:50:08,221 - INFO  - Pre condition: (x == 1) * (y == y@pre) * (n == n@pre)
2025-08-13 02:50:08,221 - INFO  - Loop Condition: x <= n
2025-08-13 02:50:08,221 - INFO  - Array Names: []
2025-08-13 02:50:08,221 - INFO  - Updated Loop Conditions: ['1 <= n@pre']
2025-08-13 02:50:08,222 - INFO  - Global Unchanged Variables: ['n']
2025-08-13 02:50:08,222 - INFO  - Non Inductive Variables: ['y']
2025-08-13 02:50:18,887 - INFO  - after const
2025-08-13 02:50:18,887 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-13 02:50:18,887 - INFO  - after not in
2025-08-13 02:50:18,888 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-13 02:50:18,888 - INFO  - after vars
2025-08-13 02:50:18,888 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-13 02:50:18,888 - INFO  - after verification goal
2025-08-13 02:50:18,888 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-13 02:50:22,691 - DEBUG  - invgen reasoning
2025-08-13 02:50:22,692 - DEBUG  - ```c
void foo67(int n,int y) {
    
    int x = 1;

    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= x <= n + 1);
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y >= 0); */


}
```
2025-08-13 02:50:22,692 - INFO  - 生成循环不变量
2025-08-13 02:50:22,692 - INFO  - 
void foo67(int n,int y) {
    
    int x = 1;

    
    
            
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= x <= n + 1);
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y >= 0); */


}

2025-08-13 02:50:33,396 - INFO  - syntax Correct
2025-08-13 02:50:36,968 - INFO  - Validate:
2025-08-13 02:50:36,968 - INFO  - [True, True, True, True, True]
2025-08-13 02:50:36,968 - INFO  - 
2025-08-13 02:50:36,968 - INFO  - Verify:
2025-08-13 02:50:36,968 - INFO  - [True]
2025-08-13 02:50:36,968 - INFO  - 
2025-08-13 02:50:36,968 - INFO  - 注释过不变量的代码
2025-08-13 02:50:36,968 - INFO  - 
void foo67(int n,int y) {
    
    int x = 1;

    
    
            
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= x <= n + 1);
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y >= 0); */


}

2025-08-13 02:50:47,609 - INFO  - syntax Correct
2025-08-13 02:50:51,203 - INFO  - Validate:
2025-08-13 02:50:51,204 - INFO  - [True, True, True, True, True]
2025-08-13 02:50:51,204 - INFO  - 
2025-08-13 02:50:51,204 - INFO  - Verify:
2025-08-13 02:50:51,204 - INFO  - [True]
2025-08-13 02:50:51,204 - INFO  - 
2025-08-13 02:50:51,204 - INFO  - ACSL 格式的循环不变量
2025-08-13 02:50:51,204 - INFO  - /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
          loop invariant (1 <= \at(n,Pre)) ==> (1 <= x <= n + 1);
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-13 02:50:51,205 - INFO  - VST 格式的循环不变量
2025-08-13 02:50:51,205 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((x == 1)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => (((x == 1)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => (1 <= x && x <= n + 1)) &&
((!(1 <= n@pre)) => ((x == 1)&&(y == y@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-13 02:50:51,205 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 02:50:51,206 - INFO  - 继续符号执行
2025-08-13 02:50:51,206 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((x == 1)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => (((x == 1)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => (1 <= x && x <= n + 1)) &&
((!(1 <= n@pre)) => ((x == 1)&&(y == y@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-13 02:51:01,902 - INFO  - syntax Correct
2025-08-13 02:51:05,474 - INFO  - Validate:
2025-08-13 02:51:05,474 - INFO  - [True, True, True, True, True]
2025-08-13 02:51:05,474 - INFO  - 
2025-08-13 02:51:05,474 - INFO  - Verify:
2025-08-13 02:51:05,474 - INFO  - [True]
2025-08-13 02:51:05,474 - INFO  - 
2025-08-13 02:51:05,474 - INFO  - CORRECT INVARIANT
2025-08-13 02:51:16,093 - INFO  - syntax Correct
2025-08-13 02:51:19,692 - INFO  - Validate:
2025-08-13 02:51:19,692 - INFO  - [True, True, True, True, True]
2025-08-13 02:51:19,692 - INFO  - 
2025-08-13 02:51:19,692 - INFO  - Verify:
2025-08-13 02:51:19,692 - INFO  - [True]
2025-08-13 02:51:19,692 - INFO  - 
2025-08-13 02:51:19,692 - INFO  - ========================================
2025-08-13 02:51:19,692 - INFO  - first_pass:
2025-08-13 02:51:19,692 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 02:51:19,693 - INFO  - ========================================
