2025-08-13 03:04:43,753 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 03:04:43,753 - INFO  - ========================================

2025-08-13 03:04:44,035 - INFO  - 初始待处理函数: ['foo118']
2025-08-13 03:04:44,035 - INFO  - 
GENERATE ANNOTATION FOR foo118
2025-08-13 03:04:44,035 - INFO  - ========================================

2025-08-13 03:04:44,035 - INFO  - 函数 foo118 已经初始化
2025-08-13 03:04:44,050 - INFO  - 
GENERATE LOOP INVARIANT FOR foo118
2025-08-13 03:04:44,051 - INFO  - ========================================

2025-08-13 03:04:44,064 - INFO  - file_name: foo118
2025-08-13 03:04:44,076 - DEBUG  - INNER_FLAG: False
2025-08-13 03:04:44,093 - INFO  - Variable Maps:[{'sn': '0', 'i': '1', 'size': 'size@pre'}]
2025-08-13 03:04:44,094 - INFO  - Path conditions: [None]
2025-08-13 03:04:44,094 - INFO  - Pre condition: (sn == 0) * (i == 1) * (size == size@pre)
2025-08-13 03:04:44,094 - INFO  - Loop Condition: i <= size
2025-08-13 03:04:44,094 - INFO  - Array Names: []
2025-08-13 03:04:44,094 - INFO  - Updated Loop Conditions: ['1 <= size@pre']
2025-08-13 03:04:44,095 - INFO  - Global Unchanged Variables: ['size']
2025-08-13 03:04:44,095 - INFO  - Non Inductive Variables: []
2025-08-13 03:04:57,276 - INFO  - after const
2025-08-13 03:04:57,277 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 03:04:57,277 - INFO  - after not in
2025-08-13 03:04:57,277 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 03:04:57,277 - INFO  - after vars
2025-08-13 03:04:57,277 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 03:04:57,277 - INFO  - after verification goal
2025-08-13 03:04:57,277 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(size,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 03:05:00,862 - DEBUG  - invgen reasoning
2025-08-13 03:05:00,862 - DEBUG  - ```c
void foo118(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size,Pre)) <<< */
        
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= size + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (0 <= sn <= size);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != size) ==> (sn == 0);*/
  
  }
```
2025-08-13 03:05:00,862 - INFO  - 生成循环不变量
2025-08-13 03:05:00,862 - INFO  - 
void foo118(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= size + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (0 <= sn <= size);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != size) ==> (sn == 0);*/
  
  }

2025-08-13 03:05:11,566 - INFO  - syntax Correct
2025-08-13 03:05:15,163 - INFO  - Validate:
2025-08-13 03:05:15,164 - INFO  - [True, True, True, True, True]
2025-08-13 03:05:15,164 - INFO  - 
2025-08-13 03:05:15,164 - INFO  - Verify:
2025-08-13 03:05:15,164 - INFO  - [True]
2025-08-13 03:05:15,164 - INFO  - 
2025-08-13 03:05:15,164 - INFO  - 注释过不变量的代码
2025-08-13 03:05:15,164 - INFO  - 
void foo118(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= size + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (0 <= sn <= size);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != size) ==> (sn == 0);*/
  
  }

2025-08-13 03:05:25,803 - INFO  - syntax Correct
2025-08-13 03:05:29,391 - INFO  - Validate:
2025-08-13 03:05:29,392 - INFO  - [True, True, True, True, True]
2025-08-13 03:05:29,392 - INFO  - 
2025-08-13 03:05:29,392 - INFO  - Verify:
2025-08-13 03:05:29,392 - INFO  - [True]
2025-08-13 03:05:29,392 - INFO  - 
2025-08-13 03:05:29,392 - INFO  - ACSL 格式的循环不变量
2025-08-13 03:05:29,392 - INFO  - /*@
          loop invariant (1 <= \at(size,Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size,Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size,Pre)) ==> (1 <= i <= size + 1);
          loop invariant (1 <= \at(size,Pre)) ==> (0 <= sn <= size);
          loop invariant (!(1 <= \at(size,Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size,Pre)));
          loop invariant size == \at(size,Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 03:05:29,392 - INFO  - VST 格式的循环不变量
2025-08-13 03:05:29,392 - INFO  - /*@ Inv
    ((1 <= size@pre) => (((sn == 0)&&(i == 1)&&(size == size@pre)) || (sn == i - 1))) &&
((1 <= size@pre) => (1 <= i && i <= size + 1)) &&
((1 <= size@pre) => (0 <= sn && sn <= size)) &&
((!(1 <= size@pre)) => ((sn == 0)&&(i == 1)&&(size == size@pre))) &&
(size == size@pre)
    */
    
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 03:05:29,393 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 03:05:29,393 - INFO  - 继续符号执行
2025-08-13 03:05:29,393 - INFO  - /*@ Inv
    ((1 <= size@pre) => (((sn == 0)&&(i == 1)&&(size == size@pre)) || (sn == i - 1))) &&
((1 <= size@pre) => (1 <= i && i <= size + 1)) &&
((1 <= size@pre) => (0 <= sn && sn <= size)) &&
((!(1 <= size@pre)) => ((sn == 0)&&(i == 1)&&(size == size@pre))) &&
(size == size@pre)
    */
    
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 03:05:40,155 - INFO  - syntax Correct
2025-08-13 03:05:43,751 - INFO  - Validate:
2025-08-13 03:05:43,751 - INFO  - [True, True, True, True, True]
2025-08-13 03:05:43,751 - INFO  - 
2025-08-13 03:05:43,751 - INFO  - Verify:
2025-08-13 03:05:43,751 - INFO  - [True]
2025-08-13 03:05:43,751 - INFO  - 
2025-08-13 03:05:43,751 - INFO  - CORRECT INVARIANT
2025-08-13 03:05:54,390 - INFO  - syntax Correct
2025-08-13 03:05:57,989 - INFO  - Validate:
2025-08-13 03:05:57,989 - INFO  - [True, True, True, True, True]
2025-08-13 03:05:57,990 - INFO  - 
2025-08-13 03:05:57,990 - INFO  - Verify:
2025-08-13 03:05:57,990 - INFO  - [True]
2025-08-13 03:05:57,990 - INFO  - 
2025-08-13 03:05:57,990 - INFO  - ========================================
2025-08-13 03:05:57,990 - INFO  - first_pass:
2025-08-13 03:05:57,990 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 03:05:57,990 - INFO  - ========================================
