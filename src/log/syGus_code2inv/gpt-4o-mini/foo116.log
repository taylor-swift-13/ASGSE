2025-08-13 00:03:30,236 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 00:03:30,236 - INFO  - ========================================

2025-08-13 00:03:30,477 - INFO  - 初始待处理函数: ['foo116', 'unknown']
2025-08-13 00:03:30,477 - INFO  - 现在处理函数 unknown

2025-08-13 00:03:30,477 - INFO  - 
GENERATE ANNOTATION FOR foo116
2025-08-13 00:03:30,478 - INFO  - ========================================

2025-08-13 00:03:30,478 - INFO  - 函数 foo116 已经初始化
2025-08-13 00:03:30,492 - INFO  - 
GENERATE LOOP INVARIANT FOR foo116
2025-08-13 00:03:30,492 - INFO  - ========================================

2025-08-13 00:03:30,506 - INFO  - file_name: foo116
2025-08-13 00:03:30,516 - DEBUG  - INNER_FLAG: False
2025-08-13 00:03:30,533 - INFO  - Variable Maps:[{'x': '0', 'sn': '0', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre'}]
2025-08-13 00:03:30,533 - INFO  - Path conditions: [None]
2025-08-13 00:03:30,533 - INFO  - Pre condition: (x == 0) * (sn == 0) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)
2025-08-13 00:03:30,533 - INFO  - Loop Condition: unknown()
2025-08-13 00:03:30,533 - INFO  - Array Names: []
2025-08-13 00:03:30,533 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-13 00:03:30,533 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1']
2025-08-13 00:03:30,534 - INFO  - Non Inductive Variables: []
2025-08-13 00:03:50,079 - INFO  - after const
2025-08-13 00:03:50,079 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 00:03:50,079 - INFO  - after not in
2025-08-13 00:03:50,079 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 00:03:50,079 - INFO  - after vars
2025-08-13 00:03:50,080 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 00:03:50,080 - INFO  - after verification goal
2025-08-13 00:03:50,080 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
        
            /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-13 00:03:54,718 - DEBUG  - invgen reasoning
2025-08-13 00:03:54,718 - DEBUG  - ```c
int unknown();
void foo116(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
    
        /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
        */
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
        
   /*@ assert (sn != x) ==> (sn == -1);*/

}
```
2025-08-13 00:03:54,718 - INFO  - 生成循环不变量
2025-08-13 00:03:54,718 - INFO  - 
int unknown();
void foo116(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
    
        /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
        */
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
        
   /*@ assert (sn != x) ==> (sn == -1);*/

}

2025-08-13 00:04:05,430 - INFO  - syntax Correct
2025-08-13 00:04:09,007 - INFO  - Validate:
2025-08-13 00:04:09,007 - INFO  - [True, True, True, True, True, True]
2025-08-13 00:04:09,007 - INFO  - 
2025-08-13 00:04:09,007 - INFO  - Verify:
2025-08-13 00:04:09,008 - INFO  - [True]
2025-08-13 00:04:09,008 - INFO  - 
2025-08-13 00:04:09,008 - INFO  - 注释过不变量的代码
2025-08-13 00:04:09,008 - INFO  - 
int unknown();
void foo116(int v1,int v2,int v3) {

    int sn = 0;
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (x == 0) * (sn == 0) * (v3 == \at(v3,Pre)) * (v2 == \at(v2,Pre)) * (v1 == \at(v1,Pre)) <<< */
    
        /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
        */
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
        
   /*@ assert (sn != x) ==> (sn == -1);*/

}

2025-08-13 00:04:19,634 - INFO  - syntax Correct
2025-08-13 00:04:23,203 - INFO  - Validate:
2025-08-13 00:04:23,203 - INFO  - [True, True, True, True, True, True]
2025-08-13 00:04:23,204 - INFO  - 
2025-08-13 00:04:23,204 - INFO  - Verify:
2025-08-13 00:04:23,204 - INFO  - [True]
2025-08-13 00:04:23,204 - INFO  - 
2025-08-13 00:04:23,204 - INFO  - ACSL 格式的循环不变量
2025-08-13 00:04:23,204 - INFO  - /*@
          loop invariant  ((x == 0)&&(sn == 0)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
        */
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 00:04:23,204 - INFO  - VST 格式的循环不变量
2025-08-13 00:04:23,204 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || (sn == x) ) &&
(sn >= 0 ) &&
(x >= 0 ) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
    
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 00:04:23,205 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 00:04:23,205 - INFO  - 继续符号执行
2025-08-13 00:04:23,205 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || (sn == x) ) &&
(sn >= 0 ) &&
(x >= 0 ) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
    
        while (unknown()) {

      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-13 00:04:33,828 - INFO  - syntax Correct
2025-08-13 00:04:37,404 - INFO  - Validate:
2025-08-13 00:04:37,404 - INFO  - [True, True, True, True, True, True]
2025-08-13 00:04:37,404 - INFO  - 
2025-08-13 00:04:37,404 - INFO  - Verify:
2025-08-13 00:04:37,404 - INFO  - [True]
2025-08-13 00:04:37,405 - INFO  - 
2025-08-13 00:04:37,405 - INFO  - CORRECT INVARIANT
2025-08-13 00:04:48,031 - INFO  - syntax Correct
2025-08-13 00:04:51,608 - INFO  - Validate:
2025-08-13 00:04:51,608 - INFO  - [True, True, True, True, True, True]
2025-08-13 00:04:51,608 - INFO  - 
2025-08-13 00:04:51,608 - INFO  - Verify:
2025-08-13 00:04:51,608 - INFO  - [True]
2025-08-13 00:04:51,609 - INFO  - 
2025-08-13 00:04:51,609 - INFO  - ========================================
2025-08-13 00:04:51,609 - INFO  - first_pass:
2025-08-13 00:04:51,609 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 00:04:51,609 - INFO  - ========================================
