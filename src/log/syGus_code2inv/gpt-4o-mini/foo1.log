2025-08-12 23:07:58,437 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 23:07:58,437 - INFO  - ========================================

2025-08-12 23:07:58,632 - INFO  - 初始待处理函数: ['foo1']
2025-08-12 23:07:58,633 - INFO  - 
GENERATE ANNOTATION FOR foo1
2025-08-12 23:07:58,633 - INFO  - ========================================

2025-08-12 23:07:58,633 - INFO  - 函数 foo1 已经初始化
2025-08-12 23:07:58,647 - INFO  - 
GENERATE LOOP INVARIANT FOR foo1
2025-08-12 23:07:58,647 - INFO  - ========================================

2025-08-12 23:07:58,660 - INFO  - file_name: foo1
2025-08-12 23:07:58,671 - DEBUG  - INNER_FLAG: False
2025-08-12 23:07:58,687 - INFO  - Variable Maps:[{'y': '0', 'x': '1'}]
2025-08-12 23:07:58,687 - INFO  - Path conditions: [None]
2025-08-12 23:07:58,687 - INFO  - Pre condition: (y == 0) * (x == 1)
2025-08-12 23:07:58,687 - INFO  - Loop Condition: y < 100000
2025-08-12 23:07:58,687 - INFO  - Array Names: []
2025-08-12 23:07:58,687 - INFO  - Updated Loop Conditions: ['0 < 100000']
2025-08-12 23:07:58,687 - INFO  - Global Unchanged Variables: []
2025-08-12 23:07:58,687 - INFO  - Non Inductive Variables: []
2025-08-12 23:08:15,307 - INFO  - after const
2025-08-12 23:08:15,307 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
2025-08-12 23:08:15,307 - INFO  - after not in
2025-08-12 23:08:15,307 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
2025-08-12 23:08:15,307 - INFO  - after vars
2025-08-12 23:08:15,307 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_x ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
2025-08-12 23:08:15,307 - INFO  - after verification goal
2025-08-12 23:08:15,307 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
2025-08-12 23:08:19,274 - DEBUG  - invgen reasoning
2025-08-12 23:08:19,274 - DEBUG  - ```c
void foo1() {
  
    int x = 1;
    int y = 0;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 1) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ;
          loop invariant  x >= 1; 
          loop invariant  0 <= y < 100000;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
  
    /*@ assert x >= y; */
  }
```
2025-08-12 23:08:19,274 - INFO  - 生成循环不变量
2025-08-12 23:08:19,275 - INFO  - 
void foo1() {
  
    int x = 1;
    int y = 0;
    
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ;
          loop invariant  x >= 1; 
          loop invariant  0 <= y < 100000;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
  
    /*@ assert x >= y; */
  }

2025-08-12 23:08:30,004 - INFO  - syntax Correct
2025-08-12 23:08:33,578 - INFO  - Validate:
2025-08-12 23:08:33,578 - INFO  - [True, True, True]
2025-08-12 23:08:33,578 - INFO  - 
2025-08-12 23:08:33,578 - INFO  - Verify:
2025-08-12 23:08:33,578 - INFO  - [True]
2025-08-12 23:08:33,578 - INFO  - 
2025-08-12 23:08:33,578 - INFO  - 注释过不变量的代码
2025-08-12 23:08:33,578 - INFO  - 
void foo1() {
  
    int x = 1;
    int y = 0;
    
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ;
          loop invariant  x >= 1; 
          loop invariant  0 <= y < 100000;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
            
  
    /*@ assert x >= y; */
  }

2025-08-12 23:08:44,248 - INFO  - syntax Correct
2025-08-12 23:08:47,816 - INFO  - Validate:
2025-08-12 23:08:47,816 - INFO  - [True, True, True]
2025-08-12 23:08:47,816 - INFO  - 
2025-08-12 23:08:47,816 - INFO  - Verify:
2025-08-12 23:08:47,816 - INFO  - [True]
2025-08-12 23:08:47,816 - INFO  - 
2025-08-12 23:08:47,816 - INFO  - ACSL 格式的循环不变量
2025-08-12 23:08:47,816 - INFO  - /*@
          loop invariant  ((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ;
          loop invariant  x >= 1; 
          loop invariant  0 <= y < 100000;
            */
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
2025-08-12 23:08:47,817 - INFO  - VST 格式的循环不变量
2025-08-12 23:08:47,817 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ) &&
(x >= 1) &&
(0 <= y && y < 100000)
    */
    
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
2025-08-12 23:08:47,817 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 23:08:47,817 - INFO  - 继续符号执行
2025-08-12 23:08:47,817 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (x == 1 + (y * (y - 1)) / 2) ) &&
(x >= 1) &&
(0 <= y && y < 100000)
    */
    
            while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
  
    }
2025-08-12 23:08:58,497 - INFO  - syntax Correct
2025-08-12 23:09:02,069 - INFO  - Validate:
2025-08-12 23:09:02,069 - INFO  - [True, True, True]
2025-08-12 23:09:02,069 - INFO  - 
2025-08-12 23:09:02,069 - INFO  - Verify:
2025-08-12 23:09:02,069 - INFO  - [True]
2025-08-12 23:09:02,069 - INFO  - 
2025-08-12 23:09:02,069 - INFO  - CORRECT INVARIANT
2025-08-12 23:09:12,700 - INFO  - syntax Correct
2025-08-12 23:09:16,273 - INFO  - Validate:
2025-08-12 23:09:16,274 - INFO  - [True, True, True]
2025-08-12 23:09:16,274 - INFO  - 
2025-08-12 23:09:16,274 - INFO  - Verify:
2025-08-12 23:09:16,274 - INFO  - [True]
2025-08-12 23:09:16,274 - INFO  - 
2025-08-12 23:09:16,274 - INFO  - ========================================
2025-08-12 23:09:16,274 - INFO  - first_pass:
2025-08-12 23:09:16,274 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 23:09:16,274 - INFO  - ========================================
