2025-08-12 22:33:04,698 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 22:33:04,698 - INFO  - ========================================

2025-08-12 22:33:04,876 - INFO  - 初始待处理函数: ['foo75', 'unknown']
2025-08-12 22:33:04,876 - INFO  - 现在处理函数 unknown

2025-08-12 22:33:04,876 - INFO  - 
GENERATE ANNOTATION FOR foo75
2025-08-12 22:33:04,876 - INFO  - ========================================

2025-08-12 22:33:04,876 - INFO  - 函数 foo75 已经初始化
2025-08-12 22:33:04,890 - INFO  - 
GENERATE LOOP INVARIANT FOR foo75
2025-08-12 22:33:04,891 - INFO  - ========================================

2025-08-12 22:33:04,905 - INFO  - file_name: foo75
2025-08-12 22:33:04,916 - DEBUG  - INNER_FLAG: False
2025-08-12 22:33:04,931 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
2025-08-12 22:33:04,931 - INFO  - Path conditions: ['y@pre >= 0 && y@pre <= 127']
2025-08-12 22:33:04,932 - INFO  - Pre condition: y@pre >= 0 && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
2025-08-12 22:33:04,932 - INFO  - Loop Condition: unknown()
2025-08-12 22:33:04,932 - INFO  - Array Names: []
2025-08-12 22:33:04,932 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-12 22:33:04,932 - INFO  - Global Unchanged Variables: ['x3', 'x2', 'x1', 'y']
2025-08-12 22:33:04,932 - INFO  - Non Inductive Variables: []
2025-08-12 22:33:21,980 - INFO  - after const
2025-08-12 22:33:21,980 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (x3 == \at(x3,Pre)) * (x2 == \at(x2,Pre)) * (x1 == \at(x1,Pre)) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 22:33:21,980 - INFO  - after not in
2025-08-12 22:33:21,980 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (x3 == \at(x3,Pre)) * (x2 == \at(x2,Pre)) * (x1 == \at(x1,Pre)) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 22:33:21,980 - INFO  - after vars
2025-08-12 22:33:21,980 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (x3 == \at(x3,Pre)) * (x2 == \at(x2,Pre)) * (x1 == \at(x1,Pre)) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 22:33:21,981 - INFO  - after verification goal
2025-08-12 22:33:21,981 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (x3 == \at(x3,Pre)) * (x2 == \at(x2,Pre)) * (x1 == \at(x1,Pre)) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(x3 == \at(x3,Pre))&&(x2 == \at(x2,Pre))&&(x1 == \at(x1,Pre))&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
2025-08-12 22:33:28,617 - DEBUG  - invgen reasoning
2025-08-12 22:33:28,617 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo75(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(y,Pre) >= 0 && \at(y,Pre) <= 127 && (z == 36 * \at(y,Pre)) * (c == 0) * (x3 == \at(x3,Pre)) * (x2 == \at(x2,Pre)) * (x1 == \at(x1,Pre)) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(x3 == \at(x3,Pre))&&(x2 == \at(x2,Pre))&&(x1 == \at(x1,Pre))&&(y == \at(y,Pre))) || (c <= 36 && z == 36 * \at(y,Pre) + c) ;
          loop invariant  0 <= c <= 36 ;
          loop invariant  z == 36 * \at(y,Pre) + c ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
```
2025-08-12 22:33:28,617 - INFO  - 生成循环不变量
2025-08-12 22:33:28,617 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo75(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(x3 == \at(x3,Pre))&&(x2 == \at(x2,Pre))&&(x1 == \at(x1,Pre))&&(y == \at(y,Pre))) || (c <= 36 && z == 36 * \at(y,Pre) + c) ;
          loop invariant  0 <= c <= 36 ;
          loop invariant  z == 36 * \at(y,Pre) + c ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

2025-08-12 22:33:39,588 - INFO  - syntax Correct
2025-08-12 22:33:43,158 - INFO  - Validate:
2025-08-12 22:33:43,159 - INFO  - [True, True, True, True, True, True, True]
2025-08-12 22:33:43,159 - INFO  - 
2025-08-12 22:33:43,159 - INFO  - Verify:
2025-08-12 22:33:43,159 - INFO  - [True]
2025-08-12 22:33:43,159 - INFO  - 
2025-08-12 22:33:43,159 - INFO  - 注释过不变量的代码
2025-08-12 22:33:43,159 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo75(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(x3 == \at(x3,Pre))&&(x2 == \at(x2,Pre))&&(x1 == \at(x1,Pre))&&(y == \at(y,Pre))) || (c <= 36 && z == 36 * \at(y,Pre) + c) ;
          loop invariant  0 <= c <= 36 ;
          loop invariant  z == 36 * \at(y,Pre) + c ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

2025-08-12 22:33:54,072 - INFO  - syntax Correct
2025-08-12 22:33:57,632 - INFO  - Validate:
2025-08-12 22:33:57,632 - INFO  - [True, True, True, True, True, True, True]
2025-08-12 22:33:57,632 - INFO  - 
2025-08-12 22:33:57,632 - INFO  - Verify:
2025-08-12 22:33:57,632 - INFO  - [True]
2025-08-12 22:33:57,632 - INFO  - 
2025-08-12 22:33:57,632 - INFO  - ACSL 格式的循环不变量
2025-08-12 22:33:57,632 - INFO  - /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(x3 == \at(x3,Pre))&&(x2 == \at(x2,Pre))&&(x1 == \at(x1,Pre))&&(y == \at(y,Pre))) || (c <= 36 && z == 36 * \at(y,Pre) + c) ;
          loop invariant  0 <= c <= 36 ;
          loop invariant  z == 36 * \at(y,Pre) + c ;
          loop invariant x3 == \at(x3,Pre);
          loop invariant x2 == \at(x2,Pre);
          loop invariant x1 == \at(x1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 22:33:57,633 - INFO  - VST 格式的循环不变量
2025-08-12 22:33:57,633 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36 && z == 36 * y@pre + c) ) &&
(0 <= c && c <= 36 ) &&
(z == 36 * y@pre + c ) &&
(x3 == x3@pre) &&
(x2 == x2@pre) &&
(x1 == x1@pre) &&
(y == y@pre)
    */
    
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 22:33:57,633 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 22:33:57,633 - INFO  - 继续符号执行
2025-08-12 22:33:57,633 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36 && z == 36 * y@pre + c) ) &&
(0 <= c && c <= 36 ) &&
(z == 36 * y@pre + c ) &&
(x3 == x3@pre) &&
(x2 == x2@pre) &&
(x1 == x1@pre) &&
(y == y@pre)
    */
    
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
2025-08-12 22:34:08,552 - INFO  - syntax Correct
2025-08-12 22:34:12,116 - INFO  - Validate:
2025-08-12 22:34:12,116 - INFO  - [True, True, True, True, True, True, True]
2025-08-12 22:34:12,116 - INFO  - 
2025-08-12 22:34:12,116 - INFO  - Verify:
2025-08-12 22:34:12,116 - INFO  - [True]
2025-08-12 22:34:12,117 - INFO  - 
2025-08-12 22:34:12,117 - INFO  - CORRECT INVARIANT
2025-08-12 22:34:23,048 - INFO  - syntax Correct
2025-08-12 22:34:26,615 - INFO  - Validate:
2025-08-12 22:34:26,615 - INFO  - [True, True, True, True, True, True, True]
2025-08-12 22:34:26,615 - INFO  - 
2025-08-12 22:34:26,615 - INFO  - Verify:
2025-08-12 22:34:26,615 - INFO  - [True]
2025-08-12 22:34:26,615 - INFO  - 
2025-08-12 22:34:26,615 - INFO  - ========================================
2025-08-12 22:34:26,615 - INFO  - first_pass:
2025-08-12 22:34:26,615 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 22:34:26,615 - INFO  - ========================================
