2025-08-13 02:39:55,405 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 02:39:55,405 - INFO  - ========================================

2025-08-13 02:39:55,681 - INFO  - 初始待处理函数: ['foo63']
2025-08-13 02:39:55,681 - INFO  - 
GENERATE ANNOTATION FOR foo63
2025-08-13 02:39:55,681 - INFO  - ========================================

2025-08-13 02:39:55,682 - INFO  - 函数 foo63 已经初始化
2025-08-13 02:39:55,697 - INFO  - 
GENERATE LOOP INVARIANT FOR foo63
2025-08-13 02:39:55,697 - INFO  - ========================================

2025-08-13 02:39:55,710 - INFO  - file_name: foo63
2025-08-13 02:39:55,723 - DEBUG  - INNER_FLAG: False
2025-08-13 02:39:55,738 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre'}]
2025-08-13 02:39:55,738 - INFO  - Path conditions: [None]
2025-08-13 02:39:55,738 - INFO  - Pre condition: (x == 1) * (y == y@pre)
2025-08-13 02:39:55,739 - INFO  - Loop Condition: x <= 10
2025-08-13 02:39:55,739 - INFO  - Array Names: []
2025-08-13 02:39:55,739 - INFO  - Updated Loop Conditions: ['1 <= 10']
2025-08-13 02:39:55,739 - INFO  - Global Unchanged Variables: []
2025-08-13 02:39:55,739 - INFO  - Non Inductive Variables: ['y']
2025-08-13 02:40:10,432 - INFO  - after const
2025-08-13 02:40:10,433 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-13 02:40:10,433 - INFO  - after not in
2025-08-13 02:40:10,433 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-13 02:40:10,433 - INFO  - after vars
2025-08-13 02:40:10,433 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-13 02:40:10,433 - INFO  - after verification goal
2025-08-13 02:40:10,433 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-13 02:40:13,688 - DEBUG  - invgen reasoning
2025-08-13 02:40:13,688 - DEBUG  - ```c
void foo63(int y) {
    int x = 1;
    
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (x == 1) * (y == \at(y,Pre)) <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - (x - 1)) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y >= 0) ;
          loop invariant  (1 <= x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y >= 0); */

}
```
2025-08-13 02:40:13,688 - INFO  - 生成循环不变量
2025-08-13 02:40:13,688 - INFO  - 
void foo63(int y) {
    int x = 1;
    
    
    
    
            
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - (x - 1)) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y >= 0) ;
          loop invariant  (1 <= x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y >= 0); */

}

2025-08-13 02:40:24,355 - INFO  - syntax Correct
2025-08-13 02:40:27,913 - INFO  - Validate:
2025-08-13 02:40:27,913 - INFO  - [True, True, True]
2025-08-13 02:40:27,913 - INFO  - 
2025-08-13 02:40:27,913 - INFO  - Verify:
2025-08-13 02:40:27,913 - INFO  - [True]
2025-08-13 02:40:27,913 - INFO  - 
2025-08-13 02:40:27,914 - INFO  - 注释过不变量的代码
2025-08-13 02:40:27,914 - INFO  - 
void foo63(int y) {
    int x = 1;
    
    
    
    
            
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - (x - 1)) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y >= 0) ;
          loop invariant  (1 <= x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y >= 0); */

}

2025-08-13 02:40:38,575 - INFO  - syntax Correct
2025-08-13 02:40:42,142 - INFO  - Validate:
2025-08-13 02:40:42,142 - INFO  - [True, True, True]
2025-08-13 02:40:42,142 - INFO  - 
2025-08-13 02:40:42,142 - INFO  - Verify:
2025-08-13 02:40:42,142 - INFO  - [True]
2025-08-13 02:40:42,142 - INFO  - 
2025-08-13 02:40:42,143 - INFO  - ACSL 格式的循环不变量
2025-08-13 02:40:42,143 - INFO  - /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - (x - 1)) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y >= 0) ;
          loop invariant  (1 <= x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-13 02:40:42,143 - INFO  - VST 格式的循环不变量
2025-08-13 02:40:42,143 - INFO  - /*@ Inv
    (((x == 1)&&(y == y@pre)) || (y == 10 - (x - 1)) ) &&
(((x == 1)&&(y == y@pre)) || (y >= 0) ) &&
((1 <= x && x <= 11) )
    */
    
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-13 02:40:42,143 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 02:40:42,143 - INFO  - 继续符号执行
2025-08-13 02:40:42,143 - INFO  - /*@ Inv
    (((x == 1)&&(y == y@pre)) || (y == 10 - (x - 1)) ) &&
(((x == 1)&&(y == y@pre)) || (y >= 0) ) &&
((1 <= x && x <= 11) )
    */
    
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-13 02:40:52,767 - INFO  - syntax Correct
2025-08-13 02:40:56,375 - INFO  - Validate:
2025-08-13 02:40:56,375 - INFO  - [True, True, True]
2025-08-13 02:40:56,375 - INFO  - 
2025-08-13 02:40:56,375 - INFO  - Verify:
2025-08-13 02:40:56,376 - INFO  - [True]
2025-08-13 02:40:56,376 - INFO  - 
2025-08-13 02:40:56,376 - INFO  - CORRECT INVARIANT
2025-08-13 02:41:06,999 - INFO  - syntax Correct
2025-08-13 02:41:10,558 - INFO  - Validate:
2025-08-13 02:41:10,558 - INFO  - [True, True, True]
2025-08-13 02:41:10,558 - INFO  - 
2025-08-13 02:41:10,558 - INFO  - Verify:
2025-08-13 02:41:10,558 - INFO  - [True]
2025-08-13 02:41:10,558 - INFO  - 
2025-08-13 02:41:10,558 - INFO  - ========================================
2025-08-13 02:41:10,558 - INFO  - first_pass:
2025-08-13 02:41:10,558 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 02:41:10,558 - INFO  - ========================================
