2025-08-13 00:00:47,727 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 00:00:47,727 - INFO  - ========================================

2025-08-13 00:00:47,959 - INFO  - 初始待处理函数: ['foo81', 'unknown']
2025-08-13 00:00:47,959 - INFO  - 现在处理函数 unknown

2025-08-13 00:00:47,959 - INFO  - 
GENERATE ANNOTATION FOR foo81
2025-08-13 00:00:47,959 - INFO  - ========================================

2025-08-13 00:00:47,959 - INFO  - 函数 foo81 已经初始化
2025-08-13 00:00:47,974 - INFO  - 
GENERATE LOOP INVARIANT FOR foo81
2025-08-13 00:00:47,974 - INFO  - ========================================

2025-08-13 00:00:47,987 - INFO  - file_name: foo81
2025-08-13 00:00:47,997 - DEBUG  - INNER_FLAG: False
2025-08-13 00:00:48,013 - INFO  - Variable Maps:[{'i': '0', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-13 00:00:48,013 - INFO  - Path conditions: [None]
2025-08-13 00:00:48,013 - INFO  - Pre condition: (i == 0) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-13 00:00:48,013 - INFO  - Loop Condition: unknown()
2025-08-13 00:00:48,013 - INFO  - Array Names: []
2025-08-13 00:00:48,013 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-13 00:00:48,013 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y', 'x']
2025-08-13 00:00:48,013 - INFO  - Non Inductive Variables: []
2025-08-13 00:01:17,578 - INFO  - after const
2025-08-13 00:01:17,578 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-08-13 00:01:17,579 - INFO  - after not in
2025-08-13 00:01:17,579 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-08-13 00:01:17,579 - INFO  - after vars
2025-08-13 00:01:17,579 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-08-13 00:01:17,579 - INFO  - after verification goal
2025-08-13 00:01:17,579 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant  ((i == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-08-13 00:01:21,888 - DEBUG  - invgen reasoning
2025-08-13 00:01:21,888 - DEBUG  - ```c
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo81(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
        /*@
          loop invariant  ((i == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (i <= y);
          loop invariant  0 <= i <= y;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
        */
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
    
    /*@ assert (i < y) ==> (i >= 0); */
  
}
```
2025-08-13 00:01:21,888 - INFO  - 生成循环不变量
2025-08-13 00:01:21,888 - INFO  - 
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo81(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
        /*@
          loop invariant  ((i == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (i <= y);
          loop invariant  0 <= i <= y;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
        */
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
    
    /*@ assert (i < y) ==> (i >= 0); */
  
}

2025-08-13 00:01:32,670 - INFO  - syntax Correct
2025-08-13 00:01:36,242 - INFO  - Validate:
2025-08-13 00:01:36,242 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 00:01:36,242 - INFO  - 
2025-08-13 00:01:36,242 - INFO  - Verify:
2025-08-13 00:01:36,242 - INFO  - [True]
2025-08-13 00:01:36,242 - INFO  - 
2025-08-13 00:01:36,242 - INFO  - 注释过不变量的代码
2025-08-13 00:01:36,242 - INFO  - 
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo81(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
        /*@
          loop invariant  ((i == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (i <= y);
          loop invariant  0 <= i <= y;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
        */
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
    
    /*@ assert (i < y) ==> (i >= 0); */
  
}

2025-08-13 00:01:46,981 - INFO  - syntax Correct
2025-08-13 00:01:50,556 - INFO  - Validate:
2025-08-13 00:01:50,556 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 00:01:50,556 - INFO  - 
2025-08-13 00:01:50,556 - INFO  - Verify:
2025-08-13 00:01:50,556 - INFO  - [True]
2025-08-13 00:01:50,556 - INFO  - 
2025-08-13 00:01:50,556 - INFO  - ACSL 格式的循环不变量
2025-08-13 00:01:50,556 - INFO  - /*@
          loop invariant  ((i == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (i <= y);
          loop invariant  0 <= i <= y;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
        */
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
2025-08-13 00:01:50,557 - INFO  - VST 格式的循环不变量
2025-08-13 00:01:50,557 - INFO  - /*@ Inv
    (((i == 0)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (i <= y)) &&
(0 <= i && i <= y) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre) &&
(x == x@pre)
    */
    
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
2025-08-13 00:01:50,557 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 00:01:50,557 - INFO  - 继续符号执行
2025-08-13 00:01:50,557 - INFO  - /*@ Inv
    (((i == 0)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (i <= y)) &&
(0 <= i && i <= y) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre) &&
(x == x@pre)
    */
    
        while (unknown()) {
            if ( i < y )
            {
                i  = (i + 1);
            }
        }
2025-08-13 00:02:01,299 - INFO  - syntax Correct
2025-08-13 00:02:04,880 - INFO  - Validate:
2025-08-13 00:02:04,880 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 00:02:04,880 - INFO  - 
2025-08-13 00:02:04,880 - INFO  - Verify:
2025-08-13 00:02:04,880 - INFO  - [True]
2025-08-13 00:02:04,880 - INFO  - 
2025-08-13 00:02:04,880 - INFO  - CORRECT INVARIANT
2025-08-13 00:02:15,611 - INFO  - syntax Correct
2025-08-13 00:02:19,188 - INFO  - Validate:
2025-08-13 00:02:19,189 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 00:02:19,189 - INFO  - 
2025-08-13 00:02:19,189 - INFO  - Verify:
2025-08-13 00:02:19,189 - INFO  - [True]
2025-08-13 00:02:19,189 - INFO  - 
2025-08-13 00:02:19,189 - INFO  - ========================================
2025-08-13 00:02:19,189 - INFO  - first_pass:
2025-08-13 00:02:19,189 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 00:02:19,189 - INFO  - ========================================
