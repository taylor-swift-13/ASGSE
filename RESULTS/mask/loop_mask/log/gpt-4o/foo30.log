2025-09-01 18:15:53,176 - INFO  - 
FUNCTION INITIALIZATION
2025-09-01 18:15:53,176 - INFO  - ========================================

2025-09-01 18:15:53,240 - INFO  - 初始待处理函数: ['foo30', 'unknown']
2025-09-01 18:15:53,240 - INFO  - 现在处理函数 unknown

2025-09-01 18:15:53,240 - INFO  - 
GENERATE ANNOTATION FOR foo30
2025-09-01 18:15:53,240 - INFO  - ========================================

2025-09-01 18:15:53,240 - INFO  - 函数 foo30 已经初始化
2025-09-01 18:15:53,249 - INFO  - 
GENERATE LOOP INVARIANT FOR foo30
2025-09-01 18:15:53,249 - INFO  - ========================================

2025-09-01 18:15:53,260 - INFO  - file_name: foo30
2025-09-01 18:15:53,269 - DEBUG  - INNER_FLAG: False
2025-09-01 18:15:53,275 - INFO  - Variable Maps:[{'i': '0', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-09-01 18:15:53,275 - INFO  - Path conditions: ['x@pre >= y@pre && y@pre >= 0']
2025-09-01 18:15:53,275 - INFO  - Pre condition: x@pre >= y@pre && y@pre >= 0 && (i == 0) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-09-01 18:15:53,275 - INFO  - Loop Condition: unknown()
2025-09-01 18:15:53,275 - INFO  - Array Names: []
2025-09-01 18:15:53,275 - INFO  - Updated Loop Conditions: ['unknown()']
2025-09-01 18:15:53,275 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y', 'x']
2025-09-01 18:15:53,275 - INFO  - Non Inductive Variables: []
2025-09-01 18:15:53,275 - INFO  - Unchanged Arrays (Read-only): []
2025-09-01 18:16:06,353 - INFO  - think in natural language: ### Formal Verification Analysis of the Given C Code ###

#### a. Loop Purpose and Structure ####

**Purpose:**
The purpose of the loop is to increment the variable `i` while ensuring that it does not exceed the value of `y`. The loop continues executing as long as the governing condition `unknown()` evaluates to true.

**Structure:**
- **Governing Condition:** `while (unknown())`  
  The loop executes as long as the function `unknown()` returns a non-zero value (true). Since `unknown()` is a placeholder for an external or non-deterministic condition, its behavior is unspecified in the given code.
  
- **Loop Body:**
  - If `i < y`, the value of `i` is incremented by 1 (`i = i + 1`).
  - Otherwise, the loop does nothing, and the value of `i` remains unchanged.

- **Relevant Variables:**
  - `i`: The loop counter, initialized to 0 before the loop starts.
  - `y`: The upper bound for `i`, as the loop ensures `i` never exceeds `y`.
  - `x`, `z1`, `z2`, `z3`: These variables are declared but unused within the loop. They are irrelevant to the loop's behavior.

---

#### b. Sample and Analyze Variable Values ####

**Pre-Loop Sampling:**
- `i = 0` (initialized before the loop starts)
- `y`: Some positive integer (based on the pre-condition `y >= 0`).
- Other variables (`x`, `z1`, `z2`, `z3`) are irrelevant to the loop.

**Post-Iteration Sampling:**  
Assuming `unknown()` evaluates to true for at least five iterations:
1. **Iteration 1:**  
   - Condition: `i < y` (true if `i = 0` and `y > 0`).  
   - Action: `i = i + 1`.  
   - Result: `i = 1`.  

2. **Iteration 2:**  
   - Condition: `i < y` (true if `i = 1` and `y > 1`).  
   - Action: `i = i + 1`.  
   - Result: `i = 2`.  

3. **Iteration 3:**  
   - Condition: `i < y` (true if `i = 2` and `y > 2`).  
   - Action: `i = i + 1`.  
   - Result: `i = 3`.  

4. **Iteration 4:**  
   - Condition: `i < y` (true if `i = 3` and `y > 3`).  
   - Action: `i = i + 1`.  
   - Result: `i = 4`.  

5. **Iteration 5:**  
   - Condition: `i < y` (true if `i = 4` and `y > 4`).  
   - Action: `i = i + 1`.  
   - Result: `i = 5`.  

**Post-Loop Sampling:**  
The loop terminates when `unknown()` evaluates to false. At this point:
- `i` will have a value between `0` and `y` (inclusive).
- `y` remains unchanged.
- Other variables (`x`, `z1`, `z2`, `z3`) remain irrelevant.

---

#### d. Loop Invariant Discussion ####

**Proposed Loop Invariant:**  
`0 <= i <= y`

**Explanation:**  
- The invariant states that `i` is always non-negative and does not exceed `y`.  
- Initially, `i = 0`, which satisfies the invariant.  
- During each iteration, if `i < y`, `i` is incremented by 1. Since `i` starts at 0 and increases only when `i < y`, it will always stay within the bounds `0 <= i <= y`.  
- If `i >= y`, the loop body does nothing, and `i` remains unchanged, preserving the invariant.

---

#### e. Establishment ####

**Establishment of the Invariant:**  
Before the first iteration:
- `i = 0` (initialization).
- From the pre-condition, `y >= 0`.  
Thus, `0 <= i <= y` is true initially, establishing the invariant.

---

#### f. Preservation ####

**Preservation of the Invariant:**  
Assume the invariant `0 <= i <= y` holds at the beginning of an iteration, and the loop condition `unknown()` is true:
- If `i < y`, `i` is incremented by 1. Since `i + 1 <= y`, the invariant still holds.
- If `i >= y`, the loop body does nothing, and `i` remains unchanged. Thus, the invariant is preserved.

In both cases, the invariant `0 <= i <= y` holds at the end of the iteration.

---

#### g. Termination Analysis ####

**State of Variables at Termination:**  
The loop terminates when `unknown()` evaluates to false. At this point:
- The invariant `0 <= i <= y` still holds.
- The value of `i` will be some integer between `0` and `y` (inclusive).

**Why the Invariant Remains Valid:**  
Since the loop body does not modify `i` unless `i < y`, and the loop terminates without modifying `i`, the invariant `0 <= i <= y` remains valid at termination.

---

#### h. Post-condition Correctness ####

**Post-condition Evaluation:**  
The code does not explicitly define a post-condition. However, based on the loop invariant and termination condition:
- Upon termination, `i` satisfies `0 <= i <= y`.
- This is consistent with the behavior established by the invariant.

**Conclusion:**  
The invariant, combined with the termination condition (`unknown() == false`), ensures that `i` remains within the bounds specified by the invariant (`0 <= i <= y`). Thus, the implicit post-condition is correct.
2025-09-01 18:16:06,353 - INFO  - after const
2025-09-01 18:16:06,353 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-09-01 18:16:06,354 - INFO  - after not in
2025-09-01 18:16:06,354 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-09-01 18:16:06,354 - INFO  - after vars
2025-09-01 18:16:06,354 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-09-01 18:16:06,354 - INFO  - after verification goal
2025-09-01 18:16:06,354 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_VERFICATION_GOAL ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            
2025-09-01 18:16:06,358 - INFO  - 模板的内容为


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          PLACE_HOLDER_FOR_LOOP
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}
2025-09-01 18:16:06,361 - INFO  - 模板的内容为


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}
2025-09-01 18:16:06,365 - INFO  - 模板的内容为


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_VERFICATION_GOAL ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}
2025-09-01 18:16:06,365 - DEBUG  - user_prompt_traival
2025-09-01 18:16:06,365 - DEBUG  - Role:
You are a helpful AI software assistant specializing in reasoning about code behavior. Your task is to analyze C programs and identify loop invariants that can be used to verify program properties using Frama-C.

Task:
Given a C program with a loop, generate the necessary loop invariants in ACSL (ANSI/ISO C Specification Language) annotations. These invariants will help Frama-C verify the post-condition of the program.



Inputs:
- The pre-condition before the loop begins execution.
- A full C loop program with invariant annotations containing `PLACE_HOLDER` that need to be filled.

Output:
Provide the complete C code with the loop invariant and other relevant ACSL annotations, where all placeholders are correctly filled in ```c ```.

Rules:
- Do not modify the the existing annotations template. You are only allowed to repalce the placeholders PLACE_HOLDER_TO_FILL before loop with appropriate logical expressions to make the invariants meaningful and valid.
- Only use keywords and constructs supported in ACSL annotations for loops.
- Do not add any natural language explanations after ACSL annotations.
- When `unkonwn()` used as the loop condition, the number of loop iterations can be any non-negative integer, and the invariant must hold for all cases.





Consider the following C loop:

Pre-condition: `\at(x,Pre) >= \at(y,Pre) && \at(y,Pre) >= 0 && (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre))`

Loop program: `


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          PLACE_HOLDER_FOR_LOOP
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}`



2025-09-01 18:16:06,365 - DEBUG  - user_prompt_template
2025-09-01 18:16:06,365 - DEBUG  - Role:
You are a helpful AI software assistant specializing in reasoning about code behavior. Your task is to analyze C programs and identify loop invariants that can be used to verify program properties using Frama-C.

Task:
Given a C program with a loop, generate the necessary loop invariants in ACSL (ANSI/ISO C Specification Language) annotations. These invariants will help Frama-C verify the post-condition of the program.



Inputs:
- The pre-condition before the loop begins execution.
- A full C loop program with invariant annotations containing `PLACE_HOLDER` that need to be filled.

Output:
Provide the complete C code with the loop invariant and other relevant ACSL annotations, where all placeholders are correctly filled in ```c ```.

Rules:
- Do not modify the the existing annotations template. You are only allowed to repalce the placeholders PLACE_HOLDER_TO_FILL before loop with appropriate logical expressions to make the invariants meaningful and valid.
- Only use keywords and constructs supported in ACSL annotations for loops.
- Do not add any natural language explanations after ACSL annotations.
- When `unkonwn()` used as the loop condition, the number of loop iterations can be any non-negative integer, and the invariant must hold for all cases.

- Generate loop invariants with equality constraints as comprehensively as possible.



Consider the following C loop:

Pre-condition: `\at(x,Pre) >= \at(y,Pre) && \at(y,Pre) >= 0 && (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre))`

Loop program: `


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}`



2025-09-01 18:16:06,365 - DEBUG  - user_prompt_verification
2025-09-01 18:16:06,365 - DEBUG  - Role:
You are a helpful AI software assistant specializing in reasoning about code behavior. Your task is to analyze C programs and identify loop invariants that can be used to verify program properties using Frama-C.

Task:
Given a C program with a loop, generate the necessary loop invariants in ACSL (ANSI/ISO C Specification Language) annotations. These invariants will help Frama-C verify the post-condition of the program.



Inputs:
- The pre-condition before the loop begins execution.
- A full C loop program with invariant annotations containing `PLACE_HOLDER` that need to be filled.

Output:
Provide the complete C code with the loop invariant and other relevant ACSL annotations, where all placeholders are correctly filled in ```c ```.

Rules:
- Do not modify the the existing annotations template. You are only allowed to repalce the placeholders PLACE_HOLDER_TO_FILL before loop with appropriate logical expressions to make the invariants meaningful and valid.
- Only use keywords and constructs supported in ACSL annotations for loops.
- Do not add any natural language explanations after ACSL annotations.
- When `unkonwn()` used as the loop condition, the number of loop iterations can be any non-negative integer, and the invariant must hold for all cases.

- Generate loop invariants with equality constraints as comprehensively as possible.
- Please first try to directly use the verification goal as the loop invariant at `PLACE_HOLDER_VERFICATION_GOAL`. Often, the verification goal (assertion) also holds throughout the loop; in that case, it can be used directly as the invariant.


Consider the following C loop:

Pre-condition: `\at(x,Pre) >= \at(y,Pre) && \at(y,Pre) >= 0 && (i == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre))`

Loop program: `


/*@
    requires x >= y  && y >= 0;
    */
    
void foo30(int x, int y,int z1,int z2,int z3) {

    int i = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_VERFICATION_GOAL ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }

    }
            

    /* mask_1 */

}`



2025-09-01 18:16:10,131 - DEBUG  - invgen reasoning
2025-09-01 18:16:10,131 - DEBUG  - ```c
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant 0 <= i <= y;
        loop invariant x == \at(x,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z3 == \at(z3,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}
```
2025-09-01 18:16:12,813 - DEBUG  - invgen reasoning
2025-09-01 18:16:12,813 - DEBUG  - ```c
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}
```
2025-09-01 18:16:17,427 - DEBUG  - invgen reasoning
2025-09-01 18:16:17,427 - DEBUG  - ```c
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant i <= y;
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}
```
2025-09-01 18:16:17,427 - INFO  - 生成循环不变量
2025-09-01 18:16:17,427 - INFO  - 
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}

2025-09-01 18:16:28,508 - INFO  - syntax Correct
2025-09-01 18:16:32,329 - INFO  - Validate:
2025-09-01 18:16:32,329 - INFO  - [True, True, True, True, True, True]
2025-09-01 18:16:32,329 - INFO  - 
2025-09-01 18:16:32,329 - INFO  - Verify:
2025-09-01 18:16:32,329 - INFO  - []
2025-09-01 18:16:32,330 - INFO  - 
2025-09-01 18:16:32,330 - INFO  - 注释过不变量的代码
2025-09-01 18:16:32,330 - INFO  - 
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}

2025-09-01 18:16:47,177 - INFO  - ACSL 格式的循环不变量
2025-09-01 18:16:47,178 - INFO  - /*@
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }
2025-09-01 18:16:47,178 - INFO  - VST 格式的循环不变量
2025-09-01 18:16:47,178 - INFO  - /*@ Inv
    (0 <= i && i <= y) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre) &&
(x == x@pre
        loop assigns i
        loop variant y - i)
    */
    
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }
2025-09-01 18:16:47,179 - INFO  - PARTIAL CORRECT INVARIANT
2025-09-01 18:16:47,179 - INFO  - 继续符号执行
2025-09-01 18:16:47,179 - INFO  - 
/*@
    requires x >= y  && y >= 0;
*/
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;

    /*@
        loop invariant 0 <= i <= y;
        loop invariant z3 == \at(z3,Pre);
        loop invariant z2 == \at(z2,Pre);
        loop invariant z1 == \at(z1,Pre);
        loop invariant y == \at(y,Pre);
        loop invariant x == \at(x,Pre);
        loop assigns i;
        loop variant y - i;
    */
    while (unknown()) {
        if (i < y) {
            i = i + 1;
        }
    }

    /* mask_1 */
}

2025-09-01 18:16:58,212 - INFO  - syntax Correct
2025-09-01 18:17:02,035 - INFO  - Validate:
2025-09-01 18:17:02,035 - INFO  - [True, True, True, True, True, True]
2025-09-01 18:17:02,035 - INFO  - 
2025-09-01 18:17:02,035 - INFO  - Verify:
2025-09-01 18:17:02,035 - INFO  - []
2025-09-01 18:17:02,035 - INFO  - 
2025-09-01 18:17:02,035 - INFO  - CORRECT INVARIANT
2025-09-01 18:17:16,834 - INFO  - ========================================
2025-09-01 18:17:16,834 - INFO  - first_pass:
2025-09-01 18:17:16,834 - INFO  - syntax=1, valid=1,satisfy=1
2025-09-01 18:17:16,835 - INFO  - ========================================
