2025-08-17 23:04:03,675 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 23:04:03,675 - INFO  - ========================================

2025-08-17 23:04:03,698 - INFO  - 初始待处理函数: ['goo19', 'ThrABAutoChooseFun']
2025-08-17 23:04:03,699 - INFO  - 现在处理函数 ThrABAutoChooseFun

2025-08-17 23:04:03,706 - INFO  - 
GENERATE ANNOTATION FOR ThrABAutoChooseFun
2025-08-17 23:04:03,706 - INFO  - ========================================

2025-08-17 23:04:03,706 - INFO  - 函数 ThrABAutoChooseFun 已经初始化
2025-08-17 23:04:03,706 - INFO  - 开始生成 ThrABAutoChooseFun 的注释代码
2025-08-17 23:04:03,723 - INFO  - 
GENERATE FUNCTION SUMMARY FOR ThrABAutoChooseFun
2025-08-17 23:04:03,723 - INFO  - ========================================

2025-08-17 23:04:03,743 - INFO  - 开始生成完整的 ThrABAutoChooseFun 的注释代码
2025-08-17 23:04:03,748 - INFO  - 开始生成 ThrABAutoChooseFun 的 ACSL 规约
2025-08-17 23:04:20,151 - INFO  - 大模型生成的ThrABAutoChooseFun.c 的规约的内容为
typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrABAutoChoose
{
	SThrDistribute			mThrDistribute;
	
} ThrABAutoChoose;

/*@
    requires \valid(pIp);
    ensures (pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0xCC;
    ensures (pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x33;
    ensures !(pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) && !(pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x00;
    */
void ThrABAutoChooseFun(ThrABAutoChoose *pIp)
{
    if ((pIp -> mThrDistribute.stateFlag[0] == 1) &&
        (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0xCC ;
    }
    else if ((pIp -> mThrDistribute.stateFlag[0] == 0) &&
             (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0x33 ;
    }
    else
    {
        pIp -> mThrDistribute.flgABChoose = 0x00 ;
    }

    return ;
}

2025-08-17 23:04:20,153 - INFO  - 
GENERATE ANNOTATION FOR goo19
2025-08-17 23:04:20,154 - INFO  - ========================================

2025-08-17 23:04:20,155 - INFO  - 函数 goo19 已经初始化
2025-08-17 23:04:20,155 - INFO  - 开始生成 goo19 的注释代码
2025-08-17 23:04:20,175 - INFO  - 
GENERATE FUNCTION SUMMARY FOR goo19
2025-08-17 23:04:20,175 - INFO  - ========================================

2025-08-17 23:04:20,205 - INFO  - 开始生成完整的 goo19 的注释代码
2025-08-17 23:04:20,213 - INFO  - 开始生成 goo19 的 ACSL 规约
2025-08-17 23:04:20,217 - INFO  - 大模型生成的goo19.c 的规约的内容为



typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrABAutoChoose
{
	SThrDistribute			mThrDistribute;
	
} ThrABAutoChoose;

/*@
    requires \valid(pIp);
    ensures (pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0xCC;
    ensures (pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x33;
    ensures !(pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) && !(pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x00;
    */
void ThrABAutoChooseFun(ThrABAutoChoose *pIp)
{
    if ((pIp -> mThrDistribute.stateFlag[0] == 1) &&
        (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0xCC ;
    }
    else if ((pIp -> mThrDistribute.stateFlag[0] == 0) &&
             (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0x33 ;
    }
    else
    {
        pIp -> mThrDistribute.flgABChoose = 0x00 ;
    }

    return ;
}
void goo19(ThrABAutoChoose *pIp)
{

	pIp -> mThrDistribute.stateFlag[0] = 0;
	pIp -> mThrDistribute.stateFlag[1] = 0;

	ThrABAutoChooseFun(pIp);

    /*@ assert pIp -> mThrDistribute.flgABChoose == 0x00; */ 
    /*@ assert pIp -> mThrDistribute.stateFlag[0] == 0; */    
    /*@ assert pIp -> mThrDistribute.stateFlag[1] == 0; */ 
    /*@ assert pIp -> mThrDistribute.wPulse == \at(pIp -> mThrDistribute.wPulse, Pre); */  
    
}
2025-08-17 23:04:20,220 - INFO  - 
SUMMARY FOR goo19
2025-08-17 23:04:20,220 - INFO  - ========================================

2025-08-17 23:04:20,221 - INFO  - 
函数 goo19 的 VST Summary 为:
/*@
With pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l
Require pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l)
Ensure (replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 0 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] != 1 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] != 1 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 0 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 0 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] == 1 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 0 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] == 1 && replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 0, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse))
*/
2025-08-17 23:04:20,221 - INFO  - 
函数 goo19 的 ACSL Summary 为:

2025-08-17 23:04:20,271 - INFO  - 
VERIFICATION FOR goo19
2025-08-17 23:04:20,271 - INFO  - ========================================

2025-08-17 23:04:41,595 - INFO  - syntax Correct
2025-08-17 23:04:48,830 - INFO  - Loop Invariant:
2025-08-17 23:04:48,830 - INFO  - []
2025-08-17 23:04:48,830 - INFO  - 
2025-08-17 23:04:48,830 - INFO  - Assertion:
2025-08-17 23:04:48,830 - INFO  - [False, False, False, False]
2025-08-17 23:04:48,830 - INFO  - 
2025-08-17 23:04:48,831 - INFO  - Post Condition:
2025-08-17 23:04:48,831 - INFO  - [True, True, True]
2025-08-17 23:04:48,831 - INFO  - 
2025-08-17 23:04:48,851 - INFO  - 大模型生成的goo19.c 的规约的内容为



typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrABAutoChoose
{
	SThrDistribute			mThrDistribute;
	
} ThrABAutoChoose;

/*@
    requires \valid(pIp);
    ensures (pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0xCC;
    ensures (pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x33;
    ensures !(pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) && !(pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x00;
    */
void ThrABAutoChooseFun(ThrABAutoChoose *pIp)
{
    if ((pIp -> mThrDistribute.stateFlag[0] == 1) &&
        (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0xCC ;
    }
    else if ((pIp -> mThrDistribute.stateFlag[0] == 0) &&
             (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0x33 ;
    }
    else
    {
        pIp -> mThrDistribute.flgABChoose = 0x00 ;
    }

    return ;
}
void goo19(ThrABAutoChoose *pIp)
{

	pIp -> mThrDistribute.stateFlag[0] = 0;
	pIp -> mThrDistribute.stateFlag[1] = 0;

	ThrABAutoChooseFun(pIp);

    /*@ assert pIp -> mThrDistribute.flgABChoose == 0x00; */ 
    /*@ assert pIp -> mThrDistribute.stateFlag[0] == 0; */    
    /*@ assert pIp -> mThrDistribute.stateFlag[1] == 0; */ 
    /*@ assert pIp -> mThrDistribute.wPulse == \at(pIp -> mThrDistribute.wPulse, Pre); */  
    
}
2025-08-17 23:05:10,081 - INFO  - syntax Correct
2025-08-17 23:05:17,244 - INFO  - Loop Invariant:
2025-08-17 23:05:17,245 - INFO  - []
2025-08-17 23:05:17,245 - INFO  - 
2025-08-17 23:05:17,245 - INFO  - Assertion:
2025-08-17 23:05:17,245 - INFO  - [False, False, False, False]
2025-08-17 23:05:17,245 - INFO  - 
2025-08-17 23:05:17,245 - INFO  - Post Condition:
2025-08-17 23:05:17,245 - INFO  - [True, True, True]
2025-08-17 23:05:17,245 - INFO  - 
2025-08-17 23:05:17,268 - INFO  - 大模型生成的goo19.c 的规约的内容为



typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrABAutoChoose
{
	SThrDistribute			mThrDistribute;
	
} ThrABAutoChoose;

/*@
    requires \valid(pIp);
    ensures (pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0xCC;
    ensures (pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x33;
    ensures !(pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) && !(pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x00;
    */
void ThrABAutoChooseFun(ThrABAutoChoose *pIp)
{
    if ((pIp -> mThrDistribute.stateFlag[0] == 1) &&
        (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0xCC ;
    }
    else if ((pIp -> mThrDistribute.stateFlag[0] == 0) &&
             (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0x33 ;
    }
    else
    {
        pIp -> mThrDistribute.flgABChoose = 0x00 ;
    }

    return ;
}
void goo19(ThrABAutoChoose *pIp)
{

	pIp -> mThrDistribute.stateFlag[0] = 0;
	pIp -> mThrDistribute.stateFlag[1] = 0;

	ThrABAutoChooseFun(pIp);

    /*@ assert pIp -> mThrDistribute.flgABChoose == 0x00; */ 
    /*@ assert pIp -> mThrDistribute.stateFlag[0] == 0; */    
    /*@ assert pIp -> mThrDistribute.stateFlag[1] == 0; */ 
    /*@ assert pIp -> mThrDistribute.wPulse == \at(pIp -> mThrDistribute.wPulse, Pre); */  
    
}
2025-08-17 23:05:38,528 - INFO  - syntax Correct
2025-08-17 23:05:45,652 - INFO  - Loop Invariant:
2025-08-17 23:05:45,653 - INFO  - []
2025-08-17 23:05:45,653 - INFO  - 
2025-08-17 23:05:45,653 - INFO  - Assertion:
2025-08-17 23:05:45,653 - INFO  - [False, False, False, False]
2025-08-17 23:05:45,653 - INFO  - 
2025-08-17 23:05:45,653 - INFO  - Post Condition:
2025-08-17 23:05:45,653 - INFO  - [True, True, True]
2025-08-17 23:05:45,653 - INFO  - 
2025-08-17 23:05:45,677 - INFO  - 大模型生成的goo19.c 的规约的内容为



typedef struct TAG_UPS_2MS
{	
	int flgABChoose;				
    int wPulse;
	int stateFlag[2];				
    
} SThrDistribute;
typedef struct __ThrABAutoChoose
{
	SThrDistribute			mThrDistribute;
	
} ThrABAutoChoose;

/*@
    requires \valid(pIp);
    ensures (pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0xCC;
    ensures (pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x33;
    ensures !(pIp->mThrDistribute.stateFlag[0] == 1 && pIp->mThrDistribute.stateFlag[1] == 1) && !(pIp->mThrDistribute.stateFlag[0] == 0 && pIp->mThrDistribute.stateFlag[1] == 1) ==> pIp->mThrDistribute.flgABChoose == 0x00;
    */
void ThrABAutoChooseFun(ThrABAutoChoose *pIp)
{
    if ((pIp -> mThrDistribute.stateFlag[0] == 1) &&
        (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0xCC ;
    }
    else if ((pIp -> mThrDistribute.stateFlag[0] == 0) &&
             (pIp -> mThrDistribute.stateFlag[1] == 1))
    {
        pIp -> mThrDistribute.flgABChoose = 0x33 ;
    }
    else
    {
        pIp -> mThrDistribute.flgABChoose = 0x00 ;
    }

    return ;
}
void goo19(ThrABAutoChoose *pIp)
{

	pIp -> mThrDistribute.stateFlag[0] = 0;
	pIp -> mThrDistribute.stateFlag[1] = 0;

	ThrABAutoChooseFun(pIp);

    /*@ assert pIp -> mThrDistribute.flgABChoose == 0x00; */ 
    /*@ assert pIp -> mThrDistribute.stateFlag[0] == 0; */    
    /*@ assert pIp -> mThrDistribute.stateFlag[1] == 0; */ 
    /*@ assert pIp -> mThrDistribute.wPulse == \at(pIp -> mThrDistribute.wPulse, Pre); */  
    
}
2025-08-17 23:05:45,677 - INFO  - ========================================
2025-08-17 23:05:45,677 - INFO  - first_pass:
2025-08-17 23:05:45,677 - INFO  - syntax=1, valid=1,satisfy=None
2025-08-17 23:05:45,677 - INFO  - ========================================
