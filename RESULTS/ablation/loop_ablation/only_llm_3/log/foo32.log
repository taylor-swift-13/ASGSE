2025-08-15 10:41:00,964 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:41:00,964 - INFO  - ========================================

2025-08-15 10:41:01,030 - INFO  - 初始待处理函数: ['foo32']
2025-08-15 10:41:01,030 - INFO  - 
GENERATE ANNOTATION FOR foo32
2025-08-15 10:41:01,030 - INFO  - ========================================

2025-08-15 10:41:01,031 - INFO  - 函数 foo32 已经初始化
2025-08-15 10:41:01,045 - INFO  - 
GENERATE LOOP INVARIANT FOR foo32
2025-08-15 10:41:01,045 - INFO  - ========================================

2025-08-15 10:41:01,058 - INFO  - file_name: foo32
2025-08-15 10:41:01,068 - DEBUG  - INNER_FLAG: False
2025-08-15 10:41:01,084 - INFO  - Variable Maps:[{'x': '-50', 'y': 'y@pre'}]
2025-08-15 10:41:01,084 - INFO  - Path conditions: [None]
2025-08-15 10:41:01,084 - INFO  - Pre condition: (x == -50) * (y == y@pre)
2025-08-15 10:41:01,084 - INFO  - Loop Condition: x < 0
2025-08-15 10:41:01,084 - INFO  - Array Names: []
2025-08-15 10:41:01,084 - INFO  - Updated Loop Conditions: ['-50 < 0']
2025-08-15 10:41:01,085 - INFO  - Global Unchanged Variables: []
2025-08-15 10:41:01,085 - INFO  - Non Inductive Variables: []
2025-08-15 10:41:07,285 - DEBUG  - invgen reasoning
2025-08-15 10:41:07,286 - DEBUG  - ```c
void foo32(int y) {

    int x = -50;
  
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant x <= y * (y - \at(y, Pre)) / 2 + \at(x, Pre);
      loop invariant y >= \at(y, Pre);
    */
    while (x < 0) {
      
      x = x + y;
      y = y + 1;
      
    }
            
    /*@ assert y > 0; */
  
}
```
2025-08-15 10:41:07,286 - INFO  - 生成循环不变量
2025-08-15 10:41:07,286 - INFO  - 
void foo32(int y) {

    int x = -50;
  
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant x <= y * (y - \at(y, Pre)) / 2 + \at(x, Pre);
      loop invariant y >= \at(y, Pre);
    */
    while (x < 0) {
      
      x = x + y;
      y = y + 1;
      
    }
            
    /*@ assert y > 0; */
  
}

2025-08-15 10:41:07,286 - INFO  - 注释过不变量的代码
2025-08-15 10:41:07,286 - INFO  - 
void foo32(int y) {

    int x = -50;
  
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant x <= y * (y - \at(y, Pre)) / 2 + \at(x, Pre);
      loop invariant y >= \at(y, Pre);
    */
    while (x < 0) {
      
      x = x + y;
      y = y + 1;
      
    }
            
    /*@ assert y > 0; */
  
}

2025-08-15 10:41:07,478 - INFO  - syntax Error
[kernel] Parsing 3_output/loop/foo32.c (with preprocessing)
[kernel:annot-error] 3_output/loop/foo32.c:9: Warning: 
  unbound logic variable x. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

2025-08-15 10:41:07,479 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:41:07,479 - INFO  - /*@
      loop invariant x <= y * (y - \at(y, Pre)) / 2 + \at(x, Pre);
      loop invariant y >= \at(y, Pre);
    */
    while (x < 0) {
      
      x = x + y;
      y = y + 1;
      
    }
2025-08-15 10:41:07,479 - INFO  - VST 格式的循环不变量
2025-08-15 10:41:07,479 - INFO  - /*@ Inv
    (x <= y * (y - y@pre) / 2 + x@pre) &&
(y >= y@pre)
    */
    
    while (x < 0) {
      
      x = x + y;
      y = y + 1;
      
    }
2025-08-15 10:41:07,645 - INFO  - syntax Error
[kernel] Parsing 3_output/loop/foo32.c (with preprocessing)
[kernel:annot-error] 3_output/loop/foo32.c:9: Warning: 
  unbound logic variable x. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

2025-08-15 10:41:07,823 - INFO  - syntax Error
[kernel] Parsing 3_output/loop/foo32.c (with preprocessing)
[kernel:annot-error] 3_output/loop/foo32.c:9: Warning: 
  unbound logic variable x. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

2025-08-15 10:41:07,823 - INFO  - ========================================
2025-08-15 10:41:07,823 - INFO  - first_pass:
2025-08-15 10:41:07,823 - INFO  - syntax=None, valid=None,satisfy=None
2025-08-15 10:41:07,823 - INFO  - ========================================
