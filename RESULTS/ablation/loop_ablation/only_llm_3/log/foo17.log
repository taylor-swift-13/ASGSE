2025-08-15 11:07:22,097 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:07:22,097 - INFO  - ========================================

2025-08-15 11:07:22,227 - INFO  - 初始待处理函数: ['foo17', 'unknown']
2025-08-15 11:07:22,227 - INFO  - 现在处理函数 unknown

2025-08-15 11:07:22,227 - INFO  - 
GENERATE ANNOTATION FOR foo17
2025-08-15 11:07:22,228 - INFO  - ========================================

2025-08-15 11:07:22,228 - INFO  - 函数 foo17 已经初始化
2025-08-15 11:07:22,245 - INFO  - 
GENERATE LOOP INVARIANT FOR foo17
2025-08-15 11:07:22,245 - INFO  - ========================================

2025-08-15 11:07:22,262 - INFO  - file_name: foo17
2025-08-15 11:07:22,272 - DEBUG  - INNER_FLAG: False
2025-08-15 11:07:22,288 - INFO  - Variable Maps:[{'c': '0', 'n': 'n@pre'}]
2025-08-15 11:07:22,288 - INFO  - Path conditions: [None]
2025-08-15 11:07:22,288 - INFO  - Pre condition: (c == 0) * (n == n@pre)
2025-08-15 11:07:22,288 - INFO  - Loop Condition: unknown()
2025-08-15 11:07:22,288 - INFO  - Array Names: []
2025-08-15 11:07:22,288 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-15 11:07:22,288 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 11:07:22,289 - INFO  - Non Inductive Variables: ['c']
2025-08-15 11:07:25,385 - DEBUG  - invgen reasoning
2025-08-15 11:07:25,385 - DEBUG  - ```c
int unknown();
/*@ requires n > 0; */
void foo17(int n)  {

    int c = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant c >= 0;
        loop invariant c <= n;
        loop invariant n > 0;
        loop invariant (c != n) ==> (c >= 0);
    */
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
    /*@ assert (c != n) ==> (c >= 0); */

}
```
2025-08-15 11:07:25,385 - INFO  - 生成循环不变量
2025-08-15 11:07:25,385 - INFO  - 
int unknown();
/*@ requires n > 0; */
void foo17(int n)  {

    int c = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant c >= 0;
        loop invariant c <= n;
        loop invariant n > 0;
        loop invariant (c != n) ==> (c >= 0);
    */
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
    /*@ assert (c != n) ==> (c >= 0); */

}

2025-08-15 11:07:25,386 - INFO  - 注释过不变量的代码
2025-08-15 11:07:25,386 - INFO  - 
int unknown();
/*@ requires n > 0; */
void foo17(int n)  {

    int c = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant c >= 0;
        loop invariant c <= n;
        loop invariant n > 0;
        loop invariant (c != n) ==> (c >= 0);
    */
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
    /*@ assert (c != n) ==> (c >= 0); */

}

2025-08-15 11:07:36,055 - INFO  - syntax Correct
2025-08-15 11:07:39,671 - INFO  - Validate:
2025-08-15 11:07:39,671 - INFO  - [True, True, True, True]
2025-08-15 11:07:39,671 - INFO  - 
2025-08-15 11:07:39,671 - INFO  - Verify:
2025-08-15 11:07:39,671 - INFO  - [True]
2025-08-15 11:07:39,671 - INFO  - 
2025-08-15 11:07:39,671 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:07:39,671 - INFO  - /*@
        loop invariant c >= 0;
        loop invariant c <= n;
        loop invariant n > 0;
        loop invariant (c != n) ==> (c >= 0);
    */
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-15 11:07:39,672 - INFO  - VST 格式的循环不变量
2025-08-15 11:07:39,672 - INFO  - /*@ Inv
    (c >= 0) &&
(c <= n) &&
(n > 0) &&
((c != n) => (c >= 0))
    */
    
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-15 11:07:39,672 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 11:07:39,672 - INFO  - 继续符号执行
2025-08-15 11:07:39,672 - INFO  - /*@ Inv
    (c >= 0) &&
(c <= n) &&
(n > 0) &&
((c != n) => (c >= 0))
    */
    
    while (unknown()) {
        {
          if (unknown()) {
            if ( c > n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
2025-08-15 11:07:50,311 - INFO  - syntax Correct
2025-08-15 11:07:53,903 - INFO  - Validate:
2025-08-15 11:07:53,904 - INFO  - [True, True, True, True]
2025-08-15 11:07:53,904 - INFO  - 
2025-08-15 11:07:53,904 - INFO  - Verify:
2025-08-15 11:07:53,904 - INFO  - [True]
2025-08-15 11:07:53,904 - INFO  - 
2025-08-15 11:07:53,904 - INFO  - CORRECT INVARIANT
2025-08-15 11:08:04,598 - INFO  - syntax Correct
2025-08-15 11:08:08,207 - INFO  - Validate:
2025-08-15 11:08:08,207 - INFO  - [True, True, True, True]
2025-08-15 11:08:08,207 - INFO  - 
2025-08-15 11:08:08,207 - INFO  - Verify:
2025-08-15 11:08:08,207 - INFO  - [True]
2025-08-15 11:08:08,207 - INFO  - 
2025-08-15 11:08:08,208 - INFO  - ========================================
2025-08-15 11:08:08,208 - INFO  - first_pass:
2025-08-15 11:08:08,208 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 11:08:08,208 - INFO  - ========================================
