2025-08-15 10:41:56,402 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:41:56,402 - INFO  - ========================================

2025-08-15 10:41:56,473 - INFO  - 初始待处理函数: ['foo24']
2025-08-15 10:41:56,473 - INFO  - 
GENERATE ANNOTATION FOR foo24
2025-08-15 10:41:56,473 - INFO  - ========================================

2025-08-15 10:41:56,473 - INFO  - 函数 foo24 已经初始化
2025-08-15 10:41:56,488 - INFO  - 
GENERATE LOOP INVARIANT FOR foo24
2025-08-15 10:41:56,488 - INFO  - ========================================

2025-08-15 10:41:56,502 - INFO  - file_name: foo24
2025-08-15 10:41:56,513 - DEBUG  - INNER_FLAG: False
2025-08-15 10:41:56,529 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre', 'n': 'n@pre'}]
2025-08-15 10:41:56,529 - INFO  - Path conditions: [None]
2025-08-15 10:41:56,529 - INFO  - Pre condition: (x == 1) * (y == y@pre) * (n == n@pre)
2025-08-15 10:41:56,529 - INFO  - Loop Condition: x <= n
2025-08-15 10:41:56,529 - INFO  - Array Names: []
2025-08-15 10:41:56,529 - INFO  - Updated Loop Conditions: ['1 <= n@pre']
2025-08-15 10:41:56,529 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 10:41:56,530 - INFO  - Non Inductive Variables: ['y']
2025-08-15 10:42:03,172 - DEBUG  - invgen reasoning
2025-08-15 10:42:03,172 - DEBUG  - ```c
void foo24(int n,int y) {
    
    int x = 1;

    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant (x >= 1) && (x <= n + 1);
              loop invariant (y == n - x + 1);
              loop invariant (n == \at(n,Pre));
              loop invariant (n > 0) ==> (y <= n);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y <= n); */


}
```
2025-08-15 10:42:03,172 - INFO  - 生成循环不变量
2025-08-15 10:42:03,172 - INFO  - 
void foo24(int n,int y) {
    
    int x = 1;

    
    
            
            /*@
              loop invariant (x >= 1) && (x <= n + 1);
              loop invariant (y == n - x + 1);
              loop invariant (n == \at(n,Pre));
              loop invariant (n > 0) ==> (y <= n);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y <= n); */


}

2025-08-15 10:42:03,172 - INFO  - 注释过不变量的代码
2025-08-15 10:42:03,173 - INFO  - 
void foo24(int n,int y) {
    
    int x = 1;

    
    
            
            /*@
              loop invariant (x >= 1) && (x <= n + 1);
              loop invariant (y == n - x + 1);
              loop invariant (n == \at(n,Pre));
              loop invariant (n > 0) ==> (y <= n);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            

    /*@ assert (n > 0) ==> (y <= n); */


}

2025-08-15 10:42:14,054 - INFO  - syntax Correct
2025-08-15 10:42:17,670 - INFO  - Validate:
2025-08-15 10:42:17,670 - INFO  - [False, False, True, True]
2025-08-15 10:42:17,670 - INFO  - 
2025-08-15 10:42:17,670 - INFO  - Verify:
2025-08-15 10:42:17,670 - INFO  - [True]
2025-08-15 10:42:17,670 - INFO  - 
2025-08-15 10:42:17,670 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:42:17,670 - INFO  - /*@
              loop invariant (x >= 1) && (x <= n + 1);
              loop invariant (y == n - x + 1);
              loop invariant (n == \at(n,Pre));
              loop invariant (n > 0) ==> (y <= n);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-15 10:42:17,671 - INFO  - VST 格式的循环不变量
2025-08-15 10:42:17,671 - INFO  - /*@ Inv
    ((x >= 1) && (x <= n + 1)) &&
((y == n - x + 1)) &&
((n == n@pre)) &&
((n > 0) => (y <= n))
    */
    
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-15 10:42:28,548 - INFO  - syntax Correct
2025-08-15 10:42:32,165 - INFO  - Validate:
2025-08-15 10:42:32,165 - INFO  - [False, False, True, True]
2025-08-15 10:42:32,165 - INFO  - 
2025-08-15 10:42:32,165 - INFO  - Verify:
2025-08-15 10:42:32,165 - INFO  - [True]
2025-08-15 10:42:32,165 - INFO  - 
2025-08-15 10:42:42,993 - INFO  - syntax Correct
2025-08-15 10:42:46,614 - INFO  - Validate:
2025-08-15 10:42:46,614 - INFO  - [False, False, True, True]
2025-08-15 10:42:46,614 - INFO  - 
2025-08-15 10:42:46,615 - INFO  - Verify:
2025-08-15 10:42:46,615 - INFO  - [True]
2025-08-15 10:42:46,615 - INFO  - 
2025-08-15 10:42:46,615 - INFO  - ========================================
2025-08-15 10:42:46,615 - INFO  - first_pass:
2025-08-15 10:42:46,615 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 10:42:46,615 - INFO  - ========================================
