2025-08-15 10:51:57,410 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:51:57,410 - INFO  - ========================================

2025-08-15 10:51:57,502 - INFO  - 初始待处理函数: ['foo28', 'unknown']
2025-08-15 10:51:57,502 - INFO  - 现在处理函数 unknown

2025-08-15 10:51:57,502 - INFO  - 
GENERATE ANNOTATION FOR foo28
2025-08-15 10:51:57,502 - INFO  - ========================================

2025-08-15 10:51:57,502 - INFO  - 函数 foo28 已经初始化
2025-08-15 10:51:57,516 - INFO  - 
GENERATE LOOP INVARIANT FOR foo28
2025-08-15 10:51:57,517 - INFO  - ========================================

2025-08-15 10:51:57,530 - INFO  - file_name: foo28
2025-08-15 10:51:57,539 - DEBUG  - INNER_FLAG: False
2025-08-15 10:51:57,554 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
2025-08-15 10:51:57,554 - INFO  - Path conditions: ['0 <= y@pre && y@pre <= 127']
2025-08-15 10:51:57,554 - INFO  - Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
2025-08-15 10:51:57,554 - INFO  - Loop Condition: unknown()
2025-08-15 10:51:57,554 - INFO  - Array Names: []
2025-08-15 10:51:57,554 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-15 10:51:57,555 - INFO  - Global Unchanged Variables: ['x3', 'x2', 'x1', 'y']
2025-08-15 10:51:57,555 - INFO  - Non Inductive Variables: []
2025-08-15 10:52:04,017 - DEBUG  - invgen reasoning
2025-08-15 10:52:04,017 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo28(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  /*@
    loop invariant 0 <= c <= 36;
    loop invariant z == 36 * y + c;
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }

  /*@ assert (c < 36) ==> (z < 4608); */
}
```
2025-08-15 10:52:04,017 - INFO  - 生成循环不变量
2025-08-15 10:52:04,017 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo28(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  /*@
    loop invariant 0 <= c <= 36;
    loop invariant z == 36 * y + c;
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }

  /*@ assert (c < 36) ==> (z < 4608); */
}

2025-08-15 10:52:04,018 - INFO  - 注释过不变量的代码
2025-08-15 10:52:04,018 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo28(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  /*@
    loop invariant 0 <= c <= 36;
    loop invariant z == 36 * y + c;
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }

  /*@ assert (c < 36) ==> (z < 4608); */
}

2025-08-15 10:52:15,007 - INFO  - syntax Correct
2025-08-15 10:52:18,741 - INFO  - Validate:
2025-08-15 10:52:18,741 - INFO  - [True, True]
2025-08-15 10:52:18,741 - INFO  - 
2025-08-15 10:52:18,741 - INFO  - Verify:
2025-08-15 10:52:18,742 - INFO  - [False]
2025-08-15 10:52:18,742 - INFO  - 
2025-08-15 10:52:18,742 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:52:18,742 - INFO  - /*@
    loop invariant 0 <= c <= 36;
    loop invariant z == 36 * y + c;
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-15 10:52:18,742 - INFO  - VST 格式的循环不变量
2025-08-15 10:52:18,742 - INFO  - /*@ Inv
    (0 <= c && c <= 36) &&
(z == 36 * y + c)
    */
    
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-15 10:52:18,742 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 10:52:18,743 - INFO  - 继续符号执行
2025-08-15 10:52:18,743 - INFO  - /*@ Inv
    (0 <= c && c <= 36) &&
(z == 36 * y + c)
    */
    
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
2025-08-15 10:52:29,650 - INFO  - syntax Correct
2025-08-15 10:52:33,383 - INFO  - Validate:
2025-08-15 10:52:33,383 - INFO  - [True, True]
2025-08-15 10:52:33,383 - INFO  - 
2025-08-15 10:52:33,384 - INFO  - Verify:
2025-08-15 10:52:33,384 - INFO  - [False]
2025-08-15 10:52:33,384 - INFO  - 
2025-08-15 10:52:44,364 - INFO  - syntax Correct
2025-08-15 10:52:48,095 - INFO  - Validate:
2025-08-15 10:52:48,095 - INFO  - [True, True]
2025-08-15 10:52:48,095 - INFO  - 
2025-08-15 10:52:48,096 - INFO  - Verify:
2025-08-15 10:52:48,096 - INFO  - [False]
2025-08-15 10:52:48,096 - INFO  - 
2025-08-15 10:52:48,096 - INFO  - ========================================
2025-08-15 10:52:48,096 - INFO  - first_pass:
2025-08-15 10:52:48,096 - INFO  - syntax=1, valid=1,satisfy=None
2025-08-15 10:52:48,096 - INFO  - ========================================
