2025-08-15 11:01:31,963 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:01:31,964 - INFO  - ========================================

2025-08-15 11:01:32,076 - INFO  - 初始待处理函数: ['foo27', 'unknown']
2025-08-15 11:01:32,076 - INFO  - 现在处理函数 unknown

2025-08-15 11:01:32,076 - INFO  - 
GENERATE ANNOTATION FOR foo27
2025-08-15 11:01:32,076 - INFO  - ========================================

2025-08-15 11:01:32,076 - INFO  - 函数 foo27 已经初始化
2025-08-15 11:01:32,091 - INFO  - 
GENERATE LOOP INVARIANT FOR foo27
2025-08-15 11:01:32,091 - INFO  - ========================================

2025-08-15 11:01:32,104 - INFO  - file_name: foo27
2025-08-15 11:01:32,114 - DEBUG  - INNER_FLAG: False
2025-08-15 11:01:32,131 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'y': 'y@pre'}]
2025-08-15 11:01:32,132 - INFO  - Path conditions: ['0 <= y@pre && y@pre <= 127']
2025-08-15 11:01:32,132 - INFO  - Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (y == y@pre)
2025-08-15 11:01:32,132 - INFO  - Loop Condition: unknown()
2025-08-15 11:01:32,132 - INFO  - Array Names: []
2025-08-15 11:01:32,132 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-15 11:01:32,132 - INFO  - Global Unchanged Variables: ['y']
2025-08-15 11:01:32,133 - INFO  - Non Inductive Variables: []
2025-08-15 11:01:36,074 - DEBUG  - invgen reasoning
2025-08-15 11:01:36,074 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo27(int y) {
    int c = 0;
    int z = 36 * y;
    
    /*@
        loop invariant 0 <= c <= 36;
        loop invariant z == 36 * y + c;
        loop invariant (c < 36) ==> (z < 4608);
    */
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }

    /*@ assert (c < 36) ==> (z < 4608); */
}
```
2025-08-15 11:01:36,075 - INFO  - 生成循环不变量
2025-08-15 11:01:36,075 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo27(int y) {
    int c = 0;
    int z = 36 * y;
    
    /*@
        loop invariant 0 <= c <= 36;
        loop invariant z == 36 * y + c;
        loop invariant (c < 36) ==> (z < 4608);
    */
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }

    /*@ assert (c < 36) ==> (z < 4608); */
}

2025-08-15 11:01:36,075 - INFO  - 注释过不变量的代码
2025-08-15 11:01:36,075 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo27(int y) {
    int c = 0;
    int z = 36 * y;
    
    /*@
        loop invariant 0 <= c <= 36;
        loop invariant z == 36 * y + c;
        loop invariant (c < 36) ==> (z < 4608);
    */
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }

    /*@ assert (c < 36) ==> (z < 4608); */
}

2025-08-15 11:01:46,923 - INFO  - syntax Correct
2025-08-15 11:01:50,524 - INFO  - Validate:
2025-08-15 11:01:50,525 - INFO  - [True, True, True]
2025-08-15 11:01:50,525 - INFO  - 
2025-08-15 11:01:50,525 - INFO  - Verify:
2025-08-15 11:01:50,525 - INFO  - [True]
2025-08-15 11:01:50,525 - INFO  - 
2025-08-15 11:01:50,525 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:01:50,525 - INFO  - /*@
        loop invariant 0 <= c <= 36;
        loop invariant z == 36 * y + c;
        loop invariant (c < 36) ==> (z < 4608);
    */
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }
2025-08-15 11:01:50,525 - INFO  - VST 格式的循环不变量
2025-08-15 11:01:50,525 - INFO  - /*@ Inv
    (0 <= c && c <= 36) &&
(z == 36 * y + c) &&
((c < 36) => (z < 4608))
    */
    
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }
2025-08-15 11:01:50,526 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 11:01:50,526 - INFO  - 继续符号执行
2025-08-15 11:01:50,526 - INFO  - /*@ Inv
    (0 <= c && c <= 36) &&
(z == 36 * y + c) &&
((c < 36) => (z < 4608))
    */
    
    while (unknown()) {
        if (c < 36) {
            z = z + 1;
            c = c + 1;
        }
    }
2025-08-15 11:02:01,328 - INFO  - syntax Correct
2025-08-15 11:02:04,926 - INFO  - Validate:
2025-08-15 11:02:04,926 - INFO  - [True, True, True]
2025-08-15 11:02:04,926 - INFO  - 
2025-08-15 11:02:04,926 - INFO  - Verify:
2025-08-15 11:02:04,926 - INFO  - [True]
2025-08-15 11:02:04,926 - INFO  - 
2025-08-15 11:02:04,926 - INFO  - CORRECT INVARIANT
2025-08-15 11:02:15,771 - INFO  - syntax Correct
2025-08-15 11:02:19,362 - INFO  - Validate:
2025-08-15 11:02:19,362 - INFO  - [True, True, True]
2025-08-15 11:02:19,363 - INFO  - 
2025-08-15 11:02:19,363 - INFO  - Verify:
2025-08-15 11:02:19,363 - INFO  - [True]
2025-08-15 11:02:19,363 - INFO  - 
2025-08-15 11:02:19,363 - INFO  - ========================================
2025-08-15 11:02:19,363 - INFO  - first_pass:
2025-08-15 11:02:19,363 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 11:02:19,363 - INFO  - ========================================
