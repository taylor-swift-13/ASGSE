2025-08-15 11:14:57,007 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:14:57,007 - INFO  - ========================================

2025-08-15 11:14:57,151 - INFO  - 初始待处理函数: ['foo1']
2025-08-15 11:14:57,151 - INFO  - 
GENERATE ANNOTATION FOR foo1
2025-08-15 11:14:57,151 - INFO  - ========================================

2025-08-15 11:14:57,151 - INFO  - 函数 foo1 已经初始化
2025-08-15 11:14:57,166 - INFO  - 
GENERATE LOOP INVARIANT FOR foo1
2025-08-15 11:14:57,166 - INFO  - ========================================

2025-08-15 11:14:57,181 - INFO  - file_name: foo1
2025-08-15 11:14:57,193 - DEBUG  - INNER_FLAG: False
2025-08-15 11:14:57,209 - INFO  - Variable Maps:[{'y': '0', 'x': '1'}]
2025-08-15 11:14:57,209 - INFO  - Path conditions: [None]
2025-08-15 11:14:57,210 - INFO  - Pre condition: (y == 0) * (x == 1)
2025-08-15 11:14:57,210 - INFO  - Loop Condition: y < 100000
2025-08-15 11:14:57,210 - INFO  - Array Names: []
2025-08-15 11:14:57,210 - INFO  - Updated Loop Conditions: ['0 < 100000']
2025-08-15 11:14:57,210 - INFO  - Global Unchanged Variables: []
2025-08-15 11:14:57,210 - INFO  - Non Inductive Variables: []
2025-08-15 11:15:00,027 - DEBUG  - invgen reasoning
2025-08-15 11:15:00,027 - DEBUG  - ```c
void foo1(){
  
    int x = 1;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x == (y * (y - 1)) / 2 + 1;
        loop invariant y >= 0 && y <= 100000;
        loop invariant x >= y;
    */
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
  
    /*@ assert x >= y; */
}
```
2025-08-15 11:15:00,027 - INFO  - 生成循环不变量
2025-08-15 11:15:00,027 - INFO  - 
void foo1(){
  
    int x = 1;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x == (y * (y - 1)) / 2 + 1;
        loop invariant y >= 0 && y <= 100000;
        loop invariant x >= y;
    */
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
  
    /*@ assert x >= y; */
}

2025-08-15 11:15:00,027 - INFO  - 注释过不变量的代码
2025-08-15 11:15:00,027 - INFO  - 
void foo1(){
  
    int x = 1;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x == (y * (y - 1)) / 2 + 1;
        loop invariant y >= 0 && y <= 100000;
        loop invariant x >= y;
    */
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
  
    /*@ assert x >= y; */
}

2025-08-15 11:15:10,673 - INFO  - syntax Correct
2025-08-15 11:15:14,262 - INFO  - Validate:
2025-08-15 11:15:14,263 - INFO  - [True, True, True]
2025-08-15 11:15:14,263 - INFO  - 
2025-08-15 11:15:14,263 - INFO  - Verify:
2025-08-15 11:15:14,263 - INFO  - [True]
2025-08-15 11:15:14,263 - INFO  - 
2025-08-15 11:15:14,263 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:15:14,263 - INFO  - /*@
        loop invariant x == (y * (y - 1)) / 2 + 1;
        loop invariant y >= 0 && y <= 100000;
        loop invariant x >= y;
    */
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
2025-08-15 11:15:14,263 - INFO  - VST 格式的循环不变量
2025-08-15 11:15:14,263 - INFO  - /*@ Inv
    (x == (y * (y - 1)) / 2 + 1) &&
(y >= 0 && y <= 100000) &&
(x >= y)
    */
    
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
2025-08-15 11:15:14,264 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 11:15:14,264 - INFO  - 继续符号执行
2025-08-15 11:15:14,264 - INFO  - /*@ Inv
    (x == (y * (y - 1)) / 2 + 1) &&
(y >= 0 && y <= 100000) &&
(x >= y)
    */
    
    while (y < 100000) {
      
       x  = x + y;
       y  = y + 1;
      
    }
2025-08-15 11:15:24,961 - INFO  - syntax Correct
2025-08-15 11:15:28,558 - INFO  - Validate:
2025-08-15 11:15:28,558 - INFO  - [True, True, True]
2025-08-15 11:15:28,558 - INFO  - 
2025-08-15 11:15:28,558 - INFO  - Verify:
2025-08-15 11:15:28,558 - INFO  - [True]
2025-08-15 11:15:28,558 - INFO  - 
2025-08-15 11:15:28,558 - INFO  - CORRECT INVARIANT
2025-08-15 11:15:39,195 - INFO  - syntax Correct
2025-08-15 11:15:42,787 - INFO  - Validate:
2025-08-15 11:15:42,787 - INFO  - [True, True, True]
2025-08-15 11:15:42,787 - INFO  - 
2025-08-15 11:15:42,787 - INFO  - Verify:
2025-08-15 11:15:42,787 - INFO  - [True]
2025-08-15 11:15:42,787 - INFO  - 
2025-08-15 11:15:42,787 - INFO  - ========================================
2025-08-15 11:15:42,788 - INFO  - first_pass:
2025-08-15 11:15:42,788 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 11:15:42,788 - INFO  - ========================================
