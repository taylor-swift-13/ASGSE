2025-08-15 10:58:31,250 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:58:31,251 - INFO  - ========================================

2025-08-15 10:58:31,363 - INFO  - 初始待处理函数: ['foo3']
2025-08-15 10:58:31,363 - INFO  - 
GENERATE ANNOTATION FOR foo3
2025-08-15 10:58:31,363 - INFO  - ========================================

2025-08-15 10:58:31,363 - INFO  - 函数 foo3 已经初始化
2025-08-15 10:58:31,379 - INFO  - 
GENERATE LOOP INVARIANT FOR foo3
2025-08-15 10:58:31,379 - INFO  - ========================================

2025-08-15 10:58:31,394 - INFO  - file_name: foo3
2025-08-15 10:58:31,406 - DEBUG  - INNER_FLAG: False
2025-08-15 10:58:31,422 - INFO  - Variable Maps:[{'x': '0', 'z': 'z@pre', 'y': 'y@pre', 'size': 'size@pre', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre'}]
2025-08-15 10:58:31,422 - INFO  - Path conditions: [None]
2025-08-15 10:58:31,422 - INFO  - Pre condition: (x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)
2025-08-15 10:58:31,422 - INFO  - Loop Condition: x < size
2025-08-15 10:58:31,422 - INFO  - Array Names: []
2025-08-15 10:58:31,422 - INFO  - Updated Loop Conditions: ['0 < size@pre']
2025-08-15 10:58:31,423 - INFO  - Global Unchanged Variables: ['z', 'size', 'v3', 'v2', 'v1']
2025-08-15 10:58:31,423 - INFO  - Non Inductive Variables: ['y']
2025-08-15 10:59:56,450 - DEBUG  - invgen reasoning
2025-08-15 10:59:56,450 - DEBUG  - ```c
void foo3(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant 0 <= x <= size;
              loop invariant (x > 0) ==> (z >= y);
              loop invariant (z == \at(z,Pre));
              loop invariant (size == \at(size,Pre));
              loop invariant (y <= \at(y,Pre));
              loop invariant (x == 0 ==> y == \at(y,Pre));
            */
            while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
            

    /*@ assert (size > 0) ==> (z >= y);  */

}
```
2025-08-15 10:59:56,450 - INFO  - 生成循环不变量
2025-08-15 10:59:56,450 - INFO  - 
void foo3(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
            
            /*@
              loop invariant 0 <= x <= size;
              loop invariant (x > 0) ==> (z >= y);
              loop invariant (z == \at(z,Pre));
              loop invariant (size == \at(size,Pre));
              loop invariant (y <= \at(y,Pre));
              loop invariant (x == 0 ==> y == \at(y,Pre));
            */
            while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
            

    /*@ assert (size > 0) ==> (z >= y);  */

}

2025-08-15 10:59:56,451 - INFO  - 注释过不变量的代码
2025-08-15 10:59:56,451 - INFO  - 
void foo3(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
            
            /*@
              loop invariant 0 <= x <= size;
              loop invariant (x > 0) ==> (z >= y);
              loop invariant (z == \at(z,Pre));
              loop invariant (size == \at(size,Pre));
              loop invariant (y <= \at(y,Pre));
              loop invariant (x == 0 ==> y == \at(y,Pre));
            */
            while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
            

    /*@ assert (size > 0) ==> (z >= y);  */

}

2025-08-15 11:00:07,228 - INFO  - syntax Correct
2025-08-15 11:00:10,841 - INFO  - Validate:
2025-08-15 11:00:10,841 - INFO  - [False, True, True, True, True, True]
2025-08-15 11:00:10,841 - INFO  - 
2025-08-15 11:00:10,841 - INFO  - Verify:
2025-08-15 11:00:10,842 - INFO  - [True]
2025-08-15 11:00:10,842 - INFO  - 
2025-08-15 11:00:10,842 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:00:10,842 - INFO  - /*@
              loop invariant 0 <= x <= size;
              loop invariant (x > 0) ==> (z >= y);
              loop invariant (z == \at(z,Pre));
              loop invariant (size == \at(size,Pre));
              loop invariant (y <= \at(y,Pre));
              loop invariant (x == 0 ==> y == \at(y,Pre));
            */
            while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
2025-08-15 11:00:10,843 - INFO  - VST 格式的循环不变量
2025-08-15 11:00:10,843 - INFO  - /*@ Inv
    (0 <= x && x <= size) &&
((x > 0) => (z >= y)) &&
((z == z@pre)) &&
((size == size@pre)) &&
((y <= y@pre)) &&
((x == 0 => y == y@pre))
    */
    
            while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
2025-08-15 11:00:21,614 - INFO  - syntax Correct
2025-08-15 11:00:25,243 - INFO  - Validate:
2025-08-15 11:00:25,243 - INFO  - [False, True, True, True, True, True]
2025-08-15 11:00:25,244 - INFO  - 
2025-08-15 11:00:25,244 - INFO  - Verify:
2025-08-15 11:00:25,244 - INFO  - [True]
2025-08-15 11:00:25,244 - INFO  - 
2025-08-15 11:00:36,045 - INFO  - syntax Correct
2025-08-15 11:00:39,667 - INFO  - Validate:
2025-08-15 11:00:39,668 - INFO  - [False, True, True, True, True, True]
2025-08-15 11:00:39,668 - INFO  - 
2025-08-15 11:00:39,668 - INFO  - Verify:
2025-08-15 11:00:39,668 - INFO  - [True]
2025-08-15 11:00:39,668 - INFO  - 
2025-08-15 11:00:39,668 - INFO  - ========================================
2025-08-15 11:00:39,668 - INFO  - first_pass:
2025-08-15 11:00:39,668 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 11:00:39,668 - INFO  - ========================================
