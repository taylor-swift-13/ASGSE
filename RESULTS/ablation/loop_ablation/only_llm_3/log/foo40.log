2025-08-15 10:36:48,103 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:36:48,103 - INFO  - ========================================

2025-08-15 10:36:48,162 - INFO  - 初始待处理函数: ['foo40']
2025-08-15 10:36:48,162 - INFO  - 
GENERATE ANNOTATION FOR foo40
2025-08-15 10:36:48,163 - INFO  - ========================================

2025-08-15 10:36:48,163 - INFO  - 函数 foo40 已经初始化
2025-08-15 10:36:48,177 - INFO  - 
GENERATE LOOP INVARIANT FOR foo40
2025-08-15 10:36:48,177 - INFO  - ========================================

2025-08-15 10:36:48,190 - INFO  - file_name: foo40
2025-08-15 10:36:48,199 - DEBUG  - INNER_FLAG: False
2025-08-15 10:36:48,213 - INFO  - Variable Maps:[{'x': '0', 'n': 'n@pre'}]
2025-08-15 10:36:48,213 - INFO  - Path conditions: [None]
2025-08-15 10:36:48,214 - INFO  - Pre condition: (x == 0) * (n == n@pre)
2025-08-15 10:36:48,214 - INFO  - Loop Condition: x < n
2025-08-15 10:36:48,214 - INFO  - Array Names: []
2025-08-15 10:36:48,214 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-15 10:36:48,214 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 10:36:48,214 - INFO  - Non Inductive Variables: []
2025-08-15 10:36:56,866 - DEBUG  - invgen reasoning
2025-08-15 10:36:56,866 - DEBUG  - ```c
void foo40(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (x != n) ==> (n < 0); */
    
}
```
2025-08-15 10:36:56,866 - INFO  - 生成循环不变量
2025-08-15 10:36:56,866 - INFO  - 
void foo40(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (x != n) ==> (n < 0); */
    
}

2025-08-15 10:36:56,867 - INFO  - 注释过不变量的代码
2025-08-15 10:36:56,867 - INFO  - 
void foo40(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (x != n) ==> (n < 0); */
    
}

2025-08-15 10:37:07,763 - INFO  - syntax Correct
2025-08-15 10:37:11,319 - INFO  - Validate:
2025-08-15 10:37:11,319 - INFO  - [False, True]
2025-08-15 10:37:11,319 - INFO  - 
2025-08-15 10:37:11,319 - INFO  - Verify:
2025-08-15 10:37:11,319 - INFO  - [True]
2025-08-15 10:37:11,319 - INFO  - 
2025-08-15 10:37:11,320 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:37:11,320 - INFO  - /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
2025-08-15 10:37:11,320 - INFO  - VST 格式的循环不变量
2025-08-15 10:37:11,320 - INFO  - /*@ Inv
    (0 <= x && x <= n) &&
(n == n@pre)
    */
    
    while (x < n) {
      
      x  = (x + 1);
      
    }
2025-08-15 10:37:22,129 - INFO  - syntax Correct
2025-08-15 10:37:25,688 - INFO  - Validate:
2025-08-15 10:37:25,689 - INFO  - [False, True]
2025-08-15 10:37:25,689 - INFO  - 
2025-08-15 10:37:25,689 - INFO  - Verify:
2025-08-15 10:37:25,689 - INFO  - [True]
2025-08-15 10:37:25,689 - INFO  - 
2025-08-15 10:37:36,499 - INFO  - syntax Correct
2025-08-15 10:37:40,077 - INFO  - Validate:
2025-08-15 10:37:40,077 - INFO  - [False, True]
2025-08-15 10:37:40,077 - INFO  - 
2025-08-15 10:37:40,077 - INFO  - Verify:
2025-08-15 10:37:40,077 - INFO  - [True]
2025-08-15 10:37:40,077 - INFO  - 
2025-08-15 10:37:40,077 - INFO  - ========================================
2025-08-15 10:37:40,078 - INFO  - first_pass:
2025-08-15 10:37:40,078 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 10:37:40,078 - INFO  - ========================================
