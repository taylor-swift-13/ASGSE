2025-08-15 10:37:40,150 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:37:40,150 - INFO  - ========================================

2025-08-15 10:37:40,211 - INFO  - 初始待处理函数: ['foo30', 'unknown']
2025-08-15 10:37:40,212 - INFO  - 现在处理函数 unknown

2025-08-15 10:37:40,212 - INFO  - 
GENERATE ANNOTATION FOR foo30
2025-08-15 10:37:40,212 - INFO  - ========================================

2025-08-15 10:37:40,212 - INFO  - 函数 foo30 已经初始化
2025-08-15 10:37:40,226 - INFO  - 
GENERATE LOOP INVARIANT FOR foo30
2025-08-15 10:37:40,226 - INFO  - ========================================

2025-08-15 10:37:40,239 - INFO  - file_name: foo30
2025-08-15 10:37:40,250 - DEBUG  - INNER_FLAG: False
2025-08-15 10:37:40,265 - INFO  - Variable Maps:[{'i': '0', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-15 10:37:40,265 - INFO  - Path conditions: ['x@pre >= y@pre && y@pre >= 0']
2025-08-15 10:37:40,265 - INFO  - Pre condition: x@pre >= y@pre && y@pre >= 0 && (i == 0) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-15 10:37:40,265 - INFO  - Loop Condition: unknown()
2025-08-15 10:37:40,265 - INFO  - Array Names: []
2025-08-15 10:37:40,265 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-15 10:37:40,266 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y', 'x']
2025-08-15 10:37:40,266 - INFO  - Non Inductive Variables: []
2025-08-15 10:37:51,611 - DEBUG  - invgen reasoning
2025-08-15 10:37:51,611 - DEBUG  - ```c
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
        loop invariant 0 <= i <= y;
        loop invariant x >= y;
        loop invariant i >= 0;
    */
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
    
    /*@ assert (i < 0 && i >= x) ==> (i >= y); */

}
```
2025-08-15 10:37:51,611 - INFO  - 生成循环不变量
2025-08-15 10:37:51,611 - INFO  - 
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
        loop invariant 0 <= i <= y;
        loop invariant x >= y;
        loop invariant i >= 0;
    */
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
    
    /*@ assert (i < 0 && i >= x) ==> (i >= y); */

}

2025-08-15 10:37:51,611 - INFO  - 注释过不变量的代码
2025-08-15 10:37:51,611 - INFO  - 
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo30(int x, int y, int z1, int z2, int z3) {

    int i = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
        loop invariant 0 <= i <= y;
        loop invariant x >= y;
        loop invariant i >= 0;
    */
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
    
    /*@ assert (i < 0 && i >= x) ==> (i >= y); */

}

2025-08-15 10:38:02,440 - INFO  - syntax Correct
2025-08-15 10:38:06,001 - INFO  - Validate:
2025-08-15 10:38:06,001 - INFO  - [True, True, True]
2025-08-15 10:38:06,001 - INFO  - 
2025-08-15 10:38:06,001 - INFO  - Verify:
2025-08-15 10:38:06,001 - INFO  - [True]
2025-08-15 10:38:06,001 - INFO  - 
2025-08-15 10:38:06,001 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:38:06,001 - INFO  - /*@
        loop invariant 0 <= i <= y;
        loop invariant x >= y;
        loop invariant i >= 0;
    */
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
2025-08-15 10:38:06,002 - INFO  - VST 格式的循环不变量
2025-08-15 10:38:06,002 - INFO  - /*@ Inv
    (0 <= i && i <= y) &&
(x >= y) &&
(i >= 0)
    */
    
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
2025-08-15 10:38:06,002 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 10:38:06,002 - INFO  - 继续符号执行
2025-08-15 10:38:06,002 - INFO  - /*@ Inv
    (0 <= i && i <= y) &&
(x >= y) &&
(i >= 0)
    */
    
    while (unknown()) {
        if (i < y) {
            i = (i + 1);
        }
    }
2025-08-15 10:38:16,767 - INFO  - syntax Correct
2025-08-15 10:38:20,331 - INFO  - Validate:
2025-08-15 10:38:20,332 - INFO  - [True, True, True]
2025-08-15 10:38:20,332 - INFO  - 
2025-08-15 10:38:20,332 - INFO  - Verify:
2025-08-15 10:38:20,332 - INFO  - [True]
2025-08-15 10:38:20,332 - INFO  - 
2025-08-15 10:38:20,332 - INFO  - CORRECT INVARIANT
2025-08-15 10:38:31,053 - INFO  - syntax Correct
2025-08-15 10:38:34,598 - INFO  - Validate:
2025-08-15 10:38:34,598 - INFO  - [True, True, True]
2025-08-15 10:38:34,599 - INFO  - 
2025-08-15 10:38:34,599 - INFO  - Verify:
2025-08-15 10:38:34,599 - INFO  - [True]
2025-08-15 10:38:34,599 - INFO  - 
2025-08-15 10:38:34,599 - INFO  - ========================================
2025-08-15 10:38:34,599 - INFO  - first_pass:
2025-08-15 10:38:34,599 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 10:38:34,599 - INFO  - ========================================
