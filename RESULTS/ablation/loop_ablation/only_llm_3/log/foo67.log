2025-08-15 10:19:05,402 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:19:05,402 - INFO  - ========================================

2025-08-15 10:19:05,417 - INFO  - 初始待处理函数: ['foo67', 'unknown']
2025-08-15 10:19:05,417 - INFO  - 现在处理函数 unknown

2025-08-15 10:19:05,417 - INFO  - 
GENERATE ANNOTATION FOR foo67
2025-08-15 10:19:05,418 - INFO  - ========================================

2025-08-15 10:19:05,418 - INFO  - 函数 foo67 已经初始化
2025-08-15 10:19:05,433 - INFO  - 
GENERATE LOOP INVARIANT FOR foo67
2025-08-15 10:19:05,433 - INFO  - ========================================

2025-08-15 10:19:05,447 - INFO  - file_name: foo67
2025-08-15 10:19:05,455 - DEBUG  - INNER_FLAG: False
2025-08-15 10:19:05,472 - INFO  - Variable Maps:[{'m': '0', 'x': '0', 'n': 'n@pre'}]
2025-08-15 10:19:05,472 - INFO  - Path conditions: ['n@pre > 0']
2025-08-15 10:19:05,472 - INFO  - Pre condition: n@pre > 0 && (m == 0) * (x == 0) * (n == n@pre)
2025-08-15 10:19:05,472 - INFO  - Loop Condition: x < n
2025-08-15 10:19:05,472 - INFO  - Array Names: []
2025-08-15 10:19:05,473 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-15 10:19:05,473 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 10:19:05,473 - INFO  - Non Inductive Variables: ['m']
2025-08-15 10:19:07,893 - DEBUG  - invgen reasoning
2025-08-15 10:19:07,894 - DEBUG  - ```c
int unknown();
/*@
requires n > 0;
*/
void foo67(int n) {
  int x = 0;
  int m = 0;
 
  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant 0 <= x <= n;
              loop invariant 0 <= m < n;
              loop invariant m <= x;
            */
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
            
  /*@ assert (n > 0) ==> (0 <= m && m < n); */
}
```
2025-08-15 10:19:07,894 - INFO  - 生成循环不变量
2025-08-15 10:19:07,894 - INFO  - 
int unknown();
/*@
requires n > 0;
*/
void foo67(int n) {
  int x = 0;
  int m = 0;
 
  
            
            /*@
              loop invariant 0 <= x <= n;
              loop invariant 0 <= m < n;
              loop invariant m <= x;
            */
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
            
  /*@ assert (n > 0) ==> (0 <= m && m < n); */
}

2025-08-15 10:19:07,894 - INFO  - 注释过不变量的代码
2025-08-15 10:19:07,894 - INFO  - 
int unknown();
/*@
requires n > 0;
*/
void foo67(int n) {
  int x = 0;
  int m = 0;
 
  
            
            /*@
              loop invariant 0 <= x <= n;
              loop invariant 0 <= m < n;
              loop invariant m <= x;
            */
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
            
  /*@ assert (n > 0) ==> (0 <= m && m < n); */
}

2025-08-15 10:19:18,562 - INFO  - syntax Correct
2025-08-15 10:19:22,123 - INFO  - Validate:
2025-08-15 10:19:22,123 - INFO  - [True, True, True]
2025-08-15 10:19:22,123 - INFO  - 
2025-08-15 10:19:22,123 - INFO  - Verify:
2025-08-15 10:19:22,123 - INFO  - [True]
2025-08-15 10:19:22,124 - INFO  - 
2025-08-15 10:19:22,124 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:19:22,124 - INFO  - /*@
              loop invariant 0 <= x <= n;
              loop invariant 0 <= m < n;
              loop invariant m <= x;
            */
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
2025-08-15 10:19:22,124 - INFO  - VST 格式的循环不变量
2025-08-15 10:19:22,124 - INFO  - /*@ Inv
    (0 <= x && x <= n) &&
(0 <= m && m < n) &&
(m <= x)
    */
    
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
2025-08-15 10:19:22,125 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 10:19:22,125 - INFO  - 继续符号执行
2025-08-15 10:19:22,125 - INFO  - /*@ Inv
    (0 <= x && x <= n) &&
(0 <= m && m < n) &&
(m <= x)
    */
    
            while (x < n) {
    if (unknown()) {
      m = x;
    }
    x = x + 1;
  }
2025-08-15 10:19:32,802 - INFO  - syntax Correct
2025-08-15 10:19:36,389 - INFO  - Validate:
2025-08-15 10:19:36,389 - INFO  - [True, True, True]
2025-08-15 10:19:36,389 - INFO  - 
2025-08-15 10:19:36,390 - INFO  - Verify:
2025-08-15 10:19:36,390 - INFO  - [True]
2025-08-15 10:19:36,390 - INFO  - 
2025-08-15 10:19:36,390 - INFO  - CORRECT INVARIANT
2025-08-15 10:19:47,019 - INFO  - syntax Correct
2025-08-15 10:19:50,665 - INFO  - Validate:
2025-08-15 10:19:50,666 - INFO  - [True, True, True]
2025-08-15 10:19:50,666 - INFO  - 
2025-08-15 10:19:50,666 - INFO  - Verify:
2025-08-15 10:19:50,666 - INFO  - [True]
2025-08-15 10:19:50,666 - INFO  - 
2025-08-15 10:19:50,666 - INFO  - ========================================
2025-08-15 10:19:50,666 - INFO  - first_pass:
2025-08-15 10:19:50,666 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 10:19:50,666 - INFO  - ========================================
