2025-08-15 11:09:05,795 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:09:05,796 - INFO  - ========================================

2025-08-15 11:09:05,927 - INFO  - 初始待处理函数: ['foo13', 'unknown']
2025-08-15 11:09:05,927 - INFO  - 现在处理函数 unknown

2025-08-15 11:09:05,928 - INFO  - 
GENERATE ANNOTATION FOR foo13
2025-08-15 11:09:05,928 - INFO  - ========================================

2025-08-15 11:09:05,928 - INFO  - 函数 foo13 已经初始化
2025-08-15 11:09:05,942 - INFO  - 
GENERATE LOOP INVARIANT FOR foo13
2025-08-15 11:09:05,942 - INFO  - ========================================

2025-08-15 11:09:05,956 - INFO  - file_name: foo13
2025-08-15 11:09:05,967 - DEBUG  - INNER_FLAG: False
2025-08-15 11:09:05,982 - INFO  - Variable Maps:[{'m': '1', 'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'n': 'n@pre'}]
2025-08-15 11:09:05,982 - INFO  - Path conditions: [None]
2025-08-15 11:09:05,982 - INFO  - Pre condition: (m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)
2025-08-15 11:09:05,982 - INFO  - Loop Condition: x < n
2025-08-15 11:09:05,982 - INFO  - Array Names: []
2025-08-15 11:09:05,982 - INFO  - Updated Loop Conditions: ['1 < n@pre']
2025-08-15 11:09:05,982 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'n']
2025-08-15 11:09:05,982 - INFO  - Non Inductive Variables: ['m']
2025-08-15 11:09:08,801 - DEBUG  - invgen reasoning
2025-08-15 11:09:08,801 - DEBUG  - ```c
int unknown();
void foo13(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (x >= 1) && (x <= n);
        loop invariant (n > 0) ==> (m < x);
    */
    while (x < n) {

        if (unknown()) {
            m = x;
        }

        x = x + 1;
    }

    /*@ assert (n > 0) ==> (m < n); */
}
```
2025-08-15 11:09:08,801 - INFO  - 生成循环不变量
2025-08-15 11:09:08,801 - INFO  - 
int unknown();
void foo13(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (x >= 1) && (x <= n);
        loop invariant (n > 0) ==> (m < x);
    */
    while (x < n) {

        if (unknown()) {
            m = x;
        }

        x = x + 1;
    }

    /*@ assert (n > 0) ==> (m < n); */
}

2025-08-15 11:09:08,801 - INFO  - 注释过不变量的代码
2025-08-15 11:09:08,801 - INFO  - 
int unknown();
void foo13(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (x >= 1) && (x <= n);
        loop invariant (n > 0) ==> (m < x);
    */
    while (x < n) {

        if (unknown()) {
            m = x;
        }

        x = x + 1;
    }

    /*@ assert (n > 0) ==> (m < n); */
}

2025-08-15 11:09:19,632 - INFO  - syntax Correct
2025-08-15 11:09:23,341 - INFO  - Validate:
2025-08-15 11:09:23,341 - INFO  - [False, False]
2025-08-15 11:09:23,341 - INFO  - 
2025-08-15 11:09:23,342 - INFO  - Verify:
2025-08-15 11:09:23,342 - INFO  - [True]
2025-08-15 11:09:23,342 - INFO  - 
2025-08-15 11:09:23,342 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:09:23,342 - INFO  - /*@
        loop invariant (x >= 1) && (x <= n);
        loop invariant (n > 0) ==> (m < x);
    */
    while (x < n) {

        if (unknown()) {
            m = x;
        }

        x = x + 1;
    }
2025-08-15 11:09:23,342 - INFO  - VST 格式的循环不变量
2025-08-15 11:09:23,342 - INFO  - /*@ Inv
    ((x >= 1) && (x <= n)) &&
((n > 0) => (m < x))
    */
    
    while (x < n) {

        if (unknown()) {
            m = x;
        }

        x = x + 1;
    }
2025-08-15 11:09:34,181 - INFO  - syntax Correct
2025-08-15 11:09:37,832 - INFO  - Validate:
2025-08-15 11:09:37,832 - INFO  - [False, False]
2025-08-15 11:09:37,832 - INFO  - 
2025-08-15 11:09:37,832 - INFO  - Verify:
2025-08-15 11:09:37,832 - INFO  - [True]
2025-08-15 11:09:37,832 - INFO  - 
2025-08-15 11:09:48,678 - INFO  - syntax Correct
2025-08-15 11:09:52,335 - INFO  - Validate:
2025-08-15 11:09:52,335 - INFO  - [False, False]
2025-08-15 11:09:52,335 - INFO  - 
2025-08-15 11:09:52,335 - INFO  - Verify:
2025-08-15 11:09:52,336 - INFO  - [True]
2025-08-15 11:09:52,336 - INFO  - 
2025-08-15 11:09:52,336 - INFO  - ========================================
2025-08-15 11:09:52,336 - INFO  - first_pass:
2025-08-15 11:09:52,336 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 11:09:52,336 - INFO  - ========================================
