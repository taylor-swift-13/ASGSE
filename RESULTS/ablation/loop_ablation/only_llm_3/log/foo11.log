2025-08-15 11:09:52,413 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:09:52,414 - INFO  - ========================================

2025-08-15 11:09:52,547 - INFO  - 初始待处理函数: ['foo11', 'unknown']
2025-08-15 11:09:52,547 - INFO  - 现在处理函数 unknown

2025-08-15 11:09:52,547 - INFO  - 
GENERATE ANNOTATION FOR foo11
2025-08-15 11:09:52,547 - INFO  - ========================================

2025-08-15 11:09:52,547 - INFO  - 函数 foo11 已经初始化
2025-08-15 11:09:52,562 - INFO  - 
GENERATE LOOP INVARIANT FOR foo11
2025-08-15 11:09:52,562 - INFO  - ========================================

2025-08-15 11:09:52,575 - INFO  - file_name: foo11
2025-08-15 11:09:52,584 - DEBUG  - INNER_FLAG: False
2025-08-15 11:09:52,601 - INFO  - Variable Maps:[{'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-15 11:09:52,601 - INFO  - Path conditions: ['x@pre >= 0 && x@pre <= 2 && y@pre <= 2 && y@pre >= 0']
2025-08-15 11:09:52,601 - INFO  - Pre condition: x@pre >= 0 && x@pre <= 2 && y@pre <= 2 && y@pre >= 0 && (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-15 11:09:52,602 - INFO  - Loop Condition: unknown()
2025-08-15 11:09:52,602 - INFO  - Array Names: []
2025-08-15 11:09:52,602 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-15 11:09:52,602 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-15 11:09:52,602 - INFO  - Non Inductive Variables: []
2025-08-15 11:09:56,367 - DEBUG  - invgen reasoning
2025-08-15 11:09:56,367 - DEBUG  - ```c
int unknown();
/*@ requires x >= 0 && x <= 2 && y <= 2 && y >= 0; */
void foo11(int x,int y,int z1,int z2,int z3) {

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x >= 0 && x <= 2 + 2 * \at(x,Pre);
        loop invariant y >= 0 && y <= 2 + 2 * \at(y,Pre);
        loop invariant (y == 0) ==> (x != 4);
        loop invariant z1 == \at(z1,Pre) && z2 == \at(z2,Pre) && z3 == \at(z3,Pre);
    */
    while (unknown()) {
        x = x + 2;
        y = y + 2;
    }

    /*@ assert (y == 0) ==> (x != 4); */
}
```
2025-08-15 11:09:56,368 - INFO  - 生成循环不变量
2025-08-15 11:09:56,368 - INFO  - 
int unknown();
/*@ requires x >= 0 && x <= 2 && y <= 2 && y >= 0; */
void foo11(int x,int y,int z1,int z2,int z3) {

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x >= 0 && x <= 2 + 2 * \at(x,Pre);
        loop invariant y >= 0 && y <= 2 + 2 * \at(y,Pre);
        loop invariant (y == 0) ==> (x != 4);
        loop invariant z1 == \at(z1,Pre) && z2 == \at(z2,Pre) && z3 == \at(z3,Pre);
    */
    while (unknown()) {
        x = x + 2;
        y = y + 2;
    }

    /*@ assert (y == 0) ==> (x != 4); */
}

2025-08-15 11:09:56,368 - INFO  - 注释过不变量的代码
2025-08-15 11:09:56,368 - INFO  - 
int unknown();
/*@ requires x >= 0 && x <= 2 && y <= 2 && y >= 0; */
void foo11(int x,int y,int z1,int z2,int z3) {

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant x >= 0 && x <= 2 + 2 * \at(x,Pre);
        loop invariant y >= 0 && y <= 2 + 2 * \at(y,Pre);
        loop invariant (y == 0) ==> (x != 4);
        loop invariant z1 == \at(z1,Pre) && z2 == \at(z2,Pre) && z3 == \at(z3,Pre);
    */
    while (unknown()) {
        x = x + 2;
        y = y + 2;
    }

    /*@ assert (y == 0) ==> (x != 4); */
}

2025-08-15 11:10:07,127 - INFO  - syntax Correct
2025-08-15 11:10:10,793 - INFO  - Validate:
2025-08-15 11:10:10,793 - INFO  - [False, False, True, True]
2025-08-15 11:10:10,793 - INFO  - 
2025-08-15 11:10:10,793 - INFO  - Verify:
2025-08-15 11:10:10,793 - INFO  - [True]
2025-08-15 11:10:10,794 - INFO  - 
2025-08-15 11:10:10,794 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:10:10,794 - INFO  - /*@
        loop invariant x >= 0 && x <= 2 + 2 * \at(x,Pre);
        loop invariant y >= 0 && y <= 2 + 2 * \at(y,Pre);
        loop invariant (y == 0) ==> (x != 4);
        loop invariant z1 == \at(z1,Pre) && z2 == \at(z2,Pre) && z3 == \at(z3,Pre);
    */
    while (unknown()) {
        x = x + 2;
        y = y + 2;
    }
2025-08-15 11:10:10,794 - INFO  - VST 格式的循环不变量
2025-08-15 11:10:10,794 - INFO  - /*@ Inv
    (x >= 0 && x <= 2 + 2 * x@pre) &&
(y >= 0 && y <= 2 + 2 * y@pre) &&
((y == 0) => (x != 4)) &&
(z1 == z1@pre && z2 == z2@pre && z3 == z3@pre)
    */
    
    while (unknown()) {
        x = x + 2;
        y = y + 2;
    }
2025-08-15 11:10:21,586 - INFO  - syntax Correct
2025-08-15 11:10:25,243 - INFO  - Validate:
2025-08-15 11:10:25,244 - INFO  - [False, False, True, True]
2025-08-15 11:10:25,244 - INFO  - 
2025-08-15 11:10:25,244 - INFO  - Verify:
2025-08-15 11:10:25,244 - INFO  - [True]
2025-08-15 11:10:25,244 - INFO  - 
2025-08-15 11:10:36,102 - INFO  - syntax Correct
2025-08-15 11:10:39,743 - INFO  - Validate:
2025-08-15 11:10:39,744 - INFO  - [False, False, True, True]
2025-08-15 11:10:39,744 - INFO  - 
2025-08-15 11:10:39,744 - INFO  - Verify:
2025-08-15 11:10:39,744 - INFO  - [True]
2025-08-15 11:10:39,744 - INFO  - 
2025-08-15 11:10:39,744 - INFO  - ========================================
2025-08-15 11:10:39,744 - INFO  - first_pass:
2025-08-15 11:10:39,744 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 11:10:39,744 - INFO  - ========================================
