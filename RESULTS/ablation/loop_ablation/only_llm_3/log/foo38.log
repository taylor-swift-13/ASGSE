2025-08-15 10:25:46,229 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:25:46,229 - INFO  - ========================================

2025-08-15 10:25:46,260 - INFO  - 初始待处理函数: ['foo38']
2025-08-15 10:25:46,260 - INFO  - 
GENERATE ANNOTATION FOR foo38
2025-08-15 10:25:46,260 - INFO  - ========================================

2025-08-15 10:25:46,260 - INFO  - 函数 foo38 已经初始化
2025-08-15 10:25:46,274 - INFO  - 
GENERATE LOOP INVARIANT FOR foo38
2025-08-15 10:25:46,274 - INFO  - ========================================

2025-08-15 10:25:46,287 - INFO  - file_name: foo38
2025-08-15 10:25:46,297 - DEBUG  - INNER_FLAG: False
2025-08-15 10:25:46,313 - INFO  - Variable Maps:[{'j': '0', 'i': '0', 'k': 'k@pre', 'n': 'n@pre'}]
2025-08-15 10:25:46,313 - INFO  - Path conditions: ['n@pre >= 0 && k@pre >= 0']
2025-08-15 10:25:46,313 - INFO  - Pre condition: n@pre >= 0 && k@pre >= 0 && (j == 0) * (i == 0) * (k == k@pre) * (n == n@pre)
2025-08-15 10:25:46,313 - INFO  - Loop Condition: i <= n
2025-08-15 10:25:46,313 - INFO  - Array Names: []
2025-08-15 10:25:46,313 - INFO  - Updated Loop Conditions: ['0 <= n@pre']
2025-08-15 10:25:46,313 - INFO  - Global Unchanged Variables: ['k', 'n']
2025-08-15 10:25:46,313 - INFO  - Non Inductive Variables: []
2025-08-15 10:25:50,558 - DEBUG  - invgen reasoning
2025-08-15 10:25:50,558 - DEBUG  - ```c
/*@ requires n >= 0; 
    requires k >= 0;
*/
void foo38(int n, int k) {
  
    int i = 0;
    int j = 0;
    
    /*@
      loop invariant 0 <= i <= n + 1;
      loop invariant j == (i * (i - 1)) / 2;
      loop invariant i + j + k > (2 * n) - (n * (n + 1)) / 2;
      loop assigns i, j;
      loop variant n - i;
    */
    while (i <= n) {
        i = i + 1;
        j = j + i;
    }
    
    /*@ assert i + j + k > (2 * n); */;
}
```
2025-08-15 10:25:50,559 - INFO  - 生成循环不变量
2025-08-15 10:25:50,559 - INFO  - 
/*@ requires n >= 0; 
    requires k >= 0;
*/
void foo38(int n, int k) {
  
    int i = 0;
    int j = 0;
    
    /*@
      loop invariant 0 <= i <= n + 1;
      loop invariant j == (i * (i - 1)) / 2;
      loop invariant i + j + k > (2 * n) - (n * (n + 1)) / 2;
      loop assigns i, j;
      loop variant n - i;
    */
    while (i <= n) {
        i = i + 1;
        j = j + i;
    }
    
    /*@ assert i + j + k > (2 * n); */;
}

2025-08-15 10:25:50,559 - INFO  - 注释过不变量的代码
2025-08-15 10:25:50,559 - INFO  - 
/*@ requires n >= 0; 
    requires k >= 0;
*/
void foo38(int n, int k) {
  
    int i = 0;
    int j = 0;
    
    /*@
      loop invariant 0 <= i <= n + 1;
      loop invariant j == (i * (i - 1)) / 2;
      loop invariant i + j + k > (2 * n) - (n * (n + 1)) / 2;
      loop assigns i, j;
      loop variant n - i;
    */
    while (i <= n) {
        i = i + 1;
        j = j + i;
    }
    
    /*@ assert i + j + k > (2 * n); */;
}

2025-08-15 10:26:01,278 - INFO  - syntax Correct
2025-08-15 10:26:04,911 - INFO  - Validate:
2025-08-15 10:26:04,911 - INFO  - [True, False, False]
2025-08-15 10:26:04,911 - INFO  - 
2025-08-15 10:26:04,911 - INFO  - Verify:
2025-08-15 10:26:04,911 - INFO  - [True]
2025-08-15 10:26:04,911 - INFO  - 
2025-08-15 10:26:04,911 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:26:04,911 - INFO  - /*@
      loop invariant 0 <= i <= n + 1;
      loop invariant j == (i * (i - 1)) / 2;
      loop invariant i + j + k > (2 * n) - (n * (n + 1)) / 2;
      loop assigns i, j;
      loop variant n - i;
    */
    while (i <= n) {
        i = i + 1;
        j = j + i;
    }
2025-08-15 10:26:04,912 - INFO  - VST 格式的循环不变量
2025-08-15 10:26:04,912 - INFO  - /*@ Inv
    (0 <= i && i <= n + 1) &&
(j == (i * (i - 1)) / 2) &&
(i + j + k > (2 * n) - (n * (n + 1)) / 2
      loop assigns i, j
      loop variant n - i)
    */
    
    while (i <= n) {
        i = i + 1;
        j = j + i;
    }
2025-08-15 10:26:15,597 - INFO  - syntax Correct
2025-08-15 10:26:19,233 - INFO  - Validate:
2025-08-15 10:26:19,233 - INFO  - [True, False, False]
2025-08-15 10:26:19,233 - INFO  - 
2025-08-15 10:26:19,233 - INFO  - Verify:
2025-08-15 10:26:19,233 - INFO  - [True]
2025-08-15 10:26:19,233 - INFO  - 
2025-08-15 10:26:29,977 - INFO  - syntax Correct
2025-08-15 10:26:33,610 - INFO  - Validate:
2025-08-15 10:26:33,611 - INFO  - [True, False, False]
2025-08-15 10:26:33,611 - INFO  - 
2025-08-15 10:26:33,611 - INFO  - Verify:
2025-08-15 10:26:33,611 - INFO  - [True]
2025-08-15 10:26:33,611 - INFO  - 
2025-08-15 10:26:33,611 - INFO  - ========================================
2025-08-15 10:26:33,611 - INFO  - first_pass:
2025-08-15 10:26:33,611 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 10:26:33,611 - INFO  - ========================================
