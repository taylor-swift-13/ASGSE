2025-08-15 11:00:39,747 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:00:39,747 - INFO  - ========================================

2025-08-15 11:00:39,856 - INFO  - 初始待处理函数: ['foo41']
2025-08-15 11:00:39,856 - INFO  - 
GENERATE ANNOTATION FOR foo41
2025-08-15 11:00:39,856 - INFO  - ========================================

2025-08-15 11:00:39,856 - INFO  - 函数 foo41 已经初始化
2025-08-15 11:00:39,871 - INFO  - 
GENERATE LOOP INVARIANT FOR foo41
2025-08-15 11:00:39,871 - INFO  - ========================================

2025-08-15 11:00:39,884 - INFO  - file_name: foo41
2025-08-15 11:00:39,895 - DEBUG  - INNER_FLAG: False
2025-08-15 11:00:39,912 - INFO  - Variable Maps:[{'x': '0', 'n': 'n@pre'}]
2025-08-15 11:00:39,912 - INFO  - Path conditions: [None]
2025-08-15 11:00:39,912 - INFO  - Pre condition: (x == 0) * (n == n@pre)
2025-08-15 11:00:39,912 - INFO  - Loop Condition: x < n
2025-08-15 11:00:39,912 - INFO  - Array Names: []
2025-08-15 11:00:39,912 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-15 11:00:39,912 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 11:00:39,912 - INFO  - Non Inductive Variables: []
2025-08-15 11:00:48,671 - DEBUG  - invgen reasoning
2025-08-15 11:00:48,671 - DEBUG  - ```c
void foo41(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (n >= 0) ==> (x == n); */
    
}
```
2025-08-15 11:00:48,671 - INFO  - 生成循环不变量
2025-08-15 11:00:48,671 - INFO  - 
void foo41(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (n >= 0) ==> (x == n); */
    
}

2025-08-15 11:00:48,671 - INFO  - 注释过不变量的代码
2025-08-15 11:00:48,671 - INFO  - 
void foo41(int n) {
  
    int x = 0;
    
    /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
            
    /*@ assert (n >= 0) ==> (x == n); */
    
}

2025-08-15 11:00:59,402 - INFO  - syntax Correct
2025-08-15 11:01:02,970 - INFO  - Validate:
2025-08-15 11:01:02,971 - INFO  - [False, True]
2025-08-15 11:01:02,971 - INFO  - 
2025-08-15 11:01:02,971 - INFO  - Verify:
2025-08-15 11:01:02,971 - INFO  - [True]
2025-08-15 11:01:02,971 - INFO  - 
2025-08-15 11:01:02,971 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:01:02,971 - INFO  - /*@
      loop invariant 0 <= x <= n;
      loop invariant n == \at(n, Pre);
    */
    while (x < n) {
      
      x  = (x + 1);
      
    }
2025-08-15 11:01:02,971 - INFO  - VST 格式的循环不变量
2025-08-15 11:01:02,971 - INFO  - /*@ Inv
    (0 <= x && x <= n) &&
(n == n@pre)
    */
    
    while (x < n) {
      
      x  = (x + 1);
      
    }
2025-08-15 11:01:13,793 - INFO  - syntax Correct
2025-08-15 11:01:17,362 - INFO  - Validate:
2025-08-15 11:01:17,363 - INFO  - [False, True]
2025-08-15 11:01:17,363 - INFO  - 
2025-08-15 11:01:17,363 - INFO  - Verify:
2025-08-15 11:01:17,363 - INFO  - [True]
2025-08-15 11:01:17,363 - INFO  - 
2025-08-15 11:01:28,243 - INFO  - syntax Correct
2025-08-15 11:01:31,883 - INFO  - Validate:
2025-08-15 11:01:31,884 - INFO  - [False, True]
2025-08-15 11:01:31,884 - INFO  - 
2025-08-15 11:01:31,884 - INFO  - Verify:
2025-08-15 11:01:31,884 - INFO  - [True]
2025-08-15 11:01:31,884 - INFO  - 
2025-08-15 11:01:31,884 - INFO  - ========================================
2025-08-15 11:01:31,884 - INFO  - first_pass:
2025-08-15 11:01:31,884 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 11:01:31,884 - INFO  - ========================================
