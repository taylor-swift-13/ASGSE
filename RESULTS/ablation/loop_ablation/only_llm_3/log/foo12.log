2025-08-15 11:13:24,764 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:13:24,764 - INFO  - ========================================

2025-08-15 11:13:24,904 - INFO  - 初始待处理函数: ['foo12', 'unknown']
2025-08-15 11:13:24,905 - INFO  - 现在处理函数 unknown

2025-08-15 11:13:24,905 - INFO  - 
GENERATE ANNOTATION FOR foo12
2025-08-15 11:13:24,905 - INFO  - ========================================

2025-08-15 11:13:24,905 - INFO  - 函数 foo12 已经初始化
2025-08-15 11:13:24,919 - INFO  - 
GENERATE LOOP INVARIANT FOR foo12
2025-08-15 11:13:24,919 - INFO  - ========================================

2025-08-15 11:13:24,933 - INFO  - file_name: foo12
2025-08-15 11:13:24,943 - DEBUG  - INNER_FLAG: False
2025-08-15 11:13:24,958 - INFO  - Variable Maps:[{'m': '1', 'x': '1', 'n': 'n@pre'}]
2025-08-15 11:13:24,958 - INFO  - Path conditions: [None]
2025-08-15 11:13:24,958 - INFO  - Pre condition: (m == 1) * (x == 1) * (n == n@pre)
2025-08-15 11:13:24,958 - INFO  - Loop Condition: x < n
2025-08-15 11:13:24,958 - INFO  - Array Names: []
2025-08-15 11:13:24,958 - INFO  - Updated Loop Conditions: ['1 < n@pre']
2025-08-15 11:13:24,958 - INFO  - Global Unchanged Variables: ['n']
2025-08-15 11:13:24,958 - INFO  - Non Inductive Variables: ['m']
2025-08-15 11:13:27,942 - DEBUG  - invgen reasoning
2025-08-15 11:13:27,942 - DEBUG  - ```c
int unknown();
void foo12(int n)
{
    int x = 1;
    int m = 1;
    
    /* >>> LOOP INVARIANT FILLED <<< */
    
    /*@
        loop invariant x >= 1;
        loop invariant x <= n;
        loop invariant (m == 1) || (m >= 1 && m < x);
        loop invariant (n == \at(n,Pre));
    */
    while (x < n) {
        
        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
            
    /*@ assert (n > 1) ==> (m < n); */
}
```
2025-08-15 11:13:27,942 - INFO  - 生成循环不变量
2025-08-15 11:13:27,943 - INFO  - 
int unknown();
void foo12(int n)
{
    int x = 1;
    int m = 1;
    
    /* >>> LOOP INVARIANT FILLED <<< */
    
    /*@
        loop invariant x >= 1;
        loop invariant x <= n;
        loop invariant (m == 1) || (m >= 1 && m < x);
        loop invariant (n == \at(n,Pre));
    */
    while (x < n) {
        
        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
            
    /*@ assert (n > 1) ==> (m < n); */
}

2025-08-15 11:13:27,943 - INFO  - 注释过不变量的代码
2025-08-15 11:13:27,943 - INFO  - 
int unknown();
void foo12(int n)
{
    int x = 1;
    int m = 1;
    
    /* >>> LOOP INVARIANT FILLED <<< */
    
    /*@
        loop invariant x >= 1;
        loop invariant x <= n;
        loop invariant (m == 1) || (m >= 1 && m < x);
        loop invariant (n == \at(n,Pre));
    */
    while (x < n) {
        
        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
            
    /*@ assert (n > 1) ==> (m < n); */
}

2025-08-15 11:13:38,701 - INFO  - syntax Correct
2025-08-15 11:13:42,337 - INFO  - Validate:
2025-08-15 11:13:42,337 - INFO  - [True, False, True, True]
2025-08-15 11:13:42,337 - INFO  - 
2025-08-15 11:13:42,337 - INFO  - Verify:
2025-08-15 11:13:42,337 - INFO  - [True]
2025-08-15 11:13:42,337 - INFO  - 
2025-08-15 11:13:42,337 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:13:42,337 - INFO  - /*@
        loop invariant x >= 1;
        loop invariant x <= n;
        loop invariant (m == 1) || (m >= 1 && m < x);
        loop invariant (n == \at(n,Pre));
    */
    while (x < n) {
        
        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
2025-08-15 11:13:42,338 - INFO  - VST 格式的循环不变量
2025-08-15 11:13:42,338 - INFO  - /*@ Inv
    (x >= 1) &&
(x <= n) &&
((m == 1) || (m >= 1 && m < x)) &&
((n == n@pre))
    */
    
    while (x < n) {
        
        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
2025-08-15 11:13:53,071 - INFO  - syntax Correct
2025-08-15 11:13:56,712 - INFO  - Validate:
2025-08-15 11:13:56,713 - INFO  - [True, False, True, True]
2025-08-15 11:13:56,713 - INFO  - 
2025-08-15 11:13:56,713 - INFO  - Verify:
2025-08-15 11:13:56,713 - INFO  - [True]
2025-08-15 11:13:56,713 - INFO  - 
2025-08-15 11:14:07,459 - INFO  - syntax Correct
2025-08-15 11:14:11,093 - INFO  - Validate:
2025-08-15 11:14:11,093 - INFO  - [True, False, True, True]
2025-08-15 11:14:11,093 - INFO  - 
2025-08-15 11:14:11,093 - INFO  - Verify:
2025-08-15 11:14:11,093 - INFO  - [True]
2025-08-15 11:14:11,093 - INFO  - 
2025-08-15 11:14:11,093 - INFO  - ========================================
2025-08-15 11:14:11,093 - INFO  - first_pass:
2025-08-15 11:14:11,093 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 11:14:11,093 - INFO  - ========================================
