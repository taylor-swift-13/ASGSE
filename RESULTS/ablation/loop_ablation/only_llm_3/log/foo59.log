2025-08-15 11:03:54,259 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:03:54,259 - INFO  - ========================================

2025-08-15 11:03:54,375 - INFO  - 初始待处理函数: ['foo59']
2025-08-15 11:03:54,375 - INFO  - 
GENERATE ANNOTATION FOR foo59
2025-08-15 11:03:54,375 - INFO  - ========================================

2025-08-15 11:03:54,375 - INFO  - 函数 foo59 已经初始化
2025-08-15 11:03:54,389 - INFO  - 
GENERATE LOOP INVARIANT FOR foo59
2025-08-15 11:03:54,389 - INFO  - ========================================

2025-08-15 11:03:54,402 - INFO  - file_name: foo59
2025-08-15 11:03:54,415 - DEBUG  - INNER_FLAG: False
2025-08-15 11:03:54,432 - INFO  - Variable Maps:[{'j': '0', 'b': '0', 'a': 'a@pre', 'flag': 'flag@pre'}]
2025-08-15 11:03:54,432 - INFO  - Path conditions: ['flag@pre > 0']
2025-08-15 11:03:54,433 - INFO  - Pre condition: flag@pre > 0 && (j == 0) * (b == 0) * (a == a@pre) * (flag == flag@pre)
2025-08-15 11:03:54,433 - INFO  - Loop Condition: b < 100
2025-08-15 11:03:54,433 - INFO  - Array Names: []
2025-08-15 11:03:54,433 - INFO  - Updated Loop Conditions: ['0 < 100']
2025-08-15 11:03:54,433 - INFO  - Global Unchanged Variables: ['a', 'flag']
2025-08-15 11:03:54,433 - INFO  - Non Inductive Variables: []
2025-08-15 11:03:57,703 - DEBUG  - invgen reasoning
2025-08-15 11:03:57,703 - DEBUG  - ```c
/*@
requires flag > 0;
*/
void foo59(int flag, int a) {
   int b = 0;
   int j = 0;
 
   
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            loop invariant 0 <= b <= 100;
            loop invariant flag ==> (j == b);
            */
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
            

   /*@ assert flag ==> (j == 100); */
}
```
2025-08-15 11:03:57,703 - INFO  - 生成循环不变量
2025-08-15 11:03:57,703 - INFO  - 
/*@
requires flag > 0;
*/
void foo59(int flag, int a) {
   int b = 0;
   int j = 0;
 
   
            
            /*@
            loop invariant 0 <= b <= 100;
            loop invariant flag ==> (j == b);
            */
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
            

   /*@ assert flag ==> (j == 100); */
}

2025-08-15 11:03:57,703 - INFO  - 注释过不变量的代码
2025-08-15 11:03:57,703 - INFO  - 
/*@
requires flag > 0;
*/
void foo59(int flag, int a) {
   int b = 0;
   int j = 0;
 
   
            
            /*@
            loop invariant 0 <= b <= 100;
            loop invariant flag ==> (j == b);
            */
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
            

   /*@ assert flag ==> (j == 100); */
}

2025-08-15 11:04:08,386 - INFO  - syntax Correct
2025-08-15 11:04:11,937 - INFO  - Validate:
2025-08-15 11:04:11,937 - INFO  - [True, True]
2025-08-15 11:04:11,937 - INFO  - 
2025-08-15 11:04:11,937 - INFO  - Verify:
2025-08-15 11:04:11,937 - INFO  - [True]
2025-08-15 11:04:11,937 - INFO  - 
2025-08-15 11:04:11,937 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:04:11,937 - INFO  - /*@
            loop invariant 0 <= b <= 100;
            loop invariant flag ==> (j == b);
            */
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
2025-08-15 11:04:11,938 - INFO  - VST 格式的循环不变量
2025-08-15 11:04:11,938 - INFO  - /*@ Inv
    (0 <= b && b <= 100) &&
(flag => (j == b))
    */
    
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
2025-08-15 11:04:11,938 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 11:04:11,938 - INFO  - 继续符号执行
2025-08-15 11:04:11,938 - INFO  - /*@ Inv
    (0 <= b && b <= 100) &&
(flag => (j == b))
    */
    
            for (b = 0; b < 100 ; ++b){
      if (flag)
         j = j + 1;
   }
2025-08-15 11:04:22,549 - INFO  - syntax Correct
2025-08-15 11:04:26,091 - INFO  - Validate:
2025-08-15 11:04:26,091 - INFO  - [True, True]
2025-08-15 11:04:26,091 - INFO  - 
2025-08-15 11:04:26,091 - INFO  - Verify:
2025-08-15 11:04:26,091 - INFO  - [True]
2025-08-15 11:04:26,091 - INFO  - 
2025-08-15 11:04:26,091 - INFO  - CORRECT INVARIANT
2025-08-15 11:04:36,737 - INFO  - syntax Correct
2025-08-15 11:04:40,324 - INFO  - Validate:
2025-08-15 11:04:40,325 - INFO  - [True, True]
2025-08-15 11:04:40,325 - INFO  - 
2025-08-15 11:04:40,325 - INFO  - Verify:
2025-08-15 11:04:40,325 - INFO  - [True]
2025-08-15 11:04:40,325 - INFO  - 
2025-08-15 11:04:40,325 - INFO  - ========================================
2025-08-15 11:04:40,325 - INFO  - first_pass:
2025-08-15 11:04:40,325 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 11:04:40,325 - INFO  - ========================================
