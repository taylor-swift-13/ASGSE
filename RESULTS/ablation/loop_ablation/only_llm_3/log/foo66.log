2025-08-15 10:17:24,981 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 10:17:24,981 - INFO  - ========================================

2025-08-15 10:17:24,994 - INFO  - 初始待处理函数: ['foo66']
2025-08-15 10:17:24,994 - INFO  - 
GENERATE ANNOTATION FOR foo66
2025-08-15 10:17:24,994 - INFO  - ========================================

2025-08-15 10:17:24,994 - INFO  - 函数 foo66 已经初始化
2025-08-15 10:17:25,008 - INFO  - 
GENERATE LOOP INVARIANT FOR foo66
2025-08-15 10:17:25,008 - INFO  - ========================================

2025-08-15 10:17:25,021 - INFO  - file_name: foo66
2025-08-15 10:17:25,031 - DEBUG  - INNER_FLAG: False
2025-08-15 10:17:25,046 - INFO  - Variable Maps:[{'m': '10', 'i': '0', 'y': '0', 'x': '0', 'n': 'n@pre'}]
2025-08-15 10:17:25,046 - INFO  - Path conditions: [None]
2025-08-15 10:17:25,046 - INFO  - Pre condition: (m == 10) * (i == 0) * (y == 0) * (x == 0) * (n == n@pre)
2025-08-15 10:17:25,047 - INFO  - Loop Condition: i < n
2025-08-15 10:17:25,047 - INFO  - Array Names: []
2025-08-15 10:17:25,047 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-15 10:17:25,047 - INFO  - Global Unchanged Variables: ['m', 'n']
2025-08-15 10:17:25,047 - INFO  - Non Inductive Variables: []
2025-08-15 10:17:33,148 - DEBUG  - invgen reasoning
2025-08-15 10:17:33,148 - DEBUG  - ```c
void foo66(int n)
{
  int x=0;
  int y=0;
  int i=0;
  int m=10;
  
 
  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant 0 <= i <= n;
              loop invariant x == i;
              loop invariant y == i / 2;
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}
```
2025-08-15 10:17:33,148 - INFO  - 生成循环不变量
2025-08-15 10:17:33,148 - INFO  - 
void foo66(int n)
{
  int x=0;
  int y=0;
  int i=0;
  int m=10;
  
 
  
            
            /*@
              loop invariant 0 <= i <= n;
              loop invariant x == i;
              loop invariant y == i / 2;
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}

2025-08-15 10:17:33,150 - INFO  - 注释过不变量的代码
2025-08-15 10:17:33,150 - INFO  - 
void foo66(int n)
{
  int x=0;
  int y=0;
  int i=0;
  int m=10;
  
 
  
            
            /*@
              loop invariant 0 <= i <= n;
              loop invariant x == i;
              loop invariant y == i / 2;
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
            
  
  /*@ assert (i == m) ==> (x == 2* y);*/
}

2025-08-15 10:17:44,020 - INFO  - syntax Correct
2025-08-15 10:17:47,787 - INFO  - Validate:
2025-08-15 10:17:47,787 - INFO  - [False, True, True]
2025-08-15 10:17:47,787 - INFO  - 
2025-08-15 10:17:47,787 - INFO  - Verify:
2025-08-15 10:17:47,787 - INFO  - [False]
2025-08-15 10:17:47,787 - INFO  - 
2025-08-15 10:17:47,787 - INFO  - ACSL 格式的循环不变量
2025-08-15 10:17:47,787 - INFO  - /*@
              loop invariant 0 <= i <= n;
              loop invariant x == i;
              loop invariant y == i / 2;
            */
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
2025-08-15 10:17:47,788 - INFO  - VST 格式的循环不变量
2025-08-15 10:17:47,788 - INFO  - /*@ Inv
    (0 <= i && i <= n) &&
(x == i) &&
(y == i / 2)
    */
    
            while(i < n) {
    i++;
    x++;
    if(i%2 == 0) y++;
  }
2025-08-15 10:17:58,615 - INFO  - syntax Correct
2025-08-15 10:18:02,386 - INFO  - Validate:
2025-08-15 10:18:02,387 - INFO  - [False, True, True]
2025-08-15 10:18:02,387 - INFO  - 
2025-08-15 10:18:02,387 - INFO  - Verify:
2025-08-15 10:18:02,387 - INFO  - [False]
2025-08-15 10:18:02,387 - INFO  - 
2025-08-15 10:18:13,161 - INFO  - syntax Correct
2025-08-15 10:18:16,910 - INFO  - Validate:
2025-08-15 10:18:16,911 - INFO  - [False, True, True]
2025-08-15 10:18:16,911 - INFO  - 
2025-08-15 10:18:16,911 - INFO  - Verify:
2025-08-15 10:18:16,911 - INFO  - [False]
2025-08-15 10:18:16,911 - INFO  - 
2025-08-15 10:18:16,911 - INFO  - ========================================
2025-08-15 10:18:16,911 - INFO  - first_pass:
2025-08-15 10:18:16,911 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-15 10:18:16,911 - INFO  - ========================================
