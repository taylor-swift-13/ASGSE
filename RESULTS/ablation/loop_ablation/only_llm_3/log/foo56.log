2025-08-15 11:02:19,436 - INFO  - 
FUNCTION INITIALIZATION
2025-08-15 11:02:19,436 - INFO  - ========================================

2025-08-15 11:02:19,548 - INFO  - 初始待处理函数: ['foo56']
2025-08-15 11:02:19,548 - INFO  - 
GENERATE ANNOTATION FOR foo56
2025-08-15 11:02:19,548 - INFO  - ========================================

2025-08-15 11:02:19,548 - INFO  - 函数 foo56 已经初始化
2025-08-15 11:02:19,564 - INFO  - 
GENERATE LOOP INVARIANT FOR foo56
2025-08-15 11:02:19,564 - INFO  - ========================================

2025-08-15 11:02:19,580 - INFO  - file_name: foo56
2025-08-15 11:02:19,592 - DEBUG  - INNER_FLAG: False
2025-08-15 11:02:19,608 - INFO  - Variable Maps:[{'j': '1', 'i': '1', 'k': 'k@pre'}]
2025-08-15 11:02:19,608 - INFO  - Path conditions: ['0 <= k@pre && k@pre <= 1']
2025-08-15 11:02:19,608 - INFO  - Pre condition: 0 <= k@pre && k@pre <= 1 && (j == 1) * (i == 1) * (k == k@pre)
2025-08-15 11:02:19,608 - INFO  - Loop Condition: i < 1000000
2025-08-15 11:02:19,608 - INFO  - Array Names: []
2025-08-15 11:02:19,608 - INFO  - Updated Loop Conditions: ['1 < 1000000']
2025-08-15 11:02:19,608 - INFO  - Global Unchanged Variables: []
2025-08-15 11:02:19,608 - INFO  - Non Inductive Variables: []
2025-08-15 11:02:24,461 - DEBUG  - invgen reasoning
2025-08-15 11:02:24,461 - DEBUG  - ```c
/*@ 
requires 0 <= k && k <= 1;
*/
void foo56(int k) {
    int i, j;
    i = 1;
    j = 1;
   
    /*@
      loop invariant 1 <= i + k && i + k <= 2;
      loop invariant i >= 1;
    */
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
}
```
2025-08-15 11:02:24,461 - INFO  - 生成循环不变量
2025-08-15 11:02:24,461 - INFO  - 
/*@ 
requires 0 <= k && k <= 1;
*/
void foo56(int k) {
    int i, j;
    i = 1;
    j = 1;
   
    /*@
      loop invariant 1 <= i + k && i + k <= 2;
      loop invariant i >= 1;
    */
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
}

2025-08-15 11:02:24,461 - INFO  - 注释过不变量的代码
2025-08-15 11:02:24,461 - INFO  - 
/*@ 
requires 0 <= k && k <= 1;
*/
void foo56(int k) {
    int i, j;
    i = 1;
    j = 1;
   
    /*@
      loop invariant 1 <= i + k && i + k <= 2;
      loop invariant i >= 1;
    */
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
}

2025-08-15 11:02:35,312 - INFO  - syntax Correct
2025-08-15 11:02:38,855 - INFO  - Validate:
2025-08-15 11:02:38,856 - INFO  - [True, True]
2025-08-15 11:02:38,856 - INFO  - 
2025-08-15 11:02:38,856 - INFO  - Verify:
2025-08-15 11:02:38,856 - INFO  - [True]
2025-08-15 11:02:38,856 - INFO  - 
2025-08-15 11:02:38,856 - INFO  - ACSL 格式的循环不变量
2025-08-15 11:02:38,856 - INFO  - /*@
      loop invariant 1 <= i + k && i + k <= 2;
      loop invariant i >= 1;
    */
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
2025-08-15 11:02:38,856 - INFO  - VST 格式的循环不变量
2025-08-15 11:02:38,857 - INFO  - /*@ Inv
    (1 <= i + k && i + k <= 2) &&
(i >= 1)
    */
    
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
2025-08-15 11:02:38,857 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-15 11:02:38,857 - INFO  - 继续符号执行
2025-08-15 11:02:38,857 - INFO  - /*@ Inv
    (1 <= i + k && i + k <= 2) &&
(i >= 1)
    */
    
    while (i < 1000000) {
        i = i + 1;
        j = j + k;
        k = k - 1;
        /*@ assert 1 <= i + k && i + k <= 2 && i >= 1;*/
    }
2025-08-15 11:02:49,670 - INFO  - syntax Correct
2025-08-15 11:02:53,241 - INFO  - Validate:
2025-08-15 11:02:53,242 - INFO  - [True, True]
2025-08-15 11:02:53,242 - INFO  - 
2025-08-15 11:02:53,242 - INFO  - Verify:
2025-08-15 11:02:53,242 - INFO  - [True]
2025-08-15 11:02:53,242 - INFO  - 
2025-08-15 11:02:53,242 - INFO  - CORRECT INVARIANT
2025-08-15 11:03:04,053 - INFO  - syntax Correct
2025-08-15 11:03:07,620 - INFO  - Validate:
2025-08-15 11:03:07,620 - INFO  - [True, True]
2025-08-15 11:03:07,620 - INFO  - 
2025-08-15 11:03:07,620 - INFO  - Verify:
2025-08-15 11:03:07,620 - INFO  - [True]
2025-08-15 11:03:07,620 - INFO  - 
2025-08-15 11:03:07,620 - INFO  - ========================================
2025-08-15 11:03:07,620 - INFO  - first_pass:
2025-08-15 11:03:07,620 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-15 11:03:07,621 - INFO  - ========================================
