2025-08-16 02:54:21,950 - INFO  - 
FUNCTION INITIALIZATION
2025-08-16 02:54:21,951 - INFO  - ========================================

2025-08-16 02:54:21,977 - INFO  - 初始待处理函数: ['foo62']
2025-08-16 02:54:21,978 - INFO  - 
GENERATE ANNOTATION FOR foo62
2025-08-16 02:54:21,978 - INFO  - ========================================

2025-08-16 02:54:21,978 - INFO  - 函数 foo62 已经初始化
2025-08-16 02:54:21,992 - INFO  - 
GENERATE LOOP INVARIANT FOR foo62
2025-08-16 02:54:21,992 - INFO  - ========================================

2025-08-16 02:54:22,006 - INFO  - file_name: foo62
2025-08-16 02:54:22,016 - DEBUG  - INNER_FLAG: False
2025-08-16 02:54:22,031 - INFO  - Variable Maps:[{'sum': '0', 'n': 'n@pre'}]
2025-08-16 02:54:22,031 - INFO  - Path conditions: ['n@pre >= 0']
2025-08-16 02:54:22,031 - INFO  - Pre condition: n@pre >= 0 && (sum == 0) * undef_data_at(&i) * (n == n@pre)
2025-08-16 02:54:22,031 - INFO  - Loop Condition: i < n
2025-08-16 02:54:22,031 - INFO  - Array Names: []
2025-08-16 02:54:22,032 - INFO  - Updated Loop Conditions: ['i < n@pre']
2025-08-16 02:54:22,032 - INFO  - Global Unchanged Variables: ['n']
2025-08-16 02:54:22,032 - INFO  - Non Inductive Variables: []
2025-08-16 02:54:38,644 - INFO  - after const
2025-08-16 02:54:38,644 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            
2025-08-16 02:54:38,644 - INFO  - after not in
2025-08-16 02:54:38,644 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            
2025-08-16 02:54:38,644 - INFO  - after vars
2025-08-16 02:54:38,644 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (i < \at(n,Pre)) ==> (PLACE_HOLDER_sum) ;
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            
2025-08-16 02:54:38,644 - INFO  - after verification goal
2025-08-16 02:54:38,645 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (i < \at(n,Pre)) ==> (((sum == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (i < \at(n,Pre)) ==> (PLACE_HOLDER_sum) ;
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            
2025-08-16 02:55:18,028 - DEBUG  - invgen reasoning
2025-08-16 02:55:18,028 - DEBUG  - ```c
/*@
requires n >= 0;
*/
void foo62(int n) {
  int i, sum = 0;
 
  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (i < \at(n,Pre)) ==> (((sum == 0)&&(n == \at(n,Pre))) || (sum == (i * (i - 1)) / 2));
          loop invariant (i < \at(n,Pre)) ==> (sum == (i * (i - 1)) / 2);
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == (n * (n - 1)) / 2)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            

  /*@ assert sum >= 0; */
}
```
2025-08-16 02:55:18,028 - INFO  - 生成循环不变量
2025-08-16 02:55:18,028 - INFO  - 
/*@
requires n >= 0;
*/
void foo62(int n) {
  int i, sum = 0;
 
  
            
            /*@
          loop invariant (i < \at(n,Pre)) ==> (((sum == 0)&&(n == \at(n,Pre))) || (sum == (i * (i - 1)) / 2));
          loop invariant (i < \at(n,Pre)) ==> (sum == (i * (i - 1)) / 2);
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == (n * (n - 1)) / 2)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            

  /*@ assert sum >= 0; */
}

2025-08-16 02:55:18,029 - INFO  - 注释过不变量的代码
2025-08-16 02:55:18,029 - INFO  - 
/*@
requires n >= 0;
*/
void foo62(int n) {
  int i, sum = 0;
 
  
            
            /*@
          loop invariant (i < \at(n,Pre)) ==> (((sum == 0)&&(n == \at(n,Pre))) || (sum == (i * (i - 1)) / 2));
          loop invariant (i < \at(n,Pre)) ==> (sum == (i * (i - 1)) / 2);
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == (n * (n - 1)) / 2)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
            

  /*@ assert sum >= 0; */
}

2025-08-16 02:55:28,871 - INFO  - syntax Correct
2025-08-16 02:55:32,476 - INFO  - Validate:
2025-08-16 02:55:32,476 - INFO  - [True, True, True, True]
2025-08-16 02:55:32,476 - INFO  - 
2025-08-16 02:55:32,476 - INFO  - Verify:
2025-08-16 02:55:32,476 - INFO  - [True]
2025-08-16 02:55:32,476 - INFO  - 
2025-08-16 02:55:32,477 - INFO  - ACSL 格式的循环不变量
2025-08-16 02:55:32,477 - INFO  - /*@
          loop invariant (i < \at(n,Pre)) ==> (((sum == 0)&&(n == \at(n,Pre))) || (sum == (i * (i - 1)) / 2));
          loop invariant (i < \at(n,Pre)) ==> (sum == (i * (i - 1)) / 2);
          loop invariant (!(i < \at(n,Pre))) ==> ((sum == (n * (n - 1)) / 2)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
2025-08-16 02:55:32,477 - INFO  - VST 格式的循环不变量
2025-08-16 02:55:32,477 - INFO  - /*@ Inv
    ((i < n@pre) => (((sum == 0)&&(n == n@pre)) || (sum == (i * (i - 1)) / 2))) &&
((i < n@pre) => (sum == (i * (i - 1)) / 2)) &&
((!(i < n@pre)) => ((sum == (n * (n - 1)) / 2)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
2025-08-16 02:55:32,477 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-16 02:55:32,477 - INFO  - 继续符号执行
2025-08-16 02:55:32,477 - INFO  - /*@ Inv
    ((i < n@pre) => (((sum == 0)&&(n == n@pre)) || (sum == (i * (i - 1)) / 2))) &&
((i < n@pre) => (sum == (i * (i - 1)) / 2)) &&
((!(i < n@pre)) => ((sum == (n * (n - 1)) / 2)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            for (i = 0; i < n; ++i){
    sum = sum + i;
  }
2025-08-16 02:55:43,246 - INFO  - syntax Correct
2025-08-16 02:55:46,844 - INFO  - Validate:
2025-08-16 02:55:46,845 - INFO  - [True, True, True, True]
2025-08-16 02:55:46,845 - INFO  - 
2025-08-16 02:55:46,845 - INFO  - Verify:
2025-08-16 02:55:46,845 - INFO  - [True]
2025-08-16 02:55:46,845 - INFO  - 
2025-08-16 02:55:46,845 - INFO  - CORRECT INVARIANT
2025-08-16 02:55:57,599 - INFO  - syntax Correct
2025-08-16 02:56:01,195 - INFO  - Validate:
2025-08-16 02:56:01,195 - INFO  - [True, True, True, True]
2025-08-16 02:56:01,195 - INFO  - 
2025-08-16 02:56:01,195 - INFO  - Verify:
2025-08-16 02:56:01,195 - INFO  - [True]
2025-08-16 02:56:01,195 - INFO  - 
2025-08-16 02:56:01,195 - INFO  - ========================================
2025-08-16 02:56:01,195 - INFO  - first_pass:
2025-08-16 02:56:01,196 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-16 02:56:01,196 - INFO  - ========================================
