2025-08-17 22:03:07,114 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 22:03:07,114 - INFO  - ========================================

2025-08-17 22:03:07,187 - INFO  - 初始待处理函数: ['foo20']
2025-08-17 22:03:07,187 - INFO  - 
GENERATE ANNOTATION FOR foo20
2025-08-17 22:03:07,187 - INFO  - ========================================

2025-08-17 22:03:07,187 - INFO  - 函数 foo20 已经初始化
2025-08-17 22:03:07,203 - INFO  - 
GENERATE LOOP INVARIANT FOR foo20
2025-08-17 22:03:07,203 - INFO  - ========================================

2025-08-17 22:03:07,217 - INFO  - file_name: foo20
2025-08-17 22:03:07,227 - DEBUG  - INNER_FLAG: False
2025-08-17 22:03:07,241 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre'}]
2025-08-17 22:03:07,241 - INFO  - Path conditions: [None]
2025-08-17 22:03:07,242 - INFO  - Pre condition: (x == 1) * (y == y@pre)
2025-08-17 22:03:07,242 - INFO  - Loop Condition: x <= 10
2025-08-17 22:03:07,242 - INFO  - Array Names: []
2025-08-17 22:03:07,242 - INFO  - Updated Loop Conditions: ['1 <= 10']
2025-08-17 22:03:07,242 - INFO  - Global Unchanged Variables: []
2025-08-17 22:03:07,242 - INFO  - Non Inductive Variables: ['y']
2025-08-17 22:03:34,757 - INFO  - after const
2025-08-17 22:03:34,757 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:03:34,757 - INFO  - after not in
2025-08-17 22:03:34,757 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:03:34,758 - INFO  - after vars
2025-08-17 22:03:34,758 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:03:37,303 - DEBUG  - invgen reasoning
2025-08-17 22:03:37,304 - DEBUG  - ```c
void foo20(int y) {
    int x = 1;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}
```
2025-08-17 22:03:37,304 - INFO  - 生成循环不变量
2025-08-17 22:03:37,304 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:03:37,304 - INFO  - 注释过不变量的代码
2025-08-17 22:03:37,304 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:03:48,147 - INFO  - syntax Correct
2025-08-17 22:03:51,702 - INFO  - Validate:
2025-08-17 22:03:51,702 - INFO  - [False, True]
2025-08-17 22:03:51,702 - INFO  - 
2025-08-17 22:03:51,702 - INFO  - Verify:
2025-08-17 22:03:51,702 - INFO  - [True]
2025-08-17 22:03:51,702 - INFO  - 
2025-08-17 22:03:51,702 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:03:51,702 - INFO  - /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:03:51,703 - INFO  - VST 格式的循环不变量
2025-08-17 22:03:51,703 - INFO  - /*@ Inv
    (((x == 1)&&(y == y@pre)) || (y == 10 - x) ) &&
((x >= 1 && x <= 11) )
    */
    
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:04:02,407 - INFO  - syntax Correct
2025-08-17 22:04:05,968 - INFO  - Validate:
2025-08-17 22:04:05,968 - INFO  - [False, True]
2025-08-17 22:04:05,968 - INFO  - 
2025-08-17 22:04:05,968 - INFO  - Verify:
2025-08-17 22:04:05,968 - INFO  - [True]
2025-08-17 22:04:05,968 - INFO  - 
2025-08-17 22:04:16,676 - INFO  - syntax Correct
2025-08-17 22:04:20,231 - INFO  - Validate:
2025-08-17 22:04:20,232 - INFO  - [False, True]
2025-08-17 22:04:20,232 - INFO  - 
2025-08-17 22:04:20,232 - INFO  - Verify:
2025-08-17 22:04:20,232 - INFO  - [True]
2025-08-17 22:04:20,232 - INFO  - 
2025-08-17 22:04:20,242 - DEBUG  - INNER_FLAG: False
2025-08-17 22:04:20,257 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre'}]
2025-08-17 22:04:20,257 - INFO  - Path conditions: [None]
2025-08-17 22:04:20,257 - INFO  - Pre condition: (x == 1) * (y == y@pre)
2025-08-17 22:04:20,257 - INFO  - Loop Condition: x <= 10
2025-08-17 22:04:20,257 - INFO  - Array Names: []
2025-08-17 22:04:20,257 - INFO  - Updated Loop Conditions: ['1 <= 10']
2025-08-17 22:04:20,257 - INFO  - Global Unchanged Variables: []
2025-08-17 22:04:20,257 - INFO  - Non Inductive Variables: ['y']
2025-08-17 22:04:43,700 - INFO  - after const
2025-08-17 22:04:43,700 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:04:43,700 - INFO  - after not in
2025-08-17 22:04:43,700 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:04:43,701 - INFO  - after vars
2025-08-17 22:04:43,701 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:04:51,581 - DEBUG  - invgen reasoning
2025-08-17 22:04:51,581 - DEBUG  - ```c
void foo20(int y) {
    int x = 1;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}
```
2025-08-17 22:04:51,581 - INFO  - 生成循环不变量
2025-08-17 22:04:51,581 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:04:51,582 - INFO  - 注释过不变量的代码
2025-08-17 22:04:51,582 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:05:02,431 - INFO  - syntax Correct
2025-08-17 22:05:05,985 - INFO  - Validate:
2025-08-17 22:05:05,985 - INFO  - [False, True]
2025-08-17 22:05:05,985 - INFO  - 
2025-08-17 22:05:05,985 - INFO  - Verify:
2025-08-17 22:05:05,985 - INFO  - [True]
2025-08-17 22:05:05,985 - INFO  - 
2025-08-17 22:05:05,985 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:05:05,986 - INFO  - /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:05:05,986 - INFO  - VST 格式的循环不变量
2025-08-17 22:05:05,986 - INFO  - /*@ Inv
    (((x == 1)&&(y == y@pre)) || (y == 10 - x) ) &&
((x >= 1 && x <= 11) )
    */
    
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:05:16,803 - INFO  - syntax Correct
2025-08-17 22:05:20,359 - INFO  - Validate:
2025-08-17 22:05:20,360 - INFO  - [False, True]
2025-08-17 22:05:20,360 - INFO  - 
2025-08-17 22:05:20,360 - INFO  - Verify:
2025-08-17 22:05:20,360 - INFO  - [True]
2025-08-17 22:05:20,360 - INFO  - 
2025-08-17 22:05:31,216 - INFO  - syntax Correct
2025-08-17 22:05:34,767 - INFO  - Validate:
2025-08-17 22:05:34,767 - INFO  - [False, True]
2025-08-17 22:05:34,767 - INFO  - 
2025-08-17 22:05:34,767 - INFO  - Verify:
2025-08-17 22:05:34,767 - INFO  - [True]
2025-08-17 22:05:34,767 - INFO  - 
2025-08-17 22:05:34,777 - DEBUG  - INNER_FLAG: False
2025-08-17 22:05:34,793 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre'}]
2025-08-17 22:05:34,793 - INFO  - Path conditions: [None]
2025-08-17 22:05:34,794 - INFO  - Pre condition: (x == 1) * (y == y@pre)
2025-08-17 22:05:34,794 - INFO  - Loop Condition: x <= 10
2025-08-17 22:05:34,794 - INFO  - Array Names: []
2025-08-17 22:05:34,794 - INFO  - Updated Loop Conditions: ['1 <= 10']
2025-08-17 22:05:34,794 - INFO  - Global Unchanged Variables: []
2025-08-17 22:05:34,794 - INFO  - Non Inductive Variables: ['y']
2025-08-17 22:05:53,211 - INFO  - after const
2025-08-17 22:05:53,211 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:05:53,211 - INFO  - after not in
2025-08-17 22:05:53,211 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:05:53,211 - INFO  - after vars
2025-08-17 22:05:53,211 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-17 22:05:56,081 - DEBUG  - invgen reasoning
2025-08-17 22:05:56,081 - DEBUG  - ```c
void foo20(int y) {
    int x = 1;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}
```
2025-08-17 22:05:56,081 - INFO  - 生成循环不变量
2025-08-17 22:05:56,081 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:05:56,081 - INFO  - 注释过不变量的代码
2025-08-17 22:05:56,081 - INFO  - 
void foo20(int y) {
    int x = 1;
    
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            

    /*@ assert (y < 10); */

}

2025-08-17 22:06:06,925 - INFO  - syntax Correct
2025-08-17 22:06:10,487 - INFO  - Validate:
2025-08-17 22:06:10,487 - INFO  - [False, True]
2025-08-17 22:06:10,487 - INFO  - 
2025-08-17 22:06:10,487 - INFO  - Verify:
2025-08-17 22:06:10,487 - INFO  - [True]
2025-08-17 22:06:10,487 - INFO  - 
2025-08-17 22:06:10,487 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:06:10,488 - INFO  - /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
          loop invariant  (x >= 1 && x <= 11) ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:06:10,488 - INFO  - VST 格式的循环不变量
2025-08-17 22:06:10,488 - INFO  - /*@ Inv
    (((x == 1)&&(y == y@pre)) || (y == 10 - x) ) &&
((x >= 1 && x <= 11) )
    */
    
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-17 22:06:21,303 - INFO  - syntax Correct
2025-08-17 22:06:24,871 - INFO  - Validate:
2025-08-17 22:06:24,871 - INFO  - [False, True]
2025-08-17 22:06:24,871 - INFO  - 
2025-08-17 22:06:24,871 - INFO  - Verify:
2025-08-17 22:06:24,871 - INFO  - [True]
2025-08-17 22:06:24,871 - INFO  - 
2025-08-17 22:06:35,684 - INFO  - syntax Correct
2025-08-17 22:06:39,246 - INFO  - Validate:
2025-08-17 22:06:39,246 - INFO  - [False, True]
2025-08-17 22:06:39,246 - INFO  - 
2025-08-17 22:06:39,246 - INFO  - Verify:
2025-08-17 22:06:39,246 - INFO  - [True]
2025-08-17 22:06:39,246 - INFO  - 
2025-08-17 22:06:39,246 - INFO  - ========================================
2025-08-17 22:06:39,246 - INFO  - first_pass:
2025-08-17 22:06:39,246 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 22:06:39,246 - INFO  - ========================================
