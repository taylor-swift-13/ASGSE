2025-08-17 21:08:14,683 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 21:08:14,683 - INFO  - ========================================

2025-08-17 21:08:14,691 - INFO  - 初始待处理函数: ['foo34']
2025-08-17 21:08:14,691 - INFO  - 
GENERATE ANNOTATION FOR foo34
2025-08-17 21:08:14,691 - INFO  - ========================================

2025-08-17 21:08:14,691 - INFO  - 函数 foo34 已经初始化
2025-08-17 21:08:14,707 - INFO  - 
GENERATE LOOP INVARIANT FOR foo34
2025-08-17 21:08:14,707 - INFO  - ========================================

2025-08-17 21:08:14,720 - INFO  - file_name: foo34
2025-08-17 21:08:14,732 - DEBUG  - INNER_FLAG: False
2025-08-17 21:08:14,747 - INFO  - Variable Maps:[{'x': '-50', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:08:14,747 - INFO  - Path conditions: [None]
2025-08-17 21:08:14,747 - INFO  - Pre condition: (x == -50) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:08:14,747 - INFO  - Loop Condition: x < 0
2025-08-17 21:08:14,747 - INFO  - Array Names: []
2025-08-17 21:08:14,747 - INFO  - Updated Loop Conditions: ['-50 < 0']
2025-08-17 21:08:14,748 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:08:14,748 - INFO  - Non Inductive Variables: []
2025-08-17 21:08:28,168 - INFO  - after const
2025-08-17 21:08:28,168 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:08:28,169 - INFO  - after not in
2025-08-17 21:08:28,169 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:08:28,169 - INFO  - after vars
2025-08-17 21:08:28,169 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:08:31,358 - DEBUG  - invgen reasoning
2025-08-17 21:08:31,358 - DEBUG  - ```c
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:08:31,358 - INFO  - 生成循环不变量
2025-08-17 21:08:31,358 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:08:31,359 - INFO  - 注释过不变量的代码
2025-08-17 21:08:31,360 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:08:42,029 - INFO  - syntax Correct
2025-08-17 21:08:45,578 - INFO  - Validate:
2025-08-17 21:08:45,578 - INFO  - [False, True, True, True, True]
2025-08-17 21:08:45,578 - INFO  - 
2025-08-17 21:08:45,578 - INFO  - Verify:
2025-08-17 21:08:45,578 - INFO  - [True]
2025-08-17 21:08:45,578 - INFO  - 
2025-08-17 21:08:45,578 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:08:45,579 - INFO  - /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:08:45,579 - INFO  - VST 格式的循环不变量
2025-08-17 21:08:45,579 - INFO  - /*@ Inv
    (y > y@pre) &&
(x >= -50 && x < 0) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:08:56,227 - INFO  - syntax Correct
2025-08-17 21:08:59,792 - INFO  - Validate:
2025-08-17 21:08:59,793 - INFO  - [False, True, True, True, True]
2025-08-17 21:08:59,793 - INFO  - 
2025-08-17 21:08:59,793 - INFO  - Verify:
2025-08-17 21:08:59,793 - INFO  - [True]
2025-08-17 21:08:59,793 - INFO  - 
2025-08-17 21:09:10,443 - INFO  - syntax Correct
2025-08-17 21:09:13,988 - INFO  - Validate:
2025-08-17 21:09:13,988 - INFO  - [False, True, True, True, True]
2025-08-17 21:09:13,988 - INFO  - 
2025-08-17 21:09:13,988 - INFO  - Verify:
2025-08-17 21:09:13,988 - INFO  - [True]
2025-08-17 21:09:13,988 - INFO  - 
2025-08-17 21:09:13,998 - DEBUG  - INNER_FLAG: False
2025-08-17 21:09:14,014 - INFO  - Variable Maps:[{'x': '-50', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:09:14,015 - INFO  - Path conditions: [None]
2025-08-17 21:09:14,015 - INFO  - Pre condition: (x == -50) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:09:14,015 - INFO  - Loop Condition: x < 0
2025-08-17 21:09:14,015 - INFO  - Array Names: []
2025-08-17 21:09:14,015 - INFO  - Updated Loop Conditions: ['-50 < 0']
2025-08-17 21:09:14,015 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:09:14,015 - INFO  - Non Inductive Variables: []
2025-08-17 21:09:26,451 - INFO  - after const
2025-08-17 21:09:26,451 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:09:26,451 - INFO  - after not in
2025-08-17 21:09:26,451 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:09:26,451 - INFO  - after vars
2025-08-17 21:09:26,451 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:09:28,895 - DEBUG  - invgen reasoning
2025-08-17 21:09:28,895 - DEBUG  - ```c
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:09:28,896 - INFO  - 生成循环不变量
2025-08-17 21:09:28,896 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:09:28,896 - INFO  - 注释过不变量的代码
2025-08-17 21:09:28,896 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:09:39,584 - INFO  - syntax Correct
2025-08-17 21:09:43,128 - INFO  - Validate:
2025-08-17 21:09:43,128 - INFO  - [False, True, True, True, True]
2025-08-17 21:09:43,128 - INFO  - 
2025-08-17 21:09:43,128 - INFO  - Verify:
2025-08-17 21:09:43,129 - INFO  - [True]
2025-08-17 21:09:43,129 - INFO  - 
2025-08-17 21:09:43,129 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:09:43,129 - INFO  - /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:09:43,129 - INFO  - VST 格式的循环不变量
2025-08-17 21:09:43,129 - INFO  - /*@ Inv
    (y > y@pre) &&
(x >= -50 && x < 0) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:09:53,781 - INFO  - syntax Correct
2025-08-17 21:09:57,349 - INFO  - Validate:
2025-08-17 21:09:57,350 - INFO  - [False, True, True, True, True]
2025-08-17 21:09:57,350 - INFO  - 
2025-08-17 21:09:57,350 - INFO  - Verify:
2025-08-17 21:09:57,350 - INFO  - [True]
2025-08-17 21:09:57,350 - INFO  - 
2025-08-17 21:10:08,018 - INFO  - syntax Correct
2025-08-17 21:10:11,571 - INFO  - Validate:
2025-08-17 21:10:11,572 - INFO  - [False, True, True, True, True]
2025-08-17 21:10:11,572 - INFO  - 
2025-08-17 21:10:11,572 - INFO  - Verify:
2025-08-17 21:10:11,572 - INFO  - [True]
2025-08-17 21:10:11,572 - INFO  - 
2025-08-17 21:10:11,581 - DEBUG  - INNER_FLAG: False
2025-08-17 21:10:11,598 - INFO  - Variable Maps:[{'x': '-50', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:10:11,598 - INFO  - Path conditions: [None]
2025-08-17 21:10:11,598 - INFO  - Pre condition: (x == -50) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:10:11,599 - INFO  - Loop Condition: x < 0
2025-08-17 21:10:11,599 - INFO  - Array Names: []
2025-08-17 21:10:11,599 - INFO  - Updated Loop Conditions: ['-50 < 0']
2025-08-17 21:10:11,599 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:10:11,599 - INFO  - Non Inductive Variables: []
2025-08-17 21:10:24,795 - INFO  - after const
2025-08-17 21:10:24,795 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:10:24,795 - INFO  - after not in
2025-08-17 21:10:24,795 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:10:24,795 - INFO  - after vars
2025-08-17 21:10:24,795 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:10:30,743 - DEBUG  - invgen reasoning
2025-08-17 21:10:30,744 - DEBUG  - ```c
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:10:30,744 - INFO  - 生成循环不变量
2025-08-17 21:10:30,744 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:10:30,744 - INFO  - 注释过不变量的代码
2025-08-17 21:10:30,744 - INFO  - 
void foo34(int y,int z1,int z2,int z3) {

    int x = -50;
  
    
    
            
            /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:10:41,471 - INFO  - syntax Correct
2025-08-17 21:10:45,030 - INFO  - Validate:
2025-08-17 21:10:45,030 - INFO  - [False, True, True, True, True]
2025-08-17 21:10:45,031 - INFO  - 
2025-08-17 21:10:45,031 - INFO  - Verify:
2025-08-17 21:10:45,031 - INFO  - [True]
2025-08-17 21:10:45,031 - INFO  - 
2025-08-17 21:10:45,031 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:10:45,031 - INFO  - /*@
          loop invariant  y > \at(y,Pre);
          loop invariant  x >= -50 && x < 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:10:45,031 - INFO  - VST 格式的循环不变量
2025-08-17 21:10:45,031 - INFO  - /*@ Inv
    (y > y@pre) &&
(x >= -50 && x < 0) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:10:55,690 - INFO  - syntax Correct
2025-08-17 21:10:59,262 - INFO  - Validate:
2025-08-17 21:10:59,262 - INFO  - [False, True, True, True, True]
2025-08-17 21:10:59,262 - INFO  - 
2025-08-17 21:10:59,262 - INFO  - Verify:
2025-08-17 21:10:59,262 - INFO  - [True]
2025-08-17 21:10:59,263 - INFO  - 
2025-08-17 21:11:09,947 - INFO  - syntax Correct
2025-08-17 21:11:13,505 - INFO  - Validate:
2025-08-17 21:11:13,505 - INFO  - [False, True, True, True, True]
2025-08-17 21:11:13,505 - INFO  - 
2025-08-17 21:11:13,505 - INFO  - Verify:
2025-08-17 21:11:13,505 - INFO  - [True]
2025-08-17 21:11:13,505 - INFO  - 
2025-08-17 21:11:13,505 - INFO  - ========================================
2025-08-17 21:11:13,505 - INFO  - first_pass:
2025-08-17 21:11:13,506 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 21:11:13,506 - INFO  - ========================================
