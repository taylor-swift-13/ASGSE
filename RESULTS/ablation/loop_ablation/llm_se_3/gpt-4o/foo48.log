2025-08-17 22:32:54,029 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 22:32:54,029 - INFO  - ========================================

2025-08-17 22:32:54,144 - INFO  - 初始待处理函数: ['foo48']
2025-08-17 22:32:54,144 - INFO  - 
GENERATE ANNOTATION FOR foo48
2025-08-17 22:32:54,144 - INFO  - ========================================

2025-08-17 22:32:54,144 - INFO  - 函数 foo48 已经初始化
2025-08-17 22:32:54,159 - INFO  - 
GENERATE LOOP INVARIANT FOR foo48
2025-08-17 22:32:54,159 - INFO  - ========================================

2025-08-17 22:32:54,172 - INFO  - file_name: foo48
2025-08-17 22:32:54,182 - DEBUG  - INNER_FLAG: False
2025-08-17 22:32:54,198 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:32:54,198 - INFO  - Path conditions: [None]
2025-08-17 22:32:54,198 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:32:54,198 - INFO  - Loop Condition: x != 0
2025-08-17 22:32:54,198 - INFO  - Array Names: []
2025-08-17 22:32:54,198 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:32:54,199 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 22:32:54,199 - INFO  - Non Inductive Variables: []
2025-08-17 22:33:12,361 - INFO  - after const
2025-08-17 22:33:12,361 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:33:12,362 - INFO  - after not in
2025-08-17 22:33:12,362 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:33:12,362 - INFO  - after vars
2025-08-17 22:33:12,362 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:33:18,300 - DEBUG  - invgen reasoning
2025-08-17 22:33:18,300 - DEBUG  - ```c
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:33:18,300 - INFO  - 生成循环不变量
2025-08-17 22:33:18,300 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:33:18,301 - INFO  - 注释过不变量的代码
2025-08-17 22:33:18,301 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:33:29,188 - INFO  - syntax Correct
2025-08-17 22:33:32,798 - INFO  - Validate:
2025-08-17 22:33:32,798 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:33:32,798 - INFO  - 
2025-08-17 22:33:32,798 - INFO  - Verify:
2025-08-17 22:33:32,798 - INFO  - [True]
2025-08-17 22:33:32,798 - INFO  - 
2025-08-17 22:33:32,798 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:33:32,799 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:33:32,799 - INFO  - VST 格式的循环不变量
2025-08-17 22:33:32,799 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre - x@pre)&&(x == 0))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:33:43,591 - INFO  - syntax Correct
2025-08-17 22:33:47,194 - INFO  - Validate:
2025-08-17 22:33:47,194 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:33:47,194 - INFO  - 
2025-08-17 22:33:47,194 - INFO  - Verify:
2025-08-17 22:33:47,194 - INFO  - [True]
2025-08-17 22:33:47,194 - INFO  - 
2025-08-17 22:33:58,001 - INFO  - syntax Correct
2025-08-17 22:34:01,606 - INFO  - Validate:
2025-08-17 22:34:01,606 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:34:01,606 - INFO  - 
2025-08-17 22:34:01,606 - INFO  - Verify:
2025-08-17 22:34:01,606 - INFO  - [True]
2025-08-17 22:34:01,606 - INFO  - 
2025-08-17 22:34:01,616 - DEBUG  - INNER_FLAG: False
2025-08-17 22:34:01,632 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:34:01,633 - INFO  - Path conditions: [None]
2025-08-17 22:34:01,633 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:34:01,633 - INFO  - Loop Condition: x != 0
2025-08-17 22:34:01,633 - INFO  - Array Names: []
2025-08-17 22:34:01,633 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:34:01,633 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 22:34:01,633 - INFO  - Non Inductive Variables: []
2025-08-17 22:34:15,292 - INFO  - after const
2025-08-17 22:34:15,292 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:34:15,292 - INFO  - after not in
2025-08-17 22:34:15,293 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:34:15,293 - INFO  - after vars
2025-08-17 22:34:15,293 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:34:21,453 - DEBUG  - invgen reasoning
2025-08-17 22:34:21,453 - DEBUG  - ```c
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:34:21,453 - INFO  - 生成循环不变量
2025-08-17 22:34:21,453 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:34:21,453 - INFO  - 注释过不变量的代码
2025-08-17 22:34:21,453 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:34:32,303 - INFO  - syntax Correct
2025-08-17 22:34:35,905 - INFO  - Validate:
2025-08-17 22:34:35,906 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:34:35,906 - INFO  - 
2025-08-17 22:34:35,906 - INFO  - Verify:
2025-08-17 22:34:35,906 - INFO  - [True]
2025-08-17 22:34:35,906 - INFO  - 
2025-08-17 22:34:35,906 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:34:35,906 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:34:35,907 - INFO  - VST 格式的循环不变量
2025-08-17 22:34:35,907 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre - x@pre)&&(x == 0))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:34:46,769 - INFO  - syntax Correct
2025-08-17 22:34:50,375 - INFO  - Validate:
2025-08-17 22:34:50,375 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:34:50,375 - INFO  - 
2025-08-17 22:34:50,376 - INFO  - Verify:
2025-08-17 22:34:50,376 - INFO  - [True]
2025-08-17 22:34:50,376 - INFO  - 
2025-08-17 22:35:01,185 - INFO  - syntax Correct
2025-08-17 22:35:04,808 - INFO  - Validate:
2025-08-17 22:35:04,808 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:35:04,808 - INFO  - 
2025-08-17 22:35:04,808 - INFO  - Verify:
2025-08-17 22:35:04,808 - INFO  - [True]
2025-08-17 22:35:04,808 - INFO  - 
2025-08-17 22:35:04,819 - DEBUG  - INNER_FLAG: False
2025-08-17 22:35:04,836 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:35:04,836 - INFO  - Path conditions: [None]
2025-08-17 22:35:04,836 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:35:04,836 - INFO  - Loop Condition: x != 0
2025-08-17 22:35:04,836 - INFO  - Array Names: []
2025-08-17 22:35:04,836 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:35:04,836 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 22:35:04,837 - INFO  - Non Inductive Variables: []
2025-08-17 22:35:32,463 - INFO  - after const
2025-08-17 22:35:32,463 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:35:32,464 - INFO  - after not in
2025-08-17 22:35:32,464 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:35:32,464 - INFO  - after vars
2025-08-17 22:35:32,464 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:35:37,710 - DEBUG  - invgen reasoning
2025-08-17 22:35:37,710 - DEBUG  - ```c
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:35:37,710 - INFO  - 生成循环不变量
2025-08-17 22:35:37,710 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:35:37,711 - INFO  - 注释过不变量的代码
2025-08-17 22:35:37,711 - INFO  - 
void foo48(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT FILLED <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:35:48,559 - INFO  - syntax Correct
2025-08-17 22:35:52,202 - INFO  - Validate:
2025-08-17 22:35:52,202 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:35:52,203 - INFO  - 
2025-08-17 22:35:52,203 - INFO  - Verify:
2025-08-17 22:35:52,203 - INFO  - [True]
2025-08-17 22:35:52,203 - INFO  - 
2025-08-17 22:35:52,203 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:35:52,203 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre) - \at(x,Pre))&&(x == 0));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:35:52,204 - INFO  - VST 格式的循环不变量
2025-08-17 22:35:52,204 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre - x@pre)&&(x == 0))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:36:03,021 - INFO  - syntax Correct
2025-08-17 22:36:06,627 - INFO  - Validate:
2025-08-17 22:36:06,627 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:36:06,627 - INFO  - 
2025-08-17 22:36:06,627 - INFO  - Verify:
2025-08-17 22:36:06,627 - INFO  - [True]
2025-08-17 22:36:06,627 - INFO  - 
2025-08-17 22:36:17,425 - INFO  - syntax Correct
2025-08-17 22:36:21,059 - INFO  - Validate:
2025-08-17 22:36:21,060 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 22:36:21,060 - INFO  - 
2025-08-17 22:36:21,060 - INFO  - Verify:
2025-08-17 22:36:21,060 - INFO  - [True]
2025-08-17 22:36:21,060 - INFO  - 
2025-08-17 22:36:21,060 - INFO  - ========================================
2025-08-17 22:36:21,060 - INFO  - first_pass:
2025-08-17 22:36:21,060 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 22:36:21,060 - INFO  - ========================================
