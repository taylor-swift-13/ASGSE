2025-08-17 21:14:31,621 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 21:14:31,621 - INFO  - ========================================

2025-08-17 21:14:31,632 - INFO  - 初始待处理函数: ['foo50']
2025-08-17 21:14:31,632 - INFO  - 
GENERATE ANNOTATION FOR foo50
2025-08-17 21:14:31,632 - INFO  - ========================================

2025-08-17 21:14:31,632 - INFO  - 函数 foo50 已经初始化
2025-08-17 21:14:31,647 - INFO  - 
GENERATE LOOP INVARIANT FOR foo50
2025-08-17 21:14:31,647 - INFO  - ========================================

2025-08-17 21:14:31,661 - INFO  - file_name: foo50
2025-08-17 21:14:31,672 - DEBUG  - INNER_FLAG: False
2025-08-17 21:14:31,690 - INFO  - Variable Maps:[{'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:14:31,691 - INFO  - Path conditions: [None]
2025-08-17 21:14:31,691 - INFO  - Pre condition: (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:14:31,691 - INFO  - Loop Condition: x < y
2025-08-17 21:14:31,691 - INFO  - Array Names: []
2025-08-17 21:14:31,691 - INFO  - Updated Loop Conditions: ['1 < y@pre']
2025-08-17 21:14:31,691 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y']
2025-08-17 21:14:31,691 - INFO  - Non Inductive Variables: []
2025-08-17 21:14:43,410 - INFO  - after const
2025-08-17 21:14:43,410 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:14:43,410 - INFO  - after not in
2025-08-17 21:14:43,410 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:14:43,410 - INFO  - after vars
2025-08-17 21:14:43,410 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:14:46,432 - DEBUG  - invgen reasoning
2025-08-17 21:14:46,433 - DEBUG  - ```c
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }
```
2025-08-17 21:14:46,433 - INFO  - 生成循环不变量
2025-08-17 21:14:46,433 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:14:46,433 - INFO  - 注释过不变量的代码
2025-08-17 21:14:46,433 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:14:57,174 - INFO  - syntax Correct
2025-08-17 21:15:00,768 - INFO  - Validate:
2025-08-17 21:15:00,768 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:15:00,768 - INFO  - 
2025-08-17 21:15:00,768 - INFO  - Verify:
2025-08-17 21:15:00,768 - INFO  - [True]
2025-08-17 21:15:00,769 - INFO  - 
2025-08-17 21:15:00,769 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:15:00,769 - INFO  - /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:15:00,769 - INFO  - VST 格式的循环不变量
2025-08-17 21:15:00,769 - INFO  - /*@ Inv
    ((1 < y@pre) => ((x >= 1) && (x <= y) && (x == 1 << (y@pre - y)))) &&
((!(1 < y@pre)) => ((x == 1)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre))) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre)
    */
    
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:15:11,458 - INFO  - syntax Correct
2025-08-17 21:15:15,062 - INFO  - Validate:
2025-08-17 21:15:15,062 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:15:15,062 - INFO  - 
2025-08-17 21:15:15,062 - INFO  - Verify:
2025-08-17 21:15:15,062 - INFO  - [True]
2025-08-17 21:15:15,062 - INFO  - 
2025-08-17 21:15:25,707 - INFO  - syntax Correct
2025-08-17 21:15:29,317 - INFO  - Validate:
2025-08-17 21:15:29,317 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:15:29,317 - INFO  - 
2025-08-17 21:15:29,317 - INFO  - Verify:
2025-08-17 21:15:29,317 - INFO  - [True]
2025-08-17 21:15:29,317 - INFO  - 
2025-08-17 21:15:29,326 - DEBUG  - INNER_FLAG: False
2025-08-17 21:15:29,341 - INFO  - Variable Maps:[{'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:15:29,341 - INFO  - Path conditions: [None]
2025-08-17 21:15:29,341 - INFO  - Pre condition: (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:15:29,342 - INFO  - Loop Condition: x < y
2025-08-17 21:15:29,342 - INFO  - Array Names: []
2025-08-17 21:15:29,342 - INFO  - Updated Loop Conditions: ['1 < y@pre']
2025-08-17 21:15:29,342 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y']
2025-08-17 21:15:29,342 - INFO  - Non Inductive Variables: []
2025-08-17 21:15:42,664 - INFO  - after const
2025-08-17 21:15:42,664 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:15:42,664 - INFO  - after not in
2025-08-17 21:15:42,664 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:15:42,664 - INFO  - after vars
2025-08-17 21:15:42,664 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:15:47,436 - DEBUG  - invgen reasoning
2025-08-17 21:15:47,436 - DEBUG  - ```c
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }
```
2025-08-17 21:15:47,436 - INFO  - 生成循环不变量
2025-08-17 21:15:47,436 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:15:47,436 - INFO  - 注释过不变量的代码
2025-08-17 21:15:47,436 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:15:58,206 - INFO  - syntax Correct
2025-08-17 21:16:01,801 - INFO  - Validate:
2025-08-17 21:16:01,801 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:16:01,801 - INFO  - 
2025-08-17 21:16:01,801 - INFO  - Verify:
2025-08-17 21:16:01,801 - INFO  - [True]
2025-08-17 21:16:01,801 - INFO  - 
2025-08-17 21:16:01,801 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:16:01,801 - INFO  - /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:16:01,802 - INFO  - VST 格式的循环不变量
2025-08-17 21:16:01,802 - INFO  - /*@ Inv
    ((1 < y@pre) => ((x >= 1) && (x <= y) && (x == 1 << (y@pre - y)))) &&
((!(1 < y@pre)) => ((x == 1)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre))) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre)
    */
    
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:16:12,480 - INFO  - syntax Correct
2025-08-17 21:16:16,064 - INFO  - Validate:
2025-08-17 21:16:16,065 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:16:16,065 - INFO  - 
2025-08-17 21:16:16,065 - INFO  - Verify:
2025-08-17 21:16:16,065 - INFO  - [True]
2025-08-17 21:16:16,065 - INFO  - 
2025-08-17 21:16:26,795 - INFO  - syntax Correct
2025-08-17 21:16:30,387 - INFO  - Validate:
2025-08-17 21:16:30,387 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:16:30,387 - INFO  - 
2025-08-17 21:16:30,387 - INFO  - Verify:
2025-08-17 21:16:30,387 - INFO  - [True]
2025-08-17 21:16:30,388 - INFO  - 
2025-08-17 21:16:30,396 - DEBUG  - INNER_FLAG: False
2025-08-17 21:16:30,411 - INFO  - Variable Maps:[{'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:16:30,411 - INFO  - Path conditions: [None]
2025-08-17 21:16:30,411 - INFO  - Pre condition: (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:16:30,411 - INFO  - Loop Condition: x < y
2025-08-17 21:16:30,411 - INFO  - Array Names: []
2025-08-17 21:16:30,411 - INFO  - Updated Loop Conditions: ['1 < y@pre']
2025-08-17 21:16:30,411 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1', 'y']
2025-08-17 21:16:30,412 - INFO  - Non Inductive Variables: []
2025-08-17 21:16:44,466 - INFO  - after const
2025-08-17 21:16:44,466 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:16:44,466 - INFO  - after not in
2025-08-17 21:16:44,466 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:16:44,466 - INFO  - after vars
2025-08-17 21:16:44,466 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
2025-08-17 21:16:50,318 - DEBUG  - invgen reasoning
2025-08-17 21:16:50,318 - DEBUG  - ```c
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }
```
2025-08-17 21:16:50,318 - INFO  - 生成循环不变量
2025-08-17 21:16:50,318 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:16:50,318 - INFO  - 注释过不变量的代码
2025-08-17 21:16:50,319 - INFO  - 
void foo50(int y,int z1,int z2,int z3) {

    int x = 1;
    
    
    
            
            /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
            
  
    /*@ assert x >= 1;*/
  
  }

2025-08-17 21:17:01,077 - INFO  - syntax Correct
2025-08-17 21:17:04,660 - INFO  - Validate:
2025-08-17 21:17:04,660 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:17:04,660 - INFO  - 
2025-08-17 21:17:04,661 - INFO  - Verify:
2025-08-17 21:17:04,661 - INFO  - [True]
2025-08-17 21:17:04,661 - INFO  - 
2025-08-17 21:17:04,661 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:17:04,661 - INFO  - /*@
          loop invariant (1 < \at(y,Pre)) ==> ((x >= 1) && (x <= y) && (x == 1 << (\at(y,Pre) - y)));
          loop invariant (!(1 < \at(y,Pre))) ==> ((x == 1)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre)));
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
          loop invariant y == \at(y,Pre);
            */
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:17:04,662 - INFO  - VST 格式的循环不变量
2025-08-17 21:17:04,662 - INFO  - /*@ Inv
    ((1 < y@pre) => ((x >= 1) && (x <= y) && (x == 1 << (y@pre - y)))) &&
((!(1 < y@pre)) => ((x == 1)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre))) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(y == y@pre)
    */
    
            while (x < y) {
  
       x  = x + x;
       
    }
2025-08-17 21:17:15,413 - INFO  - syntax Correct
2025-08-17 21:17:19,026 - INFO  - Validate:
2025-08-17 21:17:19,027 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:17:19,027 - INFO  - 
2025-08-17 21:17:19,027 - INFO  - Verify:
2025-08-17 21:17:19,027 - INFO  - [True]
2025-08-17 21:17:19,027 - INFO  - 
2025-08-17 21:17:29,671 - INFO  - syntax Correct
2025-08-17 21:17:33,265 - INFO  - Validate:
2025-08-17 21:17:33,265 - INFO  - [False, True, True, True, True, True]
2025-08-17 21:17:33,266 - INFO  - 
2025-08-17 21:17:33,266 - INFO  - Verify:
2025-08-17 21:17:33,266 - INFO  - [True]
2025-08-17 21:17:33,266 - INFO  - 
2025-08-17 21:17:33,266 - INFO  - ========================================
2025-08-17 21:17:33,266 - INFO  - first_pass:
2025-08-17 21:17:33,266 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 21:17:33,266 - INFO  - ========================================
