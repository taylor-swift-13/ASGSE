2025-08-17 22:11:22,572 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 22:11:22,572 - INFO  - ========================================

2025-08-17 22:11:22,662 - INFO  - 初始待处理函数: ['foo47']
2025-08-17 22:11:22,663 - INFO  - 
GENERATE ANNOTATION FOR foo47
2025-08-17 22:11:22,663 - INFO  - ========================================

2025-08-17 22:11:22,663 - INFO  - 函数 foo47 已经初始化
2025-08-17 22:11:22,677 - INFO  - 
GENERATE LOOP INVARIANT FOR foo47
2025-08-17 22:11:22,678 - INFO  - ========================================

2025-08-17 22:11:22,692 - INFO  - file_name: foo47
2025-08-17 22:11:22,703 - DEBUG  - INNER_FLAG: False
2025-08-17 22:11:22,719 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:11:22,719 - INFO  - Path conditions: [None]
2025-08-17 22:11:22,719 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:11:22,719 - INFO  - Loop Condition: x != 0
2025-08-17 22:11:22,719 - INFO  - Array Names: []
2025-08-17 22:11:22,719 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:11:22,719 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:11:22,720 - INFO  - Non Inductive Variables: []
2025-08-17 22:11:43,455 - INFO  - after const
2025-08-17 22:11:43,455 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:11:43,455 - INFO  - after not in
2025-08-17 22:11:43,455 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:11:43,455 - INFO  - after vars
2025-08-17 22:11:43,455 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:11:49,637 - DEBUG  - invgen reasoning
2025-08-17 22:11:49,637 - DEBUG  - Here is the C loop program with the placeholders filled in with appropriate ACSL loop invariants:

```c
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }
```
2025-08-17 22:11:49,637 - INFO  - 生成循环不变量
2025-08-17 22:11:49,637 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:11:49,637 - INFO  - 注释过不变量的代码
2025-08-17 22:11:49,638 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:12:00,418 - INFO  - syntax Correct
2025-08-17 22:12:04,016 - INFO  - Validate:
2025-08-17 22:12:04,016 - INFO  - [False, True, True, True, True]
2025-08-17 22:12:04,016 - INFO  - 
2025-08-17 22:12:04,016 - INFO  - Verify:
2025-08-17 22:12:04,017 - INFO  - [True]
2025-08-17 22:12:04,017 - INFO  - 
2025-08-17 22:12:04,017 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:12:04,017 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:12:04,017 - INFO  - VST 格式的循环不变量
2025-08-17 22:12:04,017 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:12:14,814 - INFO  - syntax Correct
2025-08-17 22:12:18,397 - INFO  - Validate:
2025-08-17 22:12:18,398 - INFO  - [False, True, True, True, True]
2025-08-17 22:12:18,398 - INFO  - 
2025-08-17 22:12:18,398 - INFO  - Verify:
2025-08-17 22:12:18,398 - INFO  - [True]
2025-08-17 22:12:18,398 - INFO  - 
2025-08-17 22:12:29,237 - INFO  - syntax Correct
2025-08-17 22:12:32,851 - INFO  - Validate:
2025-08-17 22:12:32,852 - INFO  - [False, True, True, True, True]
2025-08-17 22:12:32,852 - INFO  - 
2025-08-17 22:12:32,852 - INFO  - Verify:
2025-08-17 22:12:32,852 - INFO  - [True]
2025-08-17 22:12:32,852 - INFO  - 
2025-08-17 22:12:32,863 - DEBUG  - INNER_FLAG: False
2025-08-17 22:12:32,878 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:12:32,878 - INFO  - Path conditions: [None]
2025-08-17 22:12:32,879 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:12:32,879 - INFO  - Loop Condition: x != 0
2025-08-17 22:12:32,879 - INFO  - Array Names: []
2025-08-17 22:12:32,879 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:12:32,879 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:12:32,879 - INFO  - Non Inductive Variables: []
2025-08-17 22:12:56,454 - INFO  - after const
2025-08-17 22:12:56,454 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:12:56,454 - INFO  - after not in
2025-08-17 22:12:56,454 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:12:56,455 - INFO  - after vars
2025-08-17 22:12:56,455 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:13:00,253 - DEBUG  - invgen reasoning
2025-08-17 22:13:00,253 - DEBUG  - Here is the C loop program with the placeholders filled in with appropriate ACSL loop invariants:

```c
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }
```
2025-08-17 22:13:00,253 - INFO  - 生成循环不变量
2025-08-17 22:13:00,253 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:13:00,253 - INFO  - 注释过不变量的代码
2025-08-17 22:13:00,253 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:13:11,138 - INFO  - syntax Correct
2025-08-17 22:13:14,743 - INFO  - Validate:
2025-08-17 22:13:14,743 - INFO  - [False, True, True, True, True]
2025-08-17 22:13:14,743 - INFO  - 
2025-08-17 22:13:14,743 - INFO  - Verify:
2025-08-17 22:13:14,743 - INFO  - [True]
2025-08-17 22:13:14,743 - INFO  - 
2025-08-17 22:13:14,744 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:13:14,744 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:13:14,744 - INFO  - VST 格式的循环不变量
2025-08-17 22:13:14,744 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:13:25,550 - INFO  - syntax Correct
2025-08-17 22:13:29,167 - INFO  - Validate:
2025-08-17 22:13:29,167 - INFO  - [False, True, True, True, True]
2025-08-17 22:13:29,167 - INFO  - 
2025-08-17 22:13:29,167 - INFO  - Verify:
2025-08-17 22:13:29,167 - INFO  - [True]
2025-08-17 22:13:29,168 - INFO  - 
2025-08-17 22:13:39,981 - INFO  - syntax Correct
2025-08-17 22:13:43,578 - INFO  - Validate:
2025-08-17 22:13:43,578 - INFO  - [False, True, True, True, True]
2025-08-17 22:13:43,578 - INFO  - 
2025-08-17 22:13:43,579 - INFO  - Verify:
2025-08-17 22:13:43,579 - INFO  - [True]
2025-08-17 22:13:43,579 - INFO  - 
2025-08-17 22:13:43,590 - DEBUG  - INNER_FLAG: False
2025-08-17 22:13:43,608 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:13:43,608 - INFO  - Path conditions: [None]
2025-08-17 22:13:43,608 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:13:43,608 - INFO  - Loop Condition: x != 0
2025-08-17 22:13:43,608 - INFO  - Array Names: []
2025-08-17 22:13:43,608 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:13:43,608 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:13:43,608 - INFO  - Non Inductive Variables: []
2025-08-17 22:13:58,656 - INFO  - after const
2025-08-17 22:13:58,656 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:13:58,657 - INFO  - after not in
2025-08-17 22:13:58,657 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:13:58,657 - INFO  - after vars
2025-08-17 22:13:58,657 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:14:04,471 - DEBUG  - invgen reasoning
2025-08-17 22:14:04,471 - DEBUG  - Here is the C loop program with the placeholders filled in with appropriate ACSL loop invariants:

```c
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }
```
2025-08-17 22:14:04,471 - INFO  - 生成循环不变量
2025-08-17 22:14:04,471 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:14:04,471 - INFO  - 注释过不变量的代码
2025-08-17 22:14:04,471 - INFO  - 
void foo47(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-17 22:14:15,219 - INFO  - syntax Correct
2025-08-17 22:14:18,806 - INFO  - Validate:
2025-08-17 22:14:18,806 - INFO  - [False, True, True, True, True]
2025-08-17 22:14:18,806 - INFO  - 
2025-08-17 22:14:18,806 - INFO  - Verify:
2025-08-17 22:14:18,806 - INFO  - [True]
2025-08-17 22:14:18,806 - INFO  - 
2025-08-17 22:14:18,806 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:14:18,807 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:14:18,807 - INFO  - VST 格式的循环不变量
2025-08-17 22:14:18,807 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:14:29,681 - INFO  - syntax Correct
2025-08-17 22:14:33,279 - INFO  - Validate:
2025-08-17 22:14:33,279 - INFO  - [False, True, True, True, True]
2025-08-17 22:14:33,280 - INFO  - 
2025-08-17 22:14:33,280 - INFO  - Verify:
2025-08-17 22:14:33,280 - INFO  - [True]
2025-08-17 22:14:33,280 - INFO  - 
2025-08-17 22:14:44,172 - INFO  - syntax Correct
2025-08-17 22:14:47,767 - INFO  - Validate:
2025-08-17 22:14:47,767 - INFO  - [False, True, True, True, True]
2025-08-17 22:14:47,767 - INFO  - 
2025-08-17 22:14:47,767 - INFO  - Verify:
2025-08-17 22:14:47,767 - INFO  - [True]
2025-08-17 22:14:47,767 - INFO  - 
2025-08-17 22:14:47,767 - INFO  - ========================================
2025-08-17 22:14:47,767 - INFO  - first_pass:
2025-08-17 22:14:47,767 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 22:14:47,768 - INFO  - ========================================
