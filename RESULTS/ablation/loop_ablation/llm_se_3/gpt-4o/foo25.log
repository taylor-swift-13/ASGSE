2025-08-16 02:47:17,896 - INFO  - 
FUNCTION INITIALIZATION
2025-08-16 02:47:17,896 - INFO  - ========================================

2025-08-16 02:47:17,919 - INFO  - 初始待处理函数: ['foo25']
2025-08-16 02:47:17,919 - INFO  - 
GENERATE ANNOTATION FOR foo25
2025-08-16 02:47:17,919 - INFO  - ========================================

2025-08-16 02:47:17,919 - INFO  - 函数 foo25 已经初始化
2025-08-16 02:47:17,934 - INFO  - 
GENERATE LOOP INVARIANT FOR foo25
2025-08-16 02:47:17,934 - INFO  - ========================================

2025-08-16 02:47:17,949 - INFO  - file_name: foo25
2025-08-16 02:47:17,959 - DEBUG  - INNER_FLAG: False
2025-08-16 02:47:17,977 - INFO  - Variable Maps:[{'x': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'y': 'y@pre', 'n': 'n@pre'}]
2025-08-16 02:47:17,977 - INFO  - Path conditions: [None]
2025-08-16 02:47:17,977 - INFO  - Pre condition: (x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)
2025-08-16 02:47:17,977 - INFO  - Loop Condition: x <= n
2025-08-16 02:47:17,977 - INFO  - Array Names: []
2025-08-16 02:47:17,977 - INFO  - Updated Loop Conditions: ['1 <= n@pre']
2025-08-16 02:47:17,978 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1', 'n']
2025-08-16 02:47:17,978 - INFO  - Non Inductive Variables: ['y']
2025-08-16 02:48:01,447 - INFO  - after const
2025-08-16 02:48:01,447 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-16 02:48:01,447 - INFO  - after not in
2025-08-16 02:48:01,447 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-16 02:48:01,448 - INFO  - after vars
2025-08-16 02:48:01,448 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-16 02:48:01,448 - INFO  - after verification goal
2025-08-16 02:48:01,448 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x <= n) {
        y = n - x;
        x = x + 1;
    }
            
2025-08-16 02:48:32,229 - DEBUG  - invgen reasoning
2025-08-16 02:48:32,229 - DEBUG  - ```c
void foo25(int n, int y, int v1, int v2, int v3) {
    
    int x = 1;

    /* >>> LOOP INVARIANT FILLED <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))));
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
      loop invariant (1 <= \at(n,Pre)) ==> ((x >= 1) && (x <= n + 1));
      loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*@ assert (n > 0) ==> (y >= 0); */

}
```
2025-08-16 02:48:32,229 - INFO  - 生成循环不变量
2025-08-16 02:48:32,230 - INFO  - 
void foo25(int n, int y, int v1, int v2, int v3) {
    
    int x = 1;

    /* >>> LOOP INVARIANT FILLED <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))));
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
      loop invariant (1 <= \at(n,Pre)) ==> ((x >= 1) && (x <= n + 1));
      loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*@ assert (n > 0) ==> (y >= 0); */

}

2025-08-16 02:48:32,230 - INFO  - 注释过不变量的代码
2025-08-16 02:48:32,230 - INFO  - 
void foo25(int n, int y, int v1, int v2, int v3) {
    
    int x = 1;

    /* >>> LOOP INVARIANT FILLED <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))));
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
      loop invariant (1 <= \at(n,Pre)) ==> ((x >= 1) && (x <= n + 1));
      loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*@ assert (n > 0) ==> (y >= 0); */

}

2025-08-16 02:48:42,946 - INFO  - syntax Correct
2025-08-16 02:48:46,516 - INFO  - Validate:
2025-08-16 02:48:46,516 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-16 02:48:46,517 - INFO  - 
2025-08-16 02:48:46,517 - INFO  - Verify:
2025-08-16 02:48:46,517 - INFO  - [True]
2025-08-16 02:48:46,517 - INFO  - 
2025-08-16 02:48:46,517 - INFO  - ACSL 格式的循环不变量
2025-08-16 02:48:46,517 - INFO  - /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))));
      loop invariant (1 <= \at(n,Pre)) ==> (((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre))) || (y == n - (x - 1)));
      loop invariant (1 <= \at(n,Pre)) ==> ((x >= 1) && (x <= n + 1));
      loop invariant (!(1 <= \at(n,Pre))) ==> ((x == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(y == \at(y,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-16 02:48:46,518 - INFO  - VST 格式的循环不变量
2025-08-16 02:48:46,518 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre)) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))))) &&
((1 <= n@pre) => (((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => ((x >= 1) && (x <= n + 1))) &&
((!(1 <= n@pre)) => ((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-16 02:48:46,518 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-16 02:48:46,518 - INFO  - 继续符号执行
2025-08-16 02:48:46,518 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre)) || ((x >= 1) && (x <= n + 1) && (y == n - (x - 1))))) &&
((1 <= n@pre) => (((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre)) || (y == n - (x - 1)))) &&
((1 <= n@pre) => ((x >= 1) && (x <= n + 1))) &&
((!(1 <= n@pre)) => ((x == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
2025-08-16 02:48:57,172 - INFO  - syntax Correct
2025-08-16 02:49:00,751 - INFO  - Validate:
2025-08-16 02:49:00,751 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-16 02:49:00,751 - INFO  - 
2025-08-16 02:49:00,751 - INFO  - Verify:
2025-08-16 02:49:00,751 - INFO  - [True]
2025-08-16 02:49:00,751 - INFO  - 
2025-08-16 02:49:00,751 - INFO  - CORRECT INVARIANT
2025-08-16 02:49:11,334 - INFO  - syntax Correct
2025-08-16 02:49:14,911 - INFO  - Validate:
2025-08-16 02:49:14,912 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-16 02:49:14,912 - INFO  - 
2025-08-16 02:49:14,912 - INFO  - Verify:
2025-08-16 02:49:14,912 - INFO  - [True]
2025-08-16 02:49:14,912 - INFO  - 
2025-08-16 02:49:14,912 - INFO  - ========================================
2025-08-16 02:49:14,912 - INFO  - first_pass:
2025-08-16 02:49:14,912 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-16 02:49:14,912 - INFO  - ========================================
