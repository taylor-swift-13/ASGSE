2025-08-17 22:36:21,149 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 22:36:21,149 - INFO  - ========================================

2025-08-17 22:36:21,273 - INFO  - 初始待处理函数: ['foo46']
2025-08-17 22:36:21,273 - INFO  - 
GENERATE ANNOTATION FOR foo46
2025-08-17 22:36:21,273 - INFO  - ========================================

2025-08-17 22:36:21,273 - INFO  - 函数 foo46 已经初始化
2025-08-17 22:36:21,289 - INFO  - 
GENERATE LOOP INVARIANT FOR foo46
2025-08-17 22:36:21,289 - INFO  - ========================================

2025-08-17 22:36:21,303 - INFO  - file_name: foo46
2025-08-17 22:36:21,315 - DEBUG  - INNER_FLAG: False
2025-08-17 22:36:21,331 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:36:21,331 - INFO  - Path conditions: [None]
2025-08-17 22:36:21,331 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:36:21,331 - INFO  - Loop Condition: x != 0
2025-08-17 22:36:21,331 - INFO  - Array Names: []
2025-08-17 22:36:21,331 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:36:21,331 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:36:21,332 - INFO  - Non Inductive Variables: []
2025-08-17 22:36:37,886 - INFO  - after const
2025-08-17 22:36:37,887 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:36:37,887 - INFO  - after not in
2025-08-17 22:36:37,887 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:36:37,887 - INFO  - after vars
2025-08-17 22:36:37,887 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:36:41,988 - DEBUG  - invgen reasoning
2025-08-17 22:36:41,988 - DEBUG  - ```c
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:36:41,988 - INFO  - 生成循环不变量
2025-08-17 22:36:41,988 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:36:41,989 - INFO  - 注释过不变量的代码
2025-08-17 22:36:41,989 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:36:52,863 - INFO  - syntax Correct
2025-08-17 22:36:56,487 - INFO  - Validate:
2025-08-17 22:36:56,487 - INFO  - [False, True, True, True, True]
2025-08-17 22:36:56,487 - INFO  - 
2025-08-17 22:36:56,487 - INFO  - Verify:
2025-08-17 22:36:56,487 - INFO  - [True]
2025-08-17 22:36:56,488 - INFO  - 
2025-08-17 22:36:56,488 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:36:56,488 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:36:56,488 - INFO  - VST 格式的循环不变量
2025-08-17 22:36:56,488 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:37:07,335 - INFO  - syntax Correct
2025-08-17 22:37:10,949 - INFO  - Validate:
2025-08-17 22:37:10,949 - INFO  - [False, True, True, True, True]
2025-08-17 22:37:10,949 - INFO  - 
2025-08-17 22:37:10,949 - INFO  - Verify:
2025-08-17 22:37:10,949 - INFO  - [True]
2025-08-17 22:37:10,949 - INFO  - 
2025-08-17 22:37:21,741 - INFO  - syntax Correct
2025-08-17 22:37:25,365 - INFO  - Validate:
2025-08-17 22:37:25,365 - INFO  - [False, True, True, True, True]
2025-08-17 22:37:25,365 - INFO  - 
2025-08-17 22:37:25,366 - INFO  - Verify:
2025-08-17 22:37:25,366 - INFO  - [True]
2025-08-17 22:37:25,366 - INFO  - 
2025-08-17 22:37:25,376 - DEBUG  - INNER_FLAG: False
2025-08-17 22:37:25,392 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:37:25,392 - INFO  - Path conditions: [None]
2025-08-17 22:37:25,393 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:37:25,393 - INFO  - Loop Condition: x != 0
2025-08-17 22:37:25,393 - INFO  - Array Names: []
2025-08-17 22:37:25,393 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:37:25,393 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:37:25,393 - INFO  - Non Inductive Variables: []
2025-08-17 22:37:41,729 - INFO  - after const
2025-08-17 22:37:41,729 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:37:41,729 - INFO  - after not in
2025-08-17 22:37:41,729 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:37:41,730 - INFO  - after vars
2025-08-17 22:37:41,730 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:37:46,360 - DEBUG  - invgen reasoning
2025-08-17 22:37:46,360 - DEBUG  - ```c
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:37:46,360 - INFO  - 生成循环不变量
2025-08-17 22:37:46,360 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:37:46,361 - INFO  - 注释过不变量的代码
2025-08-17 22:37:46,361 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:37:57,175 - INFO  - syntax Correct
2025-08-17 22:38:00,761 - INFO  - Validate:
2025-08-17 22:38:00,761 - INFO  - [False, True, True, True, True]
2025-08-17 22:38:00,762 - INFO  - 
2025-08-17 22:38:00,762 - INFO  - Verify:
2025-08-17 22:38:00,762 - INFO  - [True]
2025-08-17 22:38:00,762 - INFO  - 
2025-08-17 22:38:00,762 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:38:00,762 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:38:00,762 - INFO  - VST 格式的循环不变量
2025-08-17 22:38:00,762 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:38:11,643 - INFO  - syntax Correct
2025-08-17 22:38:15,225 - INFO  - Validate:
2025-08-17 22:38:15,225 - INFO  - [False, True, True, True, True]
2025-08-17 22:38:15,225 - INFO  - 
2025-08-17 22:38:15,225 - INFO  - Verify:
2025-08-17 22:38:15,225 - INFO  - [True]
2025-08-17 22:38:15,225 - INFO  - 
2025-08-17 22:38:26,059 - INFO  - syntax Correct
2025-08-17 22:38:29,642 - INFO  - Validate:
2025-08-17 22:38:29,643 - INFO  - [False, True, True, True, True]
2025-08-17 22:38:29,643 - INFO  - 
2025-08-17 22:38:29,643 - INFO  - Verify:
2025-08-17 22:38:29,643 - INFO  - [True]
2025-08-17 22:38:29,643 - INFO  - 
2025-08-17 22:38:29,654 - DEBUG  - INNER_FLAG: False
2025-08-17 22:38:29,669 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 22:38:29,669 - INFO  - Path conditions: [None]
2025-08-17 22:38:29,669 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 22:38:29,670 - INFO  - Loop Condition: x != 0
2025-08-17 22:38:29,670 - INFO  - Array Names: []
2025-08-17 22:38:29,670 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 22:38:29,670 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-17 22:38:29,670 - INFO  - Non Inductive Variables: []
2025-08-17 22:38:49,264 - INFO  - after const
2025-08-17 22:38:49,264 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:38:49,264 - INFO  - after not in
2025-08-17 22:38:49,264 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:38:49,264 - INFO  - after vars
2025-08-17 22:38:49,264 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 22:38:53,890 - DEBUG  - invgen reasoning
2025-08-17 22:38:53,890 - DEBUG  - ```c
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
```
2025-08-17 22:38:53,890 - INFO  - 生成循环不变量
2025-08-17 22:38:53,890 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:38:53,890 - INFO  - 注释过不变量的代码
2025-08-17 22:38:53,891 - INFO  - 
void foo46(int x, int y) {

    int i = x;
    int j = y;
    
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }

2025-08-17 22:39:04,714 - INFO  - syntax Correct
2025-08-17 22:39:08,325 - INFO  - Validate:
2025-08-17 22:39:08,325 - INFO  - [False, True, True, True, True]
2025-08-17 22:39:08,325 - INFO  - 
2025-08-17 22:39:08,325 - INFO  - Verify:
2025-08-17 22:39:08,326 - INFO  - [True]
2025-08-17 22:39:08,326 - INFO  - 
2025-08-17 22:39:08,326 - INFO  - ACSL 格式的循环不变量
2025-08-17 22:39:08,326 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:39:08,326 - INFO  - VST 格式的循环不变量
2025-08-17 22:39:08,326 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-17 22:39:19,171 - INFO  - syntax Correct
2025-08-17 22:39:22,780 - INFO  - Validate:
2025-08-17 22:39:22,780 - INFO  - [False, True, True, True, True]
2025-08-17 22:39:22,780 - INFO  - 
2025-08-17 22:39:22,780 - INFO  - Verify:
2025-08-17 22:39:22,781 - INFO  - [True]
2025-08-17 22:39:22,781 - INFO  - 
2025-08-17 22:39:33,539 - INFO  - syntax Correct
2025-08-17 22:39:37,136 - INFO  - Validate:
2025-08-17 22:39:37,136 - INFO  - [False, True, True, True, True]
2025-08-17 22:39:37,137 - INFO  - 
2025-08-17 22:39:37,137 - INFO  - Verify:
2025-08-17 22:39:37,137 - INFO  - [True]
2025-08-17 22:39:37,137 - INFO  - 
2025-08-17 22:39:37,137 - INFO  - ========================================
2025-08-17 22:39:37,137 - INFO  - first_pass:
2025-08-17 22:39:37,137 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 22:39:37,137 - INFO  - ========================================
