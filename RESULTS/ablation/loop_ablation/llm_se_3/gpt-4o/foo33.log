2025-08-17 21:11:13,579 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 21:11:13,579 - INFO  - ========================================

2025-08-17 21:11:13,589 - INFO  - 初始待处理函数: ['foo33']
2025-08-17 21:11:13,589 - INFO  - 
GENERATE ANNOTATION FOR foo33
2025-08-17 21:11:13,589 - INFO  - ========================================

2025-08-17 21:11:13,589 - INFO  - 函数 foo33 已经初始化
2025-08-17 21:11:13,605 - INFO  - 
GENERATE LOOP INVARIANT FOR foo33
2025-08-17 21:11:13,605 - INFO  - ========================================

2025-08-17 21:11:13,619 - INFO  - file_name: foo33
2025-08-17 21:11:13,631 - DEBUG  - INNER_FLAG: False
2025-08-17 21:11:13,647 - INFO  - Variable Maps:[{'x': '-15000', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:11:13,647 - INFO  - Path conditions: [None]
2025-08-17 21:11:13,647 - INFO  - Pre condition: (x == -15000) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:11:13,647 - INFO  - Loop Condition: x < 0
2025-08-17 21:11:13,647 - INFO  - Array Names: []
2025-08-17 21:11:13,647 - INFO  - Updated Loop Conditions: ['-15000 < 0']
2025-08-17 21:11:13,647 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:11:13,647 - INFO  - Non Inductive Variables: []
2025-08-17 21:11:27,995 - INFO  - after const
2025-08-17 21:11:27,995 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:11:27,996 - INFO  - after not in
2025-08-17 21:11:27,996 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:11:27,996 - INFO  - after vars
2025-08-17 21:11:27,996 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:11:30,962 - DEBUG  - invgen reasoning
2025-08-17 21:11:30,963 - DEBUG  - ```c
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:11:30,963 - INFO  - 生成循环不变量
2025-08-17 21:11:30,963 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:11:30,963 - INFO  - 注释过不变量的代码
2025-08-17 21:11:30,963 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:11:42,014 - INFO  - syntax Correct
2025-08-17 21:11:45,624 - INFO  - Validate:
2025-08-17 21:11:45,624 - INFO  - [True, False, True, True, True]
2025-08-17 21:11:45,624 - INFO  - 
2025-08-17 21:11:45,624 - INFO  - Verify:
2025-08-17 21:11:45,624 - INFO  - [True]
2025-08-17 21:11:45,624 - INFO  - 
2025-08-17 21:11:45,624 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:11:45,624 - INFO  - /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:11:45,625 - INFO  - VST 格式的循环不变量
2025-08-17 21:11:45,625 - INFO  - /*@ Inv
    (y >= y@pre) &&
(x == -15000 + ((y - y@pre) * (y@pre + y - 1)) / 2) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:11:56,611 - INFO  - syntax Correct
2025-08-17 21:12:00,215 - INFO  - Validate:
2025-08-17 21:12:00,215 - INFO  - [True, False, True, True, True]
2025-08-17 21:12:00,215 - INFO  - 
2025-08-17 21:12:00,215 - INFO  - Verify:
2025-08-17 21:12:00,216 - INFO  - [True]
2025-08-17 21:12:00,216 - INFO  - 
2025-08-17 21:12:11,233 - INFO  - syntax Correct
2025-08-17 21:12:14,826 - INFO  - Validate:
2025-08-17 21:12:14,827 - INFO  - [True, False, True, True, True]
2025-08-17 21:12:14,827 - INFO  - 
2025-08-17 21:12:14,827 - INFO  - Verify:
2025-08-17 21:12:14,827 - INFO  - [True]
2025-08-17 21:12:14,827 - INFO  - 
2025-08-17 21:12:14,836 - DEBUG  - INNER_FLAG: False
2025-08-17 21:12:14,851 - INFO  - Variable Maps:[{'x': '-15000', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:12:14,851 - INFO  - Path conditions: [None]
2025-08-17 21:12:14,851 - INFO  - Pre condition: (x == -15000) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:12:14,851 - INFO  - Loop Condition: x < 0
2025-08-17 21:12:14,851 - INFO  - Array Names: []
2025-08-17 21:12:14,852 - INFO  - Updated Loop Conditions: ['-15000 < 0']
2025-08-17 21:12:14,852 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:12:14,852 - INFO  - Non Inductive Variables: []
2025-08-17 21:12:34,250 - INFO  - after const
2025-08-17 21:12:34,251 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:12:34,251 - INFO  - after not in
2025-08-17 21:12:34,251 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:12:34,251 - INFO  - after vars
2025-08-17 21:12:34,251 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:12:39,881 - DEBUG  - invgen reasoning
2025-08-17 21:12:39,881 - DEBUG  - ```c
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:12:39,881 - INFO  - 生成循环不变量
2025-08-17 21:12:39,881 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:12:39,882 - INFO  - 注释过不变量的代码
2025-08-17 21:12:39,882 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:12:50,919 - INFO  - syntax Correct
2025-08-17 21:12:54,535 - INFO  - Validate:
2025-08-17 21:12:54,535 - INFO  - [True, False, True, True, True]
2025-08-17 21:12:54,535 - INFO  - 
2025-08-17 21:12:54,535 - INFO  - Verify:
2025-08-17 21:12:54,536 - INFO  - [True]
2025-08-17 21:12:54,536 - INFO  - 
2025-08-17 21:12:54,536 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:12:54,536 - INFO  - /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:12:54,537 - INFO  - VST 格式的循环不变量
2025-08-17 21:12:54,537 - INFO  - /*@ Inv
    (y >= y@pre) &&
(x == -15000 + ((y - y@pre) * (y@pre + y - 1)) / 2) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:13:05,480 - INFO  - syntax Correct
2025-08-17 21:13:09,067 - INFO  - Validate:
2025-08-17 21:13:09,067 - INFO  - [True, False, True, True, True]
2025-08-17 21:13:09,067 - INFO  - 
2025-08-17 21:13:09,067 - INFO  - Verify:
2025-08-17 21:13:09,067 - INFO  - [True]
2025-08-17 21:13:09,067 - INFO  - 
2025-08-17 21:13:20,041 - INFO  - syntax Correct
2025-08-17 21:13:23,655 - INFO  - Validate:
2025-08-17 21:13:23,656 - INFO  - [True, False, True, True, True]
2025-08-17 21:13:23,656 - INFO  - 
2025-08-17 21:13:23,656 - INFO  - Verify:
2025-08-17 21:13:23,656 - INFO  - [True]
2025-08-17 21:13:23,656 - INFO  - 
2025-08-17 21:13:23,665 - DEBUG  - INNER_FLAG: False
2025-08-17 21:13:23,681 - INFO  - Variable Maps:[{'x': '-15000', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre'}]
2025-08-17 21:13:23,681 - INFO  - Path conditions: [None]
2025-08-17 21:13:23,681 - INFO  - Pre condition: (x == -15000) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre)
2025-08-17 21:13:23,681 - INFO  - Loop Condition: x < 0
2025-08-17 21:13:23,681 - INFO  - Array Names: []
2025-08-17 21:13:23,681 - INFO  - Updated Loop Conditions: ['-15000 < 0']
2025-08-17 21:13:23,681 - INFO  - Global Unchanged Variables: ['z3', 'z2', 'z1']
2025-08-17 21:13:23,681 - INFO  - Non Inductive Variables: []
2025-08-17 21:13:43,268 - INFO  - after const
2025-08-17 21:13:43,268 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:13:43,269 - INFO  - after not in
2025-08-17 21:13:43,269 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:13:43,269 - INFO  - after vars
2025-08-17 21:13:43,269 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant  PLACE_HOLDER_x ;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
2025-08-17 21:13:47,592 - DEBUG  - invgen reasoning
2025-08-17 21:13:47,592 - DEBUG  - ```c
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }
```
2025-08-17 21:13:47,592 - INFO  - 生成循环不变量
2025-08-17 21:13:47,592 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:13:47,592 - INFO  - 注释过不变量的代码
2025-08-17 21:13:47,592 - INFO  - 
void foo33(int y, int z1, int z2, int z3) {

    int x = -15000;

            /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
            
    /*@ assert y > 0; */
  
  }

2025-08-17 21:13:58,688 - INFO  - syntax Correct
2025-08-17 21:14:02,290 - INFO  - Validate:
2025-08-17 21:14:02,290 - INFO  - [True, False, True, True, True]
2025-08-17 21:14:02,290 - INFO  - 
2025-08-17 21:14:02,290 - INFO  - Verify:
2025-08-17 21:14:02,290 - INFO  - [True]
2025-08-17 21:14:02,290 - INFO  - 
2025-08-17 21:14:02,290 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:14:02,291 - INFO  - /*@
              loop invariant y >= \at(y, Pre);
              loop invariant x == -15000 + ((y - \at(y, Pre)) * (\at(y, Pre) + y - 1)) / 2;
              loop invariant z3 == \at(z3, Pre);
              loop invariant z2 == \at(z2, Pre);
              loop invariant z1 == \at(z1, Pre);
            */
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:14:02,291 - INFO  - VST 格式的循环不变量
2025-08-17 21:14:02,291 - INFO  - /*@ Inv
    (y >= y@pre) &&
(x == -15000 + ((y - y@pre) * (y@pre + y - 1)) / 2) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x < 0) {
      
      x  = x + y;
      y  = y + 1;
      
  
    }
2025-08-17 21:14:13,315 - INFO  - syntax Correct
2025-08-17 21:14:16,911 - INFO  - Validate:
2025-08-17 21:14:16,912 - INFO  - [True, False, True, True, True]
2025-08-17 21:14:16,912 - INFO  - 
2025-08-17 21:14:16,912 - INFO  - Verify:
2025-08-17 21:14:16,912 - INFO  - [True]
2025-08-17 21:14:16,912 - INFO  - 
2025-08-17 21:14:27,928 - INFO  - syntax Correct
2025-08-17 21:14:31,543 - INFO  - Validate:
2025-08-17 21:14:31,544 - INFO  - [True, False, True, True, True]
2025-08-17 21:14:31,544 - INFO  - 
2025-08-17 21:14:31,544 - INFO  - Verify:
2025-08-17 21:14:31,544 - INFO  - [True]
2025-08-17 21:14:31,544 - INFO  - 
2025-08-17 21:14:31,544 - INFO  - ========================================
2025-08-17 21:14:31,544 - INFO  - first_pass:
2025-08-17 21:14:31,544 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 21:14:31,544 - INFO  - ========================================
