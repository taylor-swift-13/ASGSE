2025-08-17 21:45:19,641 - INFO  - 
FUNCTION INITIALIZATION
2025-08-17 21:45:19,641 - INFO  - ========================================

2025-08-17 21:45:19,699 - INFO  - 初始待处理函数: ['foo49']
2025-08-17 21:45:19,699 - INFO  - 
GENERATE ANNOTATION FOR foo49
2025-08-17 21:45:19,699 - INFO  - ========================================

2025-08-17 21:45:19,699 - INFO  - 函数 foo49 已经初始化
2025-08-17 21:45:19,714 - INFO  - 
GENERATE LOOP INVARIANT FOR foo49
2025-08-17 21:45:19,714 - INFO  - ========================================

2025-08-17 21:45:19,727 - INFO  - file_name: foo49
2025-08-17 21:45:19,737 - DEBUG  - INNER_FLAG: False
2025-08-17 21:45:19,753 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 21:45:19,753 - INFO  - Path conditions: [None]
2025-08-17 21:45:19,753 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 21:45:19,753 - INFO  - Loop Condition: x != 0
2025-08-17 21:45:19,753 - INFO  - Array Names: []
2025-08-17 21:45:19,754 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 21:45:19,754 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 21:45:19,754 - INFO  - Non Inductive Variables: []
2025-08-17 21:45:28,748 - INFO  - after const
2025-08-17 21:45:28,748 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:45:28,749 - INFO  - after not in
2025-08-17 21:45:28,749 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:45:28,749 - INFO  - after vars
2025-08-17 21:45:28,749 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:45:34,163 - DEBUG  - invgen reasoning
2025-08-17 21:45:34,163 - DEBUG  - ```c
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}
```
2025-08-17 21:45:34,163 - INFO  - 生成循环不变量
2025-08-17 21:45:34,164 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:45:34,164 - INFO  - 注释过不变量的代码
2025-08-17 21:45:34,164 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:45:44,983 - INFO  - syntax Correct
2025-08-17 21:45:48,599 - INFO  - Validate:
2025-08-17 21:45:48,600 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:45:48,600 - INFO  - 
2025-08-17 21:45:48,600 - INFO  - Verify:
2025-08-17 21:45:48,600 - INFO  - [True]
2025-08-17 21:45:48,600 - INFO  - 
2025-08-17 21:45:48,600 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:45:48,600 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:45:48,601 - INFO  - VST 格式的循环不变量
2025-08-17 21:45:48,601 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:45:59,526 - INFO  - syntax Correct
2025-08-17 21:46:03,143 - INFO  - Validate:
2025-08-17 21:46:03,144 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:46:03,144 - INFO  - 
2025-08-17 21:46:03,144 - INFO  - Verify:
2025-08-17 21:46:03,144 - INFO  - [True]
2025-08-17 21:46:03,144 - INFO  - 
2025-08-17 21:46:13,963 - INFO  - syntax Correct
2025-08-17 21:46:17,567 - INFO  - Validate:
2025-08-17 21:46:17,567 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:46:17,567 - INFO  - 
2025-08-17 21:46:17,567 - INFO  - Verify:
2025-08-17 21:46:17,567 - INFO  - [True]
2025-08-17 21:46:17,567 - INFO  - 
2025-08-17 21:46:17,577 - DEBUG  - INNER_FLAG: False
2025-08-17 21:46:17,595 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 21:46:17,595 - INFO  - Path conditions: [None]
2025-08-17 21:46:17,595 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 21:46:17,595 - INFO  - Loop Condition: x != 0
2025-08-17 21:46:17,595 - INFO  - Array Names: []
2025-08-17 21:46:17,595 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 21:46:17,595 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 21:46:17,596 - INFO  - Non Inductive Variables: []
2025-08-17 21:46:28,423 - INFO  - after const
2025-08-17 21:46:28,423 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:46:28,423 - INFO  - after not in
2025-08-17 21:46:28,423 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:46:28,423 - INFO  - after vars
2025-08-17 21:46:28,423 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:46:34,343 - DEBUG  - invgen reasoning
2025-08-17 21:46:34,343 - DEBUG  - ```c
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}
```
2025-08-17 21:46:34,344 - INFO  - 生成循环不变量
2025-08-17 21:46:34,344 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:46:34,344 - INFO  - 注释过不变量的代码
2025-08-17 21:46:34,344 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:46:45,126 - INFO  - syntax Correct
2025-08-17 21:46:48,726 - INFO  - Validate:
2025-08-17 21:46:48,726 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:46:48,727 - INFO  - 
2025-08-17 21:46:48,727 - INFO  - Verify:
2025-08-17 21:46:48,727 - INFO  - [True]
2025-08-17 21:46:48,727 - INFO  - 
2025-08-17 21:46:48,727 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:46:48,727 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:46:48,728 - INFO  - VST 格式的循环不变量
2025-08-17 21:46:48,728 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:46:59,540 - INFO  - syntax Correct
2025-08-17 21:47:03,162 - INFO  - Validate:
2025-08-17 21:47:03,162 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:47:03,162 - INFO  - 
2025-08-17 21:47:03,162 - INFO  - Verify:
2025-08-17 21:47:03,162 - INFO  - [True]
2025-08-17 21:47:03,163 - INFO  - 
2025-08-17 21:47:13,987 - INFO  - syntax Correct
2025-08-17 21:47:17,594 - INFO  - Validate:
2025-08-17 21:47:17,594 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:47:17,594 - INFO  - 
2025-08-17 21:47:17,594 - INFO  - Verify:
2025-08-17 21:47:17,594 - INFO  - [True]
2025-08-17 21:47:17,594 - INFO  - 
2025-08-17 21:47:17,604 - DEBUG  - INNER_FLAG: False
2025-08-17 21:47:17,622 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-17 21:47:17,622 - INFO  - Path conditions: [None]
2025-08-17 21:47:17,622 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-17 21:47:17,622 - INFO  - Loop Condition: x != 0
2025-08-17 21:47:17,622 - INFO  - Array Names: []
2025-08-17 21:47:17,622 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-17 21:47:17,623 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-17 21:47:17,623 - INFO  - Non Inductive Variables: []
2025-08-17 21:47:27,725 - INFO  - after const
2025-08-17 21:47:27,726 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:47:27,726 - INFO  - after not in
2025-08-17 21:47:27,726 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:47:27,726 - INFO  - after vars
2025-08-17 21:47:27,726 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-17 21:47:31,825 - DEBUG  - invgen reasoning
2025-08-17 21:47:31,825 - DEBUG  - ```c
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}
```
2025-08-17 21:47:31,825 - INFO  - 生成循环不变量
2025-08-17 21:47:31,825 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:47:31,825 - INFO  - 注释过不变量的代码
2025-08-17 21:47:31,826 - INFO  - 
void foo49(int x, int y, int z1, int z2, int z3) {

    int i = x;
    int j = y;

        /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
}

2025-08-17 21:47:42,652 - INFO  - syntax Correct
2025-08-17 21:47:46,264 - INFO  - Validate:
2025-08-17 21:47:46,264 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:47:46,264 - INFO  - 
2025-08-17 21:47:46,264 - INFO  - Verify:
2025-08-17 21:47:46,264 - INFO  - [True]
2025-08-17 21:47:46,265 - INFO  - 
2025-08-17 21:47:46,265 - INFO  - ACSL 格式的循环不变量
2025-08-17 21:47:46,265 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && x <= \at(x,Pre)) ;
          loop invariant (\at(x,Pre) != 0) ==> (y == \at(y,Pre) - (\at(x,Pre) - x)) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
        */
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:47:46,265 - INFO  - VST 格式的循环不变量
2025-08-17 21:47:46,265 - INFO  - /*@ Inv
    ((x@pre != 0) => (x >= 0 && x <= x@pre) ) &&
((x@pre != 0) => (y == y@pre - (x@pre - x)) ) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
        while (x != 0) {
  
            x = x - 1;
            y = y - 1;
  
        }
2025-08-17 21:47:57,063 - INFO  - syntax Correct
2025-08-17 21:48:00,665 - INFO  - Validate:
2025-08-17 21:48:00,665 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:48:00,666 - INFO  - 
2025-08-17 21:48:00,666 - INFO  - Verify:
2025-08-17 21:48:00,666 - INFO  - [True]
2025-08-17 21:48:00,666 - INFO  - 
2025-08-17 21:48:11,477 - INFO  - syntax Correct
2025-08-17 21:48:15,077 - INFO  - Validate:
2025-08-17 21:48:15,077 - INFO  - [False, True, True, True, True, True, True, True]
2025-08-17 21:48:15,078 - INFO  - 
2025-08-17 21:48:15,078 - INFO  - Verify:
2025-08-17 21:48:15,078 - INFO  - [True]
2025-08-17 21:48:15,078 - INFO  - 
2025-08-17 21:48:15,078 - INFO  - ========================================
2025-08-17 21:48:15,078 - INFO  - first_pass:
2025-08-17 21:48:15,078 - INFO  - syntax=1, valid=None,satisfy=None
2025-08-17 21:48:15,078 - INFO  - ========================================
