[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_binarysearch_terminates (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_2_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_5_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_8_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_10_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_binarysearch_loop_invariant_11_established (Qed 2ms) (Alt-Ergo)
[wp] Proved goals:   34 / 41
  Unreachable:       1
  Qed:              27 (1ms-2ms-24ms)
  Alt-Ergo 2.5.4:    6 (8ms-13ms-20ms)
  Timeout:           7
------------------------------------------------------------
  Function binarysearch
------------------------------------------------------------

Goal Termination-condition (generated) in 'binarysearch':
Loop termination at line 32
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 10):
Let x_1 = (high_0 + low_0) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Let x_3 = Mint_0[shift_sint32(a, low_0)].
Let x_4 = Mint_0[shift_sint32(a, -1)].
Let x_5 = (high_1 - 1) / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Residual *)
  When: x <= x_2.
  (* Invariant *)
  Have: x_5 < high_1.
  (* Invariant *)
  Have: 0 <= high_1.
  (* Invariant *)
  Have: 0 < high_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_1)]) /\ (x_4 < x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (x <= Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: x_1 < high_0.
  (* Invariant *)
  Have: low_0 < x_1.
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: (2 + low_0) <= high_0.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: forall i : Z. ((i < high_0) -> ((low_0 < i) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((i < high_0) -> ((low_0 < i) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_0)]) /\ (x_3 < x).
  (* Invariant *)
  Have: forall i : Z. x < Mint_0[shift_sint32(a, i)].
  (* Invariant *)
  Have: forall i : Z. ((high_0 <= i) -> ((i < high_1) ->
      (x < Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_0) ->
      (x <= Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Else *)
  Have: x_2 != x.
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (12ms) (94)
Prover Z3 4.8.12 returns Valid (Qed:24ms) (39ms) (205827)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 10):
Assume { Type: is_sint32(high_0) /\ is_sint32(p). }
Prove: p < high_0.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 11):
Let x_1 = Mint_0[shift_sint32(a, low_0)].
Let x_2 = (high_0 + low_0) / 2.
Let x_3 = Mint_0[shift_sint32(a, -1)].
Let x_4 = (high_1 - 1) / 2.
Let x_5 = Mint_0[shift_sint32(a, x_2)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_5).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Residual *)
  When: x_5 < x.
  (* Invariant *)
  Have: x_4 < high_1.
  (* Invariant *)
  Have: 0 <= high_1.
  (* Invariant *)
  Have: 0 < high_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_1)]) /\ (x_3 < x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_1) ->
      (x <= Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: x_2 < high_0.
  (* Invariant *)
  Have: low_0 < x_2.
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: (2 + low_0) <= high_0.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: forall i : Z. ((i < high_0) -> ((low_0 < i) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((i < high_0) -> ((low_0 < i) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_0)]) /\ (x_1 < x).
  (* Invariant *)
  Have: forall i : Z. x < Mint_0[shift_sint32(a, i)].
  (* Invariant *)
  Have: forall i : Z. ((high_0 <= i) -> ((i < high_1) ->
      (x < Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_0) ->
      (x <= Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (20ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 11):
Assume {
  Type: is_sint32(high_0) /\ is_sint32(p).
  (* Invariant *)
  Have: p < high_0.
}
Prove: 0 <= p.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (18ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 12):
Assume {
  Type: is_sint32(high_0) /\ is_sint32(p).
  (* Invariant *)
  Have: p < high_0.
  (* Invariant *)
  Have: 0 <= p.
}
Prove: 0 <= high_0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (13ms) (7)
Prover Z3 4.8.12 returns Valid (Qed:2ms) (8ms) (25047)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 13):
Assume {
  Type: is_sint32(high_0) /\ is_sint32(p).
  (* Invariant *)
  Have: p < high_0.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= high_0.
}
Prove: 0 < high_0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (9ms) (7)
Prover Z3 4.8.12 returns Valid (Qed:1ms) (19ms) (25168)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Assume {
  Type: is_sint32(high_0) /\ is_sint32(p).
  (* Goal *)
  When: 0 < high_0.
  (* Invariant *)
  Have: p < high_0.
  (* Invariant *)
  Have: 0 <= p.
}
Prove: ((high_0 - 1) / 2) = p.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (18ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (23ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Let x_1 = (high_0 - 1) / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(a, -1)]) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < high_0).
  (* Invariant *)
  Have: x_1 < high_0.
  (* Invariant *)
  Have: 0 <= high_0.
  (* Invariant *)
  Have: 0 < high_0.
}
Prove: Mint_0[shift_sint32(a, i)] < x.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Let x_1 = (high_0 - 1) / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(a, -1)]) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < high_0).
  (* Invariant *)
  Have: x_1 < high_0.
  (* Invariant *)
  Have: 0 <= high_0.
  (* Invariant *)
  Have: 0 < high_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (8ms) (36)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Let x_1 = (high_0 - 1) / 2.
Let x_2 = Mint_0[shift_sint32(a, -1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: 0 < high_0.
  (* Invariant *)
  Have: x_1 < high_0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < high_0) ->
      (Mint_0[shift_sint32(a, i)] != x))).
}
Prove: (x < Mint_0[shift_sint32(a, high_0)]) /\ (x_2 < x).
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Let x_1 = Mint_0[shift_sint32(a, -1)].
Let x_2 = (high_0 - 1) / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: x_2 < high_0.
  (* Invariant *)
  Have: 0 <= high_0.
  (* Invariant *)
  Have: 0 < high_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_0)]) /\ (x_1 < x).
}
Prove: x < Mint_0[shift_sint32(a, i)].
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (19ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (19ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Let x_1 = Mint_0[shift_sint32(a, -1)].
Let x_2 = (high_0 - 1) / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < high_0).
  (* Invariant *)
  Have: x_2 < high_0.
  (* Invariant *)
  Have: 0 <= high_0.
  (* Invariant *)
  Have: 0 < high_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] != x))).
  (* Invariant *)
  Have: (x < Mint_0[shift_sint32(a, high_0)]) /\ (x_1 < x).
  (* Invariant *)
  Have: forall i_1 : Z. x < Mint_0[shift_sint32(a, i_1)].
}
Prove: x <= Mint_0[shift_sint32(a, i)].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (17ms) (46)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (23ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Exit-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'binarysearch'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:45: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
