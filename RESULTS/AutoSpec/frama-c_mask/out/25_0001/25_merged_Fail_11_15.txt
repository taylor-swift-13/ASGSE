[kernel] Parsing out/25_0001/25_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 14 goals scheduled
[wp] [Timeout] typed_arraySearch_terminates (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_arraySearch_loop_invariant_established (Qed 0.67ms) (Alt-Ergo)
[wp] [Timeout] typed_arraySearch_loop_invariant_2_preserved (Qed 4ms) (Alt-Ergo)
[wp] [Timeout] typed_arraySearch_loop_invariant_2_established (Qed 1ms) (Alt-Ergo)
[wp] Proved goals:   11 / 15
  Unreachable:       1
  Qed:               7 (0.67ms-1ms-4ms)
  Alt-Ergo 2.5.4:    3 (12ms-16ms-22ms)
  Timeout:           4
------------------------------------------------------------
  Function arraySearch
------------------------------------------------------------

Goal Termination-condition (generated) in 'arraySearch':
Loop termination at line 13
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/25_0001/25_merged.c, line 6):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/25_0001/25_merged.c, line 6):
Assume { Type: is_sint32(n). }
Prove: 0 <= n.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.67ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:0.67ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/25_0001/25_merged.c, line 7):
Let x_1 = Mint_0[shift_sint32(a, p)].
Let x_2 = Mint_0[shift_sint32(a, 0)].
Let x_3 = 1 + p.
Let x_4 = Mint_0[shift_sint32(a, x_3)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (2 + p) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((0 < n) -> (x_2 != x)).
  (* Invariant *)
  Have: ((0 < n) -> (Mint_0[shift_sint32(a, i)] != x)).
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < p) ->
      (Mint_0[shift_sint32(a, i_2)] != x))).
  (* Invariant *)
  Have: Mint_0[shift_sint32(a, i_1)] != x.
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: x_4 != x.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/25_0001/25_merged.c, line 7):
Let x_1 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: 0 < n.
}
Prove: x_1 != x.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/25_0001/25_merged.c, line 8):
Let x_1 = 1 + p.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Let x_3 = Mint_0[shift_sint32(a, p)].
Let x_4 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((0 < n) -> (x_4 != x)).
  (* Invariant *)
  Have: ((0 < n) -> (Mint_0[shift_sint32(a, i_1)] != x)).
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < p) ->
      (Mint_0[shift_sint32(a, i_3)] != x))).
  (* Invariant *)
  Have: Mint_0[shift_sint32(a, i_2)] != x.
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: x_3 != x.
  (* Invariant *)
  Have: (((2 + p) <= n) -> (x_2 != x)).
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (22ms) (76)

------------------------------------------------------------

Goal Establishment of Invariant (file out/25_0001/25_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/25_0001/25_merged.c, line 9):
Let x_1 = 2 + p.
Let x_2 = 1 + p.
Let x_3 = Mint_0[shift_sint32(a, x_2)].
Let x_4 = Mint_0[shift_sint32(a, p)].
Let x_5 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(x_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((0 < n) -> (x_5 != x)).
  (* Invariant *)
  Have: ((0 < n) -> (Mint_0[shift_sint32(a, i)] != x)).
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < p) ->
      (Mint_0[shift_sint32(a, i_2)] != x))).
  (* Invariant *)
  Have: Mint_0[shift_sint32(a, i_1)] != x.
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: x_4 != x.
  (* Invariant *)
  Have: ((x_1 <= n) -> (x_3 != x)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= p) ->
      (Mint_0[shift_sint32(a, i_2)] != x))).
}
Prove: exists i_2 : Z. ((x_1 <= n) -> (Mint_0[shift_sint32(a, i_2)] != x)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (12ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/25_0001/25_merged.c, line 9):
Let x_1 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((0 < n) -> (x_1 != x)).
}
Prove: exists i : Z. ((0 < n) -> (Mint_0[shift_sint32(a, i)] != x)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (14ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/25_0001/25_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/25_0001/25_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/25_0001/25_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Exit-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/25_0001/25_merged.c:2: Warning: 
  No 'assigns' specification for function 'arraySearch'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/25_0001/25_merged.c:23: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
