[kernel] Parsing out/13_0005/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 51 goals scheduled
[wp] [Timeout] typed_bubbleSort_terminates_part1 (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_terminates_part2 (Qed 9ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_preserved (Qed 21ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_established (Qed 3ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_4_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_9_established (Qed 3ms) (Alt-Ergo)
[wp] Proved goals:   46 / 52
  Unreachable:       1
  Qed:              32 (1ms-11ms-78ms)
  Alt-Ergo 2.5.4:   12 (9ms-51ms-249ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           6
------------------------------------------------------------
  Function bubbleSort
------------------------------------------------------------

Goal Termination-condition (generated) in 'bubbleSort' (1/2):
Loop termination at line 25
Assume { Type: is_sint32(n). (* Else *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Termination-condition (generated) in 'bubbleSort' (2/2):
Loop termination at line 44
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x_1), a_1, n).
Let a_3 = a_2[shift_sint32(a, j)].
Let x_2 = Mint_0[shift_sint32(a, j_1)].
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= x_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> (((2 + i_1) <= n) ->
      (a_2[shift_sint32(a, i_1)] <= a_2[shift_sint32(a, 1 + i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) ->
      (a_2[shift_sint32(a, i_1)] <= a_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_1)] <= a_2[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      (a_2[shift_sint32(a, i_1)] <= a_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_1)] <= a_2[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: 0 < i.
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:9ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 9):
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i_1.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x_1), a_1, n).
Let x_2 = 1 + i.
Let a_3 = havoc(Mint_undef_2, havoc(Mint_undef_3, a_2, a_1, x_2), a_1, n).
Let a_4 = a_3[shift_sint32(a, j)].
Let x_3 = 2 + i_1.
Let a_5 = a_2[shift_sint32(a, j_1)].
Let x_4 = Mint_0[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(i - 1) /\ is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_4))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_3 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_3 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_3[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_3[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[shift_sint32(a, x_2)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: i <= j.
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(n - 1).
  (* Else *)
  Have: 0 < n.
}
Prove: j < n.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 12):
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j < n.
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, j)].
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 14):
Let x = Mint_0[shift_sint32(a, j)].
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) ->
      (Mint_0[shift_sint32(a, i_1)] <= x))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (9ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 17):
Let x = Mint_0[shift_sint32(a, j)].
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) ->
      (Mint_0[shift_sint32(a, i)] <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      (Mint_0[shift_sint32(a, i)] <= x))).
}
Prove: 0 <= j.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 30):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i_2.
Let a_2 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_1, x), a_1, n).
Let x_1 = 1 + i_1.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_2, a_1, x_1), a_1, n).
Let x_2 = 1 + j.
Let a_4 = a_3[shift_sint32(a, x_2)].
Let a_5 = a_3[shift_sint32(a, j)].
Let x_3 = 2 + i_1.
Let x_4 = 2 + i_2.
Let a_6 = a_2[shift_sint32(a, j_1)].
Let x_5 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x_2) /\
      is_sint32(a_5) /\ is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i_1 <= i) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_2[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_2[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, x)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_3[shift_sint32(a, i_3)] <= a_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_3[shift_sint32(a, i_3)] <= a_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_4 < a_5
  Then {
    Have: a_3[shift_sint32(a, j) <- a_4][shift_sint32(a, x_2) <- a_5] =
        Mint_0.
  }
  Else { Have: a_3 = Mint_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:58ms) (249ms) (2917)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 30):
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x_1), a_1, n).
Let a_3 = a_2[shift_sint32(a, j)].
Let x_2 = Mint_0[shift_sint32(a, j_1)].
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i <= i_1) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: 0 < i.
}
Prove: a_2[shift_sint32(a, i_1)] <= a_2[shift_sint32(a, 1 + i_1)].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (16ms) (92)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 31):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i_2.
Let a_2 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_1, x), a_1, n).
Let x_1 = 1 + i_1.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_2, a_1, x_1), a_1, n).
Let x_2 = 1 + j.
Let a_4 = shift_sint32(a, x_2).
Let a_5 = a_3[a_4].
Let a_6 = a_3[shift_sint32(a, j)].
Let x_3 = 2 + i_1.
Let x_4 = 2 + i_2.
Let a_7 = a_2[shift_sint32(a, j_1)].
Let x_5 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x_2) /\
      is_sint32(a_6) /\ is_sint32(a_5).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_2[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_2[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, x)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_3[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_3[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_5 < a_6
  Then { Have: a_3[shift_sint32(a, j) <- a_5][a_4 <- a_6] = Mint_0. }
  Else { Have: a_3 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[a_4].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:70ms) (48ms) (598)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 32):
Let x = 1 + j.
Let a_1 = shift_sint32(a, x).
Let a_2 = shift_sint32(a, 0).
Let x_1 = 1 + i_2.
Let a_3 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_2, x_1), a_2, n).
Let x_2 = 1 + i_1.
Let a_4 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_3, a_2, x_2), a_2, n).
Let a_5 = a_4[a_1].
Let a_6 = a_4[shift_sint32(a, j)].
Let a_7 = shift_sint32(a, i_1).
Let x_3 = 2 + i_2.
Let a_8 = a_3[shift_sint32(a, j_1)].
Let x_4 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x) /\
      is_sint32(a_6) /\ is_sint32(a_5).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_4))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_3[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_3[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_3 <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_4[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[a_7]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_4[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, x_2)]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_5 < a_6
  Then { Have: a_4[shift_sint32(a, j) <- a_5][a_1 <- a_6] = Mint_0. }
  Else { Have: a_4 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[a_1]))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[a_7].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:74ms) (88ms) (956)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 32):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x), a_1, n).
Let a_3 = a_2[shift_sint32(a, j)].
Let a_4 = a_2[shift_sint32(a, i)].
Let x_1 = Mint_0[shift_sint32(a, j_1)].
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i_1 <= i) /\ (0 <= i_1) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, x)]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: 0 < i.
}
Prove: a_2[shift_sint32(a, i_1)] <= a_4.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (15ms) (90)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 33):
Let x = 2 + i_1.
Let a_1 = shift_sint32(a, i_1).
Let x_1 = 1 + j.
Let a_2 = shift_sint32(a, x_1).
Let x_2 = Mint_0[a_2].
Let a_3 = shift_sint32(a, 0).
Let x_3 = 1 + i_2.
Let a_4 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_3, x_3), a_3, n).
Let x_4 = 1 + i_1.
Let a_5 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_4, a_3, x_4), a_3, n).
Let a_6 = a_5[a_2].
Let a_7 = a_5[shift_sint32(a, j)].
Let x_5 = 2 + i_2.
Let a_8 = a_4[shift_sint32(a, j_1)].
Let x_6 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x_1) /\
      is_sint32(a_7) /\ is_sint32(a_6).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_6))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_4[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_5 <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_4[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_5 <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, x_3)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_5[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[a_1])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_5[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, x_4)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_6 < a_7
  Then { Have: a_5[shift_sint32(a, j) <- a_6][a_2 <- a_7] = Mint_0. }
  Else { Have: a_5 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((x <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[a_1])))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:68ms) (12ms) (215)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 34):
Let x = 1 + j.
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[a_1].
Let a_2 = shift_sint32(a, i_1).
Let a_3 = shift_sint32(a, 0).
Let x_2 = 1 + i_2.
Let a_4 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_3, x_2), a_3, n).
Let x_3 = 1 + i_1.
Let a_5 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_4, a_3, x_3), a_3, n).
Let a_6 = a_5[a_1].
Let a_7 = a_5[shift_sint32(a, j)].
Let a_8 = shift_sint32(a, x_3).
Let x_4 = 2 + i_2.
Let a_9 = a_4[shift_sint32(a, j_1)].
Let x_5 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x) /\
      is_sint32(a_7) /\ is_sint32(a_6).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_5))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_4[shift_sint32(a, i_3)] <= a_9))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_4[shift_sint32(a, i_3)] <= a_9))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_4 <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, x_2)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_5[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[a_2]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_5[shift_sint32(a, i_3)] <= a_7))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[a_8]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_6 < a_7
  Then { Have: a_5[shift_sint32(a, j) <- a_6][a_1 <- a_7] = Mint_0. }
  Else { Have: a_5 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[a_2]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[a_8].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:65ms) (32ms) (296)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 34):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x), a_1, n).
Let a_3 = a_2[shift_sint32(a, x)].
Let a_4 = a_2[shift_sint32(a, j)].
Let x_1 = Mint_0[shift_sint32(a, j_1)].
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i_1 <= i) /\ (0 <= i_1) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_2[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: 0 < i.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i)]))).
}
Prove: a_2[shift_sint32(a, i_1)] <= a_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (13ms) (111)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 35):
Let x = 1 + i_1.
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[a_1].
Let x_2 = 1 + j.
Let a_2 = shift_sint32(a, x_2).
Let x_3 = Mint_0[a_2].
Let a_3 = shift_sint32(a, i_1).
Let a_4 = shift_sint32(a, 0).
Let x_4 = 1 + i_2.
Let a_5 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_1, a_4, x_4), a_4, n).
Let a_6 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_5, a_4, x), a_4, n).
Let a_7 = a_6[a_2].
Let a_8 = a_6[shift_sint32(a, j)].
Let x_5 = 2 + i_2.
Let a_9 = a_5[shift_sint32(a, j_1)].
Let x_6 = Mint_1[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(n - 1) /\ is_sint32(x_2) /\
      is_sint32(a_8) /\ is_sint32(a_7).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) ->
      (Mint_1[shift_sint32(a, i_3)] <= x_6))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_2.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j_1) ->
      (a_5[shift_sint32(a, i_3)] <= a_9))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_5 <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, i_2)])))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->
      (a_5[shift_sint32(a, i_3)] <= a_9))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> ((x_5 <= n) ->
      (a_5[shift_sint32(a, i_3)] <= a_5[shift_sint32(a, x_4)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_6[shift_sint32(a, i_3)] <= a_6[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_6[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_6[shift_sint32(a, i_3)] <= a_6[a_3]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->
      (a_6[shift_sint32(a, i_3)] <= a_8))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_6[shift_sint32(a, i_3)] <= a_6[a_1]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_7 < a_8
  Then { Have: a_6[shift_sint32(a, j) <- a_7][a_2 <- a_8] = Mint_0. }
  Else { Have: a_6 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_2) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[a_3]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:78ms) (25ms) (261)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 35):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x), a_1, n).
Let a_3 = a_2[shift_sint32(a, x)].
Let a_4 = a_2[shift_sint32(a, j)].
Let x_1 = Mint_0[shift_sint32(a, j_1)].
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i_1 <= i) /\ (0 <= i_1) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_2[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_4))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: 0 < i.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (a_2[shift_sint32(a, i_2)] <= a_3))).
}
Prove: a_2[shift_sint32(a, i_1)] <= a_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (23ms) (111)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (27ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0005/13_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0005/13_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 19) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 19) (2/3):
Effect at line 25
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 19) (3/3):
Effect at line 44
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 38) (1/4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 38) (2/4):
Effect at line 44
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 38) (3/4):
Effect at line 47
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i_1.
Let a_2 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_0, a_1, x_1), a_1, n).
Let x_2 = 1 + i.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_2, a_1, x_2), a_1, n).
Let x_3 = j - 1.
Let a_4 = shift_sint32(a, x_3).
Let a_5 = shift_sint32(a, j).
Let a_6 = a_3[a_5].
Let a_7 = a_3[a_4].
Let a_8 = a_3[a_4 <- a_6][a_5 <- a_7].
Let a_9 = shift_sint32(a, x_2).
Let a_10 = shift_sint32(a, i).
Let x_4 = 2 + i_1.
Let a_11 = a_2[shift_sint32(a, j_1)].
Let x_5 = Mint_0[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(n - 1) /\
      is_sint32(a_6) /\ is_sint32(a_7).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_4, 1).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_5))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_11))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_11))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_3[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[a_10])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= j) ->
      (a_3[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[a_9])))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j <= i.
  (* Then *)
  Have: a_6 < a_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_8[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[a_10])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_8[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[a_9])))).
}
Prove: included(a_4, 1, a_1, n) \/ included(a_4, 1, a_1, x_2).
Prover Z3 4.8.12 returns Valid (Qed:38ms) (20ms) (126388)

------------------------------------------------------------

Goal Loop assigns (file out/13_0005/13_merged.c, line 38) (4/4):
Effect at line 48
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i_1.
Let a_2 = havoc(Mint_undef_2, havoc(Mint_undef_3, Mint_0, a_1, x_1), a_1, n).
Let x_2 = 1 + i.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, a_2, a_1, x_2), a_1, n).
Let x_3 = j - 1.
Let a_4 = shift_sint32(a, x_3).
Let a_5 = shift_sint32(a, j).
Let a_6 = a_3[a_5].
Let a_7 = a_3[a_4].
Let a_8 = a_3[a_4 <- a_6][a_5 <- a_7].
Let a_9 = shift_sint32(a, x_2).
Let a_10 = shift_sint32(a, i).
Let x_4 = 2 + i_1.
Let a_11 = a_2[shift_sint32(a, j_1)].
Let x_5 = Mint_0[shift_sint32(a, j_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(n - 1) /\
      is_sint32(a_6) /\ is_sint32(a_7).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_5, 1).
  (* Else *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_2 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_5))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_11))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (a_2[shift_sint32(a, i_2)] <= a_11))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((x_4 <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, x_1)])))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_3[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[a_10])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= j) ->
      (a_3[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_3[shift_sint32(a, i_2)] <= a_3[a_9])))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j <= i.
  (* Then *)
  Have: a_6 < a_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_8[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[a_10])))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_8[shift_sint32(a, i_2)] <= a_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_8[shift_sint32(a, i_2)] <= a_8[a_9])))).
}
Prove: included(a_5, 1, a_1, n) \/ included(a_5, 1, a_1, x_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (78ms) (890)
Prover Z3 4.8.12 returns Valid (Qed:35ms) (24ms) (126418)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Exit-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0005/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'bubbleSort'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/13_0005/13_merged.c:55: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
