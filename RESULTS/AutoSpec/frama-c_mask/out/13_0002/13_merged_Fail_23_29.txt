[kernel] Parsing out/13_0002/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/13_0002/13_merged.c:8: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 28 goals scheduled
[wp] [Timeout] typed_bubbleSort_terminates_part2 (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_terminates_part1 (Qed 0.87ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_2_established (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_3_established (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_4_established (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_bubbleSort_loop_invariant_7_established (Qed 5ms) (Alt-Ergo)
[wp] Proved goals:   23 / 29
  Unreachable:       1
  Qed:              14 (0.87ms-10ms-45ms)
  Alt-Ergo 2.5.4:    8 (14ms-37ms-64ms)
  Timeout:           6
------------------------------------------------------------
  Function bubbleSort
------------------------------------------------------------

Goal Termination-condition (generated) in 'bubbleSort' (1/2):
Loop termination at line 8
Assume { Type: is_sint32(n). (* Else *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.87ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:0.87ms) (8s)

------------------------------------------------------------

Goal Termination-condition (generated) in 'bubbleSort' (2/2):
Loop termination at line 27
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Else *)
  Have: 0 < n.
  (* Then *)
  Have: 0 < i.
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 12):
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i.
}
Prove: i <= n.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 13):
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i.
  (* Invariant *)
  Have: i <= n.
}
Prove: i < n.
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 14):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i_1.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_1, a_1, x), a_1, n).
Let x_1 = 1 + j.
Let a_3 = a_2[shift_sint32(a, x_1)].
Let a_4 = a_2[shift_sint32(a, j)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x_1) /\ is_sint32(a_4) /\ is_sint32(a_3).
  (* Goal *)
  When: (i_1 <= i) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> (((2 + i_2) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_2)])))).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_2[shift_sint32(a, i_3)] <= a_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (((2 + i_1) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, x)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_3 < a_4
  Then {
    Let a_5 = shift_sint32(a, j).
    Let a_6 = shift_sint32(a, x_1).
    Have: a_2 = Mint_2.
    Have: Mint_2[a_5 <- Mint_2[a_6]][a_6 <- Mint_2[a_5]] = Mint_0.
  }
  Else { Have: a_2 = Mint_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (58ms) (626)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 14):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Goal *)
  When: (i_1 <= i) /\ ((2 + i) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)].
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 15):
Let a_1 = shift_sint32(a, 0).
Let x = 1 + i_1.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_1, a_1, x), a_1, n).
Let x_1 = 1 + j.
Let a_3 = shift_sint32(a, x_1).
Let a_4 = a_2[a_3].
Let a_5 = a_2[shift_sint32(a, j)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x_1) /\ is_sint32(a_5) /\ is_sint32(a_4).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> (((2 + i_2) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_2)])))).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_2[shift_sint32(a, i_3)] <= a_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (((2 + i_1) <= n) ->
      (a_2[shift_sint32(a, i_3)] <= a_2[shift_sint32(a, x)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_4 < a_5
  Then {
    Let a_6 = shift_sint32(a, j).
    Have: a_2 = Mint_2.
    Have: Mint_2[a_6 <- Mint_2[a_3]][a_3 <- Mint_2[a_6]] = Mint_0.
  }
  Else { Have: a_2 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[a_3].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (39ms) (368)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 16):
Let x = 1 + j.
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[a_1].
Let a_2 = shift_sint32(a, 0).
Let x_2 = 1 + i_1.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_1, a_2, x_2), a_2, n).
Let a_4 = a_3[a_1].
Let a_5 = a_3[shift_sint32(a, j)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(a_5) /\ is_sint32(a_4).
  (* Goal *)
  When: (0 <= i) /\ ((2 + j) <= i_1) /\ (i <= x).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> (((2 + i_2) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_2)])))).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_3[shift_sint32(a, i_3)] <= a_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (((2 + i_1) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, x_2)])))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_4 < a_5
  Then {
    Let a_6 = shift_sint32(a, j).
    Have: a_3 = Mint_2.
    Have: Mint_2[a_6 <- Mint_2[a_1]][a_1 <- Mint_2[a_6]] = Mint_0.
  }
  Else { Have: a_3 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (18ms) (129)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 17):
Let x = 1 + j.
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[a_1].
Let a_2 = shift_sint32(a, 0).
Let x_2 = 1 + i_1.
Let a_3 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_1, a_2, x_2), a_2, n).
Let a_4 = a_3[a_1].
Let a_5 = a_3[shift_sint32(a, j)].
Let a_6 = shift_sint32(a, x_2).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(a_5) /\ is_sint32(a_4).
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> (((2 + i_2) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_2)])))).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_3[shift_sint32(a, i_3)] <= a_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_3[shift_sint32(a, i_3)] <= a_3[a_6]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_4 < a_5
  Then {
    Let a_7 = shift_sint32(a, j).
    Have: a_3 = Mint_2.
    Have: Mint_2[a_7 <- Mint_2[a_1]][a_1 <- Mint_2[a_7]] = Mint_0.
  }
  Else { Have: a_3 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + j) <= i_1) -> ((i_3 <= x) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1)))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[a_6].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:42ms) (64ms) (721)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 17):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
}
Prove: Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i_1)].
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)
Prover Z3 4.8.12 returns Unknown (Qed:5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 18):
Let x = 1 + i_1.
Let a_1 = shift_sint32(a, x).
Let x_1 = Mint_0[a_1].
Let x_2 = 1 + j.
Let a_2 = shift_sint32(a, x_2).
Let x_3 = Mint_0[a_2].
Let a_3 = shift_sint32(a, 0).
Let a_4 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_1, a_3, x), a_3, n).
Let a_5 = a_4[a_2].
Let a_6 = a_4[shift_sint32(a, j)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x_2) /\ is_sint32(a_6) /\ is_sint32(a_5).
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_2.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) -> (((2 + i_2) <= n) ->
      (Mint_1[shift_sint32(a, i_3)] <= Mint_1[shift_sint32(a, 1 + i_2)])))).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) ->
      (a_4[shift_sint32(a, i_3)] <= a_6))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (a_4[shift_sint32(a, i_3)] <= a_4[a_1]))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < i_1.
  If a_5 < a_6
  Then {
    Let a_7 = shift_sint32(a, j).
    Have: a_4 = Mint_2.
    Have: Mint_2[a_7 <- Mint_2[a_2]][a_2 <- Mint_2[a_7]] = Mint_0.
  }
  Else { Have: a_4 = Mint_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> (((2 + i_3) <= n) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_2) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + j) <= i_1) -> ((i_3 <= x_2) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= x_1))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:45ms) (30ms) (165)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 18):
Let x = Mint_0[shift_sint32(a, 1 + i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Goal *)
  When: (i <= i_1) /\ (0 <= i) /\ ((2 + i_1) <= n).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (14ms) (38)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (18ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 21) (1/4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 21) (2/4):
Effect at line 27
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 21) (3/4):
Effect at line 30
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x_1), a_1, n).
Let x_2 = j - 1.
Let a_3 = shift_sint32(a, x_2).
Let a_4 = shift_sint32(a, j).
Let a_5 = a_2[a_4].
Let a_6 = a_2[a_3].
Let a_7 = a_2[a_3 <- a_5][a_4 <- a_6].
Let a_8 = shift_sint32(a, x_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x_2) /\ is_sint32(a_5) /\ is_sint32(a_6).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (((2 + i_1) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_1)])))).
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_6))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[a_8])))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j <= i.
  (* Then *)
  Have: a_5 < a_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_7[shift_sint32(a, i_2)] <= a_7[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_7[shift_sint32(a, i_2)] <= a_6))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((j < i) -> ((i_2 <= j) ->
      (a_7[shift_sint32(a, i_2)] <= a_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_7[shift_sint32(a, i_2)] <= a_7[a_8])))).
}
Prove: included(a_3, 1, a_1, n) \/ included(a_3, 1, a_1, x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (32ms) (454)

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 21) (4/4):
Effect at line 31
Let x = 2 + i.
Let a_1 = shift_sint32(a, 0).
Let x_1 = 1 + i.
Let a_2 = havoc(Mint_undef_0, havoc(Mint_undef_1, Mint_0, a_1, x_1), a_1, n).
Let x_2 = j - 1.
Let a_3 = shift_sint32(a, x_2).
Let a_4 = shift_sint32(a, j).
Let a_5 = a_2[a_4].
Let a_6 = a_2[a_3].
Let a_7 = a_2[a_3 <- a_5][a_4 <- a_6].
Let a_8 = shift_sint32(a, x_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(n_1) /\ is_sint32(x_2) /\ is_sint32(a_5) /\ is_sint32(a_6).
  (* Goal *)
  When: !invalid(Malloc_0, a_4, 1).
  (* Else *)
  Have: 0 < n_1.
  (* Then *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> (((2 + i_2) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (((2 + i_1) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_1)])))).
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (a_2[shift_sint32(a, i_2)] <= a_6))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_2[shift_sint32(a, i_2)] <= a_2[a_8])))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j <= i.
  (* Then *)
  Have: a_5 < a_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> (((2 + i_2) <= n) ->
      (a_7[shift_sint32(a, i_2)] <= a_7[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) ->
      (a_7[shift_sint32(a, i_2)] <= a_6))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((j < i) -> ((i_2 <= j) ->
      (a_7[shift_sint32(a, i_2)] <= a_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((x <= n) ->
      (a_7[shift_sint32(a, i_2)] <= a_7[a_8])))).
}
Prove: included(a_4, 1, a_1, n) \/ included(a_4, 1, a_1, x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (40ms) (454)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Exit-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0002/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'bubbleSort'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/13_0002/13_merged.c:38: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
