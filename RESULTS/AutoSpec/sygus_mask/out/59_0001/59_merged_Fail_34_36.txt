[kernel] Parsing out/59_0001/59_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/59_0001/59_merged.c:27: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/59_0001/59_merged.c:27: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_8_preserved (Qed 23ms) (Alt-Ergo)
[wp] Proved goals:   34 / 36
  Qed:              22 (0.62ms-7ms-36ms)
  Alt-Ergo 2.6.2:    8 (4ms-104ms-386ms)
  Z3 4.8.6:          4 (18ms-53ms-126ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 26
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((c_2 = c) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (c_2 = c))))).
  (* Invariant *)
  Have: ((c_2 = c) -> (exists i_6 : Z. (0 < i_6) /\ (i_6 <= c_2))).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_2) -> (i_6 <= c))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_2) -> (i_6 < c))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_2) -> (i_6 <= c_2))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_2) -> (c_2 != c))).
  (* Invariant *)
  Have: ((i_2 <= c) -> ((0 <= i_2) -> (i_2 = c_2))).
  (* Invariant *)
  Have: ((i_3 < c) -> ((i_3 < c_2) -> ((1 + i_3) = c_2))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < c) -> (c_2 != c))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_2) -> (i_5 < c))).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: ((c_2 = c) -> (0 < c_2)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If c_2 != c
  Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
}
Prove: exists i_6 : Z. (0 < i_6) /\ (i_6 <= c).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (243ms) (3433)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_6 : Z. (0 < i_6) /\ (i_6 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= c_4))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_6 : Z. (0 < i_6) /\ (i_6 <= c))).
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (4ms) (87)
Prover Z3 4.8.6 returns Valid (Qed:18ms) (7ms) (38482)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (n != c) /\ (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 <= n_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: ((i_2 < 0) -> ((i_2 < n_1) -> (i_2 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= c_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 <= n) -> (i_3 = c_4))).
  (* Invariant *)
  Have: ((i_4 < c_4) -> ((i_4 < n) -> ((1 + i_4) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (4ms) (34)
Prover Z3 4.8.6 returns Valid (Qed:17ms) (12ms) (37181)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 <= n_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: ((i_2 < 0) -> ((i_2 < n_1) -> (i_2 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= c_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 <= n) -> (i_3 = c_4))).
  (* Invariant *)
  Have: ((i_4 < c_4) -> ((i_4 < n) -> ((1 + i_4) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))))).
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (15ms) (33)
Prover Z3 4.8.6 returns Valid (Qed:22ms) (17ms) (38681)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 <= n_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: ((i_2 < 0) -> ((i_2 < n_1) -> (i_2 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= c_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 <= n) -> (i_3 = c_4))).
  (* Invariant *)
  Have: ((i_4 < c_4) -> ((i_4 < n) -> ((1 + i_4) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= n))).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (16ms) (35)
Prover Z3 4.8.6 returns Valid (Qed:22ms) (8ms) (39168)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 <= n_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: ((i_2 < 0) -> ((i_2 < n_1) -> (i_2 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= c_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 <= n) -> (i_3 = c_4))).
  (* Invariant *)
  Have: ((i_4 < c_4) -> ((i_4 < n) -> ((1 + i_4) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= c))).
}
Prove: n != c.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:23ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_6 : Z. (0 < i_6) /\ (i_6 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= c_4))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_6 : Z. (0 < i_6) /\ (i_6 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 <= c))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (n != c))).
}
Prove: exists i_6 : Z. ((0 <= i_6) -> ((i_6 <= n) -> (i_6 = c))).
Prover Z3 4.8.6 returns Valid (Qed:28ms) (29ms) (127470)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 16):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. ((0 <= i) -> ((i <= n) -> (i = 0))).
Prover Z3 4.8.6 returns Valid (Qed:0.62ms) (18ms) (62974)

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 17):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= c_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_7 : Z. (0 < i_7) /\ (i_7 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= c))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (n != c))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= n) -> (i_6 = c))).
}
Prove: exists i_7 : Z. ((i_7 < c) -> ((i_7 < n) -> ((1 + i_7) = c))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:25ms) (386ms) (4432)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 17):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n) -> (i = 0))).
}
Prove: exists i_1 : Z. ((i_1 < 0) -> ((i_1 < n) -> (i_1 = (-1)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.74ms) (146ms) (1852)
Prover Z3 4.8.6 returns Valid (Qed:0.74ms) (21ms) (72534)

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 18):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_8 : Z. (0 < i_8) /\ (i_8 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 <= n))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 < n))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 <= c_4))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_8 : Z. (0 < i_8) /\ (i_8 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 < n))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 <= c))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (n != c))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= n) -> (i_6 = c))).
  (* Invariant *)
  Have: ((i_7 < c) -> ((i_7 < n) -> ((1 + i_7) = c))).
}
Prove: exists i_8 : Z. ((0 <= i_8) -> ((i_8 < n) -> (n != c))).
Prover Z3 4.8.6 returns Valid (Qed:29ms) (126ms) (984340)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 19):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_9 : Z. (0 < i_9) /\ (i_9 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (i_9 <= n))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (i_9 < n))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (i_9 <= c_4))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_9 : Z. (0 < i_9) /\ (i_9 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 <= n))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 < n))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 <= c))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (n != c))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= n) -> (i_6 = c))).
  (* Invariant *)
  Have: ((i_7 < c) -> ((i_7 < n) -> ((1 + i_7) = c))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 < n) -> (n != c))).
}
Prove: exists i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 < n))).
Prover Z3 4.8.6 returns Valid (Qed:29ms) (38ms) (375668)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 20):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n_1.
  (* Invariant *)
  Have: ((0 <= i) -> ((i <= n_1) -> (i = 0))).
  (* Invariant *)
  Have: ((i_1 < 0) -> ((i_1 < n_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < n) -> (n = c_4))))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_10 : Z. (0 < i_10) /\ (i_10 <= c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c_4) -> (i_10 <= n))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c_4) -> (i_10 < n))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c_4) -> (i_10 <= c_4))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c_4) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> ((i_3 < n) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) -> (n != c_4))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < n) -> (n = c))))).
  (* Invariant *)
  Have: ((n = c) -> (exists i_10 : Z. (0 < i_10) /\ (i_10 <= c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c) -> (i_10 <= n))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c) -> (i_10 < n))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c) -> (i_10 <= c))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < c) -> (n != c))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= n) -> (i_6 = c))).
  (* Invariant *)
  Have: ((i_7 < c) -> ((i_7 < n) -> ((1 + i_7) = c))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 < n) -> (n != c))).
  (* Invariant *)
  Have: ((0 <= i_9) -> ((i_9 < c) -> (i_9 < n))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:36ms) (16ms) (85)
Prover Z3 4.8.6 returns Valid (Qed:36ms) (21ms) (42524)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/59_0001/59_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/59_0001/59_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/59_0001/59_merged.c, line 23) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/59_0001/59_merged.c, line 23) (2/3):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/59_0001/59_merged.c, line 23) (3/3):
Call Result at line 27
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/59_0001/59_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
