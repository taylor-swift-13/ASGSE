[kernel] Parsing out/60_0001/60_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/60_0001/60_merged.c:20: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/60_0001/60_merged.c:20: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 9ms) (Alt-Ergo)
[wp] Proved goals:   22 / 24
  Qed:              16 (8ms-3ms-14ms)
  Alt-Ergo 2.6.2:    5 (9ms-16ms)
  Z3 4.8.6:          1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 19
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Goal *)
  When: (i < c) /\ is_sint32(i).
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: ((c_3 = c) ->
      (forall i_3 : Z. ((i_3 < c_3) -> (is_sint32(i_3) -> (c_3 != c))))).
  (* Invariant *)
  Have: (c_3 = 0) \/ (c_3 = c) \/ ((0 < c_3) /\ (c_3 < c)).
  (* Invariant *)
  Have: c_3 <= c.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_3) ->
      ((c_3 = 1) \/ (c_3 != c)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 < c) -> (c_3 != c)))).
  (* Invariant *)
  Have: (((p=false) -> (c_3 = c))) \/ (((p=true) -> (c_3 < c))).
  (* Invariant *)
  Have: (((p_1=false) -> (c_3 = c))) \/ (((p_1=true) -> (c_3 != c))).
  (* Invariant *)
  Have: 0 <= c_3.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_3 = c_2.
    If c_2 != c
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  }
  Else { Have: c_3 = 1. Have: c = 1. }
}
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_2 : Z. ((i_2 < c_4) -> (is_sint32(i_2) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_2 : Z. ((i_2 < c) -> (is_sint32(i_2) -> (n != c))))).
}
Prove: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (16ms) (103)
Prover Z3 4.8.6 returns Valid (Qed:11ms) (12ms) (36235)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_2 : Z. ((i_2 < c_4) -> (is_sint32(i_2) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_2 : Z. ((i_2 < c) -> (is_sint32(i_2) -> (n != c))))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (12ms) (42)
Prover Z3 4.8.6 returns Valid (Qed:11ms) (16ms) (35290)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: ((c_2 = c) ->
      (forall i_3 : Z. ((i_3 < c_2) -> (is_sint32(i_3) -> (c_2 != c))))).
  (* Invariant *)
  Have: (c_2 = 0) \/ (c_2 = c) \/ ((0 < c_2) /\ (c_2 < c)).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_2) ->
      ((c_2 = 1) \/ (c_2 != c)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 < c) -> (c_2 != c)))).
  (* Invariant *)
  Have: (((p=false) -> (c_2 = c))) \/ (((p=true) -> (c_2 < c))).
  (* Invariant *)
  Have: (((p_1=false) -> (c_2 = c))) \/ (((p_1=true) -> (c_2 != c))).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0_0 != 0.
  If c_2 != c
  Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c) -> (is_sint32(i_3) -> false)).
}
Prove: c = 1.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (72006)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_2 : Z. ((i_2 < c_4) -> (is_sint32(i_2) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_2 : Z. ((i_2 < c) -> (is_sint32(i_2) -> (n != c))))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c) -> ((c = 1) \/ (n != c)))).
}
Prove: exists i_2 : Z. is_sint32(i_2) /\
    (((0 <= i_2) -> ((i_2 < n) -> (n != c)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (9ms) (67)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (76447)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 12):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i).
Prover Alt-Ergo 2.6.2 returns Valid (12ms) (12)
Prover Z3 4.8.6 returns Valid (12ms) (67608)

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_3 : Z. ((i_3 < c_4) -> (is_sint32(i_3) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_3 : Z. ((i_3 < c) -> (is_sint32(i_3) -> (n != c))))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((c = 1) \/ (n != c)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 < n) -> (n != c)))).
}
Prove: exists p_2 : bool. (((p_2=false) -> (n = c))) \/
    (((p_2=true) -> (c < n))).
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_3 : Z. ((i_3 < c_4) -> (is_sint32(i_3) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_3 : Z. ((i_3 < c) -> (is_sint32(i_3) -> (n != c))))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((c = 1) \/ (n != c)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 < n) -> (n != c)))).
  (* Invariant *)
  Have: (((p_2=false) -> (n = c))) \/ (((p_2=true) -> (c < n))).
}
Prove: exists p_3 : bool. (((p_3=false) -> (n = c))) \/
    (((p_3=true) -> (n != c))).
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_3 : Z. ((i_3 < c_4) -> (is_sint32(i_3) -> (n != c_4))))).
  (* Invariant *)
  Have: (c_4 = 0) \/ (n = c_4) \/ ((0 < c_4) /\ (c_4 < n)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) ->
      ((c_4 = 1) \/ (n != c_4)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 < n) -> (n != c_4)))).
  (* Invariant *)
  Have: (((p=false) -> (n = c_4))) \/ (((p=true) -> (c_4 < n))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c_4))) \/ (((p_1=true) -> (n != c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) ->
      (forall i_3 : Z. ((i_3 < c) -> (is_sint32(i_3) -> (n != c))))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((c = 1) \/ (n != c)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 < n) -> (n != c)))).
  (* Invariant *)
  Have: (((p_2=false) -> (n = c))) \/ (((p_2=true) -> (c < n))).
  (* Invariant *)
  Have: (((p_3=false) -> (n = c))) \/ (((p_3=true) -> (n != c))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (13ms) (49)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (16ms) (36502)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/60_0001/60_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/60_0001/60_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/60_0001/60_merged.c, line 17) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/60_0001/60_merged.c, line 17) (2/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/60_0001/60_merged.c, line 17) (3/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/60_0001/60_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
