[kernel] Parsing out/43_0001/43_merged.c (with preprocessing)
[kernel:typing:no-proto] out/43_0001/43_merged.c:1: Warning: 
  Function unknown is declared without prototype.
  Its formals will be inferred from actual arguments at first call.
  Declare it as unknown(void) if the function does not take any parameters.
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/43_0001/43_merged.c:1: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 13ms) (Alt-Ergo)
[wp] Proved goals:   18 / 20
  Qed:              15 (13ms-3ms-14ms)
  Alt-Ergo 2.6.2:    2 (8ms)
  Z3 4.8.6:          1 (17ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 19
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_4 = 0) -> ((n < c_4) -> (c_4 = 1))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i <= n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((c = 0) -> ((n < c) -> (c = 1))).
}
Prove: c <= x.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_4 = 0) -> ((n < c_4) -> (c_4 = 1))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((c = 0) -> ((n < c) -> (c = 1))).
  (* Invariant *)
  Have: c <= x.
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (8ms) (25)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (17ms) (33007)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_4 = 0) -> ((n < c_4) -> (c_4 = 1))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((c = 0) -> ((n < c) -> (c = 1))).
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c) -> (i_1 <= n))).
}
Prove: n < c.
Prover Z3 4.8.6 returns Valid (Qed:14ms) (17ms) (112553)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_4 = 0) -> ((n < c_4) -> (c_4 = 1))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i <= n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((c = 0) -> ((n < c) -> (c = 1))).
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i <= n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (n < c))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (8ms) (54)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (14ms) (34413)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/43_0001/43_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/43_0001/43_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/43_0001/43_merged.c, line 17) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/43_0001/43_merged.c, line 17) (2/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/43_0001/43_merged.c, line 17) (3/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/43_0001/43_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
