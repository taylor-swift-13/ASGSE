[kernel] Parsing out/41_0001/41_merged.c (with preprocessing)
[kernel:typing:no-proto] out/41_0001/41_merged.c:1: Warning: 
  Function unknown is declared without prototype.
  Its formals will be inferred from actual arguments at first call.
  Declare it as unknown(void) if the function does not take any parameters.
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/41_0001/41_merged.c:1: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 14ms) (Alt-Ergo)
[wp] Proved goals:   24 / 26
  Qed:              17 (0.50ms-4ms-19ms)
  Alt-Ergo 2.6.2:    6 (17ms-49ms-111ms)
  Z3 4.8.6:          1 (9ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 22
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 10):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_2) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_3) = c_4) -> ((i_3 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= x.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:14ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 = (-1)) -> ((i_1 < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_4) = c_4) -> ((i_4 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_5.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (18ms) (29)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (8ms) (33683)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_2) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_3) = c_4) -> ((i_3 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c) -> (i_5 <= n))).
}
Prove: exists i_5 : Z. ((0 <= i_5) -> ((i_5 <= n) ->
    ((((n = c) -> (c = 1))) \/ (((n < c) -> ((1 + i_5) = c)))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (18ms) (80)
Prover Z3 4.8.6 returns Valid (Qed:16ms) (19ms) (81875)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_2) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_3) = c_4) -> ((i_3 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 <= n))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 <= n) ->
      ((((n = c) -> (c = 1))) \/ (((n < c) -> ((1 + i_5) = c)))))).
}
Prove: exists i_6 : Z. (((1 + i_6) = c) -> ((i_6 < n) -> (n < c))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (21ms) (71)
Prover Z3 4.8.6 returns Valid (Qed:18ms) (16ms) (74288)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 13):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. ((i = (-1)) -> ((i < n) -> false)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.50ms) (108ms) (1737)
Prover Z3 4.8.6 returns Valid (Qed:0.50ms) (15ms) (62892)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 14):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_2) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_3) = c_4) -> ((i_3 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= n))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 <= n) ->
      ((((n = c) -> (c = 1))) \/ (((n < c) -> ((1 + i_5) = c)))))).
  (* Invariant *)
  Have: (((1 + i_6) = c) -> ((i_6 < n) -> (n < c))).
}
Prove: exists i_7 : Z. 0 <= i_7.
Prover Z3 4.8.6 returns Valid (Qed:18ms) (9ms) (27406)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 14):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
}
Prove: exists i_1 : Z. 0 <= i_1.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.54ms) (111ms) (1834)
Prover Z3 4.8.6 returns Valid (Qed:0.54ms) (13ms) (21989)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = (-1)) -> ((i < n) -> false)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 <= n))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= n) ->
      ((((n = c_4) -> (c_4 = 1))) \/ (((n < c_4) -> ((1 + i_2) = c_4)))))).
  (* Invariant *)
  Have: (((1 + i_3) = c_4) -> ((i_3 < n) -> (n < c_4))).
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> ((c_4 = 1) \/ (n < c_4))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 <= n) ->
      ((((n = c) -> (c = 1))) \/ (((n < c) -> ((1 + i_5) = c)))))).
  (* Invariant *)
  Have: (((1 + i_6) = c) -> ((i_6 < n) -> (n < c))).
  (* Invariant *)
  Have: 0 <= i_7.
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (17ms) (70)
Prover Z3 4.8.6 returns Valid (Qed:19ms) (15ms) (36246)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/41_0001/41_merged.c, line 20) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/41_0001/41_merged.c, line 20) (2/3):
Call Result at line 22
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/41_0001/41_merged.c, line 20) (3/3):
Call Result at line 23
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/41_0001/41_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
