[kernel] Parsing out/58_0001/58_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/58_0001/58_merged.c:20: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/58_0001/58_merged.c:20: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 10ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   22 / 24
  Qed:              13 (0.57ms-5ms-19ms)
  Alt-Ergo 2.6.2:    9 (4ms-13ms-20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 19
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 8):
Let x = 1 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((x != i) \/ (((i <= c) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 <= c))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 <= c))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c) ->
       ((((x = i_3) -> (c = 1))) \/ (((i_3 <= c) -> ((1 + i_3) = c)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c) -> (i_5 <= c))).
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:10ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 9):
Let x = 1 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c) ->
       ((((n = i_3) -> (c = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: ((x = n) -> (n <= c)).
}
Prove: c < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (16ms) (24)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (15ms) (32571)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((i_1 = 0) -> ((n != i_1) \/ (((i_1 < n) -> (i_1 = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = (-1)) -> (i_3 < n))).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((i_4 = c_4) ->
       ((((n = i_4) -> (c_4 = 1))) \/ (((i_4 < n) -> ((1 + i_4) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_5).
  (* Invariant *)
  Have: is_sint32(i_6) /\ ((((1 + i_6) = c_4) -> (i_6 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (15ms) (33)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (4ms) (35268)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 12):
Let x = 1 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c) ->
       ((((n = i_3) -> (c = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: x != n.
  (* Invariant *)
  Have: c < n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c) -> ((0 <= i_6) -> (i_6 < n))).
}
Prove: (-1) <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (15ms) (22)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (8ms) (33456)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c.
}
Prove: exists i_6 : Z. is_sint32(i_6) /\
    (((i_6 = c) ->
     ((((i_6 = n) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (12ms) (100)
Prover Z3 4.8.6 returns Valid (Qed:18ms) (45ms) (638249)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 13):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i) /\
    (((i = 0) -> ((i != n) \/ (((i < n) -> (i = (-1))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.57ms) (12ms) (12)
Prover Z3 4.8.6 returns Valid (Qed:0.57ms) (15ms) (66784)

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((i_6 = c) ->
       ((((n = i_6) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
}
Prove: exists i_7 : Z. is_sint32(i_7).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (20ms) (85)
Prover Z3 4.8.6 returns Valid (Qed:19ms) (16ms) (89985)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 14):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
}
Prove: exists i_1 : Z. is_sint32(i_1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.67ms) (4ms) (15)
Prover Z3 4.8.6 returns Valid (Qed:0.67ms) (19ms) (68170)

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((i_6 = c) ->
       ((((n = i_6) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
  (* Invariant *)
  Have: is_sint32(i_7).
}
Prove: exists i_8 : Z. is_sint32(i_8) /\ ((((1 + i_8) = c) -> (i_8 < n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (13ms) (100)
Prover Z3 4.8.6 returns Valid (Qed:19ms) (15ms) (100832)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 15):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
}
Prove: exists i_2 : Z. is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.86ms) (13ms) (21)
Prover Z3 4.8.6 returns Valid (Qed:0.86ms) (24ms) (69009)

------------------------------------------------------------

Goal Preservation of Invariant (file out/58_0001/58_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/58_0001/58_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/58_0001/58_merged.c, line 17) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/58_0001/58_merged.c, line 17) (2/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/58_0001/58_merged.c, line 17) (3/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/58_0001/58_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
