[kernel] Parsing out/61_0001/61_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/61_0001/61_merged.c:21: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/61_0001/61_merged.c:21: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   25 / 26
  Qed:              18 (1ms-3ms-15ms)
  Alt-Ergo 2.6.2:    6 (12ms-14ms-18ms)
  Z3 4.8.6:          1 (50ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 20
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (18ms) (55)
Prover Z3 4.8.6 returns Valid (Qed:10ms) (16ms) (34128)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
}
Prove: c < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (12ms) (24)
Prover Z3 4.8.6 returns Valid (Qed:10ms) (4ms) (33440)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: i < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 < n)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (17ms) (27)
Prover Z3 4.8.6 returns Valid (Qed:10ms) (6ms) (34055)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 < n)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c) -> (i_3 < n)).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (12ms) (28)
Prover Z3 4.8.6 returns Valid (Qed:11ms) (15ms) (34608)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c) -> (i_2 < n))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (12ms) (59)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (12ms) (35837)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c) -> (i_2 < n)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= c.
}
Prove: exists i_2 : Z. is_sint32(i_2) /\
    (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (12ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 16):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
Prover Z3 4.8.6 returns Valid (Qed:1ms) (50ms) (552434)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0001/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0001/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0001/61_merged.c, line 18) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0001/61_merged.c, line 18) (2/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/61_0001/61_merged.c, line 18) (3/3):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/61_0001/61_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
