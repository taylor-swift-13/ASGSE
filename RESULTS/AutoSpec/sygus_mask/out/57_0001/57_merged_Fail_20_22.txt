[kernel] Parsing out/57_0001/57_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/57_0001/57_merged.c:19: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/57_0001/57_merged.c:19: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 16ms) (Alt-Ergo)
[wp] Proved goals:   20 / 22
  Qed:              13 (0.70ms-5ms-24ms)
  Alt-Ergo 2.6.2:    4 (21ms-183ms-309ms)
  Z3 4.8.6:          3 (16ms-20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 18
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 8):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: i < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 = 0) -> ((i_1 <= n) -> (0 <= i_1))).
  (* Invariant *)
  Have: is_sint32(i_2) /\
      (((0 <= i_2) -> ((i_2 <= n) -> ((i_2 = (-1)) \/ (i_2 = 0))))).
  (* Invariant *)
  Have: ((p=false) -> (n = (-1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 <= n)).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= x).
  (* Invariant *)
  Have: ((i_3 = c_4) -> ((i_3 <= n) -> (0 <= i_3))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_4) \/ ((1 + i_4) = c_4))))).
  (* Invariant *)
  Have: (((n < c_4) <-> (p_1=true)) -> (x = c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:16ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 10):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
  (* Invariant *)
  Have: ((p=false) -> (n = (-1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c_4) -> (i_4 <= n)).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= x).
  (* Invariant *)
  Have: ((i_2 = c_4) -> ((i_2 <= n) -> (0 <= i_2))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((i_3 = c_4) \/ ((1 + i_3) = c_4))))).
  (* Invariant *)
  Have: (((n < c_4) <-> (p_1=true)) -> (x = c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c) -> (i_4 <= n)).
}
Prove: (0 <= c) /\ (c <= x).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (255ms) (3116)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
  (* Invariant *)
  Have: ((p=false) -> (n = (-1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c_4) -> (i_4 <= n)).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= x).
  (* Invariant *)
  Have: ((i_2 = c_4) -> ((i_2 <= n) -> (0 <= i_2))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((i_3 = c_4) \/ ((1 + i_3) = c_4))))).
  (* Invariant *)
  Have: (((n < c_4) <-> (p_1=true)) -> (x = c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c) -> (i_4 <= n)).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= x).
}
Prove: exists i_4 : Z. ((i_4 = c) -> ((i_4 <= n) -> (0 <= i_4))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (309ms) (3658)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 11):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. ((i = 0) -> ((i <= n) -> (0 <= i))).
Prover Z3 4.8.6 returns Valid (Qed:0.70ms) (20ms) (65931)

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
  (* Invariant *)
  Have: ((p=false) -> (n = (-1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 <= n)).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= x).
  (* Invariant *)
  Have: ((i_2 = c_4) -> ((i_2 <= n) -> (0 <= i_2))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((i_3 = c_4) \/ ((1 + i_3) = c_4))))).
  (* Invariant *)
  Have: (((n < c_4) <-> (p_1=true)) -> (x = c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c) -> (i_5 <= n)).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= x).
  (* Invariant *)
  Have: ((i_4 = c) -> ((i_4 <= n) -> (0 <= i_4))).
}
Prove: exists i_5 : Z. is_sint32(i_5) /\
    (((0 <= i_5) -> ((i_5 <= n) -> ((i_5 = c) \/ ((1 + i_5) = c))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (21ms) (87)
Prover Z3 4.8.6 returns Valid (Qed:20ms) (20ms) (82615)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 12):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
}
Prove: exists i_1 : Z. is_sint32(i_1) /\
    (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
Prover Z3 4.8.6 returns Valid (Qed:1ms) (16ms) (65594)

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
  (* Invariant *)
  Have: ((p=false) -> (n = (-1))).
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_4) -> (i_6 <= n)).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= x).
  (* Invariant *)
  Have: ((i_2 = c_4) -> ((i_2 <= n) -> (0 <= i_2))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((i_3 = c_4) \/ ((1 + i_3) = c_4))))).
  (* Invariant *)
  Have: (((n < c_4) <-> (p_1=true)) -> (x = c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c) -> (i_6 <= n)).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= x).
  (* Invariant *)
  Have: ((i_4 = c) -> ((i_4 <= n) -> (0 <= i_4))).
  (* Invariant *)
  Have: is_sint32(i_5) /\
      (((0 <= i_5) -> ((i_5 <= n) -> ((i_5 = c) \/ ((1 + i_5) = c))))).
}
Prove: exists p_2 : bool. (((n < c) <-> (p_2=true)) -> (x = c)).
Prover Z3 4.8.6 returns Valid (Qed:24ms) (19ms) (79734)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 13):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((i <= n) -> (0 <= i))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = (-1)) \/ (i_1 = 0))))).
}
Prove: exists p : bool. ((p=false) -> (n = (-1))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (147ms) (1951)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (20ms) (126360)

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/57_0001/57_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/57_0001/57_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Loop assigns (file out/57_0001/57_merged.c, line 16) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/57_0001/57_merged.c, line 16) (2/3):
Call Result at line 18
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/57_0001/57_merged.c, line 16) (3/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/57_0001/57_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
