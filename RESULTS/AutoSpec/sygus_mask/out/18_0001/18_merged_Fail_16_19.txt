[kernel] Parsing out/18_0001/18_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/18_0001/18_merged.c:21: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/18_0001/18_merged.c:21: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 8ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_terminates_part2 (Qed 0.61ms) (Alt-Ergo)
[wp] Proved goals:   16 / 19
  Qed:              13 (0.61ms-1ms-8ms)
  Alt-Ergo 2.6.2:    3 (8ms-16ms)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 20
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 2 <= n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.61ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:0.61ms) (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 11):
Let x_1 = Ig.max(1, x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (i <= x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (x_1 <= i))).
  (* Invariant *)
  Have: 0 < x.
}
Prove: (2 + x) <= n.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 12):
Let x_1 = Ig.max(1, x).
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(m) /\ is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (i <= x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (x_1 <= i))).
  (* Invariant *)
  Have: 0 < x.
  If tmp_0 != 0
  Then { Have: x = m. }
  Else { Have: x_1 = m. }
  (* Invariant *)
  Have: (2 + x) <= n.
}
Prove: Ig.max(1, x_2) = m.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 13):
Let x_1 = 1 + x.
Let x_2 = Ig.max(1, x_1).
Let x_3 = Ig.max(1, x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (i <= x_3))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < x) -> (x_3 <= i))).
  (* Invariant *)
  Have: 0 < x.
  Have: x_2 = x_3.
  (* Invariant *)
  Have: (2 + x) <= n.
}
Prove: x_2 <= x_1.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (16ms) (17)
Prover Z3 4.8.6 returns Valid (Qed:5ms) (11ms) (30920)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 14):
Let x_1 = 1 + x.
Let x_2 = Ig.max(1, x_1).
Let x_3 = Ig.max(1, x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < x) -> (i_1 <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < x) -> (x_3 <= i_1))).
  (* Invariant *)
  Have: 0 < x.
  Have: x_2 = x_3.
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: i <= x_2.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (8ms) (50)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (5ms) (31601)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 15):
Let x_1 = 1 + x.
Let x_2 = Ig.max(1, x_1).
Let x_3 = Ig.max(1, x).
Assume {
  Type: is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < x) -> (i_1 <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < x) -> (x_3 <= i_1))).
  (* Invariant *)
  Have: 0 < x.
  If tmp_0 != 0
  Then { Have: x_2 = x. }
  Else { Have: x_2 = x_3. }
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) -> (i_1 <= x_2))).
}
Prove: x_2 <= i.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (13ms) (75)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (11ms) (32795)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/18_0001/18_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/18_0001/18_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/18_0001/18_merged.c, line 17) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/18_0001/18_merged.c, line 17) (2/2):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/18_0001/18_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
