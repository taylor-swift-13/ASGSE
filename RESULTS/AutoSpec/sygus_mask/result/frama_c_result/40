# Frama-C verification results for: 40.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/40.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/40.c (with preprocessing)
[kernel:typing:no-proto] result/40.c:1: Warning: 
  Function unknown is declared without prototype.
  Its formals will be inferred from actual arguments at first call.
  Declare it as unknown(void) if the function does not take any parameters.
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/40.c:1: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   28 / 29
  Qed:              20 (1ms-6ms-33ms)
  Alt-Ergo 2.6.2:    7 (4ms-185ms-730ms)
  Z3 4.8.6:          1 (60ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 23
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 10):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> ((n < c_4) ->
      ((1 + i_2) = c_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((n = c_4) -> ((0 <= i_2) -> ((i_2 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 <= n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= x.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (495ms) (7161)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> ((n < c_4) ->
      ((1 + i_3) = c_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c_4) -> ((0 <= i_3) -> ((i_3 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (12ms) (29)
Prover Z3 4.8.6 returns Valid (Qed:20ms) (10ms) (35111)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c) /\ (n < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> ((n < c_4) ->
      ((1 + i_3) = c_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c_4) -> ((0 <= i_3) -> ((i_3 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
}
Prove: n = i.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (730ms) (9750)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 13):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 14):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (i < c) /\ is_sint32(i).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> ((n < c_4) ->
      ((1 + i_3) = c_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c_4) -> ((0 <= i_3) -> ((i_3 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((n < c) ->
      ((1 + i_3) = c)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c) -> ((0 <= i_3) -> ((i_3 < c) -> (c = 1)))).
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:27ms) (4ms) (31)
Prover Z3 4.8.6 returns Valid (Qed:27ms) (10ms) (36748)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> ((n < c_4) ->
      ((1 + i_3) = c_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c_4) -> ((0 <= i_3) -> ((i_3 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((n < c) ->
      ((1 + i_3) = c)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c) -> ((0 <= i_3) -> ((i_3 < c) -> (c = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c) -> (i_3 <= n)).
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:28ms) (17ms) (32)
Prover Z3 4.8.6 returns Valid (Qed:28ms) (7ms) (37021)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 16):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c_4) -> ((n < c_4) ->
      ((1 + i_2) = c_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((n = c_4) -> ((0 <= i_2) -> ((i_2 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c_4) -> (i_2 <= n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < c) -> ((n < c) ->
      ((1 + i_2) = c)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((n = c) -> ((0 <= i_2) -> ((i_2 < c) -> (c = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < c) -> (i_2 <= n)).
}
Prove: exists i_2 : Z. is_sint32(i_2) /\
    (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:29ms) (20ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 16):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
Prover Z3 4.8.6 returns Valid (Qed:1ms) (60ms) (552434)

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 17):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> (i = 0)))).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c_4) -> ((n < c_4) ->
      ((1 + i_3) = c_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c_4) -> ((0 <= i_3) -> ((i_3 < c_4) ->
      (c_4 = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c_4) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> (i_1 = c_4)))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n < c_4) -> (x = c_4)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < c) -> ((n < c) ->
      ((1 + i_3) = c)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((n = c) -> ((0 <= i_3) -> ((i_3 < c) -> (c = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < c) -> (i_3 <= n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((0 <= i_2) -> ((i_2 <= n) -> (i_2 = c)))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:33ms) (20ms) (70)
Prover Z3 4.8.6 returns Valid (Qed:33ms) (16ms) (38166)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 18):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/40.c, line 20):
Prove: true.
Prover Qed returns Valid (22ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/40.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/40.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file result/40.c, line 21) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/40.c, line 21) (2/3):
Call Result at line 23
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file result/40.c, line 21) (3/3):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/40.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
