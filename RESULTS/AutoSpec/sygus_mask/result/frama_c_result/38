# Frama-C verification results for: 38.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/38.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/38.c (with preprocessing)
[kernel:typing:implicit-function-declaration] result/38.c:16: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/38.c:16: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 2ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_terminates_part2 (Qed 0.51ms) (Alt-Ergo)
[wp] Proved goals:   16 / 18
  Qed:              12 (0.51ms-0.56ms-2ms)
  Alt-Ergo 2.6.2:    3 (12ms)
  Z3 4.8.6:          1 (19ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 16
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.51ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:0.51ms) (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: (n != c) \/ ((c = 1) /\ (n = c)).
  (* Invariant *)
  Have: 0 <= c.
  (* Then *)
  Have: tmp_0 != 0.
  If n = c
  Else { Have: c = 0. }
}
Prove: exists i : Z. (0 <= i) /\ (i < n).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (19ms) (79066)

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(n) /\
      is_sint32(tmp_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_2 = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c_2 = 0) \/ (n = c_2) \/ ((0 < c_2) /\ (c_2 < n)).
  (* Invariant *)
  Have: c_2 <= n.
  (* Invariant *)
  Have: (n != c_2) \/ ((c_2 = 1) /\ (n = c_2)).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0 != 0.
  If n = c_2
  Then { Have: c = 1. }
  Else { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: ((c = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
}
Prove: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (35)
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (31396)

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(n) /\
      is_sint32(tmp_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_2 = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c_2 = 0) \/ (n = c_2) \/ ((0 < c_2) /\ (c_2 < n)).
  (* Invariant *)
  Have: c_2 <= n.
  (* Invariant *)
  Have: (n != c_2) \/ ((c_2 = 1) /\ (n = c_2)).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0 != 0.
  If n = c_2
  Then { Have: c = 1. }
  Else { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: ((c = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (29)
Prover Z3 4.8.6 returns Valid (Qed:2ms) (7ms) (31167)

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(tmp_0).
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: ((c_2 = 1) -> (exists i : Z. (0 <= i) /\ (i < c))).
  (* Invariant *)
  Have: (c_2 = 0) \/ (c_2 = c) \/ ((0 < c_2) /\ (c_2 < c)).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: (c_2 != c) \/ ((c_2 = 1) /\ (c_2 = c)).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0 != 0.
  If c_2 = c
  Then { Have: c = 1. }
  Else { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: ((c = 1) -> (exists i : Z. (0 <= i) /\ (i < c))).
}
Prove: c = 1.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/38.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(n) /\
      is_sint32(tmp_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((c_2 = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c_2 = 0) \/ (n = c_2) \/ ((0 < c_2) /\ (c_2 < n)).
  (* Invariant *)
  Have: c_2 <= n.
  (* Invariant *)
  Have: (n != c_2) \/ ((c_2 = 1) /\ (n = c_2)).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0 != 0.
  If n = c_2
  Then { Have: c = 1. }
  Else { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: ((c = 1) -> (exists i : Z. (0 <= i) /\ (i < n))).
  (* Invariant *)
  Have: (c = 0) \/ (n = c) \/ ((0 < c) /\ (c < n)).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: (n != c) \/ ((c = 1) /\ (n = c)).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (29)
Prover Z3 4.8.6 returns Valid (Qed:2ms) (4ms) (31420)

------------------------------------------------------------

Goal Establishment of Invariant (file result/38.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/38.c, line 26):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Loop assigns (file result/38.c, line 14) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/38.c, line 14) (2/2):
Call Result at line 16
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/38.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
