# Frama-C verification results for: 45.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/45.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/45.c (with preprocessing)
[kernel:typing:no-proto] result/45.c:1: Warning: 
  Function unknown is declared without prototype.
  Its formals will be inferred from actual arguments at first call.
  Declare it as unknown(void) if the function does not take any parameters.
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/45.c:1: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 31 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   30 / 31
  Qed:              18 (0.91ms-5ms-22ms)
  Alt-Ergo 2.6.2:   11 (5ms-45ms-226ms)
  Z3 4.8.6:          1 (15ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 24
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: ((i < 0) -> (i < c)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (i_1 != c))).
  (* Invariant *)
  Have: ((c_2 = c) -> (exists i_4 : Z. (0 <= i_4) /\ (i_4 < c_2))).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c_2) -> (i_4 < c)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < c_2) -> (i_4 < c))).
  (* Invariant *)
  Have: ((i_2 < c_2) -> (i_2 < c)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_2) -> (i_3 != c))).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Invariant *)
  Have: ((c_2 = c) ->
      (exists i_4 : Z. is_sint32(i_4) /\
       (((0 < i_4) -> ((i_4 < c) -> (i_4 = c_2)))))).
  (* Invariant *)
  Have: ((c_2 != c) -> (c_2 < c)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If c_2 != c
  Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
}
Prove: exists i_4 : Z. (0 <= i_4) /\ (i_4 < c).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (170ms) (2676)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (29ms) (278565)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (n != i_1))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_4 : Z. (0 <= i_4) /\ (i_4 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c_4) -> (i_4 < n)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < c_4) -> (i_4 < n))).
  (* Invariant *)
  Have: ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_4) -> (n != i_3))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_4 : Z. is_sint32(i_4) /\
       (((0 < i_4) -> ((i_4 < n) -> (i_4 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_4 : Z. (0 <= i_4) /\ (i_4 < c))).
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (13ms) (87)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (12ms) (36396)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (n != c) /\ (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 < 0) -> (i_1 < n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> (n != i_2))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 < n)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> (i_3 < n)).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 = c_4) -> (n != i_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_5 : Z. is_sint32(i_5) /\
       (((0 < i_5) -> ((i_5 < n) -> (i_5 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (10ms) (28)
Prover Z3 4.8.6 returns Valid (Qed:14ms) (15ms) (35686)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: i < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 < 0) -> (i_1 < n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> (n != i_2))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 < n)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> (i_3 < n)).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 = c_4) -> (n != i_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_5 : Z. is_sint32(i_5) /\
       (((0 < i_5) -> ((i_5 < n) -> (i_5 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) ->
      (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c) -> (i_5 < n))))).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (5ms) (27)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (14ms) (36540)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 < 0) -> (i_1 < n)).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> (n != i_2))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 < n)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: ((i_3 < c_4) -> (i_3 < n)).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 = c_4) -> (n != i_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_5 : Z. is_sint32(i_5) /\
       (((0 < i_5) -> ((i_5 < n) -> (i_5 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) ->
      (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c) -> (i_5 < n))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c) -> (i_5 < n)).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (5ms) (29)
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (37106)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (n != i_1))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_4 : Z. (0 <= i_4) /\ (i_4 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c_4) -> (i_4 < n)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < c_4) -> (i_4 < n))).
  (* Invariant *)
  Have: ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_4) -> (n != i_3))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_4 : Z. is_sint32(i_4) /\
       (((0 < i_4) -> ((i_4 < n) -> (i_4 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_4 : Z. (0 <= i_4) /\ (i_4 < c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < c) -> (i_4 < n)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < c) -> (i_4 < n))).
}
Prove: exists i_4 : Z. ((i_4 < c) -> (i_4 < n)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (226ms) (3165)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 16):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. ((i < 0) -> (i < n)).
Prover Z3 4.8.6 returns Valid (Qed:0.91ms) (15ms) (69577)

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 17):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (n != i_1))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c_4) -> (i_5 < n)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c_4) -> (i_5 < n))).
  (* Invariant *)
  Have: ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_4) -> (n != i_3))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_5 : Z. is_sint32(i_5) /\
       (((0 < i_5) -> ((i_5 < n) -> (i_5 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_5 : Z. (0 <= i_5) /\ (i_5 < c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < c) -> (i_5 < n)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < c) -> (i_5 < n))).
  (* Invariant *)
  Have: ((i_4 < c) -> (i_4 < n)).
}
Prove: exists i_5 : Z. is_sint32(i_5) /\ (((i_5 = c) -> (i_5 != n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (21ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 17):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
}
Prove: exists i_1 : Z. is_sint32(i_1) /\ (((i_1 = 0) -> (i_1 != n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (9ms) (13)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (19ms) (66351)

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 18):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (n != i_1))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_6 : Z. (0 <= i_6) /\ (i_6 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_4) -> (i_6 < n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_4) -> (n != i_3))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_6 : Z. is_sint32(i_6) /\
       (((0 < i_6) -> ((i_6 < n) -> (i_6 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((n = c) -> (exists i_6 : Z. (0 <= i_6) /\ (i_6 < c))).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c) -> (i_6 < n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: ((i_4 < c) -> (i_4 < n)).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c) -> (n != i_5))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (13ms) (83)
Prover Z3 4.8.6 returns Valid (Qed:17ms) (5ms) (38970)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 20):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: ((i < 0) -> (i < c)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (i_1 != c))).
  (* Invariant *)
  Have: ((c_2 = c) -> (exists i_6 : Z. (0 <= i_6) /\ (i_6 < c_2))).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_2) -> (i_6 < c)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_2) -> (i_6 < c))).
  (* Invariant *)
  Have: ((i_2 < c_2) -> (i_2 < c)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_2) -> (i_3 != c))).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Invariant *)
  Have: ((c_2 = c) ->
      (exists i_6 : Z. is_sint32(i_6) /\
       (((0 < i_6) -> ((i_6 < c) -> (i_6 = c_2)))))).
  (* Invariant *)
  Have: ((c_2 != c) -> (c_2 < c)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If c_2 != c
  Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 < c).
  (* Invariant *)
  Have: (i_5 != c) /\ is_sint32(i_5).
}
Prove: exists i_6 : Z. is_sint32(i_6) /\
    (((0 < i_6) -> ((i_6 < c) -> (i_6 = c)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (9ms) (60)
Prover Z3 4.8.6 returns Valid (Qed:16ms) (52ms) (418765)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/45.c, line 21):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i < 0) -> (i < n)).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 = 0) -> (n != i_1))).
  (* Invariant *)
  Have: ((n = c_4) -> (exists i_6 : Z. (0 <= i_6) /\ (i_6 < c_4))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_4) -> (i_6 < n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: ((i_2 < c_4) -> (i_2 < n)).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = c_4) -> (n != i_3))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((n = c_4) ->
      (exists i_6 : Z. is_sint32(i_6) /\
       (((0 < i_6) -> ((i_6 < n) -> (i_6 = c_4)))))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c) -> (i_6 < n)).
  (* Invariant *)
  Have: ((i_4 < c) -> (i_4 < n)).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c) -> (n != i_5))).
  (* Invariant *)
  Have: 0 <= c.
}
Prove: c < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (15ms) (31)
Prover Z3 4.8.6 returns Valid (Qed:22ms) (8ms) (37042)

------------------------------------------------------------

Goal Establishment of Invariant (file result/45.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/45.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file result/45.c, line 22) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/45.c, line 22) (2/3):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file result/45.c, line 22) (3/3):
Call Result at line 25
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/45.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
