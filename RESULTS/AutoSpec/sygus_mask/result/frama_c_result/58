# Frama-C verification results for: 58.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/58.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/58.c (with preprocessing)
[kernel:typing:implicit-function-declaration] result/58.c:19: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/58.c:19: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 23 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Qed 0.63ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 11ms) (Alt-Ergo)
[wp] Proved goals:   21 / 23
  Qed:              12 (0.60ms-4ms-18ms)
  Alt-Ergo 2.6.2:    9 (9ms-45ms-300ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 18
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.63ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:0.63ms) (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c_4) -> ((0 <= i_6) ->
      ((i_6 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((n = c_4) -> ((i_4 <= n) -> (i_4 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (9ms) (84)
Prover Z3 4.8.6 returns Valid (Qed:11ms) (12ms) (36263)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Goal *)
  When: (i <= c) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < c.
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((i_1 = 0) -> ((i_1 != c) \/ (((i_1 < c) -> (i_1 = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = (-1)) -> (i_3 < c))).
  (* Invariant *)
  Have: c_3 <= c.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= c_3) -> ((0 <= i_7) ->
      ((c_3 != c) \/ (i_7 = c_3)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_3) -> (i_7 < c))).
  (* Invariant *)
  Have: 0 <= c_3.
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((i_4 = c_3) ->
       ((((i_4 = c) -> (c_3 = 1))) \/ (((i_4 < c) -> ((1 + i_4) = c_3)))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((c_3 = c) -> ((i_5 <= c) -> (i_5 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_6) /\ ((((1 + i_6) = c_3) -> (i_6 < c))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_3 = c_2.
    If c_2 != c
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
  }
  Else { Have: c_3 = 1. Have: c = 1. }
}
Prove: i = c.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:11ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((i_1 = 0) -> ((n != i_1) \/ (((i_1 < n) -> (i_1 = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = (-1)) -> (i_3 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= c_4) -> ((0 <= i_7) ->
      ((i_7 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((i_4 = c_4) ->
       ((((n = i_4) -> (c_4 = 1))) \/ (((i_4 < n) -> ((1 + i_4) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((n = c_4) -> ((i_5 <= n) -> (i_5 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_6) /\ ((((1 + i_6) = c_4) -> (i_6 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= c) -> ((0 <= i_7) ->
      ((i_7 = c) \/ (n != c)))).
}
Prove: i < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (13ms) (33)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (8ms) (36617)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c_4) -> ((0 <= i_6) ->
      ((i_6 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((n = c_4) -> ((i_4 <= n) -> (i_4 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c) -> ((0 <= i_6) ->
      ((i_6 = c) \/ (n != c)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (16ms) (80)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (14ms) (37929)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c_4) -> ((0 <= i_6) ->
      ((i_6 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((n = c_4) -> ((i_4 <= n) -> (i_4 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= c) -> ((0 <= i_6) ->
      ((i_6 = c) \/ (n != c)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 < n))).
  (* Invariant *)
  Have: 0 <= c.
}
Prove: exists i_6 : Z. is_sint32(i_6) /\
    (((i_6 = c) ->
     ((((i_6 = n) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (19ms) (103)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (26ms) (85357)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 12):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i) /\
    (((i = 0) -> ((i != n) \/ (((i < n) -> (i = (-1))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.60ms) (9ms) (12)
Prover Z3 4.8.6 returns Valid (Qed:0.60ms) (11ms) (66784)

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= c_4) -> ((0 <= i_7) ->
      ((i_7 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((n = c_4) -> ((i_4 <= n) -> (i_4 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= c) -> ((0 <= i_7) ->
      ((i_7 = c) \/ (n != c)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((i_6 = c) ->
       ((((n = i_6) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
}
Prove: exists i_7 : Z. is_sint32(i_7) /\
    (((n = c) -> ((i_7 <= n) -> (i_7 = 1)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (300ms) (4228)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 13):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
}
Prove: exists i_1 : Z. is_sint32(i_1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.70ms) (14ms) (15)
Prover Z3 4.8.6 returns Valid (Qed:0.70ms) (17ms) (68170)

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 <= c_4) -> ((0 <= i_8) ->
      ((i_8 = c_4) \/ (n != c_4)))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((i_3 = c_4) ->
       ((((n = i_3) -> (c_4 = 1))) \/ (((i_3 < n) -> ((1 + i_3) = c_4)))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((n = c_4) -> ((i_4 <= n) -> (i_4 = 1)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ ((((1 + i_5) = c_4) -> (i_5 < n))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 <= c) -> ((0 <= i_8) ->
      ((i_8 = c) \/ (n != c)))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 < n))).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((i_6 = c) ->
       ((((n = i_6) -> (c = 1))) \/ (((i_6 < n) -> ((1 + i_6) = c)))))).
  (* Invariant *)
  Have: is_sint32(i_7) /\ (((n = c) -> ((i_7 <= n) -> (i_7 = 1)))).
}
Prove: exists i_8 : Z. is_sint32(i_8) /\ ((((1 + i_8) = c) -> (i_8 < n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (12ms) (105)
Prover Z3 4.8.6 returns Valid (Qed:18ms) (32ms) (335306)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 14):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\
      (((i = 0) -> ((n != i) \/ (((i < n) -> (i = (-1))))))).
  (* Invariant *)
  Have: is_sint32(i_1).
}
Prove: exists i_2 : Z. is_sint32(i_2) /\ (((i_2 = (-1)) -> (i_2 < n))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (12ms) (21)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (16ms) (69009)

------------------------------------------------------------

Goal Preservation of Invariant (file result/58.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/58.c, line 15):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Assertion (file result/58.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file result/58.c, line 16) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/58.c, line 16) (2/3):
Call Result at line 18
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file result/58.c, line 16) (3/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/58.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
