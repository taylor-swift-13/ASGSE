# Frama-C verification results for: 56.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/56.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/56.c (with preprocessing)
[kernel:typing:implicit-function-declaration] result/56.c:18: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/56.c:18: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 21 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 20ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] [Timeout] typed_foo_assert (Qed 8ms) (Alt-Ergo)
[wp] Proved goals:   18 / 21
  Qed:               9 (0.91ms-9ms-28ms)
  Alt-Ergo 2.6.2:    7 (8ms-30ms-125ms)
  Z3 4.8.6:          2 (34ms-2.3s)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 17
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 8):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: i < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 <= 0) -> ((0 <= i_2) -> (i_2 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = 0) -> ((0 <= i_3) /\ (i_3 <= x)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c_4) -> (i_7 <= n)).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 <= c_4) -> ((0 <= i_5) -> (i_5 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_6) /\ (((i_6 = c_4) -> ((0 <= i_6) /\ (i_6 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:20ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 9):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((0 <= i_1) -> ((i_1 <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 <= 0) -> ((0 <= i_2) -> (i_2 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_3) /\ (((i_3 = 0) -> ((0 <= i_3) /\ (i_3 <= x)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c_4) -> (i_7 <= n)).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 <= c_4) -> ((0 <= i_5) -> (i_5 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_6) /\ (((i_6 = c_4) -> ((0 <= i_6) /\ (i_6 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c) -> (i_7 <= n)).
}
Prove: i <= n.
Prover Z3 4.8.6 returns Valid (Qed:20ms) (2.3s) (22206836)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 10):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_4) -> (i_6 <= n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 <= c_4) -> ((0 <= i_4) -> (i_4 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c_4) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c) -> (i_6 <= n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < c) -> (i_6 <= n))).
}
Prove: exists i_6 : Z. is_sint32(i_6) /\
    (((0 <= i_6) -> ((i_6 <= n) -> ((n = c) \/ (n < c))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:23ms) (17ms) (89)
Prover Z3 4.8.6 returns Valid (Qed:23ms) (51ms) (731099)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 10):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.91ms) (125ms) (2035)
Prover Z3 4.8.6 returns Valid (Qed:0.91ms) (19ms) (66736)

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c_4) -> (i_7 <= n)).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c_4) -> (i_7 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 <= c_4) -> ((0 <= i_4) -> (i_4 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c_4) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c) -> (i_7 <= n)).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < c) -> (i_7 <= n))).
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((0 <= i_6) -> ((i_6 <= n) -> ((n = c) \/ (n < c))))).
}
Prove: exists i_7 : Z. is_sint32(i_7) /\
    (((i_7 <= c) -> ((0 <= i_7) -> (i_7 <= n)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:26ms) (14ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 11):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
}
Prove: exists i_1 : Z. is_sint32(i_1) /\
    (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (12ms) (15)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (16ms) (71744)

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 < c_4) -> (i_8 <= n)).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c_4) -> (i_8 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 <= c_4) -> ((0 <= i_4) -> (i_4 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c_4) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 < c) -> (i_8 <= n)).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n))).
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((0 <= i_6) -> ((i_6 <= n) -> ((n = c) \/ (n < c))))).
  (* Invariant *)
  Have: is_sint32(i_7) /\ (((i_7 <= c) -> ((0 <= i_7) -> (i_7 <= n)))).
}
Prove: exists i_8 : Z. is_sint32(i_8) /\
    (((i_8 = c) -> ((0 <= i_8) /\ (i_8 <= x)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:28ms) (17ms) (105)
Prover Z3 4.8.6 returns Valid (Qed:28ms) (158ms) (1930209)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 12):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
}
Prove: exists i_2 : Z. is_sint32(i_2) /\
    (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= (1 + n))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (19)
Prover Z3 4.8.6 returns Valid (Qed:2ms) (14ms) (70518)

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c_4) -> (i_9 <= n)).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (i_9 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 <= c_4) -> ((0 <= i_4) -> (i_4 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c_4) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c) -> (i_9 <= n)).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 <= n))).
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((0 <= i_6) -> ((i_6 <= n) -> ((n = c) \/ (n < c))))).
  (* Invariant *)
  Have: is_sint32(i_7) /\ (((i_7 <= c) -> ((0 <= i_7) -> (i_7 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_8) /\ (((i_8 = c) -> ((0 <= i_8) /\ (i_8 <= x)))).
}
Prove: (c <= x) /\ is_sint32(c - 1).
Prover Z3 4.8.6 returns Valid (Qed:26ms) (34ms) (635655)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/56.c, line 14):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c_4) -> (i_9 <= n)).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c_4) -> (i_9 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3) /\
      (((0 <= i_3) -> ((i_3 <= n) -> ((n = c_4) \/ (n < c_4))))).
  (* Invariant *)
  Have: is_sint32(i_4) /\ (((i_4 <= c_4) -> ((0 <= i_4) -> (i_4 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((i_5 = c_4) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: (c_4 <= x) /\ is_sint32(c_4 - 1).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c) -> (i_9 <= n)).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < c) -> (i_9 <= n))).
  (* Invariant *)
  Have: is_sint32(i_6) /\
      (((0 <= i_6) -> ((i_6 <= n) -> ((n = c) \/ (n < c))))).
  (* Invariant *)
  Have: is_sint32(i_7) /\ (((i_7 <= c) -> ((0 <= i_7) -> (i_7 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_8) /\ (((i_8 = c) -> ((0 <= i_8) /\ (i_8 <= x)))).
  (* Invariant *)
  Have: (c <= x) /\ is_sint32(c - 1).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:27ms) (17ms) (86)
Prover Z3 4.8.6 returns Valid (Qed:27ms) (12ms) (40140)

------------------------------------------------------------

Goal Establishment of Invariant (file result/56.c, line 14):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Assertion (file result/56.c, line 30):
Let x = 1 + n.
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: is_sint32(i) /\ (((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: is_sint32(i_1) /\ (((i_1 <= 0) -> ((0 <= i_1) -> (i_1 <= n)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\ (((i_2 = 0) -> ((0 <= i_2) /\ (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < n) -> (i_6 <= n)).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 <= n))).
  (* Invariant *)
  Have: is_sint32(i_3).
  (* Invariant *)
  Have: is_sint32(i_4).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((n = i_5) -> ((0 <= i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: is_sint32(n - 1).
}
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file result/56.c, line 15) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/56.c, line 15) (2/3):
Call Result at line 17
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file result/56.c, line 15) (3/3):
Call Result at line 18
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/56.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
