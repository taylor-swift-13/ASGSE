# Frama-C verification results for: 62.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/62.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/62.c (with preprocessing)
[kernel:typing:implicit-function-declaration] result/62.c:17: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/62.c:17: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] [Timeout] typed_foo_assert (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_terminates_part2 (Qed 0.51ms) (Alt-Ergo)
[wp] Proved goals:   17 / 19
  Qed:              13 (0.51ms-1ms-6ms)
  Alt-Ergo 2.6.2:    4 (8ms-18ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 16
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.51ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:0.51ms) (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: (n = c_4) \/ ((n != c_4) /\ (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (16ms) (58)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (9ms) (32019)

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: (n = c_4) \/ ((n != c_4) /\ (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
}
Prove: c < n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (12ms) (21)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (4ms) (31382)

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: (n = c_4) \/ ((n != c_4) /\ (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (18ms) (46)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (32725)

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/62.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: (n = c_4) \/ ((n != c_4) /\ (c_4 < n)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: 0 <= c.
}
Prove: (n = c) \/ ((n != c) /\ (c < n)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (8ms) (14)
Prover Z3 4.8.6 returns Valid (Qed:6ms) (7ms) (31584)

------------------------------------------------------------

Goal Establishment of Invariant (file result/62.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/62.c, line 31):
Assume {
  Type: is_sint32(c) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: (n = c) \/ ((n != c) /\ (c < n)).
}
Prove: n != c.
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file result/62.c, line 14) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/62.c, line 14) (2/3):
Call Result at line 16
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file result/62.c, line 14) (3/3):
Call Result at line 17
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/62.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
