# Frama-C verification results for: 35.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/35.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/35.c (with preprocessing)
[kernel:typing:no-proto] result/35.c:1: Warning: 
  Function unknown is declared without prototype.
  Its formals will be inferred from actual arguments at first call.
  Declare it as unknown(void) if the function does not take any parameters.
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/35.c:1: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 15 goals scheduled
[wp] [Timeout] typed_main_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   14 / 15
  Qed:              11 (10ms-2ms-13ms)
  Alt-Ergo 2.6.2:    3 (8ms-12ms)
  Timeout:           1
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'main' (2/2):
Loop termination at line 13
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'main':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/35.c, line 7):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Invariant *)
  Have: c_4 <= 40.
  (* Invariant *)
  Have: ((i <= 40) ->
      ((((c_4 = 40) -> (c_4 = 1))) \/ (((c_4 != 40) -> ((1 + i) = c_4))))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((c_4 != 40) -> (c_4 <= 39)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If c_2 != 40
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c = 40. }
  }
  Else {
    Have: c_4 = c_3.
    If c_3 = 40
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= 40.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (10ms) (62)
Prover Z3 4.8.6 returns Valid (Qed:12ms) (7ms) (31488)

------------------------------------------------------------

Goal Establishment of Invariant (file result/35.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/35.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Invariant *)
  Have: c_4 <= 40.
  (* Invariant *)
  Have: ((i <= 40) ->
      ((((c_4 = 40) -> (c_4 = 1))) \/ (((c_4 != 40) -> ((1 + i) = c_4))))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((c_4 != 40) -> (c_4 <= 39)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If c_2 != 40
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c = 40. }
  }
  Else {
    Have: c_4 = c_3.
    If c_3 = 40
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= 40.
}
Prove: exists i_1 : Z. ((i_1 <= 40) ->
    ((((c = 40) -> (c = 1))) \/ (((c != 40) -> ((1 + i_1) = c))))).
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/35.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/35.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Invariant *)
  Have: c_4 <= 40.
  (* Invariant *)
  Have: ((i <= 40) ->
      ((((c_4 = 40) -> (c_4 = 1))) \/ (((c_4 != 40) -> ((1 + i) = c_4))))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: ((c_4 != 40) -> (c_4 <= 39)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If c_2 != 40
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c = 40. }
  }
  Else {
    Have: c_4 = c_3.
    If c_3 = 40
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= 40.
  (* Invariant *)
  Have: ((i_1 <= 40) ->
      ((((c = 40) -> (c = 1))) \/ (((c != 40) -> ((1 + i_1) = c))))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (8ms) (51)
Prover Z3 4.8.6 returns Valid (Qed:13ms) (7ms) (31268)

------------------------------------------------------------

Goal Establishment of Invariant (file result/35.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/35.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Goal *)
  When: c != 40.
  (* Invariant *)
  Have: c_3 <= 40.
  (* Invariant *)
  Have: ((i <= 40) ->
      ((((c_3 = 40) -> (c_3 = 1))) \/ (((c_3 != 40) -> ((1 + i) = c_3))))).
  (* Invariant *)
  Have: 0 <= c_3.
  (* Invariant *)
  Have: ((c_3 != 40) -> (c_3 <= 39)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then { Have: c_3 = c_1. Have: c_1 != 40. Have: (1 + c_1) = c. }
  Else {
    Have: c_3 = c_2.
    If c_2 = 40
    Then { Have: c = 1. }
    Else { Have: c_2 = c. }
  }
  (* Invariant *)
  Have: c <= 40.
  (* Invariant *)
  Have: 0 <= c.
}
Prove: c <= 39.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (12ms) (19)
Prover Z3 4.8.6 returns Valid (Qed:10ms) (15ms) (30672)

------------------------------------------------------------

Goal Establishment of Invariant (file result/35.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/35.c, line 26):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Loop assigns (file result/35.c, line 11) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/35.c, line 11) (2/3):
Call Result at line 13
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file result/35.c, line 11) (3/3):
Call Result at line 14
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/35.c:3: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.

--- Standard Error ---
