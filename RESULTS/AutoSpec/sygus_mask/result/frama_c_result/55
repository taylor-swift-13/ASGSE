# Frama-C verification results for: 55.c
# Command: frama-c -wp -wp-precond-weakening -wp-no-callee-precond -wp-prover Alt-Ergo,Z3 -wp-print -wp-timeout 8 ./result/55.c
#==============================================================================

--- Standard Output ---
[kernel] Parsing result/55.c (with preprocessing)
[kernel:typing:implicit-function-declaration] result/55.c:22: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] result/55.c:22: Warning: 
  Neither code nor specification for function unknown,
   generating default exits, assigns and terminates. See -generated-spec-* options for more info
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_foo_terminates_part2 (Alt-Ergo)
[wp] Proved goals:   28 / 29
  Qed:              18 (0.78ms-6ms-30ms)
  Alt-Ergo 2.6.2:   10 (8ms-38ms-144ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Termination-condition (generated) in 'foo' (2/2):
Loop termination at line 21
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: false.
Prover Alt-Ergo 2.6.2 returns Timeout (8s)
Prover Z3 4.8.6 returns Timeout (8s)

------------------------------------------------------------

Goal Exit-condition (generated) in 'foo':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 8):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(n) /\ is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_1 <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_1) -> (i_6 <= n)).
  (* Invariant *)
  Have: ((n = c_1) -> (c_1 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_1) -> ((n < i_3) -> ((1 + i_3) = c_1))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_1) \/ (x = c_1))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_1) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_1))).
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: c_1 <= n.
  (* Invariant *)
  Have: ((n = c_1) -> (0 < c_1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If n = c_1
  Then { Have: c = 1. }
  Else { Have: c_1 = c. }
}
Prove: c <= x.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (8ms) (40)
Prover Z3 4.8.6 returns Valid (Qed:15ms) (4ms) (33498)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 9):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: i < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i_1 = 0) -> ((n < i_1) -> (i_1 = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_2) /\
      (((0 <= i_2) -> ((i_2 <= n) -> ((i_2 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_3).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c_4) -> (i_7 <= n)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Invariant *)
  Have: ((i_4 = c_4) -> ((n < i_4) -> ((1 + i_4) = c_4))).
  (* Invariant *)
  Have: is_sint32(i_5) /\
      (((0 <= i_5) -> ((i_5 <= n) -> ((i_5 = c_4) \/ (x = c_4))))).
  (* Invariant *)
  Have: is_sint32(i_6) /\ (((0 <= i_6) -> ((i_6 < c_4) -> (i_6 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
}
Prove: i <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (16ms) (34)
Prover Z3 4.8.6 returns Valid (Qed:21ms) (8ms) (35795)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 10):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c_4) -> (i_6 <= n)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_4) -> ((n < i_3) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_4) \/ (x = c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 < c) -> (i_6 <= n)).
  (* Invariant *)
  Have: ((n = c) -> (c = 1)).
}
Prove: exists i_6 : Z. ((i_6 = c) -> ((n < i_6) -> ((1 + i_6) = c))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:23ms) (19ms) (79)
Prover Z3 4.8.6 returns Valid (Qed:23ms) (19ms) (170864)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 11):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: 0 < n. }
Prove: exists i : Z. ((i = 0) -> ((n < i) -> (i = (-1)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.78ms) (95ms) (1757)
Prover Z3 4.8.6 returns Valid (Qed:0.78ms) (24ms) (69746)

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c_4) -> (i_7 <= n)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_4) -> ((n < i_3) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_4) \/ (x = c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 < c) -> (i_7 <= n)).
  (* Invariant *)
  Have: ((n = c) -> (c = 1)).
  (* Invariant *)
  Have: ((i_6 = c) -> ((n < i_6) -> ((1 + i_6) = c))).
}
Prove: exists i_7 : Z. is_sint32(i_7) /\
    (((0 <= i_7) -> ((i_7 <= n) -> ((i_7 = c) \/ (x = c))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:27ms) (25ms) (92)
Prover Z3 4.8.6 returns Valid (Qed:27ms) (32ms) (453327)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 12):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
}
Prove: exists i_1 : Z. is_sint32(i_1) /\
    (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (144ms) (2299)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (57ms) (279486)

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 < c_4) -> (i_8 <= n)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_4) -> ((n < i_3) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_4) \/ (x = c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 < c) -> (i_8 <= n)).
  (* Invariant *)
  Have: ((n = c) -> (c = 1)).
  (* Invariant *)
  Have: ((i_6 = c) -> ((n < i_6) -> ((1 + i_6) = c))).
  (* Invariant *)
  Have: is_sint32(i_7) /\
      (((0 <= i_7) -> ((i_7 <= n) -> ((i_7 = c) \/ (x = c))))).
}
Prove: exists i_8 : Z. is_sint32(i_8) /\
    (((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:30ms) (24ms) (99)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 13):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
}
Prove: exists i_2 : Z. is_sint32(i_2).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (13ms) (16)
Prover Z3 4.8.6 returns Valid (Qed:1ms) (15ms) (74504)

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 14):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_4 <= x.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c_4) -> (i_9 <= n)).
  (* Invariant *)
  Have: ((n = c_4) -> (c_4 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_4) -> ((n < i_3) -> ((1 + i_3) = c_4))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_4) \/ (x = c_4))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_4) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n < c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c) -> (i_9 <= n)).
  (* Invariant *)
  Have: ((n = c) -> (c = 1)).
  (* Invariant *)
  Have: ((i_6 = c) -> ((n < i_6) -> ((1 + i_6) = c))).
  (* Invariant *)
  Have: is_sint32(i_7) /\
      (((0 <= i_7) -> ((i_7 <= n) -> ((i_7 = c) \/ (x = c))))).
  (* Invariant *)
  Have: is_sint32(i_8) /\ (((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n)))).
}
Prove: exists p_1 : bool. (((p_1=false) -> (n = c))) \/
    (((p_1=true) -> (n < c))).
Prover Qed returns Valid (30ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 14):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(n) /\ is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_1 <= x.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c_1) -> (i_9 <= n)).
  (* Invariant *)
  Have: ((n = c_1) -> (c_1 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_1) -> ((n < i_3) -> ((1 + i_3) = c_1))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_1) \/ (x = c_1))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_1) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_1))).
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: c_1 <= n.
  (* Invariant *)
  Have: ((n = c_1) -> (0 < c_1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If n = c_1
  Then { Have: c = 1. }
  Else { Have: c_1 = c. }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c) -> (i_9 <= n)).
  (* Invariant *)
  Have: ((n = c) -> (c = 1)).
  (* Invariant *)
  Have: ((i_6 = c) -> ((n < i_6) -> ((1 + i_6) = c))).
  (* Invariant *)
  Have: is_sint32(i_7) /\
      (((0 <= i_7) -> ((i_7 <= n) -> ((i_7 = c) \/ (x = c))))).
  (* Invariant *)
  Have: is_sint32(i_8) /\ (((0 <= i_8) -> ((i_8 < c) -> (i_8 <= n)))).
  (* Invariant *)
  Have: (((p_1=false) -> (n = c))) \/ (((p_1=true) -> (n < c))).
}
Prove: 0 <= c.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (17ms) (51)
Prover Z3 4.8.6 returns Valid (Qed:22ms) (12ms) (35913)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 15):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 17):
Let x = 1 + n.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(n) /\ is_sint32(tmp_0_0).
  (* Goal *)
  When: n < c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((i = 0) -> ((n < i) -> (i = (-1)))).
  (* Invariant *)
  Have: is_sint32(i_1) /\
      (((0 <= i_1) -> ((i_1 <= n) -> ((i_1 = 0) \/ (n = (-1)))))).
  (* Invariant *)
  Have: is_sint32(i_2).
  (* Invariant *)
  Have: c_1 <= x.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 < c_1) -> (i_9 <= n)).
  (* Invariant *)
  Have: ((n = c_1) -> (c_1 = 1)).
  (* Invariant *)
  Have: ((i_3 = c_1) -> ((n < i_3) -> ((1 + i_3) = c_1))).
  (* Invariant *)
  Have: is_sint32(i_4) /\
      (((0 <= i_4) -> ((i_4 <= n) -> ((i_4 = c_1) \/ (x = c_1))))).
  (* Invariant *)
  Have: is_sint32(i_5) /\ (((0 <= i_5) -> ((i_5 < c_1) -> (i_5 <= n)))).
  (* Invariant *)
  Have: (p=false) \/ (((p=false) -> (n = c_1))).
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: c_1 <= n.
  (* Invariant *)
  Have: ((n = c_1) -> (0 < c_1)).
  (* Then *)
  Have: tmp_0_0 != 0.
  If n = c_1
  Then { Have: c = 1. }
  Else { Have: c_1 = c. }
  (* Invariant *)
  Have: c <= x.
  (* Invariant *)
  Have: ((x = i_6) -> ((n < i_6) -> (n = i_6))).
  (* Invariant *)
  Have: is_sint32(i_7).
  (* Invariant *)
  Have: is_sint32(i_8).
}
Prove: false.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (16ms) (57)
Prover Z3 4.8.6 returns Valid (Qed:20ms) (8ms) (33963)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file result/55.c, line 18):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file result/55.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file result/55.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file result/55.c, line 19) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file result/55.c, line 19) (2/3):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file result/55.c, line 19) (3/3):
Call Result at line 22
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] result/55.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.

--- Standard Error ---
