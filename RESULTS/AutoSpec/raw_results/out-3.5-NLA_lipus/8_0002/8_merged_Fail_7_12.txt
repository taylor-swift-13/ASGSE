[kernel] Parsing out/8_0002/8_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_main8_loop_invariant_preserved (Qed 32ms) (Z3)
[wp] [Timeout] typed_main8_loop_invariant_2_preserved (Qed 43ms) (Z3)
[wp] [Timeout] typed_main8_loop_invariant_4_preserved (Qed 52ms) (Z3)
[wp] [Timeout] typed_main8_loop_invariant_5_preserved (Qed 58ms) (Z3)
[wp] [Timeout] typed_main8_assert (Qed 4ms) (Z3)
[wp] Proved goals:    7 / 12
  Qed:               6
  Alt-Ergo 2.5.4:    1 (805ms)
  Timeout:           5
------------------------------------------------------------
  Function main8
------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0002/8_merged.c, line 17):
Let x_1 = (r_1 * x) + (s_2 * y).
Let x_2 = (p * x) + (q * y).
Assume {
  Type: is_sint32(b) /\ is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (p * s_2) = (1 + (q * r_1)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x_2.
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then { Have: (s_2 = s) /\ (x_1 = b). Have: (r + s_2) = r_1. }
  Else {
    Have: (s_2 = s_1) /\ ((r + s) = s_1) /\ ((r_1 + s) = s_1).
    Have: ((s_1 * y) + (x * (s_1 - s))) = (b + (p * x) + (q * y)).
  }
}
Prove: ((r * x) + (s * y)) = b.
Prover Z3 4.8.12 returns Timeout (Qed:32ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:32ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0002/8_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0002/8_merged.c, line 18):
Let x_1 = (r_2 * x) + (s_2 * y).
Let x_2 = (p_1 * x) + (q_2 * y).
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32((r * x) + (s * y)) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (p_1 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x_2.
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then {
    Let x_3 = x * (r_1 - s).
    Have: (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\ (x_3 = (r_1 * x)).
    Have: (a + (s * y) + x_3) = ((p_1 * x) + (q * y)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_4 = s_1 * y.
    Let x_5 = y * (s_1 - r).
    Have: (q_2 = q_1) /\ (r_2 = r) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_1 + q) = q_1) /\ ((r + s) = s_1) /\ (x_4 = (a + x_5)) /\
        (x_4 = ((q_1 * y) + (x * (q_1 - q)) + x_5)).
  }
}
Prove: ((p * x) + (q * y)) = a.
Prover Z3 4.8.12 returns Timeout (Qed:43ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:43ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0002/8_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0002/8_merged.c, line 19):
Let x_1 = (r_2 * x) + (s_2 * y).
Let x_2 = (p_2 * x) + (q_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32((p * x) + (q * y)) /\
      is_sint32(x_2) /\ is_sint32((r * x) + (s * y)) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x_2.
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then {
    Let x_3 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_3 = (r_1 * x)) /\ ((p_1 * x) = ((s * y) + (x * (p_1 - q)) + x_3)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_4 = q * y.
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((q_1 * y) = x_4) /\ ((s_1 * y) = (x_4 + (s * y) + (x * (q_1 - q)))).
  }
}
Prove: (p * s) = (1 + (q * r)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:50ms) (805ms) (1909)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0002/8_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0002/8_merged.c, line 20):
Let x_1 = (r_2 * x) + (s_2 * y).
Let x_2 = (p_2 * x) + (q_2 * y).
Let x_3 = (r * x) + (s * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32((p * x) + (q * y)) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x_2.
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then {
    Let x_4 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_4 = (r_1 * x)) /\ ((p_1 * x) = ((s * y) + (x * (p_1 - q)) + x_4)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_5 = q * y.
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((q_1 * y) = x_5) /\ ((s_1 * y) = (x_5 + (s * y) + (x * (q_1 - q)))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
}
Prove: 0 < x_3.
Prover Z3 4.8.12 returns Timeout (Qed:52ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:52ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0002/8_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0002/8_merged.c, line 21):
Let x_1 = (r * x) + (s * y).
Let x_2 = (r_2 * x) + (s_2 * y).
Let x_3 = (p_2 * x) + (q_2 * y).
Let x_4 = (p * x) + (q * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 < x_3.
  (* Then *)
  Have: x_2 != x_3.
  If x_2 < x_3
  Then {
    Let x_5 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_5 = (r_1 * x)) /\ ((p_1 * x) = ((s * y) + (x * (p_1 - q)) + x_5)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_6 = q * y.
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((q_1 * y) = x_6) /\ ((s_1 * y) = (x_6 + (s * y) + (x * (q_1 - q)))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: 0 < x_4.
Prover Z3 4.8.12 returns Timeout (Qed:58ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:58ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0002/8_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/8_0002/8_merged.c, line 42):
Let x_1 = (p * x) + (q * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((r * x) + (s * y)) = x_1.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: (y * (r - s)) = (x * (q - p)).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/8_0002/8_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/8_0002/8_merged.c:4: Warning: 
  No 'assigns' specification for function 'main8'.
  Callers assumptions might be imprecise.
