[kernel] Parsing out/13_0004/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 15 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_preserved (Qed 330ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_4_preserved (Qed 426ms) (Z3)
[wp] Proved goals:   13 / 15
  Qed:            11
  Z3 4.8.12:       2 (30ms)
  Timeout:         2
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 13):
Let x_1 = a_6 * b_7 * p_2.
Let x_2 = x * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2 - x_1).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (0 < a_6) /\ (0 < b_7).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 < p_2.
  If (a_6 % 2) = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_2 = (q + (a_7 * b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_3 = a_2 * b * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_2 = (q_1 + x_3)).
          Have: (1 + a) = a_2.
          Have: (q + x_3) = ((b * p) + x_2).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_4 = a * b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_2 = (q_2 + x_4)).
              Have: (1 + b) = b_2.
              Have: (q + x_4) = ((a * p) + x_2).
            }
            Else {
              Let x_5 = a_3 * b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_2 = (q_3 + x_5)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_2 = (q_3 + x_5)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_2 = (q_2 + x_4)).
            Have: (1 + b) = b_2.
            Have: (q + x_4) = ((a * p) + x_2).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_2 = (q_3 + x_5)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_2 = (q_3 + x_5)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_2 = (q_1 + x_3)).
        Have: (1 + a) = a_2.
        Have: (q + x_3) = ((b * p) + x_2).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_2 = (q_2 + x_4)).
            Have: (1 + b) = b_2.
            Have: (q + x_4) = ((a * p) + x_2).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_2 = (q_3 + x_5)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_2 = (q_3 + x_5)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_2 = (q_2 + x_4)).
          Have: (1 + b) = b_2.
          Have: (q + x_4) = ((a * p) + x_2).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_2 = (q_3 + x_5)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_2 = (q_3 + x_5)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_2 + (p * (a_3 + b_3 - 1))) = (q + x_5).
      }
    }
  }
}
Prove: x_2 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:330ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:330ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 15):
Let x = a_6 * b_7 * p_2.
Let x_1 = a_7 * b_8.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(a_7) /\
      is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\
      is_sint32(b_4) /\ is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\
      is_sint32(b_8) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(x_1 - (a * b * p)) /\ is_sint32(x_1 - x).
  (* Pre-condition *)
  Have: (0 < a_7) /\ (0 < b_8).
  (* Invariant *)
  Have: (0 < a_6) /\ (0 < b_7).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 < p_2.
  If (a_6 % 2) = 0
  Then {
    Have: (a_6 = a_8) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_2 = b_1 / 2.
      Let x_3 = a_1 / 2.
      Have: (a_8 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          ((a_1 * b_1 * p_1) = (4 * (p_1 * x_3 * x_2))).
      Have: x_3 = a.
      Have: x_2 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_8 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_9) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_4 = b * p.
          Let x_5 = b * p * (a_2 - 1).
          Have: (a_9 = a_2) /\ (b_5 = b) /\ ((a_2 * b * p) = (x_4 + x_5)) /\
              (x_1 = (q + x_4 + x_5)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_9 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_10) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_6 = a * p.
              Let x_7 = a * p * (b_2 - 1).
              Have: (a_10 = a) /\ (b_4 = b_2) /\
                  ((a * b_2 * p) = (x_6 + x_7)) /\ (x_1 = (q_1 + x_6 + x_7)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_8 = p * (a_3 - 1) * (b_3 - 1).
              Let x_9 = p * (a_3 + b_3 - 1).
              Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                  ((a_3 * b_3 * p) = (x_8 + x_9)) /\
                  (x_1 = (q_2 + x_8 + x_9)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_4 = b_2) /\
                ((a * b_2 * p) = (x_6 + x_7)) /\ (x_1 = (q_1 + x_6 + x_7)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_9) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_9 = a_2) /\ (b_5 = b) /\ ((a_2 * b * p) = (x_4 + x_5)) /\
            (x_1 = (q + x_4 + x_5)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_9 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_4 = b_2) /\
                ((a * b_2 * p) = (x_6 + x_7)) /\ (x_1 = (q_1 + x_6 + x_7)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_10) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_10 = a) /\ (b_4 = b_2) /\ ((a * b_2 * p) = (x_6 + x_7)) /\
              (x_1 = (q_1 + x_6 + x_7)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_10 = a_3) /\ (b_4 = b_3) /\
              ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((a_3 * b_3 * p) = (x_8 + x_9)) /\ (x_1 = (q_2 + x_8 + x_9)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: (a = 0) \/ (b = 0) \/ ((0 < a) /\ (0 < b)).
Prover Z3 4.8.12 returns Valid (Qed:430ms) (30ms) (67308)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 16):
Let x = a_7 * b_8 * p_2.
Let x_1 = a_1 * b_1.
Let x_2 = a * b * p.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_2) /\ is_sint32(a_3) /\ is_sint32(a_4) /\
      is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(a_7) /\ is_sint32(a_1) /\
      is_sint32(b) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(b_1) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(x_1 - x_2) /\ is_sint32(x_1 - x).
  (* Pre-condition *)
  Have: (0 < a_1) /\ (0 < b_1).
  (* Invariant *)
  Have: (0 < a_7) /\ (0 < b_8).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 < p_2.
  If (a_7 % 2) = 0
  Then {
    Have: (a_7 = a_8) /\ (b_8 = b_7) /\ (p_2 = p_3).
    If (b_7 % 2) = 0
    Then {
      Let x_3 = b_2 / 2.
      Let x_4 = a_2 / 2.
      Have: (a_8 = a_2) /\ (b_7 = b_2) /\ (p_3 = p_1) /\
          ((a_2 * b_2 * p_1) = (4 * (p_1 * x_4 * x_3))).
      Have: x_4 = a.
      Have: x_3 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_8 = a_6) /\ (b_7 = b_9) /\ (p_3 = p).
      If (a_6 % 2) = 1
      Then {
        Have: (a_6 = a_9) /\ (b_9 = b_6).
        If (b_6 % 2) = 0
        Then {
          Let x_5 = b * p.
          Let x_6 = b * p * (a_3 - 1).
          Have: (a_9 = a_3) /\ (b_6 = b) /\ ((a_3 * b * p) = (x_5 + x_6)) /\
              (x_1 = (q + x_5 + x_6)).
          Have: (1 + a) = a_3.
        }
        Else {
          Have: (a_9 = a_5) /\ (b_6 = b_10).
          If (a_5 % 2) = 0
          Then {
            Have: (a_5 = a_10) /\ (b_10 = b_5).
            If (b_5 % 2) = 1
            Then {
              Let x_7 = a * p.
              Let x_8 = a * p * (b_3 - 1).
              Have: (a_10 = a) /\ (b_5 = b_3) /\
                  ((a * b_3 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
              Have: (1 + b) = b_3.
            }
            Else {
              Let x_9 = p * (a_4 - 1) * (b_4 - 1).
              Let x_10 = p * (a_4 + b_4 - 1).
              Have: (a_10 = a_4) /\ (b_5 = b_4) /\
                  ((a_4 * b_4 * p) = (x_9 + x_10)) /\
                  (x_1 = (q_2 + x_9 + x_10)).
              Have: (1 + a) = a_4.
              Have: (1 + b) = b_4.
            }
          }
          Else {
            Have: (a_5 = a_4) /\ (b_10 = b_4) /\
                ((a_4 * b_4 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_4.
            Have: (1 + b) = b_4.
          }
        }
      }
      Else {
        Have: (a_6 = a_5) /\ (b_9 = b_10).
        If (a_5 % 2) = 0
        Then {
          Have: (a_5 = a_10) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_5 = b_3) /\
                ((a * b_3 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_10 = a_4) /\ (b_5 = b_4) /\
                ((a_4 * b_4 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_4.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_5 = a_4) /\ (b_10 = b_4) /\
              ((a_4 * b_4 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_4.
          Have: (1 + b) = b_4.
        }
      }
    }
  }
  Else {
    Have: (a_7 = a_6) /\ (b_8 = b_9) /\ (p_2 = p).
    If (a_6 % 2) = 1
    Then {
      Have: (a_6 = a_9) /\ (b_9 = b_6).
      If (b_6 % 2) = 0
      Then {
        Have: (a_9 = a_3) /\ (b_6 = b) /\ ((a_3 * b * p) = (x_5 + x_6)) /\
            (x_1 = (q + x_5 + x_6)).
        Have: (1 + a) = a_3.
      }
      Else {
        Have: (a_9 = a_5) /\ (b_6 = b_10).
        If (a_5 % 2) = 0
        Then {
          Have: (a_5 = a_10) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_5 = b_3) /\
                ((a * b_3 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_10 = a_4) /\ (b_5 = b_4) /\
                ((a_4 * b_4 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_4.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_5 = a_4) /\ (b_10 = b_4) /\
              ((a_4 * b_4 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_4.
          Have: (1 + b) = b_4.
        }
      }
    }
    Else {
      Have: (a_6 = a_5) /\ (b_9 = b_10).
      If (a_5 % 2) = 0
      Then {
        Have: (a_5 = a_10) /\ (b_10 = b_5).
        If (b_5 % 2) = 1
        Then {
          Have: (a_10 = a) /\ (b_5 = b_3) /\ ((a * b_3 * p) = (x_7 + x_8)) /\
              (x_1 = (q_1 + x_7 + x_8)).
          Have: (1 + b) = b_3.
        }
        Else {
          Have: (a_10 = a_4) /\ (b_5 = b_4) /\
              ((a_4 * b_4 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_4.
          Have: (1 + b) = b_4.
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_10 = b_4) /\
            ((a_4 * b_4 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
        Have: (1 + a) = a_4.
        Have: (1 + b) = b_4.
      }
    }
  }
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((0 < a) /\ (0 < b)).
}
Prove: x_2 <= x_1.
Prover Z3 4.8.12 returns Timeout (Qed:426ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:426ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (338ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 18):
Let x = a * b * p.
Let x_1 = a_7 * b_8.
Let x_2 = a_6 * b_7 * p_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(a_7) /\
      is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\
      is_sint32(b_4) /\ is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\
      is_sint32(b_8) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(x_1 - x) /\ is_sint32(x_1 - x_2).
  (* Pre-condition *)
  Have: (0 < a_7) /\ (0 < b_8).
  (* Invariant *)
  Have: (0 < a_6) /\ (0 < b_7).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: 0 < p_2.
  If (a_6 % 2) = 0
  Then {
    Have: (a_6 = a_8) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_3 = b_1 / 2.
      Let x_4 = a_1 / 2.
      Have: (a_8 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          ((a_1 * b_1 * p_1) = (4 * (p_1 * x_4 * x_3))).
      Have: x_4 = a.
      Have: x_3 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_8 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_9) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_5 = b * p.
          Let x_6 = b * p * (a_2 - 1).
          Have: (a_9 = a_2) /\ (b_5 = b) /\ ((a_2 * b * p) = (x_5 + x_6)) /\
              (x_1 = (q + x_5 + x_6)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_9 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_10) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_7 = a * p.
              Let x_8 = a * p * (b_2 - 1).
              Have: (a_10 = a) /\ (b_4 = b_2) /\
                  ((a * b_2 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_9 = p * (a_3 - 1) * (b_3 - 1).
              Let x_10 = p * (a_3 + b_3 - 1).
              Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                  ((a_3 * b_3 * p) = (x_9 + x_10)) /\
                  (x_1 = (q_2 + x_9 + x_10)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((a_3 * b_3 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_4 = b_2) /\
                ((a * b_2 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                ((a_3 * b_3 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((a_3 * b_3 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_9) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_9 = a_2) /\ (b_5 = b) /\ ((a_2 * b * p) = (x_5 + x_6)) /\
            (x_1 = (q + x_5 + x_6)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_9 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_10 = a) /\ (b_4 = b_2) /\
                ((a * b_2 * p) = (x_7 + x_8)) /\ (x_1 = (q_1 + x_7 + x_8)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3) /\
                ((a_3 * b_3 * p) = (x_9 + x_10)) /\
                (x_1 = (q_2 + x_9 + x_10)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((a_3 * b_3 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_10) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_10 = a) /\ (b_4 = b_2) /\ ((a * b_2 * p) = (x_7 + x_8)) /\
              (x_1 = (q_1 + x_7 + x_8)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_10 = a_3) /\ (b_4 = b_3) /\
              ((a_3 * b_3 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((a_3 * b_3 * p) = (x_9 + x_10)) /\ (x_1 = (q_2 + x_9 + x_10)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((0 < a) /\ (0 < b)).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 < p.
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:425ms) (30ms) (70097)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0004/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0004/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
