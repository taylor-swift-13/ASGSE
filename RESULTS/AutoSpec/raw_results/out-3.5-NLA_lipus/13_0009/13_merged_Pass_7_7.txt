[kernel] Parsing out/13_0009/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 7 goals scheduled
[wp] Proved goals:    7 / 7
  Qed:               5
  Alt-Ergo 2.5.4:    1 (44ms)
  Z3 4.8.12:         1 (20ms)
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0009/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0009/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0009/13_merged.c, line 14):
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\
      is_sint32(b_4) /\ is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\
      is_sint32(b_8) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2).
  (* Pre-condition *)
  Have: (0 < a_3) /\ (0 < b_8).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: 0 <= b_7.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Then *)
  Have: a_2 != 0.
  (* Then *)
  Have: b_7 != 0.
  If (a_2 % 2) = 0
  Then {
    Have: (a_2 = a_4) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (b_6 = b_1) /\ (p_3 = p_1).
      Have: (b_1 / 2) = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_4 = a_1) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_1 % 2) = 1
      Then {
        Have: (a_1 = a_5) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then { Have: b_5 = b. }
        Else {
          Have: (a_5 = a) /\ (b_5 = b_10).
          If (a % 2) = 0
          Then {
            Have: b_10 = b_4.
            If (b_4 % 2) = 1
            Then { Have: b_4 = b_2. Have: (1 + b) = b_2. }
            Else { Have: b_4 = b_3. Have: (1 + b) = b_3. }
          }
          Else { Have: b_10 = b_3. Have: (1 + b) = b_3. }
        }
      }
      Else {
        Have: (a_1 = a) /\ (b_9 = b_10).
        If (a % 2) = 0
        Then {
          Have: b_10 = b_4.
          If (b_4 % 2) = 1
          Then { Have: b_4 = b_2. Have: (1 + b) = b_2. }
          Else { Have: b_4 = b_3. Have: (1 + b) = b_3. }
        }
        Else { Have: b_10 = b_3. Have: (1 + b) = b_3. }
      }
    }
  }
  Else {
    Have: (a_2 = a_1) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_1 % 2) = 1
    Then {
      Have: (a_1 = a_5) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then { Have: b_5 = b. }
      Else {
        Have: (a_5 = a) /\ (b_5 = b_10).
        If (a % 2) = 0
        Then {
          Have: b_10 = b_4.
          If (b_4 % 2) = 1
          Then { Have: b_4 = b_2. Have: (1 + b) = b_2. }
          Else { Have: b_4 = b_3. Have: (1 + b) = b_3. }
        }
        Else { Have: b_10 = b_3. Have: (1 + b) = b_3. }
      }
    }
    Else {
      Have: (a_1 = a) /\ (b_9 = b_10).
      If (a % 2) = 0
      Then {
        Have: b_10 = b_4.
        If (b_4 % 2) = 1
        Then { Have: b_4 = b_2. Have: (1 + b) = b_2. }
        Else { Have: b_4 = b_3. Have: (1 + b) = b_3. }
      }
      Else { Have: b_10 = b_3. Have: (1 + b) = b_3. }
    }
  }
  (* Invariant *)
  Have: 0 < p.
}
Prove: 0 <= b.
Prover Z3 4.8.12 returns Valid (Qed:190ms) (10ms) (53261)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:190ms) (44ms) (781)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0009/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0009/13_merged.c, line 15):
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(a_7) /\
      is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\
      is_sint32(b_4) /\ is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\
      is_sint32(b_8) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2).
  (* Pre-condition *)
  Have: (0 < a_7) /\ (0 < b_8).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: 0 <= b_7.
  (* Invariant *)
  Have: 0 <= a_6.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If (a_6 % 2) = 0
  Then {
    Have: (a_6 = a_8) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_8 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1).
      Have: (a_1 / 2) = a.
      Have: (b_1 / 2) = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_8 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_9) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then { Have: (a_9 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
        Else {
          Have: (a_9 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_10) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then { Have: (a_10 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
            Else {
              Have: (a_10 = a_3) /\ (b_4 = b_3).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_10 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_9) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then { Have: (a_9 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
      Else {
        Have: (a_9 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_10) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_10 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_10 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_10) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then { Have: (a_10 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
        Else {
          Have: (a_10 = a_3) /\ (b_4 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: 0 < p.
  (* Invariant *)
  Have: 0 <= b.
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:276ms) (20ms) (57880)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0009/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0009/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0009/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
