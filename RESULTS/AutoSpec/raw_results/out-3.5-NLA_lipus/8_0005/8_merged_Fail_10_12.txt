[kernel] Parsing out/8_0005/8_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_main8_loop_invariant_2_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_main8_loop_invariant_3_preserved (Qed 53ms) (Z3)
[wp] Proved goals:   10 / 12
  Qed:               6
  Alt-Ergo 2.5.4:    4 (22ms-49ms-107ms)
  Timeout:           2
------------------------------------------------------------
  Function main8
------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0005/8_merged.c, line 17):
Let x = b * p_2.
Let x_1 = b * r_2.
Let x_2 = a * q_2.
Let x_3 = a * s_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(p) /\ is_sint32(p_1) /\
      is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\
      is_sint32(s_1) /\ is_sint32(s_2) /\ is_sint32(x - x_2) /\
      is_sint32(x_3 - x_1).
  (* Pre-condition *)
  Have: x_2 < x.
  (* Pre-condition *)
  Have: x_1 < x_3.
  Have: (x + x_1) = (x_2 + x_3).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: 0 < b.
  (* Invariant *)
  Have: 0 < a.
  (* Then *)
  Have: b != a.
  If b < a
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
}
Prove: (p * s) = (1 + (q * r)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (33ms) (705)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0005/8_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0005/8_merged.c, line 18):
Let x = b_1 * p_2.
Let x_1 = b_1 * r_1.
Let x_2 = a * q_2.
Let x_3 = a * s.
Assume {
  Type: is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_2) /\
      is_sint32(b_1) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(s_1) /\ is_sint32(s_2) /\ is_sint32(s) /\
      is_sint32(x - x_2) /\ is_sint32(x_3 - x_1).
  (* Pre-condition *)
  Have: x_2 < x.
  (* Pre-condition *)
  Have: x_1 < x_3.
  Have: (x + x_1) = (x_2 + x_3).
  (* Invariant *)
  Have: (p_2 * s) = (1 + (q_2 * r_1)).
  (* Invariant *)
  Have: 0 < b_1.
  (* Invariant *)
  Have: 0 < a.
  (* Then *)
  Have: b_1 != a.
  If b_1 < a
  Then {
    Have: (b_1 = b) /\ (p_2 = p_1) /\ (q_2 = q) /\ (s = s_1).
    Have: (a_1 + b) = a.
    Have: (p + q) = p_1.
    Have: (r + s_1) = r_1.
  }
  Else {
    Have: (b_1 = b_2) /\ (q_2 = q_1) /\ (s = s_2) /\ ((a_1 + b) = b_2) /\
        ((a + b) = b_2) /\ ((p + q) = q_1) /\ ((p_2 + q) = q_1) /\
        ((r + s_1) = s_2) /\ ((r_1 + s_1) = s_2).
  }
  (* Invariant *)
  Have: (p * s_1) = (1 + (q * r)).
}
Prove: (x_3 + (b * r)) = ((a_1 * s_1) + x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:56ms) (107ms) (1143)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0005/8_merged.c, line 18):
Assume {
  Type: is_sint32(a) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < y.
}
Prove: y = a.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0005/8_merged.c, line 19):
Let x = b * r.
Let x_1 = a_1 * s.
Let x_2 = b_1 * p_1.
Let x_3 = a * q.
Assume {
  Type: is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_2) /\
      is_sint32(b_1) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x_2 - x_3) /\ is_sint32(x_1 - x).
  (* Pre-condition *)
  Have: x_3 < x_2.
  (* Pre-condition *)
  Have: x < x_1.
  Have: (x + x_2) = (x_1 + x_3).
  (* Invariant *)
  Have: (p_1 * s_2) = (1 + (q * r_2)).
  (* Invariant *)
  Have: ((a * s_2) + x) = (x_1 + (b_1 * r_2)).
  (* Invariant *)
  Have: 0 < b_1.
  (* Invariant *)
  Have: 0 < a.
  (* Then *)
  Have: b_1 != a.
  If b_1 < a
  Then {
    Have: (b_1 = b) /\ (q = q_1) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (a_1 + b) = a.
    Have: (p + q_1) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (b_1 = b_2) /\ (q = q_2) /\ (s_2 = s_1) /\ ((a_1 + b) = b_2) /\
        ((a + b) = b_2) /\ ((p + q_1) = q_2) /\ ((p_1 + q_1) = q_2) /\
        ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q_1 * r)).
}
Prove: (x_3 + (b * p)) = ((a_1 * q_1) + x_2).
Prover Z3 4.8.12 returns Timeout (Qed:53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:53ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0005/8_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0005/8_merged.c, line 20):
Let x = s - r.
Let x_1 = q - p.
Let x_2 = a * x_1.
Let x_3 = b - a.
Let x_4 = p * x_3.
Let x_5 = a * x.
Let x_6 = r * x_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(p) /\ is_sint32(q) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(x_3) /\ is_sint32(x_1) /\
      is_sint32(x) /\ is_sint32(x_4 - x_2) /\ is_sint32(x_5 - x_6).
  (* Residual *)
  When: a <= b.
  (* Pre-condition *)
  Have: x_2 < x_4.
  (* Pre-condition *)
  Have: x_6 < x_5.
  Have: (x_4 + x_6) = (x_2 + x_5).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: ((b * r) + x_5) = ((a * s) + x_6).
  (* Invariant *)
  Have: ((b * p) + x_2) = ((a * q) + x_4).
  (* Invariant *)
  Have: 0 < b.
  (* Invariant *)
  Have: 0 < a.
  (* Then *)
  Have: b != a.
  (* Invariant *)
  Have: (p * x) = (1 + (r * x_1)).
}
Prove: a < b.
Prover Z3 4.8.12 returns Valid (Qed:43ms) (10ms) (33486)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:43ms) (22ms) (265)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0005/8_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/8_0005/8_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (39ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/8_0005/8_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/8_0005/8_merged.c, line 42):
Let x = a * q.
Let x_1 = a * s.
Let x_2 = a * p.
Let x_3 = a * r.
Let x_4 = x_2 - x.
Let x_5 = x_1 - x_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: x < x_2.
  (* Pre-condition *)
  Have: x_3 < x_1.
  Have: (x + x_1) = (x_2 + x_3).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: 0 < a.
}
Prove: ((r - s) * x_5) = ((q - p) * x_4).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (36ms) (303)

------------------------------------------------------------

Goal Loop assigns (file out/8_0005/8_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/8_0005/8_merged.c:4: Warning: 
  No 'assigns' specification for function 'main8'.
  Callers assumptions might be imprecise.
