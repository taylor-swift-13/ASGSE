[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] Proved goals:   12 / 12
  Qed:               6
  Alt-Ergo 2.5.4:    5 (4ms-7ms-9ms)
  Z3 4.8.12:         1 (1.4s)
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Let x = B * q.
Let x_1 = B + t_3 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\
      is_sint32(A - t_3 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: A < x_1.
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: (t_3 + x) <= A.
  (* Then *)
  Have: t_3 != 0.
  If x_1 = (1 + A)
  Then { Have: t_3 = t_1. Have: (1 + t) = t_1. }
  Else { Have: t_3 = t_2. Have: (1 + t) = t_2. }
}
Prove: t <= A.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32989)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (71)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = B * q.
Let x_1 = B + t_2 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: A < x_1.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: (t_2 + x) <= A.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then { Have: t_2 = t_1. Have: r = 0. Have: (1 + t) = t_1. }
  Else { Have: (r_1 + t_2 + x) = A. Have: (1 + r_1) = r. Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
}
Prove: r < B.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (33688)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = B * q_2.
Let x_1 = B + t_2 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: A < x_1.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: (t_2 + x) <= A.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Have: (q_2 = q) /\ ((r_1 + t_2 + x) = A).
    Have: (1 + r_1) = r.
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: r < B.
}
Prove: (r + t + (B * q)) = A.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (30ms) (90582)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (95)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_2.
Let x_3 = B + t_1 + x_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(A - r - x) /\ is_sint32(A - t_1 - x_2).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_1 <= A.
  (* Invariant *)
  Have: A < x_3.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (t_1 + x_2) <= A.
  (* Then *)
  Have: t_1 != 0.
  If x_3 = (1 + A)
  Then {
    Let x_4 = 1 + q_1.
    Have: (q_2 = q_1) /\ (t_1 = t).
    Have: x_4 = q.
    Have: r = 0.
    Have: (t + (B * x_4)) = (1 + A).
  }
  Else { Have: (q_2 = q) /\ ((r_1 + t_1 + x) = A). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: r < B.
}
Prove: x_1 <= A.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (30ms) (61638)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (7ms) (207)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Let x = B * q.
Let x_1 = 1 + A.
Let x_2 = B * q_2.
Let x_3 = B + t + x_2.
Let x_4 = -t.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\
      is_sint32(A - t - x_2) /\ is_sint32(1 + A - t - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: A < x_3.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: (t + x_2) <= A.
  (* Then *)
  Have: t != 0.
  If x_3 = x_1
  Then {
    Let x_5 = 1 + q_1.
    Have: q_2 = q_1.
    Have: x_5 = q.
    Have: (t + (B * x_5)) = x_1.
  }
  Else { Have: (q_2 = q) /\ ((r + t + x) = A). }
  (* Invariant *)
  Have: t <= x_1.
  (* Invariant *)
  Have: (2 + A) <= (B + t + x).
  (* Invariant *)
  Have: 0 < t.
}
Prove: (t + x) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (30ms) (47979)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (8ms) (182)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/12_0001/12_merged.c, line 34):
Let x = B * q.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(A - x).
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= A.
  (* Invariant *)
  Have: A < (B + x).
  (* Invariant *)
  Have: x <= A.
}
Prove: (A / B) = q.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (1.4s) (4299657)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
