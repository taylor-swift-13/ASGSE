[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 11 goals scheduled
[wp] Proved goals:   11 / 11
  Qed:               7
  Alt-Ergo 2.5.4:    4 (5ms-9ms-11ms)
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = B * q.
Let x_1 = r_1 + x.
Let x_2 = r_1 + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: r_1 < B.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= r_1.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then { Have: r = 0. }
  Else { Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: r < B.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (32197)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (70)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q_1) /\ is_sint32(q) /\ is_sint32(r_1) /\
      is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: r < B.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then { Have: (1 + q) = q_1. Have: r_1 = 0. }
  Else { Have: q = q_1. Have: (1 + r) = r_1. }
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: r_1 < B.
}
Prove: (1 + r + x) = (r_1 + (B * q_1)).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (30ms) (51901)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (10ms) (80)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_1.
Let x_3 = r_1 + t + x_2.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(x_3) /\
      is_sint32(r_1 + t + x_2 - r - x).
  (* Pre-condition *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= (r_1 + x_2).
  (* Invariant *)
  Have: r_1 < B.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= r_1.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then {
    Let x_4 = 1 + r_1.
    Let x_5 = 1 + r_1 + (q_1 * x_4).
    Let x_6 = 1 + q_1.
    Let x_7 = x_6 * x_4.
    Have: x_6 = q.
    Have: (x_5 = (r + x_7)) /\ (x_7 = x_5).
  }
  Else { Have: q_1 = q. Have: x_4 = r. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: r < B.
}
Prove: x_1 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (40ms) (67916)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (9ms) (247)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Let x = B * q_1.
Let x_1 = r + t_1 + x.
Let x_2 = B * q.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_2) /\ is_sint32(t_1) /\ is_sint32(x_1) /\
      is_sint32(r + t_1 + x - t - x_2).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= (r + x).
  (* Invariant *)
  Have: r < B.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: t_1 != 0.
  If (1 + r) = B
  Then {
    Let x_3 = 1 + q_1.
    Let x_4 = 1 + r.
    Let x_5 = x_3 * x_4.
    Let x_6 = q_1 * x_4.
    Have: (x_5 = (1 + r + x_6)) /\ ((1 + r + t_1 + x_6) = (t_2 + x_5)).
    Have: x_3 = q.
    Have: (1 + t) = t_2.
  }
  Else { Have: q_1 = q. Have: (1 + t) = t_1. }
  (* Invariant *)
  Have: t <= x_1.
  (* Invariant *)
  Have: x_1 < (B + t + x_2).
  (* Invariant *)
  Have: 0 <= t.
}
Prove: (t + x_2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (40ms) (70326)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (11ms) (256)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
