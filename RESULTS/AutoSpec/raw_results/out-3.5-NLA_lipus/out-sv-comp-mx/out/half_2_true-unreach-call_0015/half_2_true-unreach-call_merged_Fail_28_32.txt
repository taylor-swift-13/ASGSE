[kernel] Parsing out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_5_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_6_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_12_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_15_established (Qed 3ms) (Z3)
[wp] Proved goals:   28 / 32
  Qed:              24
  Alt-Ergo 2.6.2:    3 (8ms-13ms)
  Z3 4.8.6:          1 (30ms)
  Timeout:           4
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 13):
Let x = 2 + i.
Let x_1 = i / 2.
Let x_2 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(n - 1 - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: (x / 2) = (1 + x_1).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (36974)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (13ms) (147)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 28):
Let x = i / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(n - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
}
Prove: (x + (n / 2)) = n.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 29):
Let x = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: ((i / 2) + x) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
}
Prove: (2 * x) = n.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 33):
Let x = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: ((i / 2) + x) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: (2 * x) = n.
}
Prove: (-1) <= n.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (33732)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (90)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 35):
Let x = n / 2.
Let x_1 = i / 2.
Let x_2 = j + x_1.
Let x_3 = -j.
Let x_4 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + j) /\ is_sint32(n - j - x_1) /\
      is_sint32(n - 1 - j - x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (x_1 + x) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: (2 * x) = n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x = x_1.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_2 < n.
  (* Then *)
  Have: j < x.
}
Prove: (2 + j + x_1) <= n.
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 37):
Let x = i / 2.
Let x_1 = n / 2.
Let x_2 = k + x + x_1.
Let x_3 = k + x.
Let x_4 = -k.
Let x_5 = -x.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1) /\
      is_sint32(k - 1) /\ is_sint32(n - k - x) /\ is_sint32(1 + n - k - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (x + x_1) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: (2 * x_1) = n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_1 = x.
  (* Invariant *)
  Have: n <= x_2.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: n < x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1 + x) <= n) -> (2 <= k))).
}
Prove: x_3 <= (1 + n).
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (35791)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (8ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 38):
Let x = i / 2.
Let x_1 = 2 + j + x.
Let x_2 = n / 2.
Let x_3 = j + x.
Let x_4 = -j.
Let x_5 = -x.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(1 + j) /\ is_sint32(n - j - x) /\ is_sint32(n - 1 - j - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (x + x_2) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: (2 * x_2) = n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_2 = x.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_3 < n.
  (* Then *)
  Have: j < x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> (x_1 <= n))).
  (* Invariant *)
  Have: (-1) <= j.
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (30ms) (203571)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 38):
Let x = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: ((i / 2) + x) = n.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: (2 * x) = n.
  (* Invariant *)
  Have: (-1) <= n.
}
Prove: 2 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/half_2_true-unreach-call_0015/half_2_true-unreach-call_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
