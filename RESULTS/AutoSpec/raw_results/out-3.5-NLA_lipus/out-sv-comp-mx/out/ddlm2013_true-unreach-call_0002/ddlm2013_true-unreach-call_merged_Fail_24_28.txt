[kernel] Parsing out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:36: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_9_preserved (Qed 19ms) (Z3)
[wp] Proved goals:   24 / 28
  Qed:              20
  Alt-Ergo 2.6.2:    4 (9ms-19ms)
  Timeout:           4
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> ((2 + (2 * (i / 2))) = j_3)).
  (* Invariant *)
  Have: ((x = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x != 0)) \/ ((x = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_1 = 0)) \/ ((x = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_1 = 0)) \/ ((x != 0) /\ (x_1 != 0)).
  (* Invariant *)
  Have: ((x != 0) -> (x_1 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(to_uint32(2 + i) % 2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
}
Prove: 0 < j.
Prover Z3 4.8.6 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 24):
Let x = to_uint32(2 + j).
Let x_1 = i % 2.
Let x_2 = j % 2.
Let x_3 = to_uint32(2 + i).
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_sint32(tmp_0).
  (* Goal *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_1 != 0)) \/ ((x_1 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 != 0) /\ (x_2 != 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_2 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < x.
}
Prove: (2 + (2 * (x_3 / 2))) = x.
Prover Z3 4.8.6 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 24):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 25):
Let x = to_uint32(2 + i).
Let x_1 = 2 + (2 * (x / 2)).
Let x_2 = i % 2.
Let x_3 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_1).
  (* Goal *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_2 != 0)) \/ ((x_2 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 != 0) /\ (x_3 != 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = to_uint32(2 + j).
}
Prove: (x_1 % 2) = 0.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (16ms) (357)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 26):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((2 + (2 * (i / 2))) = j_3)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_2 != 0)) \/ ((x_2 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 != 0) /\ (x_3 != 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + (2 * (x / 2))) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((j % 2) = 0)).
}
Prove: ((x = j) /\ (x_1 != 0)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
Prover Z3 4.8.6 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 27):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = i % 2.
Let x_4 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> ((2 + (2 * (i / 2))) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_3 != 0)) \/ ((x_3 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 != 0) /\ (x_4 != 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_4 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + (2 * (x / 2))) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((x = j) /\ (x_1 != 0)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
}
Prove: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 = 1) /\ (x_1 = 1)).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (10ms) (43488)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (19ms) (326)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 28):
Let x = j % 2.
Let x_1 = to_uint32(2 + i).
Let x_2 = x_1 % 2.
Let x_3 = i % 2.
Let x_4 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> ((2 + (2 * (i / 2))) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_3 != 0)) \/ ((x_3 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 != 0) /\ (x_4 != 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_4 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((2 + (2 * (x_1 / 2))) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x = 0)).
  (* Invariant *)
  Have: ((x_1 = j) /\ (x_2 != 0)) \/ ((x_2 = 0) /\ ((1 + x_1) = j)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_2 = 0)) \/ ((x = 1) /\ (x_2 = 1)).
}
Prove: ((x = 0) /\ (x_2 = 0)) \/ ((x != 0) /\ (x_2 != 0)).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (20ms) (43953)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (10ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = i % 2.
Let x_4 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> ((2 + (2 * (i / 2))) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_3 != 0)) \/ ((x_3 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 != 0) /\ (x_4 != 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_4 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + (2 * (x / 2))) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((x = j) /\ (x_1 != 0)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 != 0) /\ (x_1 != 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_2 != 0)).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (41639)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (9ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 31) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
