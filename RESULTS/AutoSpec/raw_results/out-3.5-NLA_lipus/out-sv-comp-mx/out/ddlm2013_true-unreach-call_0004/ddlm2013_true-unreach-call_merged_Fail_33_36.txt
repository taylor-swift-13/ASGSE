[kernel] Parsing out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:40: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_15_established (Qed 1ms) (Z3)
[wp] Proved goals:   33 / 36
  Qed:              28
  Alt-Ergo 2.6.2:    4 (5ms-20ms-28ms)
  Z3 4.8.6:          1 (10ms)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = 1 + j.
Let x_2 = 2 + i.
Let x_3 = a * (j - i).
Let x_4 = to_uint32(x_2).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_3).
  (* Goal *)
  When: (x_4 % 2) = 1.
  (* Invariant *)
  Have: ((x = 1) -> (j = i)).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: x_3 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x = 0) -> (x_2 = j)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= x_1)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_4 = to_uint32(x_1).
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = 2 + i.
Let x_1 = to_uint32(x).
Let x_2 = x_1 % 2.
Let x_3 = i % 2.
Let x_4 = a * (j_3 - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\ is_uint32(x_4).
  (* Invariant *)
  Have: ((x_3 = 1) -> (j_3 = i)).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((1 + i) = j_3)).
  (* Invariant *)
  Have: x_4 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x = j_3)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i <= j_3)).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_1 = j)).
}
Prove: (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (10ms) (38287)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (28ms) (1305)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 20):
Let x = i % 2.
Let x_1 = 2 + i.
Let x_2 = a * (j - i).
Let x_3 = to_uint32(x_1).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_2).
  (* Goal *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: ((x = 1) -> (j = i)).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: x_2 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x = 0) -> (x_1 = j)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (1 + x_3) = to_uint32(2 + j).
Prover Z3 4.8.6 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 23):
Let x = 2 + i.
Let x_1 = to_uint32(x).
Let x_2 = x_1 % 2.
Let x_3 = i % 2.
Let x_4 = j_1 - i.
Let x_5 = a * x_4.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_5).
  (* Invariant *)
  Have: ((x_3 = 1) -> (j_1 = i)).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i < j_1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x = j_1)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i <= (1 + j_1))).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i <= j_1)).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_1 = j)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + x_1) = j)).
}
Prove: (to_uint32(1 + a) * (j - x_1)) = to_uint32(to_uint32(x_4) + x_5).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:27ms) (20ms) (1465)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 24):
Let x = 2 + i.
Let x_1 = to_uint32(x).
Let x_2 = x_1 % 2.
Let x_3 = to_uint32(1 + a).
Let x_4 = x_3 * (j - x_1).
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4).
  (* Invariant *)
  Have: ((x_7 = 1) -> (j_3 = i)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j_3)).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x = j_3)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= j_3)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  If to_uint32(x_2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_1 = j)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + x_1) = j)).
}
Prove: x_4 <= x_3.
Prover Z3 4.8.6 returns Valid (Qed:27ms) (10ms) (46178)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 25):
Let x = to_uint32(1 + a).
Let x_1 = 2 + i.
Let x_2 = to_uint32(x_1).
Let x_3 = x * (j - x_2).
Let x_4 = x_2 % 2.
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_3).
  (* Invariant *)
  Have: ((x_7 = 1) -> (j_3 = i)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j_3)).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_1 = j_3)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= j_3)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_5) + x_6).
  If to_uint32(x_4) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_2 = j)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + x_2) = j)).
  (* Invariant *)
  Have: x_3 <= x.
}
Prove: 0 < j.
Prover Z3 4.8.6 returns Valid (Qed:28ms) (10ms) (40842)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:28ms) (28ms) (2424)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 32):
Let x = 2 + i.
Let x_1 = to_uint32(x).
Let x_2 = j - i.
Let x_3 = a * x_2.
Let x_4 = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_3).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: ((x_4 = 1) -> (j = i)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: x_3 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_4 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x = j)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x_4 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: to_uint32(to_uint32(x_2) + x_3) = to_uint32(1 + a).
  Have: (1 + x_1) = to_uint32(2 + j).
}
Prove: false.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (10ms) (38373)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (5ms) (230)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 32):
Assume { Type: is_sint32(flag_0). Have: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 35) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 35) (2/2):
Call Result at line 40
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
