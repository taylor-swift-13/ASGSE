[kernel] Parsing out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c:28: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c:9: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 23 goals scheduled
[wp] Proved goals:   23 / 23
  Qed:              17
  Alt-Ergo 2.6.2:    4 (7ms-10ms)
  Z3 4.8.6:          2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 14):
Let x = i_1 + i.
Let x_1 = 2 * i_1.
Let x_2 = 1 + i_1.
Let x_3 = -i.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1 - i) /\
      is_sint32(2 + x_1 - i).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: i_1 < n.
}
Prove: i <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (10ms) (34553)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (9ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 15):
Let x = i + n.
Let x_1 = 2 * a.
Let x_2 = -i.
Let x_3 = (-3) * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(2 + a) /\
      is_sint32(a - i) /\ is_sint32(x_1 - (3 * i)) /\ is_sint32(1 + a - i) /\
      is_sint32(1 + x_1 - (3 * i)).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: (2 * i) <= a.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i <= a.
  (* Invariant *)
  Have: (3 * i) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: a < x.
}
Prove: (-1) <= i.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (10ms) (34656)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (8ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 18):
Let x = 2 * i.
Let x_1 = 2 * a.
Let x_2 = i + n.
Let x_3 = -i.
Let x_4 = (-3) * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(a - i) /\
      is_sint32(x_1 - (3 * i)) /\ is_sint32(1 + a - i) /\
      is_sint32(3 + (3 * a) - b - (3 * i)).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i <= a.
  (* Invariant *)
  Have: (3 * i) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: a < x_2.
  If tmp_0 != 0
  Then {
    Let x_5 = 3 * i.
    Have: (b_1 + x_5) = x_1.
    Have: (b + x_5) = (2 + x_1).
  }
  Else { Have: (b_2 + x_5) = x_1. Have: (b + x_5) = (1 + x_1). }
  (* Invariant *)
  Have: a < (b + i).
  (* Invariant *)
  Have: (b + x) <= (2 + x_1).
}
Prove: exists i_3 : Z. 0 <= i_3.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (30263)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 18):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.6 returns Valid (Qed:0.60ms) (10ms) (26189)

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 21):
Let x = 1 + a.
Let x_1 = i_1 + n.
Let x_2 = 2 * a.
Let x_3 = 2 * i_1.
Let x_4 = -i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(a - i_1) /\ is_sint32(x_2 - (3 * i_1)) /\
      is_sint32(1 + a - i_1) /\ is_sint32(1 + a + i - i_1) /\
      is_sint32(2 + x_2 - i - x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: x_3 <= a.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: i_1 <= a.
  (* Invariant *)
  Have: (3 * i_1) <= x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: a < x_1.
  If tmp_0 != 0
  Then { Have: (i_1 = i) /\ ((b + (3 * i)) = x_2). }
  Else { Have: ((1 + i_1) = i) /\ ((b_1 + (3 * i_1)) = x_2). }
  (* Invariant *)
  Have: (i + i_1) <= x.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: (i + x_3) <= (2 + x_2).
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (37120)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (10ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 22):
Let x = 2 * i.
Let x_1 = 2 * a.
Let x_2 = 1 + a.
Let x_3 = i + n.
Let x_4 = -i.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(a - i) /\ is_sint32(x_1 - (3 * i)) /\
      is_sint32(1 + a - i) /\ is_sint32(1 + a + i_1 - i) /\
      is_sint32(2 + x_1 - i_1 - x).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: i <= a.
  (* Invariant *)
  Have: (3 * i) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: a < x_3.
  If tmp_0 != 0
  Then { Have: (i = i_1) /\ ((b + (3 * i_1)) = x_1). }
  Else { Have: ((1 + i) = i_1) /\ ((b_1 + (3 * i)) = x_1). }
  (* Invariant *)
  Have: (i_1 + i) <= x_2.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (i_1 + x) <= (2 + x_1).
}
Prove: i <= (1 + a + i_1).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (20ms) (37160)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (7ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Assertion (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c, line 23) (2/2):
Call Result at line 28
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/bhmr2007_true-unreach-call_0001/bhmr2007_true-unreach-call_merged.c:9: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
