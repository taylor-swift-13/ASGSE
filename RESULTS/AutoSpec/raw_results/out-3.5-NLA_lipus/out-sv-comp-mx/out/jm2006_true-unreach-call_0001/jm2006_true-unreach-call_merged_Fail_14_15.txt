[kernel] Parsing out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 15 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   14 / 15
  Qed:              12
  Alt-Ergo 2.6.2:    2 (9ms-9ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 15):
Assume {
  Type: is_sint32(j) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x - 1) /\
      is_sint32(y - 1) /\ is_sint32(j + x - y).
  (* Pre-condition *)
  Have: (0 <= j) /\ (y <= (j + x)).
  (* Invariant *)
  Have: y <= j.
  (* Invariant *)
  Have: forall i : Z. let x_1 = y + i in ((0 <= i) -> ((x_1 <= j) ->
      (x_1 = j))).
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x != 0.
}
Prove: y <= (1 + j).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (34052)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (9ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 17):
Let x_1 = 1 + i_1.
Let x_2 = i + x.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x - 1) /\
      is_sint32(y - 1) /\ is_sint32(i_1 + y - x).
  (* Goal *)
  When: (0 <= i) /\ (x_2 <= x_1).
  (* Pre-condition *)
  Have: (0 <= i_1) /\ (x <= (i_1 + y)).
  (* Invariant *)
  Have: x <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. let x_3 = x + i_2 in ((0 <= i_2) -> ((x_3 <= i_1) ->
      (x_3 = i_1))).
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x_2 = x_1.
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 18):
Let x = 1 + j.
Let x_1 = i + y.
Let x_2 = -j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(y) /\ is_sint32(y - 1) /\
      is_sint32(i + y - j) /\ is_sint32(i + y - 1 - j).
  (* Pre-condition *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: y <= j.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = y + i_1 in ((0 <= i_1) -> ((x_3 <= j) ->
      (x_3 = j))).
  (* Invariant *)
  Have: j <= x_1.
  (* Then *)
  Have: x_1 != j.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = y + i_1 in ((0 <= i_1) -> ((x_3 <= x) ->
      (x_3 = x))).
}
Prove: j < x_1.
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (34744)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (9ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Loop assigns (file out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/jm2006_true-unreach-call_0001/jm2006_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
