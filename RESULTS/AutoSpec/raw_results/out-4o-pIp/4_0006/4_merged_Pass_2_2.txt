[kernel] Parsing out/4_0006/4_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 2 goals scheduled
[wp] Proved goals:    2 / 2
  Qed:               0 (66ms)
  Alt-Ergo 2.5.4:    2 (167ms)
------------------------------------------------------------
  Function TripleAbsMaxFun
------------------------------------------------------------

Goal Post-condition (file out/4_0006/4_merged.c, line 11) in 'TripleAbsMaxFun':
Let a = shiftfield_F1___TripleAbsMax_tmax(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___TripleAbsMax_abs(pIp_0).
Let x_1 = Mint_2[shift_sint32(a_1, 2)].
Let x_2 = Mint_2[shift_sint32(a_1, 1)].
Let x_3 = Mint_2[shift_sint32(a_1, 0)].
Let m = Mint_0[Mptr_0[shiftfield_F1___TripleAbsMax_ret(pIp_0)] <- Mint_0[a]].
Let x_4 = m[shift_sint32(a_1, i)].
Assume {
  Type: is_sint32(absfx1_0) /\ is_sint32(absfy2_0) /\ is_sint32(absfz3_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (0 <= x_4) /\ (i <= 2).
  If x_3 < 0
  Then { Have: (absfx1_0 + x_3) = 0. }
  Else { Have: x_3 = absfx1_0. }
  If x_2 < 0
  Then { Have: (absfy2_0 + x_2) = 0. }
  Else { Have: x_2 = absfy2_0. }
  If x_1 < 0
  Then { Have: (absfz3_0 + x_1) = 0. }
  Else { Have: x_1 = absfz3_0. }
  If absfy2_0 < absfx1_0
  Then { Have: Mint_2 = Mint_3. Have: Mint_3[a <- absfx1_0] = Mint_1. }
  Else { Have: Mint_2 = Mint_4. Have: Mint_4[a <- absfy2_0] = Mint_1. }
  If x < absfz3_0
  Then { Have: Mint_1 = Mint_5. Have: Mint_5[a <- absfz3_0] = Mint_0. }
  Else { Have: Mint_1 = Mint_0. }
}
Prove: x_4 <= m[a].
Prover Alt-Ergo 2.5.4 returns Valid (Qed:67ms) (171ms) (3675)

------------------------------------------------------------

Goal Post-condition (file out/4_0006/4_merged.c, line 12) in 'TripleAbsMaxFun':
Let a = shiftfield_F1___TripleAbsMax_tmax(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___TripleAbsMax_abs(pIp_0).
Let x_1 = Mint_2[shift_sint32(a_1, 2)].
Let x_2 = Mint_2[shift_sint32(a_1, 1)].
Let x_3 = Mint_2[shift_sint32(a_1, 0)].
Let m = Mint_0[Mptr_0[shiftfield_F1___TripleAbsMax_ret(pIp_0)] <- Mint_0[a]].
Let x_4 = m[shift_sint32(a_1, i)].
Assume {
  Type: is_sint32(absfx1_0) /\ is_sint32(absfy2_0) /\ is_sint32(absfz3_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (x_4 < 0) /\ (i <= 2).
  If x_3 < 0
  Then { Have: (absfx1_0 + x_3) = 0. }
  Else { Have: x_3 = absfx1_0. }
  If x_2 < 0
  Then { Have: (absfy2_0 + x_2) = 0. }
  Else { Have: x_2 = absfy2_0. }
  If x_1 < 0
  Then { Have: (absfz3_0 + x_1) = 0. }
  Else { Have: x_1 = absfz3_0. }
  If absfy2_0 < absfx1_0
  Then { Have: Mint_2 = Mint_3. Have: Mint_3[a <- absfx1_0] = Mint_1. }
  Else { Have: Mint_2 = Mint_4. Have: Mint_4[a <- absfy2_0] = Mint_1. }
  If x < absfz3_0
  Then { Have: Mint_1 = Mint_5. Have: Mint_5[a <- absfz3_0] = Mint_0. }
  Else { Have: Mint_1 = Mint_0. }
}
Prove: 0 <= (m[a] + x_4).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:66ms) (164ms) (3666)

------------------------------------------------------------
[wp:pedantic-assigns] out/4_0006/4_merged.c:14: Warning: 
  No 'assigns' specification for function 'TripleAbsMaxFun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/4_0006/4_merged.c:56: Warning: 
  No 'assigns' specification for function 'main4'.
  Callers assumptions might be imprecise.
