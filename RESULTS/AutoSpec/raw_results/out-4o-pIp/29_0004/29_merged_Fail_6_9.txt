[kernel] Parsing out/29_0004/29_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 9 goals scheduled
[wp] [Timeout] typed_LimitInt32Fun_ensures (Qed 15ms) (Z3)
[wp] [Timeout] typed_LimitInt32Fun_ensures_3 (Qed 13ms) (Z3)
[wp] [Timeout] typed_LimitInt32Fun_ensures_6 (Qed 15ms) (Z3)
[wp] Proved goals:    6 / 9
  Qed:               2
  Alt-Ergo 2.5.4:    4 (13ms-31ms)
  Timeout:           3
------------------------------------------------------------
  Function LimitInt32Fun
------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 15) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_5
         = (if (x_3 < x_4) then x_3
            else (if ((x_3 + x_4) < 0) then (-x_3) else x_4)).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 16) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: x_3 < x_4.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_5 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (40ms) (228743)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (13ms) (294)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 17) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 + x_4) < 0.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: (x_3 + x_5) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 18) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a_1].
Let x_4 = m[a].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 <= x_4) /\ (0 <= (x_4 + x_3)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_5 = x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (20ms) (337)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 19) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: x_3 < x_4.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: (x_3 = x_2) /\ (x_5 = x_3).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (40ms) (175029)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (20ms) (359)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 20) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 + x_4) < 0.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: ((x_2 + x_3) = 0) /\ ((x_3 + x_5) = 0).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 21) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a_1].
Let x_4 = m[a].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 <= x_4) /\ (0 <= (x_4 + x_3)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: (x_3 = x_2) /\ (x_5 = x_3).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (31ms) (432)

------------------------------------------------------------
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/29_0004/29_merged.c, line 13) in 'LimitInt32Fun'' in 'main29' at call 'LimitInt32Fun' (file out/29_0004/29_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/29_0004/29_merged.c, line 14) in 'LimitInt32Fun'' in 'main29' at call 'LimitInt32Fun' (file out/29_0004/29_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0004/29_merged.c:23: Warning: 
  No 'assigns' specification for function 'LimitInt32Fun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/29_0004/29_merged.c:44: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
