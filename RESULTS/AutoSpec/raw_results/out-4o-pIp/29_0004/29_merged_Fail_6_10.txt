[kernel] Parsing out/29_0004/29_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 10 goals scheduled
[wp] [Timeout] typed_main29_assert_2 (Qed 2ms) (Z3)
[wp] [Timeout] typed_main29_assert (Qed 3ms) (Z3)
[wp] [Timeout] typed_main29_assert_3 (Qed 2ms) (Z3)
[wp] [Timeout] typed_main29_assert_4 (Qed 1ms) (Z3)
[wp] Proved goals:    6 / 10
  Qed:               2
  Alt-Ergo 2.5.4:    4 (17ms-23ms)
  Timeout:           4
------------------------------------------------------------
  Function LimitInt32Fun
------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 15) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: x_3 < x_4.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_5 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (50ms) (228743)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (17ms) (294)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 16) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a_1].
Let x_4 = m[a].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 <= x_4) /\ (0 <= (x_4 + x_3)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_5 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (60ms) (285706)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (19ms) (337)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 17) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: x_3 < x_4.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: (x_3 = x_2) /\ (x_5 = x_3).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (30ms) (175029)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (20ms) (359)

------------------------------------------------------------

Goal Post-condition (file out/29_0004/29_merged.c, line 18) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let x_2 = Mint_0[a_2].
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- x_2].
Let x_3 = m[a_1].
Let x_4 = m[a].
Let x_5 = m[a_2].
Assume {
  Type: is_sint32(x_2) /\ is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (x_3 <= x_4) /\ (0 <= (x_4 + x_3)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 < x.
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: (x_3 = x_2) /\ (x_5 = x_3).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (40ms) (173950)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (23ms) (432)

------------------------------------------------------------
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Assertion (file out/29_0004/29_merged.c, line 48):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Let x_2 = Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)].
Let x_3 = x + x_1.
Let x_4 = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x_2 = x))) /\
      (((x_1 <= x) -> ((0 <= x_3) -> (x_2 = x_1)))) /\
      (((x < x_1) -> ((x_2 = x) /\ (x_4 = x)))) /\
      (((x_1 <= x) -> ((0 <= x_3) -> ((x_2 = x_1) /\ (x_4 = x_1))))).
}
Prove: x_2 = (-100).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/29_0004/29_merged.c, line 49):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Let x_2 = x + x_1.
Let x_3 = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x = (-100)))) /\
      (((x_1 <= x) -> ((0 <= x_2) -> (x_1 = (-100))))) /\
      (((x < x_1) -> ((x = (-100)) /\ (x_3 = x)))) /\
      (((x_1 <= x) -> ((0 <= x_2) -> ((x_1 = (-100)) /\ (x_3 = x_1))))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = (-100).
}
Prove: x_3 = (-100).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/29_0004/29_merged.c, line 50):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x = (-100)))) /\
      (((x_1 <= x) -> ((0 <= (x + x_1)) -> (x_1 = (-100))))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = (-100).
  (* Assertion *)
  Have: Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]] = (-100).
}
Prove: x_1 = (-200).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/29_0004/29_merged.c, line 51):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Assume {
  Type: is_sint32(x).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x <= (-201)) -> (x = (-100)))) /\
      ((((-200) <= x) -> ((200 <= x) -> false))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = (-100).
  (* Assertion *)
  Have: Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]] = (-100).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)] = (-200).
}
Prove: x = 100.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/29_0004/29_merged.c, line 13) in 'LimitInt32Fun'' in 'main29' at call 'LimitInt32Fun' (file out/29_0004/29_merged.c, line 46)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/29_0004/29_merged.c, line 14) in 'LimitInt32Fun'' in 'main29' at call 'LimitInt32Fun' (file out/29_0004/29_merged.c, line 46)
:
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0004/29_merged.c:20: Warning: 
  No 'assigns' specification for function 'LimitInt32Fun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/29_0004/29_merged.c:41: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
