[kernel] Parsing out/23_0010/23_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_main23_loop_invariant_4_preserved (Qed 6ms) (Z3)
[wp] Proved goals:   10 / 12
  Qed:               8
  Alt-Ergo 2.5.4:    2 (9ms-16ms)
  Timeout:           2
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0010/23_merged.c, line 18):
Let x = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = chksum_0 + x_1.
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i_1) /\ is_sint32(1 + i_1) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a, 0), x) = Mint_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i_1)))).
  (* Invariant *)
  Have: 0 <= chksum_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < x.
}
Prove: Mint_0[shift_sint32(a, i)] <= x_2.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0010/23_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0010/23_merged.c, line 19):
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = chksum_0 + x.
Let x_2 = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i_1) /\ is_sint32(1 + i_1) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a, 0), x_2) = Mint_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i_1)))).
  (* Invariant *)
  Have: 0 <= chksum_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (40ms) (179649)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (77)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0010/23_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0010/23_merged.c, line 20):
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = chksum_0 + x.
Let x_2 = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i_1) /\ is_sint32(1 + i_1) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a, 0), x_2) = Mint_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i_1)))).
  (* Invariant *)
  Have: 0 <= chksum_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
}
Prove: exists i_2 : Z.
    (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i)]) /\
    (i_2 <= i_1) /\ (0 <= i_2).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (30ms) (180724)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (16ms) (219)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0010/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0010/23_merged.c, line 21):
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = chksum_0 + x.
Let x_2 = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i) /\ is_sint32(1 + i) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a, 0), x_2) = Mint_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(a, i_1)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (exists i_2 : Z.
       (Mint_0[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i_2)]) /\
       (0 <= i_2) /\ (i_2 < i)))).
  (* Invariant *)
  Have: 0 <= chksum_0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (exists i_2 : Z.
       (Mint_0[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i_2)]) /\
       (i_2 <= i) /\ (0 <= i_2)))).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0010/23_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0010/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0010/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Loop assigns (file out/23_0010/23_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0010/23_merged.c, line 23) (2/2):
Effect at line 27
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0010/23_merged.c:11: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
