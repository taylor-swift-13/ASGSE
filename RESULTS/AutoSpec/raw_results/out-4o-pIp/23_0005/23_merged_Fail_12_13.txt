[kernel] Parsing out/23_0005/23_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 13 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_established (Qed 0.88ms) (Z3)
[wp] Proved goals:   12 / 13
  Qed:               8
  Alt-Ergo 2.5.4:    1 (14ms)
  Z3 4.8.12:         3 (280ms-557ms-930ms)
  Timeout:           1
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 18):
Let x = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i_1) /\ is_sint32(1 + i_1) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(a, i_1)]).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) -> false)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (0 <= chksum_0))).
  (* Invariant *)
  Have: (chksum_0 = 0) \/ (0 < chksum_0).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < x.
}
Prove: exists i_2 : Z.
    (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i)]) /\
    (i_2 <= i_1) /\ (0 <= i_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (14ms) (144)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 18):
Let x = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(x).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < x).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:0.88ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.88ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 19):
Let x = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = chksum_0 + x_1.
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i_1) /\ is_sint32(1 + i_1) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) -> false)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (0 <= chksum_0))).
  (* Invariant *)
  Have: (chksum_0 = 0) \/ (0 < chksum_0).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < x.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (i_3 <= i_1) /\ (0 <= i_3)))).
}
Prove: Mint_0[shift_sint32(a, i)] <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (930ms) (4106702)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 20):
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = chksum_0 + x.
Let x_2 = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i) /\ is_sint32(1 + i) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_2) -> false)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_2) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (0 <= i_3) /\ (i_3 < i)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (Mint_0[shift_sint32(a, i_2)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (0 <= chksum_0))).
  (* Invariant *)
  Have: (chksum_0 = 0) \/ (0 < chksum_0).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_2) ->
      (exists i_3 : Z.
       (Mint_0[shift_sint32(a, i_2)] = Mint_0[shift_sint32(a, i_3)]) /\
       (i_3 <= i) /\ (0 <= i_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= x_1))).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (460ms) (1291899)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 22):
Let a = Mptr_0[shiftfield_F1___CheckCal_pkv(pIp_0)].
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = chksum_0 + x.
Let x_2 = Mint_0[shiftfield_F1___CheckCal_len(pIp_0)].
Assume {
  Type: is_sint32(chksum_0) /\ is_sint32(i) /\ is_sint32(1 + i) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> false)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) ->
      (exists i_2 : Z.
       (Mint_0[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i_2)]) /\
       (0 <= i_2) /\ (i_2 < i)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(a, i_1)] <= chksum_0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (0 <= chksum_0))).
  (* Invariant *)
  Have: (chksum_0 = 0) \/ (0 < chksum_0).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) ->
      (exists i_2 : Z.
       (Mint_0[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i_2)]) /\
       (i_2 <= i) /\ (0 <= i_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (0 <= x_1))).
}
Prove: (x_1 = 0) \/ (0 < x_1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (280ms) (1047443)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Loop assigns (file out/23_0005/23_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0005/23_merged.c:11: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
