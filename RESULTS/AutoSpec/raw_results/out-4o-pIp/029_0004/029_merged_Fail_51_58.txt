[kernel] Parsing out/029_0004/029_merged.c (with preprocessing)
[kernel:typing:no-proto] out/029_0004/029_merged.c:66: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/029_0004/029_merged.c:39: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/029_0004/029_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/029_0004/029_merged.c:4: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 58 goals scheduled
[wp] [Timeout] typed_foo029_loop_invariant_3_preserved (Qed 10ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_4_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_6_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_8_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_12_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_16_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo029_loop_invariant_17_preserved (Qed 15ms) (Z3)
[wp] Proved goals:   51 / 58
  Qed:              48
  Alt-Ergo 2.5.4:    3 (4ms-5ms-7ms)
  Timeout:           7
------------------------------------------------------------
  Function foo029
------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 15):
Let x_2 = -c_1.
Assume {
  Type: is_sint32(b) /\ is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(1 + d) /\ is_sint32(x_1 - c_1) /\ is_sint32(x_1 - d) /\
      is_sint32(1 + x_1 - c_1).
  (* Invariant *)
  Have: x_1 <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: x_1 <= (c_1 + d).
  (* Invariant *)
  Have: c_1 <= d.
  (* Invariant *)
  Have: x_1 <= (2 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= x_1) -> (d <= (c_1 + x_1)))).
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: b <= c.
  (* Invariant *)
  Have: b <= 2.
  (* Invariant *)
  Have: b <= 1.
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (0 <= (b + c)))).
}
Prove: x <= 3.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 16):
Let x_2 = a + c.
Let x_3 = -c_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\
      is_sint32(d_1) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(1 + d_1) /\ is_sint32(x_1 - c_1) /\
      is_sint32(x_1 - d_1) /\ is_sint32(1 + x_1 - c_1) /\
      is_sint32(a + c - d).
  (* Invariant *)
  Have: x_1 <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x_1 <= (c_1 + d_1).
  (* Invariant *)
  Have: c_1 <= d_1.
  (* Invariant *)
  Have: x_1 <= (2 + d_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d_1 + i) <= x_1) ->
      (d_1 <= (c_1 + x_1)))).
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: a <= d.
  (* Invariant *)
  Have: x_2 <= (2 + d).
  (* Invariant *)
  Have: x_2 <= (1 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= x_2) ->
      (d <= (a + (2 * c))))).
  (* Invariant *)
  Have: x <= 3.
}
Prove: x_2 = x.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 18):
Let x_2 = -c_1.
Assume {
  Type: is_sint32(b) /\ is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(1 + d) /\ is_sint32(x - b) /\ is_sint32(x - c) /\
      is_sint32(x_1 - c_1) /\ is_sint32(x_1 - d) /\ is_sint32(1 + x_1 - c_1).
  (* Invariant *)
  Have: x_1 <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: x_1 <= (c_1 + d).
  (* Invariant *)
  Have: c_1 <= d.
  (* Invariant *)
  Have: x_1 <= (2 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= x_1) -> (d <= (c_1 + x_1)))).
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: b <= c.
  (* Invariant *)
  Have: b <= 2.
  (* Invariant *)
  Have: b <= 1.
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (0 <= (b + c)))).
  (* Invariant *)
  Have: x <= 3.
}
Prove: b <= x.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 20):
Let x_1 = b + c.
Let x_2 = -c_1.
Assume {
  Type: is_sint32(b) /\ is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + d) /\ is_sint32(x - c_1) /\ is_sint32(x - d) /\
      is_sint32(y - b) /\ is_sint32(y - c) /\ is_sint32(1 + x - c_1).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: x <= (c_1 + d).
  (* Invariant *)
  Have: c_1 <= d.
  (* Invariant *)
  Have: x <= (2 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= x) -> (d <= (c_1 + x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: b <= c.
  (* Invariant *)
  Have: b <= 2.
  (* Invariant *)
  Have: b <= 1.
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (0 <= x_1))).
  (* Invariant *)
  Have: y <= 3.
  (* Invariant *)
  Have: b <= y.
}
Prove: x_1 <= y.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 23):
Let x_1 = c + y.
Let x_2 = -c_1.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\ is_sint32(d_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + d_1) /\ is_sint32(x - c_1) /\ is_sint32(x - d_1) /\
      is_sint32(y - c) /\ is_sint32(y - d) /\ is_sint32(1 + x - c_1).
  (* Goal *)
  When: (0 <= i) /\ ((d + i) <= y).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x <= (c_1 + d_1).
  (* Invariant *)
  Have: c_1 <= d_1.
  (* Invariant *)
  Have: x <= (2 + d_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((d_1 + i_1) <= x) ->
      (d_1 <= (c_1 + x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: y <= (c + d).
  (* Invariant *)
  Have: y <= (2 + d).
  (* Invariant *)
  Have: y <= (1 + d).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((d + i_1) <= y) -> (d <= x_1))).
  (* Invariant *)
  Have: y <= 3.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: c <= d.
}
Prove: d <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (35624)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 24):
Let x_2 = -c_1.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\ is_sint32(d_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(1 + d_1) /\ is_sint32(x - c) /\ is_sint32(x - d) /\
      is_sint32(x_1 - c_1) /\ is_sint32(x_1 - d_1) /\
      is_sint32(1 + x_1 - c_1).
  (* Invariant *)
  Have: x_1 <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x_1 <= (c_1 + d_1).
  (* Invariant *)
  Have: c_1 <= d_1.
  (* Invariant *)
  Have: x_1 <= (2 + d_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d_1 + i) <= x_1) ->
      (d_1 <= (c_1 + x_1)))).
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: x <= (c + d).
  (* Invariant *)
  Have: x <= (2 + d).
  (* Invariant *)
  Have: x <= (1 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= x) -> (d <= (c + x)))).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: c <= d.
}
Prove: 3 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 28):
Let x_1 = a + d.
Let x_2 = -c.
Assume {
  Type: is_sint32(a) /\ is_sint32(c) /\ is_sint32(d) /\ is_sint32(d_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + d_1) /\ is_sint32(x - c) /\ is_sint32(x - d_1) /\
      is_sint32(y - a) /\ is_sint32(y - d) /\ is_sint32(1 + x - c).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x <= (c + d_1).
  (* Invariant *)
  Have: c <= d_1.
  (* Invariant *)
  Have: x <= (2 + d_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d_1 + i) <= x) -> (d_1 <= (c + x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: y <= (2 + a).
  (* Invariant *)
  Have: a <= d.
  (* Invariant *)
  Have: y <= (2 + d).
  (* Invariant *)
  Have: y <= (1 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= y) -> (x_1 <= (2 * y)))).
  (* Invariant *)
  Have: y <= 3.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: 3 <= y.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 < a.
}
Prove: a <= 3.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 29):
Let x_1 = -c_1.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\ is_sint32(d_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + d_1) /\ is_sint32(x - c_1) /\ is_sint32(x - d_1) /\
      is_sint32(y - c) /\ is_sint32(y - d) /\ is_sint32(1 + x - c_1).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x <= (c_1 + d_1).
  (* Invariant *)
  Have: c_1 <= d_1.
  (* Invariant *)
  Have: x <= (2 + d_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d_1 + i) <= x) -> (d_1 <= (c_1 + x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: y <= (c + d).
  (* Invariant *)
  Have: y <= (2 + d).
  (* Invariant *)
  Have: y <= (1 + d).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((d + i) <= y) -> (d <= (c + y)))).
  (* Invariant *)
  Have: y <= 3.
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: c <= d.
  (* Invariant *)
  Have: 3 <= y.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= c.
}
Prove: d <= 3.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (18ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/029_0004/029_merged.c, line 58):
Let x_1 = a + c.
Let x_2 = a + (2 * c).
Let x_3 = 2 + d.
Let x_4 = -c_1.
Let x_5 = -d.
Assume {
  Type: is_sint32(a) /\ is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(d) /\
      is_sint32(d_1) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(x) /\ is_sint32(c - 1) /\ is_sint32(1 + d_1) /\
      is_sint32(x - c_1) /\ is_sint32(x - d_1) /\ is_sint32(1 + x - c_1) /\
      is_sint32(a + c - d) /\ is_sint32(a + c - 1 - d).
  (* Goal *)
  When: (0 <= i) /\ ((d + i) < x_1).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: c_1 <= 2.
  (* Invariant *)
  Have: 0 <= d_1.
  (* Invariant *)
  Have: x <= (c_1 + d_1).
  (* Invariant *)
  Have: c_1 <= d_1.
  (* Invariant *)
  Have: x <= (2 + d_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((d_1 + i_1) <= x) ->
      (d_1 <= (c_1 + x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: d_1 <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: c <= 2.
  (* Invariant *)
  Have: a <= d.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: x_1 <= (1 + d).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((d + i_1) <= x_1) -> (d <= x_2))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: c <= 3.
  (* Invariant *)
  Have: x_1 <= (3 + d).
}
Prove: x_3 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (36107)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (7ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/029_0004/029_merged.c, line 58):
Let x_1 = a + d.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\
      is_sint32(1 + a) /\ is_sint32(1 + d) /\ is_sint32(x - a) /\
      is_sint32(x - d).
  (* Goal *)
  When: (0 <= i) /\ ((d + i) <= x).
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: x <= (2 + a).
  (* Invariant *)
  Have: 0 <= d.
  (* Invariant *)
  Have: a <= d.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= (2 + d).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((d + i_1) <= x) ->
      (x_1 <= (2 * x)))).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: a <= 3.
  (* Invariant *)
  Have: d <= 3.
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: x_1 <= 6.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (33134)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (26)

------------------------------------------------------------

Goal Assertion (file out/029_0004/029_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/029_0004/029_merged.c, line 32) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/029_0004/029_merged.c, line 32) (2/3):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/029_0004/029_merged.c, line 32) (3/3):
Call Result at line 66
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/029_0004/029_merged.c, line 59) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/029_0004/029_merged.c, line 59) (2/2):
Call Result at line 66
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/029_0004/029_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/029_0004/029_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/029_0004/029_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo029'.
  Callers assumptions might be imprecise.
