[kernel] Parsing out/46_0005/46_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/46_0005/46_merged.c:49: Warning: 
  Body of function main46 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_SendUartDataFun_loop_invariant_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_main46_assert_missing_return (Qed 1ms) (Z3)
[wp] Proved goals:   10 / 12
  Qed:               7
  Alt-Ergo 2.5.4:    3 (10ms-144ms-325ms)
  Timeout:           2
------------------------------------------------------------
  Function SendUartDataFun
------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0005/46_merged.c, line 23):
Let a = shiftfield_F1___SendUartData_len(pIp_0).
Let x = Mint_0[a].
Let a_1 = shiftfield_F1___SendUartData_data(pIp_0).
Let a_2 = shiftfield_F1___SendUartData_addr(pIp_0).
Let x_1 = Mint_1[a].
Let m = Mint_0[shift_sint32(a_2, i) <- Mint_0[shift_sint32(a_1, i)]].
Assume {
  Type: is_sint32(i) /\ is_sint32(1 + i) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(m[a]).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 21).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a_2, 0), x) = Mint_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (Mint_0[shift_sint32(a_1, i_2)] = Mint_0[shift_sint32(a_2, i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x.
}
Prove: m[shift_sint32(a_1, i_1)] = m[shift_sint32(a_2, i_1)].
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0005/46_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0005/46_merged.c, line 24):
Let a = shiftfield_F1___SendUartData_addr(pIp_0).
Let a_1 = shiftfield_F1___SendUartData_data(pIp_0).
Let m = Mint_0[shift_sint32(a, i) <- Mint_0[shift_sint32(a_1, i)]].
Let a_2 = shiftfield_F1___SendUartData_len(pIp_0).
Let x = Mint_0[a_2].
Let x_1 = Mint_1[a_2].
Assume {
  Type: is_sint32(i) /\ is_sint32(1 + i) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(m[a_2]).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 21).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, shift_sint32(a, 0), x) = Mint_0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (Mint_0[shift_sint32(a_1, i_2)] = Mint_0[shift_sint32(a, i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (m[shift_sint32(a_1, i_2)] = m[shift_sint32(a, i_2)]))).
}
Prove: m[shift_sint32(a_1, i_1)] = m[shift_sint32(a, i_1)].
Prover Z3 4.8.12 returns Valid (Qed:4ms) (40ms) (216454)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (10ms) (101)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0005/46_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0005/46_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0005/46_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Loop assigns (file out/46_0005/46_merged.c, line 26) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/46_0005/46_merged.c, line 26) (2/3):
Effect at line 29
Let a = shiftfield_F1___SendUartData_addr(pIp_0).
Let a_1 = shiftfield_F1___SendUartData_data(pIp_0).
Let m = Mint_0[shift_sint32(a, i) <- Mint_0[shift_sint32(a_1, i)]].
Let a_2 = shiftfield_F1___SendUartData_len(pIp_0).
Let x = Mint_0[a_2].
Let a_3 = shift_sint32(a, 0).
Let x_1 = Mint_1[a_2].
Let x_2 = m[a_2].
Assume {
  Type: is_sint32(i) /\ is_sint32(1 + i) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 < x) /\ (!invalid(Malloc_0, a_3, x)).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 21).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, a_3, x) = Mint_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(a_1, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (m[shift_sint32(a_1, i_1)] = m[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: x <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (98ms) (1545)

------------------------------------------------------------

Goal Loop assigns (file out/46_0005/46_merged.c, line 26) (3/3):
Effect at line 31
Let a = shiftfield_F1___SendUartData_addr(pIp_0).
Let x = i - 1.
Let a_1 = shift_sint32(a, x).
Let a_2 = shiftfield_F1___SendUartData_data(pIp_0).
Let m = Mint_0[a_1 <- Mint_0[shift_sint32(a_2, x)]].
Let a_3 = shiftfield_F1___SendUartData_len(pIp_0).
Let x_1 = Mint_0[a_3].
Let a_4 = shift_sint32(a, 0).
Let x_2 = Mint_1[a_3].
Let x_3 = m[a_3].
Assume {
  Type: is_sint32(i) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_1, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 21).
  (* Pre-condition *)
  Have: (0 <= x_2) /\ (x_2 <= 10).
  (* Loop assigns ... *)
  Have: havoc(Mint_undef_0, Mint_1, a_4, x_1) = Mint_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      (Mint_0[shift_sint32(a_2, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (m[shift_sint32(a_2, i_1)] = m[shift_sint32(a, i_1)]))).
}
Prove: included(a_1, 1, a_4, x_3).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (325ms) (5643)

------------------------------------------------------------
------------------------------------------------------------
  Function main46
------------------------------------------------------------

Goal Assertion 'missing_return' (file out/46_0005/46_merged.c, line 57):
Let x = Mint_0[shiftfield_F1___SendUartData_len(pIp_0)].
Assume {
  Type: is_sint32(x).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 21).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/46_0005/46_merged.c, line 14) in 'SendUartDataFun'' in 'main46' at call 'SendUartDataFun' (file out/46_0005/46_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/46_0005/46_merged.c, line 15) in 'SendUartDataFun'' in 'main46' at call 'SendUartDataFun' (file out/46_0005/46_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/46_0005/46_merged.c:17: Warning: 
  No 'assigns' specification for function 'SendUartDataFun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/46_0005/46_merged.c:40: Warning: 
  No 'assigns' specification for function 'main46'.
  Callers assumptions might be imprecise.
