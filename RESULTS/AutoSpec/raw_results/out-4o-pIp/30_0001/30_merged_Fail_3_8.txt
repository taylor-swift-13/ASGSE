[kernel] Parsing out/30_0001/30_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] [Timeout] typed_LimitInt32Fun_ensures_2 (Qed 11ms) (Z3)
[wp] [Timeout] typed_LimitInt32Fun_ensures (Qed 12ms) (Z3)
[wp] [Timeout] typed_LimitInt32Fun_ensures_3 (Qed 14ms) (Z3)
[wp] [Timeout] typed_LimitInt32Fun_ensures_5 (Qed 15ms) (Z3)
[wp] [Timeout] typed_main30_call_LimitInt32Fun_requires_2 (Qed 1ms) (Alt-Ergo)
[wp] Proved goals:    3 / 8
  Qed:               1
  Alt-Ergo 2.5.4:    2 (14ms-17ms)
  Timeout:           5
------------------------------------------------------------
  Function LimitInt32Fun
------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 15) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a_2].
Let x_3 = m[a].
Let x_4 = m[a_1].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(x_2).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: x_2 = x_3.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: x_3 < x_4.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 16) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a_2].
Let x_3 = m[a].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(m[a_1]) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: x_2 = x_1.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: (x_2 <= x_3) /\ (0 <= (x_3 + x_2)).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 17) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a].
Let x_3 = m[a_2].
Let x_4 = m[a_1].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_3).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: (x_2 + x_3) = 0.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: (x_2 + x_4) < 0.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 18) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a].
Let x_3 = m[a_1].
Let x_4 = m[a_2].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: x_2 < x_3.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: x_4 = x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (14ms) (228)

------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 19) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a].
Let x_3 = m[a_1].
Let x_4 = m[a_2].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: (x_2 + x_3) < 0.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: (x_2 + x_4) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/30_0001/30_merged.c, line 20) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_1[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_1[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a_1].
Let x_3 = m[a].
Let x_4 = m[a_2].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_2) /\
      is_sint32(x_4).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: (x_2 <= x_3) /\ (0 <= (x_3 + x_2)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_1[a_2 <- x] = Mint_0. }
  Else {
    If (x + x_1) < 0
    Then { Have: Mint_1[a_2 <- -x] = Mint_0. }
    Else { Have: Mint_1[a_2 <- x_1] = Mint_0. }
  }
}
Prove: x_4 = x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (17ms) (261)

------------------------------------------------------------
------------------------------------------------------------
  Function main30
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/30_0001/30_merged.c, line 13) in 'LimitInt32Fun'' in 'main30' at call 'LimitInt32Fun' (file out/30_0001/30_merged.c, line 48)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/30_0001/30_merged.c, line 14) in 'LimitInt32Fun'' in 'main30' at call 'LimitInt32Fun' (file out/30_0001/30_merged.c, line 48)
:
Assume { (* Heap *) Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0). }
Prove: valid_rw(Malloc_0, pIp_0, 4).
Prover Z3 4.8.12 returns Unknown (Qed:1ms)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------
[wp:pedantic-assigns] out/30_0001/30_merged.c:22: Warning: 
  No 'assigns' specification for function 'LimitInt32Fun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/30_0001/30_merged.c:43: Warning: 
  No 'assigns' specification for function 'main30'.
  Callers assumptions might be imprecise.
