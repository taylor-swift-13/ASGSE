[kernel] Parsing out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_6_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] Proved goals:   28 / 30
  Qed:              21
  Alt-Ergo 2.6.2:    7 (5ms-16ms-30ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 13):
Let x = i / 2.
Let x_1 = -x.
Let x_2 = n - x.
Let x_3 = n % 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(2 + i) /\ is_sint32(x_2) /\
      is_sint32(n - 1 - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_3 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: i <= (2 * n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = (2 * i_1)))).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: x <= (1 + i).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (35382)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 14):
Let x = i / 2.
Let x_1 = k + x.
Let x_2 = -i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k - 1) /\
      is_sint32(2 + i) /\ is_sint32(x_1).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Pre-condition *)
  Have: x_1 <= 2147483647.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((k + x - i) % 2) = 0.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (k % 2) = 0.
  (* Invariant *)
  Have: i <= ((2 * k) + (2 * x)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = (2 * i_1)))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x_1.
  (* Invariant *)
  Have: x <= (1 + i).
}
Prove: ((k + x - 2 - i) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (45269)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (30ms) (427)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 15):
Let x = n % 2.
Let x_1 = -i.
Let x_2 = i / 2.
Let x_3 = -x_2.
Let x_4 = n - x_2.
Let x_5 = 2 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_5) /\ is_sint32(x_4) /\
      is_sint32(n - 1 - x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x_4 % 2) = x.
  (* Invariant *)
  Have: i <= (2 * n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> (x_2 = (2 * i_1)))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 <= (1 + i).
  (* Invariant *)
  Have: ((x = 0) -> (((n - 2 - i) % 2) = 0)).
}
Prove: (x_5 / 2) = (1 + x_2).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (45154)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (20ms) (250)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 18):
Let x = n % 2.
Let x_1 = -i.
Let x_2 = 2 + i.
Let x_3 = x_2 / 2.
Let x_4 = i / 2.
Let x_5 = -x_3.
Let x_6 = 1 + n - x_3.
Let x_7 = n - x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_7) /\
      is_sint32(x_6).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_3 <= (1 + i).
  (* Invariant *)
  Have: ((x = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_3 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_6 % 2) = x.
  (* Invariant *)
  Have: i <= (2 * n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_4) ->
      (x_3 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: x_3 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: ((x = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
}
Prove: (x_7 % 2) = x.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 19):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = k + x_1 - 1.
Let x_3 = x_2 % 2.
Let x_4 = k - 1.
Let x_5 = -i.
Let x_6 = k + x_1.
Let x_7 = i / 2.
Let x_8 = (2 * k) + (2 * x_1).
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(x_4) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: x_6 <= 2147483648.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: x_1 <= (1 + i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (((k + x_1 - 1 - i) % 2) = 0)).
  (* Invariant *)
  Have: x_1 = (1 + x_7).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_3 = (k % 2).
  (* Invariant *)
  Have: x <= x_8.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_7) ->
      (x_1 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((x_3 = 0) -> (((k + x_1 - 3 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x_3 = (x_4 % 2).
}
Prove: (4 + i) <= x_8.
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (36913)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (10ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 19):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: n <= 2147483647. }
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 20):
Let x = 2 + i.
Let x_1 = 2 * n.
Let x_2 = x / 2.
Let x_3 = -x_2.
Let x_4 = n - x_2.
Let x_5 = n % 2.
Let x_6 = -i.
Let x_7 = i / 2.
Let x_8 = 1 + n - x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_8).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_2 <= (1 + i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_2 = (1 + x_7).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_8 % 2) = x_5.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_7) ->
      (x_2 = (1 + (2 * i_2))))).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x_2 = (2 * i_1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (23ms) (285)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 21):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * n.
Let x_3 = -x_1.
Let x_4 = n - x_1.
Let x_5 = n % 2.
Let x_6 = -i.
Let x_7 = i / 2.
Let x_8 = 1 + n - x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= (1 + i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_1 = (1 + x_7).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_8 % 2) = x_5.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_7) ->
      (x_1 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = (2 * i_1)))).
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (37530)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (7ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 22):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * n.
Let x_3 = -x_1.
Let x_4 = n - x_1.
Let x_5 = n % 2.
Let x_6 = -i.
Let x_7 = i / 2.
Let x_8 = 1 + n - x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= (1 + i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_1 = (1 + x_7).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_8 % 2) = x_5.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_7) ->
      (x_1 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((x_5 = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = (2 * i_1)))).
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: (x % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (44947)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (20ms) (311)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
