[kernel] Parsing out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_6_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_established (Qed 0.76ms) (Z3)
[wp] Proved goals:   24 / 26
  Qed:              19
  Alt-Ergo 2.6.2:    5 (4ms-12ms-23ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 13):
Let x = i / 2.
Let x_1 = -x.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(2 + i) /\
      is_sint32(n - x) /\ is_sint32(n - 1 - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: (((n % 2) = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = (2 * i_1)))).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: x <= (1 + i).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (34904)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (4ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 14):
Let x = i / 2.
Let x_1 = k + x.
Let x_2 = -i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k - 1) /\
      is_sint32(2 + i) /\ is_sint32(x_1).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Pre-condition *)
  Have: x_1 <= 2147483647.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((k + x - i) % 2) = 0.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = (2 * i_1)))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < x_1.
  (* Invariant *)
  Have: x <= (1 + i).
}
Prove: ((k + x - 2 - i) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (63475)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (23ms) (336)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 15):
Let x = n % 2.
Let x_1 = -i.
Let x_2 = i / 2.
Let x_3 = 2 + i.
Let x_4 = -x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(n - x_2) /\ is_sint32(n - 1 - x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> (x_2 = (2 * i_1)))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 <= (1 + i).
  (* Invariant *)
  Have: ((x = 0) -> (((n - 2 - i) % 2) = 0)).
}
Prove: (x_3 / 2) = (1 + x_2).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (41126)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (12ms) (185)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 18):
Let x = n % 2.
Let x_1 = -i.
Let x_2 = 2 + i.
Let x_3 = x_2 / 2.
Let x_4 = i / 2.
Let x_5 = -x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(n - x_3) /\ is_sint32(1 + n - x_3).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_3).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_3 <= (1 + i).
  (* Invariant *)
  Have: ((x = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_3 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_4) ->
      (x_3 = (1 + (2 * i_2))))).
  (* Invariant *)
  Have: x_3 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: ((x = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
}
Prove: x_3 = (2 * i_1).
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 19):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = n % 2.
Let x_3 = -i.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= (1 + i).
  (* Invariant *)
  Have: ((x_2 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_4) ->
      (x_1 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((x_2 = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = (2 * i_1)))).
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (36585)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (10ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 19):
Assume { Type: is_sint32(k). (* Pre-condition *) Have: k <= 2147483647. }
Prove: 0 <= k.
Prover Z3 4.8.6 returns Timeout (Qed:0.76ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.76ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 20):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = n % 2.
Let x_3 = -i.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= (1 + i).
  (* Invariant *)
  Have: ((x_2 = 0) -> (((n - i) % 2) = 0)).
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_4) ->
      (x_1 = (1 + (2 * i_1))))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((x_2 = 0) -> (((n - 2 - i) % 2) = 0)).
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = (2 * i_1)))).
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: (x % 2) = 0.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (12ms) (200)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/half_2_true-unreach-call_0003/half_2_true-unreach-call_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
