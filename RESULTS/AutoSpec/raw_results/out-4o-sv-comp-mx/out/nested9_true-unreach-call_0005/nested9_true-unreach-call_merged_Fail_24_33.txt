[kernel] Parsing out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c:16: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c:15: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 33 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_established (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_2_established (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_established (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_established (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_10_established (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_11_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_11_established (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_12_established (Qed 10ms) (Z3)
[wp] Proved goals:   24 / 33
  Qed:              20
  Alt-Ergo 2.6.2:    2 (26ms-28ms)
  Z3 4.8.6:          2 (30ms-40ms)
  Timeout:           9
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 18):
Let x = i + (2 * n).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(n_2) /\ is_sint32(1 + k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (((2 * i_2) <= i_3) -> ((i_3 < (3 * i_2)) ->
       (forall i_4 : Z. (i_2 <= i_4) /\ (i_4 < i_3))))))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: k < x.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (30ms) (38686)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 18):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
}
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 19):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i < n_1.
  (* Then *)
  Have: j < (3 * k).
  (* Invariant *)
  Have: 0 <= n.
}
Prove: k <= j.
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 20):
Let x = i + (2 * n).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(n_2) /\ is_sint32(1 + k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (((2 * i_2) <= i_3) -> ((i_3 < (3 * i_2)) ->
       (forall i_4 : Z. (i_2 <= i_4) /\ (i_4 < i_3))))))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k < x.
}
Prove: (2 + k) <= j.
Prover Z3 4.8.6 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 20):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i < n_1.
  (* Then *)
  Have: j < (3 * k).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: k <= j.
}
Prove: k < j.
Prover Z3 4.8.6 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 24):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
}
Prove: i <= n.
Prover Z3 4.8.6 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 25):
Let x = i + (2 * n).
Let x_1 = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(n_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (((2 * i_2) <= i_3) -> ((i_3 < (3 * i_2)) ->
       (forall i_4 : Z. (i_2 <= i_4) /\ (i_4 < i_3))))))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k < x.
  (* Invariant *)
  Have: (2 + k) <= j.
}
Prove: i <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (30ms) (38647)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (28ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 27):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
}
Prove: i < n.
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 28):
Let x = 1 + k.
Let x_1 = i_3 + (2 * n).
Assume {
  Type: is_sint32(i_3) /\ is_sint32(i_4) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(n_2) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_3) /\ ((2 * i) <= i_2) /\ (i_2 < (3 * i)).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_4 < n_1.
  (* Then *)
  Have: j < (3 * i_3).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_3 <= j.
  (* Invariant *)
  Have: i_3 < j.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_3) ->
      (forall i_6 : Z. (((2 * i_5) <= i_6) -> ((i_6 < (3 * i_5)) ->
       (forall i_7 : Z. (i_5 <= i_7) /\ (i_7 < i_6))))))).
  (* Invariant *)
  Have: (2 * i_3) <= j.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= x_1.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: i_3 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k < x_1.
  (* Invariant *)
  Have: (2 + k) <= j.
  (* Invariant *)
  Have: i_3 <= x.
}
Prove: (i <= i_1) /\ (i_1 < i_2).
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 28):
Assume {
  Type: is_sint32(i_3) /\ is_sint32(i_4) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Goal *)
  When: (0 <= i) /\ (i < i_3) /\ ((2 * i) <= i_2) /\ (i_2 < (3 * i)).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_4 < n_1.
  (* Then *)
  Have: j < (3 * i_3).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_3 <= j.
  (* Invariant *)
  Have: i_3 < j.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 < n.
}
Prove: (i <= i_1) /\ (i_1 < i_2).
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 29):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (((2 * i_2) <= i_3) -> ((i_3 < (3 * i_2)) ->
       (forall i_4 : Z. (i_2 <= i_4) /\ (i_4 < i_3))))))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.6 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 30):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i < n_1.
  (* Then *)
  Have: j < (3 * k).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) ->
      (forall i_2 : Z. (((2 * i_1) <= i_2) -> ((i_2 < (3 * i_1)) ->
       (forall i_3 : Z. (i_1 <= i_3) /\ (i_3 < i_2))))))).
  (* Invariant *)
  Have: (2 * k) <= j.
}
Prove: 0 <= k.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (40ms) (36974)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (26ms) (53)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 32):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(n_2).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_2) /\ (n_2 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Then *)
  Have: (3 * n_2) <= (l + m).
  (* Then *)
  Have: i_1 < n_1.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (((2 * i_2) <= i_3) -> ((i_3 < (3 * i_2)) ->
       (forall i_4 : Z. (i_2 <= i_4) /\ (i_4 < i_3))))))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
}
Prove: 0 <= j.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (40ms) (37055)

------------------------------------------------------------

Goal Preservation of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/nested9_true-unreach-call_0005/nested9_true-unreach-call_merged.c:11: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
