[kernel] Parsing out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:44: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 44 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_6_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_16_established (Qed 3ms) (Z3)
[wp] Proved goals:   42 / 44
  Qed:              33
  Alt-Ergo 2.6.2:    5 (19ms-34ms)
  Z3 4.8.6:          4 (10ms-13ms-20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = -flag_0.
Let x_1 = j - 1.
Let x_2 = to_uint32(1 + j).
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_1).
  (* Residual *)
  When: to_uint32(x_2 % 2) = 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_1 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_2 <= to_uint32(2 + j).
Prover Z3 4.8.6 returns Valid (Qed:12ms) (10ms) (42761)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (24ms) (493)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = -flag_0.
Let x_3 = 1 + i.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_uint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_2 / 2) = 0.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (2 * (i / 2)) = i.
  (* Invariant *)
  Have: (3 * ((i - flag_0) / 2)) = i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: x_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.6 returns Valid (Qed:13ms) (10ms) (38603)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (19ms) (398)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = -flag_0.
Let x_3 = 1 + i.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_uint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_2 / 2) = 0.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (2 * (i / 2)) = i.
  (* Invariant *)
  Have: (3 * ((i - flag_0) / 2)) = i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: x_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_1 = 0.
Prover Z3 4.8.6 returns Valid (Qed:14ms) (51345)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (23ms) (462)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 22):
Let x = to_uint32(1 + j).
Let x_1 = to_uint32(2 + j).
Let x_2 = j - 1.
Let x_3 = -flag_0.
Let x_4 = to_uint32(1 + a).
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_2).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((1 + (2 * (x_2 / 2))) = j) /\
      ((1 + (3 * ((j - 1 - flag_0) / 2))) = j).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (x % 2) = 0.
}
Prove: (x_4 * (x_1 - x)) = x_4.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (26ms) (439)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 23):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + j).
Let x_3 = x_1 - x_2.
Let x_4 = -flag_0.
Let x_5 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_5).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_4 / 2) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_5 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x_3) = x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (x * x_3 * x_3) = x.
}
Prove: (x / 2) = x.
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 25):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(1 + j).
Let x_2 = to_uint32(2 + j).
Let x_3 = x_2 - x_1.
Let x_4 = -flag_0.
Let x_5 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_5) /\ is_uint32((x * x_3 * x_3) / 2).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_4 / 2) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_5 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x_3) = x.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (x / 2) = x.
}
Prove: 0 < x_2.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (46386)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 29):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + j).
Let x_3 = x_1 - x_2.
Let x_4 = x * x_3 * x_3.
Let x_5 = -flag_0.
Let x_6 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_6) /\ is_uint32(x_4 / 2).
  (* Goal *)
  When: (x_2 % 2) = 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_5 / 2) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_6 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x_3) = x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x / 2) = x.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (-1) <= x_4.
}
Prove: (1 + (2 * (x_2 / 2))) = x_1.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (50891)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 31):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(1 + j).
Let x_2 = 2 * (x_1 / 2).
Let x_3 = 1 + x_2 - x_1.
Let x_4 = x * x_3 * x_3.
Let x_5 = 1 + x_2.
Let x_6 = -flag_0.
Let x_7 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_4 / 2).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_6 / 2) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_7 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x_3) = x.
  Have: x_5 = to_uint32(2 + j).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: (x / 2) = x.
  (* Invariant *)
  Have: (-1) <= x_4.
}
Prove: x_1 <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (45780)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 32):
Let x = to_uint32(1 + j).
Let x_1 = 2 * (x / 2).
Let x_2 = to_uint32(1 + a).
Let x_3 = 1 + x_1 - x.
Let x_4 = x_2 * x_3 * x_3.
Let x_5 = 1 + x_1.
Let x_6 = -flag_0.
Let x_7 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_4 / 2).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_6 / 2) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_7 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_2 * x_3) = x_2.
  Have: x_5 = to_uint32(2 + j).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: (x_2 / 2) = x_2.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x_1 = x.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (20ms) (40392)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 33):
Let x = to_uint32(1 + j).
Let x_1 = to_uint32(1 + a).
Let x_2 = 1 + x.
Let x_3 = -flag_0.
Let x_4 = j - 1.
Assume {
  Type: is_uint32(a) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_4) /\ is_uint32(x_2).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (a / 2) = a.
  (* Invariant *)
  Have: flag_0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (1 + (2 * (x_4 / 2))) = j.
  (* Invariant *)
  Have: (1 + (3 * ((j - 1 - flag_0) / 2))) = j.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(2 + j).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: (x_1 / 2) = x_1.
  (* Invariant *)
  Have: (2 * (x / 2)) = x.
}
Prove: (3 * ((x - flag_0) / 2)) = x.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (55069)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (34ms) (975)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 33):
Let x = i % 2.
Assume {
  Type: is_uint32(i) /\ is_sint32(flag_0).
  If flag_0 != 0
  Then { Have: i = 0. }
  Else { Have: i = 1. }
  (* Invariant *)
  Have: i <= 1.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x = 0) -> ((i / 2) = 0)).
  (* Invariant *)
  Have: ((x = 0) -> (i <= 0)).
  (* Invariant *)
  Have: ((i = 0) /\ (x = 0)) \/ ((i = 1) /\ (x = 1)).
}
Prove: (x = 0) /\ (((i - flag_0) / 2) = 0).
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 39) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 39) (2/2):
Call Result at line 44
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
