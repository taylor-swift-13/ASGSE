[kernel] Parsing out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:36: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_8_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_9_preserved (Qed 32ms) (Alt-Ergo)
[wp] [Timeout] typed_foo_loop_invariant_12_preserved (Qed 23ms) (Z3)
[wp] Proved goals:   23 / 28
  Qed:              22
  Alt-Ergo 2.6.2:    1 (32ms)
  Timeout:           5
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = 1 + i.
Let x_2 = i_1 % 2.
Let x_3 = to_uint32(2 + i) % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((i_1 = 0) /\ (x_2 = 0)) \/ ((i_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((i_1 = 0) \/ (i_1 = 1))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> (i < j)).
  (* Invariant *)
  Have: ((j = i) /\ (x = 1)) \/ ((x = 0) /\ (x_1 = j)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x != 0) -> ((j = i) \/ (x_1 = j))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (38260)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (32ms) (715)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i) % 2.
Let x_1 = i % 2.
Let x_2 = 1 + i.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_1 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((j = i) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ (x_2 = j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> ((j = i) \/ (x_2 = j))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
}
Prove: to_uint32(a + to_uint32(j - i)) = to_uint32(1 + a).
Prover Z3 4.8.6 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 24):
Let x = i % 2.
Let x_1 = 1 + i.
Let x_2 = i_1 % 2.
Let x_3 = to_uint32(2 + i).
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  (* Goal *)
  When: (x_3 % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((i_1 = 0) /\ (x_2 = 0)) \/ ((i_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((i_1 = 0) \/ (i_1 = 1))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> (i < j)).
  (* Invariant *)
  Have: ((j = i) /\ (x = 1)) \/ ((x = 0) /\ (x_1 = j)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x != 0) -> ((j = i) \/ (x_1 = j))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) ->
      (to_uint32(b + to_uint32(j - i)) = to_uint32(1 + a))).
}
Prove: x_3 <= to_uint32(2 + j).
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 25):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(2 + j).
Let x_2 = i % 2.
Let x_3 = 1 + i.
Let x_4 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  (* Goal *)
  When: (x % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((i_1 = 0) /\ (x_4 = 0)) \/ ((i_1 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> ((i_1 = 0) \/ (i_1 = 1))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((j = i) /\ (x_2 = 1)) \/ ((x_2 = 0) /\ (x_3 = j)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j = i) \/ (x_3 = j))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) ->
      (to_uint32(b + to_uint32(j - i)) = to_uint32(1 + a))).
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x < x_1.
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 26):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = 1 + i.
Let x_4 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_uint32(j_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((i_1 = 0) /\ (x_4 = 0)) \/ ((i_1 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> ((i_1 = 0) \/ (i_1 = 1))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i < j_1)).
  (* Invariant *)
  Have: ((j_1 = i) /\ (x_2 = 1)) \/ ((x_2 = 0) /\ (x_3 = j_1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j_1 = i) \/ (x_3 = j_1))).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) ->
      (to_uint32(b + to_uint32(j_1 - i)) = to_uint32(1 + a))).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x < j)).
}
Prove: ((x = j) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
Prover Z3 4.8.6 returns Unknown (Qed:32ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:32ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = 1 + x.
Let x_3 = i % 2.
Let x_4 = 1 + i.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_3 = 1)) \/ ((x_3 = 0) /\ (x_4 = j_3)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_3 != 0) -> ((j_3 = i) \/ (x_4 = j_3))).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x < j)).
  (* Invariant *)
  Have: ((x = j) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ (x_2 = j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x <= j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> ((x = j) \/ (x_2 = j))).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c, line 31) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0001/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
