[kernel] Parsing out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:38: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 19ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_2_established (Qed 3ms) (Z3)
[wp] Proved goals:   29 / 32
  Qed:              22
  Alt-Ergo 2.6.2:    4 (15ms-27ms-54ms)
  Z3 4.8.6:          3 (10ms-527ms-1.5s)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = to_uint32(2 + i).
Let x_1 = i % 2.
Let x_2 = j % 2.
Let x_3 = j - i.
Let x_4 = -j.
Let x_5 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_5).
  (* Invariant *)
  Have: (x_3 * x_5) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_1 != 0)) \/ ((x_1 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 != 0) /\ (x_2 != 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_2 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
}
Prove: (to_uint32(1 + b + i - j) * (j_1 - x)) = to_uint32(b + to_uint32(x_3)).
Prover Z3 4.8.6 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = -j.
Let x_2 = to_uint32(1 + b + i - j).
Let x_3 = x_2 * (j_1 - x).
Let x_4 = j - i.
Let x_5 = i % 2.
Let x_6 = j % 2.
Let x_7 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (x_4 * x_7) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_5 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_5 != 0)) \/ ((x_5 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 != 0) /\ (x_6 != 0)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_6 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(b + to_uint32(x_4)).
  If to_uint32(x % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
}
Prove: (x + x_3) = (j_1 + x_2).
Prover Z3 4.8.6 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 19):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 20):
Let x = -j.
Let x_1 = to_uint32(1 + b + i - j).
Let x_2 = j - i.
Let x_3 = to_uint32(b + to_uint32(x_2)).
Let x_4 = -x_1.
Let x_5 = to_uint32(2 + i).
Let x_6 = i % 2.
Let x_7 = j % 2.
Let x_8 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(x_5 + x_3 - x_1).
  (* Invariant *)
  Have: (x_2 * x_8) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_6 != 0)) \/ ((x_6 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 != 0) /\ (x_7 != 0)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_5 % 2) = 0
  Then { Have: (x_5 + x_3) = (to_uint32(2 + j) + x_1). }
  Else { Have: (x_5 + x_3) = (to_uint32(1 + j) + x_1). }
  (* Invariant *)
  Have: (x_1 * (x_3 - x_1)) = x_3.
}
Prove: x_1 < (x_5 + x_3).
Prover Z3 4.8.6 returns Valid (Qed:15ms) (110ms) (1042976)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 26):
Let x = j - i.
Let x_1 = to_uint32(b + to_uint32(x)).
Let x_2 = to_uint32(2 + j).
Let x_3 = -j.
Let x_4 = to_uint32(1 + b + i - j).
Let x_5 = x_2 + x_4.
Let x_6 = i % 2.
Let x_7 = j % 2.
Let x_8 = b + i - j.
Let x_9 = x_2 + x_4 - x_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(x_9).
  (* Goal *)
  When: (x_9 % 2) = 0.
  (* Invariant *)
  Have: (x * x_8) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_6 != 0)) \/ ((x_6 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 != 0) /\ (x_7 != 0)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (to_uint32(2 + i) + x_1) = x_5.
  (* Invariant *)
  Have: (x_4 * (x_1 - x_4)) = x_1.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_1 <= x_5.
}
Prove: (2 + (2 * (x_9 / 2))) = x_2.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (52329)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 27):
Let x = to_uint32(2 + i).
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 + x_2.
Let x_4 = j - i.
Let x_5 = to_uint32(b + to_uint32(x_4)).
Let x_6 = x + x_5.
Let x_7 = x + x_5 - 2 - x_2.
Let x_8 = -j.
Let x_9 = i % 2.
Let x_10 = j % 2.
Let x_11 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_3) /\ is_uint32(x_7).
  (* Goal *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: (x_4 * x_11) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_9 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_9 != 0)) \/ ((x_9 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 != 0) /\ (x_10 != 0)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = (2 + to_uint32(1 + b + i - j) + x_2).
  Have: x_3 = to_uint32(2 + j).
  (* Invariant *)
  Have: ((2 + x_2 - x) * x_7) = x_5.
  (* Invariant *)
  Have: x_3 <= x_6.
}
Prove: (x_3 % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (20ms) (48576)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (16ms) (1246)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 28):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - i.
Let x_3 = to_uint32(b + to_uint32(x_2)).
Let x_4 = -j.
Let x_5 = to_uint32(1 + b + i - j).
Let x_6 = -x_5.
Let x_7 = x + x_3 - x_5.
Let x_8 = x + x_3.
Let x_9 = i % 2.
Let x_10 = j % 2.
Let x_11 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_7).
  (* Invariant *)
  Have: (x_2 * x_11) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_9 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_9 != 0)) \/ ((x_9 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 != 0) /\ (x_10 != 0)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_8 = (to_uint32(2 + j) + x_5). }
  Else { Have: x_8 = (to_uint32(1 + j) + x_5). }
  (* Invariant *)
  Have: (x_5 * (x_3 - x_5)) = x_3.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_8 = (2 + x_5 + (2 * (x / 2))))).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((x_7 % 2) = 0)).
}
Prove: ((x_1 = 0) /\ ((1 + x_5) = x_3)) \/ ((x_1 != 0) /\ (x_3 = x_5)).
Prover Z3 4.8.6 returns Valid (Qed:21ms) (1.5s) (32622647)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = -j.
Let x_3 = to_uint32(1 + b + i - j).
Let x_4 = j - i.
Let x_5 = to_uint32(b + to_uint32(x_4)).
Let x_6 = -x_3.
Let x_7 = x + x_5 - x_3.
Let x_8 = x_7 % 2.
Let x_9 = x + x_5.
Let x_10 = i % 2.
Let x_11 = j % 2.
Let x_12 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_12) /\ is_uint32(x_7).
  (* Invariant *)
  Have: (x_4 * x_12) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_10 != 0)) \/ ((x_10 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 != 0) /\ (x_11 != 0)).
  (* Invariant *)
  Have: ((x_10 != 0) -> (x_11 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_9 = (to_uint32(2 + j) + x_3). }
  Else { Have: x_9 = (to_uint32(1 + j) + x_3). }
  (* Invariant *)
  Have: (x_3 * (x_5 - x_3)) = x_5.
  (* Invariant *)
  Have: x_3 < x_9.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_9 = (2 + x_3 + (2 * (x / 2))))).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ ((1 + x_3) = x_5)) \/ ((x_1 != 0) /\ (x_5 = x_3)).
}
Prove: ((x_1 = 0) /\ (x_8 = 0)) \/ ((x_1 = 1) /\ (x_8 = 1)).
Prover Z3 4.8.6 returns Valid (Qed:23ms) (20ms) (52794)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:23ms) (54ms) (6947)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - i.
Let x_3 = to_uint32(b + to_uint32(x_2)).
Let x_4 = -j.
Let x_5 = to_uint32(1 + b + i - j).
Let x_6 = -x_5.
Let x_7 = x + x_3 - x_5.
Let x_8 = x_7 % 2.
Let x_9 = x + x_3.
Let x_10 = i % 2.
Let x_11 = j % 2.
Let x_12 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_12) /\ is_uint32(x_7).
  (* Invariant *)
  Have: (x_2 * x_12) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_10 != 0)) \/ ((x_10 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 != 0) /\ (x_11 != 0)).
  (* Invariant *)
  Have: ((x_10 != 0) -> (x_11 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_9 = (to_uint32(2 + j) + x_5). }
  Else { Have: x_9 = (to_uint32(1 + j) + x_5). }
  (* Invariant *)
  Have: (x_5 * (x_3 - x_5)) = x_3.
  (* Invariant *)
  Have: x_5 < x_9.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_9 = (2 + x_5 + (2 * (x / 2))))).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ ((1 + x_5) = x_3)) \/ ((x_1 != 0) /\ (x_3 = x_5)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_8 = 0)) \/ ((x_1 = 1) /\ (x_8 = 1)).
}
Prove: ((x_1 = 0) /\ (x_8 = 0)) \/ ((x_1 != 0) /\ (x_8 != 0)).
Prover Z3 4.8.6 returns Valid (Qed:21ms) (10ms) (46586)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (24ms) (1522)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 32):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - i.
Let x_3 = to_uint32(b + to_uint32(x_2)).
Let x_4 = -j.
Let x_5 = to_uint32(1 + b + i - j).
Let x_6 = -x_5.
Let x_7 = x + x_3 - x_5.
Let x_8 = x_7 % 2.
Let x_9 = x + x_3.
Let x_10 = i % 2.
Let x_11 = j % 2.
Let x_12 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_12) /\ is_uint32(x_7).
  (* Invariant *)
  Have: (x_2 * x_12) = b.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((2 + (2 * (i / 2))) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_10 != 0)) \/ ((x_10 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (x_11 = 0)) \/ ((x_10 != 0) /\ (x_11 != 0)).
  (* Invariant *)
  Have: ((x_10 != 0) -> (x_11 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_9 = (to_uint32(2 + j) + x_5). }
  Else { Have: x_9 = (to_uint32(1 + j) + x_5). }
  (* Invariant *)
  Have: (x_5 * (x_3 - x_5)) = x_3.
  (* Invariant *)
  Have: x_5 < x_9.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_9 = (2 + x_5 + (2 * (x / 2))))).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ ((1 + x_5) = x_3)) \/ ((x_1 != 0) /\ (x_3 = x_5)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_8 = 0)) \/ ((x_1 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_8 = 0)) \/ ((x_1 != 0) /\ (x_8 != 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_8 != 0)).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Valid (Qed:21ms) (20ms) (43767)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (15ms) (760)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0002/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
