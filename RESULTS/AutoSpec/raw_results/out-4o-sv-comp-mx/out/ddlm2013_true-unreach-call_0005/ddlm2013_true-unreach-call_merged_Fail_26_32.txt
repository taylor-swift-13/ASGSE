[kernel] Parsing out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c:38: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_established (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_preserved (Qed 24ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_11_preserved (Qed 24ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_10_established (Qed 3ms) (Z3)
[wp] Proved goals:   26 / 32
  Qed:              21
  Alt-Ergo 2.6.2:    5 (13ms-29ms)
  Timeout:           6
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = j % 2.
Let x_2 = j - i.
Let x_3 = a * x_2.
Let x_4 = x_3 / x_2.
Let x_5 = to_uint32(2 + i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_4).
  (* Goal *)
  When: (x_5 % 2) = 0.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: x_4 = (x_3 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x = 1)) \/ ((x = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_1 = 0)) \/ ((x = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_1 = 0)) \/ ((x != 0) /\ (x_1 != 0)).
  (* Invariant *)
  Have: ((x != 0) -> (x_1 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_5 <= to_uint32(2 + j).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (45306)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (20ms) (804)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = j_1 % 2.
Let x_4 = j_1 - i.
Let x_5 = a * x_4.
Let x_6 = x_5 / x_4.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: x_6 = (x_5 / 2).
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((j_1 = i) /\ (x_2 = 1)) \/ ((x_2 = 0) /\ ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 != 0) /\ (x_3 != 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
}
Prove: ((to_uint32(1 + a) * (j - x)) / 2) = to_uint32(to_uint32(x_4) + x_6).
Prover Z3 4.8.6 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - x.
Let x_3 = to_uint32(1 + a) * x_2.
Let x_4 = x_3 / 2.
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = x_6 / x_5.
Let x_8 = i % 2.
Let x_9 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_7) /\ is_uint32(x_4).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_7 = (x_6 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_8 = 1)) \/ ((x_8 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 != 0) /\ (x_9 != 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_7).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
}
Prove: (x_3 / x_2) = x_4.
Prover Z3 4.8.6 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: (0 / 0) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 21):
Let x = to_uint32(2 + i).
Let x_1 = j - x.
Let x_2 = to_uint32(1 + a) * x_1.
Let x_3 = x_2 / x_1.
Let x_4 = x % 2.
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = x_6 / x_5.
Let x_8 = i % 2.
Let x_9 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_7) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_7 = (x_6 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_8 = 1)) \/ ((x_8 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 != 0) /\ (x_9 != 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_5) + x_7).
  If to_uint32(x_4) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_4 = 0) -> (x <= j)).
  (* Invariant *)
  Have: x_3 = (x_2 / 2).
}
Prove: 0 < j.
Prover Z3 4.8.6 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 27):
Let x = to_uint32(2 + j).
Let x_1 = to_uint32(2 + i).
Let x_2 = x - x_1.
Let x_3 = to_uint32(1 + a) * x_2.
Let x_4 = x_3 / x_2.
Let x_5 = j - i.
Let x_6 = a * x_5.
Let x_7 = x_6 / x_5.
Let x_8 = i % 2.
Let x_9 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_7) /\ is_uint32(x_4).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i <= j)).
  (* Invariant *)
  Have: x_7 = (x_6 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((j = i) /\ (x_8 = 1)) \/ ((x_8 = 0) /\ ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 != 0) /\ (x_9 != 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_7).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_4 = (x_3 / 2).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 <= x_4.
}
Prove: (x % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (55015)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (29ms) (3272)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 27):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 28):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - x.
Let x_3 = to_uint32(1 + a) * x_2.
Let x_4 = x_3 / x_2.
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = x_6 / x_5.
Let x_8 = i % 2.
Let x_9 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_7) /\ is_uint32(x_4).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_7 = (x_6 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_8 = 1)) \/ ((x_8 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 != 0) /\ (x_9 != 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_7).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: x_4 = (x_3 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((j % 2) = 0)).
}
Prove: ((x = j) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
Prover Z3 4.8.6 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = j - x.
Let x_4 = to_uint32(1 + a) * x_3.
Let x_5 = x_4 / x_3.
Let x_6 = j_3 - i.
Let x_7 = a * x_6.
Let x_8 = x_7 / x_6.
Let x_9 = i % 2.
Let x_10 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(x_5).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_9 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_8 = (x_7 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_9 = 1)) \/ ((x_9 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 != 0) /\ (x_10 != 0)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_5 = to_uint32(to_uint32(x_6) + x_8).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: x_5 = (x_4 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((x = j) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
}
Prove: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 = 1) /\ (x_1 = 1)).
Prover Z3 4.8.6 returns Valid (Qed:21ms) (10ms) (49220)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (13ms) (717)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 30):
Let x = j % 2.
Let x_1 = to_uint32(2 + i).
Let x_2 = x_1 % 2.
Let x_3 = j - x_1.
Let x_4 = to_uint32(1 + a) * x_3.
Let x_5 = x_4 / x_3.
Let x_6 = j_3 - i.
Let x_7 = a * x_6.
Let x_8 = x_7 / x_6.
Let x_9 = i % 2.
Let x_10 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(x_5).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_9 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_8 = (x_7 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_9 = 1)) \/ ((x_9 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 != 0) /\ (x_10 != 0)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_5 = to_uint32(to_uint32(x_6) + x_8).
  If to_uint32(x_2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: x_5 = (x_4 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((x_2 = 0) -> (x = 0)).
  (* Invariant *)
  Have: ((x_1 = j) /\ (x_2 = 1)) \/ ((x_2 = 0) /\ ((1 + x_1) = j)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_2 = 0)) \/ ((x = 1) /\ (x_2 = 1)).
}
Prove: ((x = 0) /\ (x_2 = 0)) \/ ((x != 0) /\ (x_2 != 0)).
Prover Z3 4.8.6 returns Valid (Qed:22ms) (20ms) (49532)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (14ms) (780)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 32):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = j - x.
Let x_4 = to_uint32(1 + a) * x_3.
Let x_5 = x_4 / x_3.
Let x_6 = j_3 - i.
Let x_7 = a * x_6.
Let x_8 = x_7 / x_6.
Let x_9 = i % 2.
Let x_10 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(x_5).
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: ((x_9 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: x_8 = (x_7 / 2).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((j_3 = i) /\ (x_9 = 1)) \/ ((x_9 = 0) /\ ((1 + i) = j_3)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 != 0) /\ (x_10 != 0)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_5 = to_uint32(to_uint32(x_6) + x_8).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: x_5 = (x_4 / 2).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((x = j) /\ (x_1 = 1)) \/ ((x_1 = 0) /\ ((1 + x) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 != 0) /\ (x_1 != 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_2 != 0)).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Valid (Qed:19ms) (10ms) (45097)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (27ms) (2698)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0005/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
