[kernel] Parsing out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 61 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_4_preserved (Qed 7ms) (Z3)
[wp] Proved goals:   60 / 61
  Qed:              47
  Alt-Ergo 2.6.2:   12 (3ms-33ms)
  Z3 4.8.6:          1 (10ms)
  Timeout:           1
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 15):
Let x = (i - 1) / 2.
Let x_1 = i + x.
Let x_2 = -x.
Assume {
  Type: is_sint32(i) /\ is_sint32(2 + i) /\ is_sint32(9 - x) /\
      is_sint32(10 - x).
  (* Goal *)
  When: i <= 20.
  (* Invariant *)
  Have: i <= (1 + (2 * x)).
  (* Invariant *)
  Have: ((10 + i - x) % 2) = 1.
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 24).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: x_1 <= (12 + (2 * ((10 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (12 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= (1 + i).
  (* Invariant *)
  Have: x < i.
  (* Invariant *)
  Have: x <= (9 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: x_1 <= 10.
}
Prove: ((11 + i - x) % 2) = 1.
Prover Z3 4.8.6 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 16):
Let x = (i - 1) / 2.
Let x_1 = -x.
Let x_2 = 2 + i.
Let x_3 = i + x.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_2) /\ is_sint32(9 - x) /\
      is_sint32(10 - x).
  (* Invariant *)
  Have: i <= (1 + (2 * x)).
  (* Invariant *)
  Have: ((10 + i - x) % 2) = 1.
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 24).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: x_3 <= 12.
  (* Invariant *)
  Have: x_3 <= (12 + (2 * ((10 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (12 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_3 <= 11.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x < i.
  (* Invariant *)
  Have: x <= (9 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: x_3 <= 10.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((11 + i - x) % 2) = 1)).
}
Prove: (x_4 / 2) = (1 + x).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (44544)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (19ms) (290)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 21):
Let x = (1 + i) / 2.
Let x_1 = i + x.
Let x_2 = -x.
Let x_3 = 2 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_3) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Invariant *)
  Have: i < (2 * x).
  (* Invariant *)
  Have: ((11 + i - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: x <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_3 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_1.
}
Prove: i <= (9 + x).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (37608)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (3ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 22):
Let x = (1 + i) / 2.
Let x_1 = i + x.
Let x_2 = -x.
Let x_3 = 2 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_3) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Invariant *)
  Have: i < (2 * x).
  (* Invariant *)
  Have: ((11 + i - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: x <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_3 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_1.
  (* Invariant *)
  Have: i <= (9 + x).
}
Prove: (21 <= i) \/ (x_1 <= 10).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (43624)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (23ms) (757)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 23):
Let x = (1 + i) / 2.
Let x_1 = i + x.
Let x_2 = -x.
Let x_3 = 2 + i.
Let x_4 = -i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_3) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Invariant *)
  Have: i < (2 * x).
  (* Invariant *)
  Have: ((11 + i - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: x <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_3 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_1.
  (* Invariant *)
  Have: i <= (9 + x).
  (* Invariant *)
  Have: (21 <= i) \/ (x_1 <= 10).
}
Prove: x_1 <= (10 + (2 * ((8 - i - x) / 2))).
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (53926)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (28ms) (335)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 25):
Let x = (1 + i) / 2.
Let x_1 = i + x.
Let x_2 = -i.
Let x_3 = -x.
Let x_4 = 2 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_4) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Invariant *)
  Have: i < (2 * x).
  (* Invariant *)
  Have: ((11 + i - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: x <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_1.
  (* Invariant *)
  Have: i <= (9 + x).
  (* Invariant *)
  Have: (21 <= i) \/ (x_1 <= 10).
  (* Invariant *)
  Have: x_1 <= (10 + (2 * ((8 - i - x) / 2))).
}
Prove: i <= 9.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (38138)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (3ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 26):
Let x = (1 + i) / 2.
Let x_1 = i + x.
Let x_2 = -i.
Let x_3 = -x.
Let x_4 = 2 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_4) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Invariant *)
  Have: i < (2 * x).
  (* Invariant *)
  Have: ((11 + i - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i - x) / 2))).
  (* Invariant *)
  Have: i <= (11 + x).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: x <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_1.
  (* Invariant *)
  Have: i <= (9 + x).
  (* Invariant *)
  Have: (21 <= i) \/ (x_1 <= 10).
  (* Invariant *)
  Have: x_1 <= (10 + (2 * ((8 - i - x) / 2))).
  (* Invariant *)
  Have: i <= 9.
}
Prove: x_1 <= 9.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (46056)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (26ms) (879)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 27):
Let x = (1 + i_1) / 2.
Let x_1 = i_1 + x.
Let x_2 = -i_1.
Let x_3 = -x.
Let x_4 = 2 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(x_4) /\ is_sint32(10 - x) /\
      is_sint32(11 - x).
  (* Goal *)
  When: (0 < i) /\ (i <= x_4).
  (* Invariant *)
  Have: i_1 < (2 * x).
  (* Invariant *)
  Have: ((11 + i_1 - x) % 2) = 1.
  (* Invariant *)
  Have: x = (1 + ((i_1 - 1) / 2)).
  (* Invariant *)
  Have: (0 < i_1) /\ (i_1 <= 24).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: i_1 <= (10 + x).
  (* Invariant *)
  Have: x_1 <= 13.
  (* Invariant *)
  Have: x_1 <= (13 + (2 * ((11 - i_1 - x) / 2))).
  (* Invariant *)
  Have: i_1 <= (11 + x).
  (* Invariant *)
  Have: i_1 <= 11.
  (* Invariant *)
  Have: x_1 <= 12.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) -> ((i_2 % 2) = 1))).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= i_1.
  (* Invariant *)
  Have: x <= (10 + i_1).
  (* Invariant *)
  Have: ((i_1 % 2) = 1) /\ (i_1 <= 22).
  (* Then *)
  Have: x_1 <= 11.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) \/ (i_1 <= 20).
  (* Invariant *)
  Have: ((i_1 <= 20) -> (((12 + i_1 - x) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i_1.
  (* Invariant *)
  Have: ((21 <= i_1) -> (9 <= i_1)).
  (* Invariant *)
  Have: (-2) <= x_1.
  (* Invariant *)
  Have: i_1 <= (9 + x).
  (* Invariant *)
  Have: (21 <= i_1) \/ (x_1 <= 10).
  (* Invariant *)
  Have: x_1 <= (10 + (2 * ((8 - i_1 - x) / 2))).
  (* Invariant *)
  Have: i_1 <= 9.
  (* Invariant *)
  Have: x_1 <= 9.
}
Prove: (i % 2) = 1.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (20ms) (50031)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (33ms) (388)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 28):
Let x = 2 + i_1.
Let x_1 = (1 + i_1) / 2.
Let x_2 = i_1 + x_1.
Let x_3 = -i_1.
Let x_4 = -x_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(x) /\ is_sint32(10 - x_1) /\
      is_sint32(11 - x_1).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Invariant *)
  Have: i_1 < (2 * x_1).
  (* Invariant *)
  Have: ((11 + i_1 - x_1) % 2) = 1.
  (* Invariant *)
  Have: x_1 = (1 + ((i_1 - 1) / 2)).
  (* Invariant *)
  Have: (0 < i_1) /\ (i_1 <= 24).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: i_1 <= (10 + x_1).
  (* Invariant *)
  Have: x_2 <= 13.
  (* Invariant *)
  Have: x_2 <= (13 + (2 * ((11 - i_1 - x_1) / 2))).
  (* Invariant *)
  Have: i_1 <= (11 + x_1).
  (* Invariant *)
  Have: i_1 <= 11.
  (* Invariant *)
  Have: x_2 <= 12.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) -> ((i_2 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: x_1 <= (10 + i_1).
  (* Invariant *)
  Have: ((i_1 % 2) = 1) /\ (i_1 <= 22).
  (* Then *)
  Have: x_2 <= 11.
  (* Invariant *)
  Have: ((x % 2) = 1) \/ (i_1 <= 20).
  (* Invariant *)
  Have: ((i_1 <= 20) -> (((12 + i_1 - x_1) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i_1.
  (* Invariant *)
  Have: ((21 <= i_1) -> (9 <= i_1)).
  (* Invariant *)
  Have: (-2) <= x_2.
  (* Invariant *)
  Have: i_1 <= (9 + x_1).
  (* Invariant *)
  Have: (21 <= i_1) \/ (x_2 <= 10).
  (* Invariant *)
  Have: x_2 <= (10 + (2 * ((8 - i_1 - x_1) / 2))).
  (* Invariant *)
  Have: i_1 <= 9.
  (* Invariant *)
  Have: x_2 <= 9.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= x) -> ((i_2 % 2) = 1))).
}
Prove: (i % 2) = 1.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (41784)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (29ms) (390)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 29):
Let x = 2 + i.
Let x_1 = (1 + i) / 2.
Let x_2 = i + x_1.
Let x_3 = -i.
Let x_4 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(x) /\ is_sint32(10 - x_1) /\
      is_sint32(11 - x_1).
  (* Invariant *)
  Have: i < (2 * x_1).
  (* Invariant *)
  Have: ((11 + i - x_1) % 2) = 1.
  (* Invariant *)
  Have: x_1 = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: i <= (10 + x_1).
  (* Invariant *)
  Have: x_2 <= 13.
  (* Invariant *)
  Have: x_2 <= (13 + (2 * ((11 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= (11 + x_1).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_2 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_1 <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_2 <= 11.
  (* Invariant *)
  Have: ((x % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x_1) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_2.
  (* Invariant *)
  Have: i <= (9 + x_1).
  (* Invariant *)
  Have: (21 <= i) \/ (x_2 <= 10).
  (* Invariant *)
  Have: x_2 <= (10 + (2 * ((8 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: x_2 <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) -> ((i_1 % 2) = 1))).
}
Prove: x_1 <= (3 + i).
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (38813)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (9ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 30):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 + i.
Let x_3 = i + x_1.
Let x_4 = -i.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_2) /\ is_sint32(10 - x_1) /\
      is_sint32(11 - x_1).
  (* Invariant *)
  Have: i < (2 * x_1).
  (* Invariant *)
  Have: ((11 + i - x_1) % 2) = 1.
  (* Invariant *)
  Have: x_1 = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: i <= (10 + x_1).
  (* Invariant *)
  Have: x_3 <= 13.
  (* Invariant *)
  Have: x_3 <= (13 + (2 * ((11 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= (11 + x_1).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_3 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_1 <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_3 <= 11.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x_1) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_3.
  (* Invariant *)
  Have: i <= (9 + x_1).
  (* Invariant *)
  Have: (21 <= i) \/ (x_3 <= 10).
  (* Invariant *)
  Have: x_3 <= (10 + (2 * ((8 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: x_3 <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x_2) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= (3 + i).
}
Prove: x_1 <= x.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (38931)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (10ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 32):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 + i.
Let x_3 = i + x_1.
Let x_4 = -i.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_2) /\ is_sint32(10 - x_1) /\
      is_sint32(11 - x_1).
  (* Invariant *)
  Have: i < (2 * x_1).
  (* Invariant *)
  Have: ((11 + i - x_1) % 2) = 1.
  (* Invariant *)
  Have: x_1 = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: i <= (10 + x_1).
  (* Invariant *)
  Have: x_3 <= 13.
  (* Invariant *)
  Have: x_3 <= (13 + (2 * ((11 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= (11 + x_1).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_3 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_1 <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_3 <= 11.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x_1) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_3.
  (* Invariant *)
  Have: i <= (9 + x_1).
  (* Invariant *)
  Have: (21 <= i) \/ (x_3 <= 10).
  (* Invariant *)
  Have: x_3 <= (10 + (2 * ((8 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: x_3 <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x_2) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= (3 + i).
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: x_1 <= (11 + i).
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (39059)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (7ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 33):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 + i.
Let x_3 = i + x_1.
Let x_4 = -i.
Let x_5 = -x_1.
Let x_6 = x_2 % 2.
Let x_7 = 10 - x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(x_2) /\ is_sint32(x_7) /\
      is_sint32(11 - x_1).
  (* Invariant *)
  Have: i < (2 * x_1).
  (* Invariant *)
  Have: ((11 + i - x_1) % 2) = 1.
  (* Invariant *)
  Have: x_1 = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: i <= (10 + x_1).
  (* Invariant *)
  Have: x_3 <= 13.
  (* Invariant *)
  Have: x_3 <= (13 + (2 * ((11 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= (11 + x_1).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_3 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_1 <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_3 <= 11.
  (* Invariant *)
  Have: (x_6 = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x_1) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_3.
  (* Invariant *)
  Have: i <= (9 + x_1).
  (* Invariant *)
  Have: (21 <= i) \/ (x_3 <= 10).
  (* Invariant *)
  Have: x_3 <= (10 + (2 * ((8 - i - x_1) / 2))).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: x_3 <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x_2) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_1 <= (3 + i).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 <= (11 + i).
}
Prove: (x_6 = 1) \/ ((x_7 % 2) = 0).
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (43316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 34):
Let x = 2 + i.
Let x_1 = x % 2.
Let x_2 = 1 + i.
Let x_3 = x_2 / 2.
Let x_4 = -x_3.
Let x_5 = 10 - x_3.
Let x_6 = i + x_3.
Let x_7 = -i.
Assume {
  Type: is_sint32(i) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(11 - x_3).
  (* Invariant *)
  Have: i < (2 * x_3).
  (* Invariant *)
  Have: ((11 + i - x_3) % 2) = 1.
  (* Invariant *)
  Have: x_3 = (1 + ((i - 1) / 2)).
  (* Invariant *)
  Have: (0 < i) /\ (i <= 24).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: i <= (10 + x_3).
  (* Invariant *)
  Have: x_6 <= 13.
  (* Invariant *)
  Have: x_6 <= (13 + (2 * ((11 - i - x_3) / 2))).
  (* Invariant *)
  Have: i <= (11 + x_3).
  (* Invariant *)
  Have: i <= 11.
  (* Invariant *)
  Have: x_6 <= 12.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: x_3 <= (10 + i).
  (* Invariant *)
  Have: ((i % 2) = 1) /\ (i <= 22).
  (* Then *)
  Have: x_6 <= 11.
  (* Invariant *)
  Have: (x_1 = 1) \/ (i <= 20).
  (* Invariant *)
  Have: ((i <= 20) -> (((12 + i - x_3) % 2) = 1)).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: ((21 <= i) -> (9 <= i)).
  (* Invariant *)
  Have: (-2) <= x_6.
  (* Invariant *)
  Have: i <= (9 + x_3).
  (* Invariant *)
  Have: (21 <= i) \/ (x_6 <= 10).
  (* Invariant *)
  Have: x_6 <= (10 + (2 * ((8 - i - x_3) / 2))).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: x_6 <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: x_3 <= (3 + i).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_3 <= (11 + i).
  (* Invariant *)
  Have: (x_1 = 1) \/ ((x_5 % 2) = 0).
}
Prove: (x_1 = 1) /\ (i <= 20).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (49366)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (31ms) (440)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Loop assigns (file out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/cggmp2005_true-unreach-call_0010/cggmp2005_true-unreach-call_merged.c:7: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
