[kernel] Parsing out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:37: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_preserved (Qed 27ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 23ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_6_preserved (Qed 31ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_12_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_13_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_14_preserved (Qed 16ms) (Z3)
[wp] Proved goals:   23 / 30
  Qed:              21
  Alt-Ergo 2.6.2:    1 (39ms)
  Z3 4.8.6:          1 (4.7s)
  Timeout:           7
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = a * (j - i).
Let x_2 = i_1 % 2.
Let x_3 = to_uint32(2 + i) % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_1).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = a)).
  (* Invariant *)
  Have: x_1 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (37350)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (39ms) (1906)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i) % 2.
Let x_1 = i % 2.
Let x_2 = j - i.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (a * x_2) = a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_1 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x_1 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
}
Prove: to_uint32(a + to_uint32(x_2)) = to_uint32(1 + a).
Prover Z3 4.8.6 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 21):
Let x = j_1 - i.
Let x_1 = a * x.
Let x_2 = to_uint32(to_uint32(x) + x_1).
Let x_3 = to_uint32(1 + a).
Let x_4 = to_uint32(2 + i).
Let x_5 = x_4 % 2.
Let x_6 = i % 2.
Let x_7 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_uint32(x_1).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = a)).
  (* Invariant *)
  Have: x_1 <= a.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_6 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (i < j_1)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= (1 + j_1))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= j_1)).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_5) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_2 = x_3)).
}
Prove: (x_3 * (j - x_4)) = x_2.
Prover Z3 4.8.6 returns Timeout (Qed:27ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:27ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 22):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + a).
Let x_3 = x_2 * (j - x).
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_6 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= j_3)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_4) + x_5).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_3 <= x_2.
Prover Z3 4.8.6 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 23):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = x * (j - x_1).
Let x_3 = x_1 % 2.
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_5) /\
      is_uint32(x_2).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = a)).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_6 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (i < j_3)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= j_3)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(to_uint32(x_4) + x_5).
  If to_uint32(x_3) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_2 = x)).
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: 0 < j.
Prover Z3 4.8.6 returns Timeout (Qed:31ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:31ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 28):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(2 + i).
Let x_3 = x * (x_1 - x_2).
Let x_4 = j - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_5) /\
      is_uint32(x_3).
  (* Goal *)
  When: (x_2 % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = a)).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_6 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_4) + x_5).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_3 = x)).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 <= x_3.
}
Prove: x_2 <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:18ms) (4.7s) (70326392)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + a).
Let x_3 = x_2 * (x_1 - x).
Let x_4 = j - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_5) /\
      is_uint32(x_3).
  (* Goal *)
  When: (x % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = a)).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_6 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_4) + x_5).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_3 = x_2)).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x < x_1.
Prover Z3 4.8.6 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 30):
Let x = to_uint32(1 + a).
Let x_1 = 1 + j.
Let x_2 = to_uint32(x_1).
Let x_3 = to_uint32(2 + i).
Let x_4 = x * (x_2 - x_3).
Let x_5 = j - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Let x_8 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_6) /\
      is_uint32(x_4).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_6 = a)).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= x_1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  (* Invariant *)
  Have: (x_3 % 2) = 1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 = x)).
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= x_4.
}
Prove: x_3 <= (1 + x_2).
Prover Z3 4.8.6 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 31):
Let x = to_uint32(2 + i).
Let x_1 = 1 + j.
Let x_2 = to_uint32(x_1).
Let x_3 = to_uint32(1 + a).
Let x_4 = x_3 * (x_2 - x).
Let x_5 = j - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Let x_8 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_6) /\
      is_uint32(x_4).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_8 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (i_1 <= 0)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_6 = a)).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_7 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (i < j)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= x_1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (i <= j)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 = x_3)).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: x <= (1 + x_2).
}
Prove: x <= x_2.
Prover Z3 4.8.6 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c, line 32) (2/2):
Call Result at line 37
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0004/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
