[kernel] Parsing out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 46 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_9_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_11_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   41 / 46
  Qed:              32
  Alt-Ergo 2.6.2:    7 (7ms-18ms)
  Z3 4.8.6:          2 (30ms)
  Timeout:           5
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 13):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 2 * n.
Let x_3 = 2 + i.
Let x_4 = -x.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(n - x) /\
      is_sint32(n - 1 - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (i + x_1) <= x_2.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> (x = i_1))).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
}
Prove: (x_3 / 2) = (1 + x).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (39523)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (12ms) (142)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 14):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = k + x_1.
Let x_3 = i / 2.
Let x_4 = 2 * x_1.
Let x_5 = 2 * k.
Let x_6 = k + x_1 - 1.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k - 1) /\ is_sint32(x) /\
      is_sint32(x_6).
  (* Goal *)
  When: (x_6 % 2) = 0.
  (* Pre-condition *)
  Have: x_2 <= 2147483648.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_1 = (1 + x_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i < x_2.
  (* Invariant *)
  Have: x <= (x_5 + x_4).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_3) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: x <= x_2.
}
Prove: (3 + i) <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (40028)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (16ms) (199)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 14):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (n % 2) = 0.
  (* Pre-condition *)
  Have: n <= 2147483647.
}
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 17):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = k + x_1 - 1.
Let x_3 = 3 + i.
Let x_4 = k + x_1.
Let x_5 = i / 2.
Let x_6 = 2 * x_1.
Let x_7 = 2 * k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k - 1) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: x_4 <= 2147483648.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: x_1 = (1 + x_5).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i < x_4.
  (* Invariant *)
  Have: x <= (x_7 + x_6).
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_5) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_5) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (((x_2 % 2) = 0) -> (x_3 <= x_4)).
  (* Invariant *)
  Have: (-3) <= i.
}
Prove: x_3 <= x_4.
Prover Z3 4.8.6 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 17):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (((n % 2) = 0) -> (0 <= n)).
}
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 18):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = k + x_1.
Let x_3 = i / 2.
Let x_4 = 2 * x_1.
Let x_5 = 2 * k.
Let x_6 = x_5 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k - 1) /\ is_sint32(x) /\
      is_sint32(k + x_1 - 1).
  (* Pre-condition *)
  Have: x_2 <= 2147483648.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_1 = (1 + x_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i < x_2.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_3) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: x <= x_2.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: (3 + i) <= x_2.
}
Prove: (4 + i) <= x_6.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (10ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 19):
Let x = 2 + i.
Let x_1 = 2 * n.
Let x_2 = x / 2.
Let x_3 = i / 2.
Let x_4 = 2 * x_2.
Let x_5 = -x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_2) /\
      is_sint32(1 + n - x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_2 = (1 + x_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: (i + x_4) <= (2 + x_1).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> (x_2 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_3) -> (x_2 = (1 + i_1)))).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_1.
}
Prove: (2 + i + x_4) <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (37716)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (13ms) (162)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 21):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
}
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 22):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (x_1 = i_2))).
}
Prove: false.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (30ms) (175630)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 23):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (x_1 = i_2))).
}
Prove: x_1 = i_1.
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 24):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_4) -> (x_1 = (1 + i_2)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (x_1 = i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) -> (x_1 = i_2))).
}
Prove: false.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (30ms) (166464)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 25):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_4) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_4) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_1) -> (x_1 = i_1))).
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (38136)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (8ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 29):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = 2 * n.
Let x_4 = i / 2.
Let x_5 = -x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(n - x_1) /\
      is_sint32(1 + n - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 = (1 + x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_4) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_4) -> (x_1 = (1 + i_1)))).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-3) <= i.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (2 + i + x_2) <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (x_1 = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_1) -> (x_1 = i_1))).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (-2) <= i.
}
Prove: (x % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (40394)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (18ms) (174)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 44):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = k + x.
Let x_3 = 2 * n.
Let x_4 = -x.
Let x_5 = -k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(n - x) /\ is_sint32(n - k - x) /\ is_sint32(1 + n - k - x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (i + x_1) <= x_3.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (x = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> (x = i_1))).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: x_2 <= i.
  (* Then *)
  Have: i < (k + x_1).
}
Prove: x_2 <= (1 + i).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (36469)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (7ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c, line 46):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/half_2_true-unreach-call_0013/half_2_true-unreach-call_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
