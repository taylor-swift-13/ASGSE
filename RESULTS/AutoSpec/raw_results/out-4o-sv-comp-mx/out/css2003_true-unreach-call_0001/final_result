Pass
{'CurTaskID': 2, 'Round': 1, 'Iteration': 1, 'Status': 1, 'llms_query_times': datetime.timedelta(seconds=37, microseconds=276996), 'total_solve_time': datetime.timedelta(seconds=27, microseconds=475612), 'simplified_time': datetime.timedelta(0), 'tokens_usage': 2179, 'spec_num_original': 0, 'spec_num_simplified': 0, 'TaskList': [3, 1], '1': ['loop invariant k <= 1;', 'loop invariant i <= LARGE_INT;', 'loop invariant i + k <= 2;', 'loop invariant 1 <= i;', 'loop invariant 1 <= i + k;', 'loop invariant 1 <= i + k && i + k <= 2;', 'loop assigns k;', 'loop assigns j;', 'loop assigns i;'], '2': [], 'MSLines': ['// Source: Michael Colon, Sriram Sankaranarayanan, Henny Sipma: "Linear\n', '// Invariant Generation using Non-Linear Constraint Solving", CAV 2003.\n', '#include "assert.h"\n', '# define LARGE_INT 1000000\n', '\n', '/*@ \n', 'requires 0 <= k && k <= 1;\n', '*/\n', '/* 2. FUNC CONTRACT */\nint foo(int k) {\n', '    int i,j;\n', '    i = 1;\n', '    j = 1;\n', '    /* 1. LOOP INVARIANT */\n    while (i < LARGE_INT) {\n', '        i = i + 1;\n', '        j = j + k;\n', '        k = k - 1;\n', '        //@ assert 1 <= i + k && i + k <= 2 && i >= 1;\n', '    }\n', '    return 0;\n', '}']}
    へ　　　　　／|
　　/＼7　　　 ∠＿/
　 /　│　　 ／　／
　│　Z ＿,＜　／　　 /`ヽ
　│　　　　　ヽ　　 /　　〉
　 Y　　　　　`　 /　　/
　ｲ●　､　●　　⊂⊃〈　　/
　()　 へ　　　　|　＼〈
　　>ｰ ､_　 ィ　 │ ／／
　 / へ　　 /　ﾉ＜| ＼＼
　 ヽ_ﾉ　　(_／　 │／／
　　7　　　　　　　|／
　　＞―r￣￣`ｰ―＿
