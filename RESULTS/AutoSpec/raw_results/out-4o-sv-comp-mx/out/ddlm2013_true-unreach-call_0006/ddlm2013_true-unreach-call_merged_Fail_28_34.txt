[kernel] Parsing out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c (with preprocessing)
[kernel:typing:no-proto] out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c:39: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_2_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_preserved (Qed 24ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_9_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_13_preserved (Qed 9ms) (Z3)
[wp] Proved goals:   28 / 34
  Qed:              25
  Alt-Ergo 2.6.2:    3 (17ms-45ms)
  Timeout:           6
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 18):
Let x = i % 2.
Let x_1 = j % 2.
Let x_2 = to_uint32(2 + i) % 2.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: ((j - i) % 2) = 0.
  (* Invariant *)
  Have: ((x = 1) -> (x_1 = 1)).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: ((x != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x != 0) -> (x_1 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (36592)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (45ms) (1175)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = j % 2.
Let x_4 = j - i.
Let x_5 = -j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(b + i - j).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (x + to_uint32(b + to_uint32(x_4))) = (j_1 + to_uint32(1 + b + i - j)).
Prover Z3 4.8.6 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 19):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = j % 2.
Let x_4 = j - i.
Let x_5 = -j.
Let x_6 = to_uint32(b + to_uint32(x_4)).
Let x_7 = to_uint32(1 + b + i - j).
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x + x_6 - x_7).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = 1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: (x + x_6) = (to_uint32(2 + j) + x_7). }
  Else { Have: (x + x_6) = (to_uint32(1 + j) + x_7). }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_7 < (x + x_6).
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 24):
Let x = -j.
Let x_1 = to_uint32(1 + b + i - j).
Let x_2 = to_uint32(2 + i).
Let x_3 = j - i.
Let x_4 = to_uint32(b + to_uint32(x_3)).
Let x_5 = x_2 % 2.
Let x_6 = i % 2.
Let x_7 = j % 2.
Let x_8 = -x_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x_2 + x_4 - x_1).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = 1)).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = 0)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_5) = 0
  Then { Have: (x_2 + x_4) = (to_uint32(2 + j) + x_1). }
  Else { Have: (x_2 + x_4) = (to_uint32(1 + j) + x_1). }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_1 < (x_2 + x_4).
}
Prove: ((x_4 - x_1) % 2) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 25):
Let x = j - i.
Let x_1 = to_uint32(b + to_uint32(x)).
Let x_2 = -j.
Let x_3 = to_uint32(1 + b + i - j).
Let x_4 = -x_3.
Let x_5 = to_uint32(2 + i).
Let x_6 = x_5 + x_1.
Let x_7 = i % 2.
Let x_8 = j % 2.
Let x_9 = x_5 + x_1 - x_3.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x_9).
  (* Goal *)
  When: (x_5 % 2) = 1.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = (to_uint32(1 + j) + x_3).
  (* Invariant *)
  Have: x_3 < x_6.
  (* Invariant *)
  Have: ((x_1 - x_3) % 2) = 0.
}
Prove: (x_9 % 2) = 1.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (40ms) (237018)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (17ms) (357)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 26):
Let x = j - i.
Let x_1 = to_uint32(b + to_uint32(x)).
Let x_2 = -j.
Let x_3 = to_uint32(1 + b + i - j).
Let x_4 = to_uint32(2 + j).
Let x_5 = x_4 + x_3.
Let x_6 = i % 2.
Let x_7 = j % 2.
Let x_8 = x_4 + x_3 - x_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x_8).
  (* Goal *)
  When: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = 1)).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = 0)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (to_uint32(2 + i) + x_1) = x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: ((x_1 - x_3) % 2) = 0.
}
Prove: (1 + x_3) = x_1.
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 30):
Let x = to_uint32(1 + j).
Let x_1 = j - i.
Let x_2 = to_uint32(b + to_uint32(x_1)).
Let x_3 = -j.
Let x_4 = to_uint32(1 + b + i - j).
Let x_5 = x + x_4.
Let x_6 = x + x_4 - x_2.
Let x_7 = i % 2.
Let x_8 = j % 2.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = 1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (to_uint32(2 + i) + x_2) = x_5.
  (* Invariant *)
  Have: (x_6 % 2) = 1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: ((x_2 - x_4) % 2) = 0.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: x_2 = x_4.
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 33):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j - i.
Let x_3 = to_uint32(b + to_uint32(x_2)).
Let x_4 = -j.
Let x_5 = to_uint32(1 + b + i - j).
Let x_6 = -x_5.
Let x_7 = x + x_3 - x_5.
Let x_8 = x_7 % 2.
Let x_9 = x + x_3.
Let x_10 = i % 2.
Let x_11 = j % 2.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(b + i - j) /\ is_uint32(x_7).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: j <= (b + i).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: ((x_10 = 1) -> (x_11 = 1)).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((1 + (2 * b) + (2 * i)) = (3 * j))).
  (* Invariant *)
  Have: ((x_10 = 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((x_10 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_10 != 0) -> (x_11 != 0)).
  (* Invariant *)
  Have: j <= i.
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x_9 = (to_uint32(2 + j) + x_5). }
  Else { Have: x_9 = (to_uint32(1 + j) + x_5). }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: x_5 < x_9.
  (* Invariant *)
  Have: ((x_3 - x_5) % 2) = 0.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_8 = 1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((1 + x_5) = x_3)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_9 = (1 + (3 * x_5)))).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_3 = x_5)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x_8 != 0)).
}
Prove: x_3 <= x_5.
Prover Z3 4.8.6 returns Valid (Qed:20ms) (20ms) (41887)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (28ms) (414)

------------------------------------------------------------

Goal Establishment of Invariant (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 34) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c, line 34) (2/2):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/ddlm2013_true-unreach-call_0006/ddlm2013_true-unreach-call_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
