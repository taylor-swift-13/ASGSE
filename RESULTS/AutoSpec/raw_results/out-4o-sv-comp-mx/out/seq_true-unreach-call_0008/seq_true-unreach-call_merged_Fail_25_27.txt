[kernel] Parsing out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 27 goals scheduled
[wp] [Timeout] typed_foon_loop_invariant_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foon_loop_invariant_3_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   25 / 27
  Qed:              22
  Alt-Ergo 2.6.2:    1 (12ms)
  Z3 4.8.6:          2 (50ms)
  Timeout:           2
------------------------------------------------------------
  Function foon
------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 15):
Assume {
  Type: is_sint32(n0_0) /\ is_sint32(n1_0).
  (* Pre-condition *)
  Have: ((-2147483647) <= n0_0) /\ (n0_0 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= n1_0) /\ (n1_0 <= 2147483646).
}
Prove: 0 <= n0_0.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 17):
Let x = 1 + k.
Assume {
  Type: is_sint32(k) /\ is_sint32(n0_0) /\ is_sint32(n1_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n0_0) /\ (n0_0 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= n1_0) /\ (n1_0 <= 2147483646).
  (* Invariant *)
  Have: 0 <= n0_0.
  (* Invariant *)
  Have: k <= n0_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> ((1 + i_1) = k))).
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n0_0.
}
Prove: x = i.
Prover Z3 4.8.6 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 18):
Let x = 1 + k.
Assume {
  Type: is_sint32(k) /\ is_sint32(n0_0) /\ is_sint32(n1_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n0_0) /\ (n0_0 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= n1_0) /\ (n1_0 <= 2147483646).
  (* Invariant *)
  Have: 0 <= n0_0.
  (* Invariant *)
  Have: k <= n0_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> ((1 + i_1) = k))).
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n0_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= k) -> (x = i_1))).
}
Prove: x = i.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (50ms) (126400)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 19):
Let x = 1 + k.
Assume {
  Type: is_sint32(k) /\ is_sint32(n0_0) /\ is_sint32(n1_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n0_0) /\ (n0_0 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= n1_0) /\ (n1_0 <= 2147483646).
  (* Invariant *)
  Have: 0 <= n0_0.
  (* Invariant *)
  Have: k <= n0_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> ((1 + i_1) = k))).
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n0_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= k) -> (x = i_1))).
}
Prove: k = i.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (50ms) (136160)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 35):
Let x = 1 + k.
Let x_1 = -i0_0.
Assume {
  Type: is_sint32(i0_0) /\ is_sint32(k) /\ is_sint32(n0_0) /\
      is_sint32(n1_0) /\ is_sint32(x) /\ is_sint32(k - i0_0) /\
      is_sint32(1 + k - i0_0).
  (* Pre-condition *)
  Have: ((-2147483647) <= n0_0) /\ (n0_0 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= n1_0) /\ (n1_0 <= 2147483646).
  (* Invariant *)
  Have: 0 <= n0_0.
  (* Invariant *)
  Have: i0_0 <= n0_0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < i0_0) -> (i = i0_0))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < i0_0) -> ((1 + i) = i0_0))).
  (* Invariant *)
  Have: 0 <= i0_0.
  (* Else *)
  Have: n0_0 <= i0_0.
  (* Invariant *)
  Have: i0_0 <= k.
  (* Then *)
  Have: k < (i0_0 + n1_0).
}
Prove: i0_0 <= x.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (35359)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (12ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c, line 47):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/seq_true-unreach-call_0008/seq_true-unreach-call_merged.c:8: Warning: 
  No 'assigns' specification for function 'foon'.
  Callers assumptions might be imprecise.
