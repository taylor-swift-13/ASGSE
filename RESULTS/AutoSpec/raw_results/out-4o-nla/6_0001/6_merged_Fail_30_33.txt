[kernel] Parsing out/6_0001/6_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/6_0001/6_merged.c:39: Warning: 
  Body of function main6 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 33 goals scheduled
[wp] [Timeout] typed_main6_loop_invariant_6_preserved (Qed 49ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_11_preserved (Qed 47ms) (Z3)
[wp] [Timeout] typed_main6_assert_missing_return (Qed 5ms) (Z3)
[wp] Proved goals:   30 / 33
  Qed:              26
  Alt-Ergo 2.5.4:    4 (4ms-25ms-58ms)
  Timeout:           3
------------------------------------------------------------
  Function main6
------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 17):
Let x_1 = b + x.
Let x_2 = b * r_2.
Let x_3 = p_2 * x.
Let x_4 = (2 * x_2) + (2 * x_3).
Let x_5 = x_2 + x_3.
Assume {
  Type: is_sint32(b) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(b + x - x_2 - x_3).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < b.
  (* Invariant *)
  Have: ((x != b) -> ((b < x) \/ (x < b))).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (x_2 + (b * s_2) + x_3 + (q_2 * x)) = x_1.
  (* Invariant *)
  Have: (0 < x_5) /\ (x_5 < x_1).
  (* Invariant *)
  Have: (x_1 < x_4) \/ (x_4 < x_1).
  (* Then *)
  Have: x_4 != x_1.
  If x_1 < x_4
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
}
Prove: (p * s) = (1 + (q * r)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (58ms) (612)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 19):
Let x_1 = s - r.
Let x_2 = q - p.
Let x_3 = p * x.
Let x_4 = 2 * x_3.
Let x_5 = r * y.
Let x_6 = 2 * x_5.
Let x_7 = x_4 + x_6.
Let x_8 = x + y.
Let x_9 = x_3 + x_5.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x_9) /\ is_sint32(x + y - x_4 - x_6) /\
      is_sint32(x + y - x_3 - x_5).
  (* Residual *)
  When: x_7 <= x_8.
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((y != x) -> ((x < y) \/ (y < x))).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (x_3 + (q * x) + x_5 + (s * y)) = x_8.
  (* Invariant *)
  Have: (0 < x_9) /\ (x_9 < x_8).
  (* Invariant *)
  Have: x_7 < x_8.
  (* Invariant *)
  Have: (p * x_1) = (1 + (r * x_2)).
}
Prove: (x_4 + x_6 + (x * x_2) + (y * x_1)) = x_8.
Prover Z3 4.8.12 returns Valid (Qed:42ms) (10ms) (10381)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:42ms) (17ms) (166)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 22):
Let x_1 = x + y.
Let x_2 = p_1 * x.
Let x_3 = r_1 * y.
Let x_4 = (2 * x_2) + (2 * x_3).
Let x_5 = x_2 + x_3.
Let x_6 = (q * x) + (s * y).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(p) /\ is_sint32(p_1) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_5) /\ is_sint32(x_6) /\
      is_sint32(x + y - x_2 - x_3).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((y != x) -> ((x < y) \/ (y < x))).
  (* Invariant *)
  Have: (p_1 * s_2) = (1 + (q_2 * r_1)).
  (* Invariant *)
  Have: (x_2 + (q_2 * x) + x_3 + (s_2 * y)) = x_1.
  (* Invariant *)
  Have: (0 < x_5) /\ (x_5 < x_1).
  (* Invariant *)
  Have: (x_1 < x_4) \/ (x_4 < x_1).
  (* Then *)
  Have: x_4 != x_1.
  If x_1 < x_4
  Then {
    Let x_7 = q * x.
    Let x_8 = s * y.
    Have: (q_2 = q) /\ (s_2 = s) /\ ((x_2 + x_7 + x_3 + x_8) = x_1).
    Have: (a + x_7 + x_8) = x_5.
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_9 = p * x.
    Let x_10 = r * y.
    Let x_11 = x * (q_1 - p).
    Let x_12 = y * (s_1 - r).
    Have: (p_1 = p) /\ (q_2 = q_1) /\ (r_1 = r) /\ (s_2 = s_1) /\
        ((p + q) = q_1) /\ ((r + s) = s_1) /\ ((b + x_9 + x_10) = x_1) /\
        (((2 * x_9) + (2 * x_10) + x_11 + x_12) = x_1) /\
        ((a + x_9 + x_10 + x_11 + x_12) = x_1).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
}
Prove: (0 < a) /\ (0 < x_6).
Prover Z3 4.8.12 returns Timeout (Qed:49ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:49ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 24):
Let x_1 = q * x.
Let x_2 = s * y.
Let x_3 = x_1 + x_2.
Let x_4 = p * x.
Let x_5 = r * y.
Let x_6 = x_4 + x_5.
Let x_7 = p - q.
Let x_8 = r - s.
Let x_9 = x + y.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_6) /\ is_sint32(x_3) /\ is_sint32(x + y - x_4 - x_5) /\
      is_sint32(x_4 + x_5 - x_1 - x_2).
  (* Residual *)
  When: x_9 < ((2 * x_4) + (2 * x_5)).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((y != x) -> ((x < y) \/ (y < x))).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (x_4 + x_1 + x_5 + x_2) = x_9.
  (* Invariant *)
  Have: (0 < x_6) /\ (x_6 < x_9).
  (* Invariant *)
  Have: (s * x_7) = (1 + (q * x_8)).
  (* Invariant *)
  Have: (0 < x_3) /\ (x_3 < x_6).
}
Prove: (x_1 + x_2 + (x * x_7) + (y * x_8)) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:44ms) (10455)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:44ms) (22ms) (280)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 27):
Let x_1 = p * x.
Let x_2 = r * y.
Let x_3 = x_1 + x_2.
Let x_4 = q * x.
Let x_5 = s * y.
Let x_6 = x_4 + x_5.
Let x_7 = x + y.
Let x_8 = p_2 * x.
Let x_9 = r_2 * y.
Let x_10 = (2 * x_8) + (2 * x_9).
Let x_11 = x_8 + x_9.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3) /\ is_sint32(x_11) /\
      is_sint32(x_6) /\ is_sint32(x + y - x_8 - x_9).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((y != x) -> ((x < y) \/ (y < x))).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (x_8 + (q_2 * x) + x_9 + (s_2 * y)) = x_7.
  (* Invariant *)
  Have: (0 < x_11) /\ (x_11 < x_7).
  (* Invariant *)
  Have: (x_7 < x_10) \/ (x_10 < x_7).
  (* Then *)
  Have: x_10 != x_7.
  If x_7 < x_10
  Then {
    Let x_12 = x * (p_1 - q).
    Let x_13 = y * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (((2 * x_4) + (2 * x_5) + x_12 + x_13) = x_7) /\
        ((x_4 + x_5 + x_12 + x_13) = ((p_1 * x) + (r_1 * y))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_4 + x_5 + (2 * (x * (q_1 - q))) + (2 * (y * (s_1 - s)))) = x_7).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_6).
}
Prove: (x_1 + x_4 + x_2 + x_5) = x_7.
Prover Z3 4.8.12 returns Timeout (Qed:47ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:47ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 29):
Assume {
  Type: is_sint32(b) /\ is_sint32(x).
  (* Goal *)
  When: x != b.
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: (b < x) \/ (x < b).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (29776)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/6_0001/6_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/6_0001/6_merged.c, line 54):
Let x_1 = p * x.
Let x_2 = r * y.
Let x_3 = x_1 + x_2.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((y != x) -> ((x < y) \/ (y < x))).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: ((q * x) + (s * y)) = x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: ((2 * x_1) + (2 * x_2)) = (x + y).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/6_0001/6_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/6_0001/6_merged.c:4: Warning: 
  No 'assigns' specification for function 'main6'.
  Callers assumptions might be imprecise.
