[kernel] Parsing out/3_0005/3_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/3_0005/3_merged.c:22: Warning: 
  Body of function main3 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 21 goals scheduled
[wp] [Timeout] typed_main3_loop_invariant_2_preserved (Qed 2ms) (Z3)
[wp] Proved goals:   20 / 21
  Qed:              16
  Alt-Ergo 2.5.4:    4 (6ms-11ms)
  Timeout:           1
------------------------------------------------------------
  Function main3
------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 10):
Let x_1 = r_2 + (q_2 * y).
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (r + (q * y)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (44103)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 11):
Let x_1 = r + (q * y).
Let x_2 = r_2 + (q_2 * y).
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: x_1 < x.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 13):
Let x_1 = r + (q * y).
Let x_2 = r_2 + (q_2 * y).
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33663)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (11ms) (107)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 15):
Let x_1 = r + (q * y).
Let x_2 = r_2 + (q_2 * y).
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: r < y.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33737)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (104)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 16):
Let x_1 = r + (q * y).
Let x_2 = r_2 + (q_2 * y).
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33865)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (9ms) (105)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0005/3_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0005/3_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Assertion (file out/3_0005/3_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/3_0005/3_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Loop assigns (file out/3_0005/3_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/3_0005/3_merged.c:4: Warning: 
  No 'assigns' specification for function 'main3'.
  Callers assumptions might be imprecise.
