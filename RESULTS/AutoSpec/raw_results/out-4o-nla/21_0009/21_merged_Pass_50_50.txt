[kernel] Parsing out/21_0009/21_merged.c (with preprocessing)
[kernel:typing:no-proto] out/21_0009/21_merged.c:34: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/21_0009/21_merged.c:2: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 50 goals scheduled
[wp] Proved goals:   50 / 50
  Qed:              38
  Alt-Ergo 2.5.4:    8 (7ms-35ms-90ms)
  Z3 4.8.12:         4 (10ms-20ms)
------------------------------------------------------------
  Function main21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 7):
Let x = i * i.
Let x_1 = y * y.
Let x_2 = 1 + y.
Let x_3 = x_2 * x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: ((i_1 * i_1) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x).
  (* Invariant *)
  Have: x_1 = x.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (x % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x_1))).
  (* Invariant *)
  Have: ((i_4 * i_4) = x) /\ (0 <= i_4) /\ (i_4 <= y).
  (* Invariant *)
  Have: ((i_5 * i_5) = x) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < y) -> ((i_6 * i_6) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= y).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (0 <= x_3) /\ ((-1) <= y).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (38224)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (322)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 15):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i * i.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: ((i_1 * i_1) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_2).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x_2))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x_3))).
  (* Invariant *)
  Have: ((i_4 * i_4) = x_2) /\ (0 <= i_4) /\ (i_4 <= y).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_2) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < y) -> ((i_6 * i_6) <= x_2))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
}
Prove: (x_1 % 2) = (x % 2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (42ms) (1643)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 16):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_2).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_3))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_2) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_2) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
}
Prove: (i * i) <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (90ms) (2347)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 17):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_2).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_3))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_2) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_2) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 * i_7) <= x_1))).
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (41562)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (38ms) (1473)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 18):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_2).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_3))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_2) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_2) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < y) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 * i_7) <= x_1))).
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (41562)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (35ms) (1473)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 19):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i * i.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: ((i_1 * i_1) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_2).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x_2))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= y) -> ((i_6 * i_6) <= x_3))).
  (* Invariant *)
  Have: ((i_4 * i_4) = x_2) /\ (0 <= i_4) /\ (i_4 <= y).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_2) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < y) -> ((i_6 * i_6) <= x_2))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 <= x) -> ((i_6 * i_6) <= x_1))).
}
Prove: exists i_6 : Z. (x_1 = (i_6 * i_6)) /\ (0 <= i_6) /\ (i_6 <= x).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (25ms) (1503)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 20):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i * i.
Let x_3 = i_1 * i_1.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_3))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= y) -> ((i_7 * i_7) <= x_4))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_3) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < y) -> ((i_7 * i_7) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = x_2.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = (x % 2).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 * i_7) <= x_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 * i_7) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
}
Prove: exists i_7 : Z. ((i_7 * i_7) = x_2) /\ (0 <= i_7) /\ (i_7 <= x).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (43408)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (36ms) (1901)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 22):
Let x = 1 + y.
Let x_1 = i * i.
Let x_2 = x * x.
Let x_3 = i_1 * i_1.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= y) -> ((i_8 * i_8) <= x_3))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= y) -> ((i_8 * i_8) <= x_4))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_3) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < y) -> ((i_8 * i_8) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (0 <= x_1) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 * i_8) <= x_1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 * i_8) <= x_2))).
  (* Invariant *)
  Have: ((i_7 * i_7) = x_1) /\ (0 <= i_7) /\ (i_7 <= x).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
}
Prove: y < x_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (43817)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (7ms) (241)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 25):
Let x = i_1 * i_1.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Let x_3 = i_2 * i_2.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * i_5) = 0) /\ (i_5 <= 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_4))).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: ((i_7 * i_7) = x_3) /\ (0 <= i_7) /\ (i_7 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x % 2) = (x_1 % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) -> ((i_9 * i_9) <= x))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) ->
      ((i_9 * i_9) <= x_2))).
  (* Invariant *)
  Have: ((i_8 * i_8) = x) /\ (0 <= i_8) /\ (i_8 <= x_1).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: y < x.
}
Prove: (i * i) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (44416)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 26):
Let x = i_1 * i_1.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Let x_3 = i_2 * i_2.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * i_5) = 0) /\ (i_5 <= 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_4))).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: ((i_7 * i_7) = x_3) /\ (0 <= i_7) /\ (i_7 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x % 2) = (x_1 % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) -> ((i_9 * i_9) <= x))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) ->
      ((i_9 * i_9) <= x_2))).
  (* Invariant *)
  Have: ((i_8 * i_8) = x) /\ (0 <= i_8) /\ (i_8 <= x_1).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: y < x.
}
Prove: (i * i) <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (44404)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 27):
Let x = i_1 * i_1.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Let x_3 = i_2 * i_2.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * i_5) = 0) /\ (i_5 <= 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= y) -> ((i_9 * i_9) <= x_4))).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: ((i_7 * i_7) = x_3) /\ (0 <= i_7) /\ (i_7 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < y) -> ((i_9 * i_9) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x % 2) = (x_1 % 2).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) -> ((i_9 * i_9) <= x))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x_1) ->
      ((i_9 * i_9) <= x_2))).
  (* Invariant *)
  Have: ((i_8 * i_8) = x) /\ (0 <= i_8) /\ (i_8 <= x_1).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: y < x.
}
Prove: (i * i) <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (44404)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 28):
Let x = i * i.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Let x_3 = i_1 * i_1.
Let x_4 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((i_3 * i_3) = 0) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((i_4 * i_4) = 0) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (0 <= y) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (x_3 % 2) = (y % 2).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= y) -> ((i_8 * i_8) <= x_3))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= y) -> ((i_8 * i_8) <= x_4))).
  (* Invariant *)
  Have: ((i_5 * i_5) = x_3) /\ (0 <= i_5) /\ (i_5 <= y).
  (* Invariant *)
  Have: ((i_6 * i_6) = x_3) /\ (0 <= i_6) /\ (i_6 <= y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < y) -> ((i_8 * i_8) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= y).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x % 2) = (x_1 % 2).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x_1) -> ((i_8 * i_8) <= x))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x_1) ->
      ((i_8 * i_8) <= x_2))).
  (* Invariant *)
  Have: ((i_7 * i_7) = x) /\ (0 <= i_7) /\ (i_7 <= x_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: y < x.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= y) -> ((i_8 * i_8) <= x))).
}
Prove: exists i_8 : Z. ((i_8 * i_8) = x) /\ (0 <= i_8) /\ (i_8 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (45343)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0009/21_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0009/21_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Loop assigns (file out/21_0009/21_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0009/21_merged.c, line 31) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0009/21_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/21_0009/21_merged.c:2: Warning: 
  No 'assigns' specification for function 'main21'.
  Callers assumptions might be imprecise.
