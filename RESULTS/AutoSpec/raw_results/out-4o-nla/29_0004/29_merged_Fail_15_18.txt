[kernel] Parsing out/29_0004/29_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/29_0004/29_merged.c:27: Warning: 
  Body of function main29 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_main29_loop_invariant_established (Qed 0.86ms) (Z3)
[wp] [Timeout] typed_main29_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main29_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   15 / 18
  Qed:               8
  Alt-Ergo 2.5.4:    7 (5ms-23ms-46ms)
  Timeout:           3
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 14):
Let x_1 = 1 + n.
Let x_2 = x * y * x_1.
Let x_3 = y * y * x_1.
Let x_4 = x * x * x_1.
Let x_5 = 1 + n_1.
Let x_6 = (x * x) + x_4.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_4) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_5) = 0.
  (* Invariant *)
  Have: (y * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = 0.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (n * x * x) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (33876)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (20ms) (381)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 14):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
}
Prove: (x * x * (1 + n)) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.86ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.86ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 15):
Let x_1 = 1 + n.
Let x_2 = x * y * x_1.
Let x_3 = y * y * x_1.
Let x_4 = x * x.
Let x_5 = n * x * x.
Let x_6 = x_5 - x_4.
Let x_7 = 1 + n_1.
Let x_8 = (y * y) + x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_5) /\ is_sint32(x_6) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_7) = 0.
  (* Invariant *)
  Have: (y * y * x_7) = 0.
  (* Invariant *)
  Have: (x * y * x_7) = 0.
  (* Invariant *)
  Have: x_5 = (x_4 + (x * x * x_1)).
  (* Invariant *)
  Have: (x * x * y * y * x_1 * x_1) <= (y * y * x_1 * x_6).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (n * y * y) = x_8.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (35235)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (27ms) (454)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 15):
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
}
Prove: (y * y * x_1) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 16):
Let x_1 = 1 + n.
Let x_2 = x * y * x_1.
Let x_3 = y * y.
Let x_4 = n * y * y.
Let x_5 = x * x.
Let x_6 = n * x * x.
Let x_7 = x_6 - x_5.
Let x_8 = x_4 - x_3.
Let x_9 = 1 + n_1.
Let x_10 = (x * y) + x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_6) /\ is_sint32(x_4) /\
      is_sint32(x_7) /\ is_sint32(x_8) /\ is_sint32(x_2) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: x_6 = (x_5 + (x * x * x_1)).
  (* Invariant *)
  Have: x_4 = (x_3 + (y * y * x_1)).
  (* Invariant *)
  Have: (x * x * y * y * x_1 * x_1) <= (x_7 * x_8).
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (n * x * y) = x_10.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (46ms) (681)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 16):
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (x * y * x_1) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (40)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 18):
Let x_1 = x * y.
Let x_2 = n * x * y.
Let x_3 = y * y.
Let x_4 = n * y * y.
Let x_5 = x * x.
Let x_6 = n * x * x.
Let x_7 = x_2 - x_1.
Let x_8 = x_6 - x_5.
Let x_9 = x_4 - x_3.
Let x_10 = 1 + n.
Let x_11 = 1 + n_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_6) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_8) /\ is_sint32(x_7) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_6 = (x_5 + (x * x * x_10)).
  (* Invariant *)
  Have: x_4 = (x_3 + (y * y * x_10)).
  (* Invariant *)
  Have: x_2 = (x_1 + (x * y * x_10)).
  (* Invariant *)
  Have: (x_7 * x_7) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: 0 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (34474)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (22ms) (819)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 19):
Let x_1 = n * x * x.
Let x_2 = x * y.
Let x_3 = n * x * y.
Let x_4 = y * y.
Let x_5 = n * y * y.
Let x_6 = x * x.
Let x_7 = x_3 - x_2.
Let x_8 = x_1 - x_6.
Let x_9 = x_5 - x_4.
Let x_10 = 1 + n.
Let x_11 = 1 + n_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(x_5) /\ is_sint32(x_8) /\ is_sint32(x_7) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_1 = (x_6 + (x * x * x_10)).
  (* Invariant *)
  Have: x_5 = (x_4 + (y * y * x_10)).
  (* Invariant *)
  Have: x_3 = (x_2 + (x * y * x_10)).
  (* Invariant *)
  Have: (x_7 * x_7) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_6 <= x_1.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34583)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (19ms) (820)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 20):
Let x_1 = n * y * y.
Let x_2 = n * x * x.
Let x_3 = x * y.
Let x_4 = n * x * y.
Let x_5 = y * y.
Let x_6 = x * x.
Let x_7 = x_4 - x_3.
Let x_8 = x_2 - x_6.
Let x_9 = x_1 - x_5.
Let x_10 = 1 + n.
Let x_11 = 1 + n_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(n - 1) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_8) /\ is_sint32(x_7) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_2 = (x_6 + (x * x * x_10)).
  (* Invariant *)
  Have: x_1 = (x_5 + (y * y * x_10)).
  (* Invariant *)
  Have: x_4 = (x_3 + (x * y * x_10)).
  (* Invariant *)
  Have: (x_7 * x_7) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34690)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (22ms) (820)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0004/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0004/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/29_0004/29_merged.c, line 35):
Let x_1 = 1 + n.
Let x_2 = x * y * x_1.
Let x_3 = y * y * x_1.
Let x_4 = x * x * x_1.
Let x_5 = 1 + n_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_5) = 0.
  (* Invariant *)
  Have: (y * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = 0.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Else *)
  Have: n <= 0.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0004/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0004/29_merged.c:6: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
