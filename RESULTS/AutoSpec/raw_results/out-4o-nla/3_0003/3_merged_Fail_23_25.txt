[kernel] Parsing out/3_0003/3_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/3_0003/3_merged.c:24: Warning: 
  Body of function main3 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] [Timeout] typed_main3_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_main3_loop_invariant_5_established (Qed 0.78ms) (Z3)
[wp] Proved goals:   23 / 25
  Qed:              18
  Alt-Ergo 2.5.4:    5 (3ms-5ms-6ms)
  Timeout:           2
------------------------------------------------------------
  Function main3
------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 10):
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (2 + r + (q * y)) <= y.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 11):
Let x = q * y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (2 + r + x) <= y.
}
Prove: (2 + x) <= y.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33381)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (130)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 14):
Let x = q * y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (2 + r + x) <= y.
  (* Invariant *)
  Have: (2 + x) <= y.
}
Prove: x = 0.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (36473)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (128)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: (1 + x) = y.
Prover Z3 4.8.12 returns Timeout (Qed:0.78ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.78ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 16):
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (2 + r) <= y.
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (32887)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 19):
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (2 + r) <= y.
  (* Invariant *)
  Have: r < y.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33452)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (136)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0003/3_merged.c, line 20):
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(y - 1).
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: (q * y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (2 + r_2) <= y.
  (* Invariant *)
  Have: (q_2 * y) = 0.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (2 + r) <= y.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33424)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (3ms) (112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0003/3_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/3_0003/3_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/3_0003/3_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/3_0003/3_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/3_0003/3_merged.c:4: Warning: 
  No 'assigns' specification for function 'main3'.
  Callers assumptions might be imprecise.
