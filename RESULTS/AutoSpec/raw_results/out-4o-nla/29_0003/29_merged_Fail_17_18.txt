[kernel] Parsing out/29_0003/29_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/29_0003/29_merged.c:27: Warning: 
  Body of function main29 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_main29_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   17 / 18
  Qed:               7
  Alt-Ergo 2.5.4:    6 (11ms-180ms-495ms)
  Z3 4.8.12:         4 (1.1s-2.9s-7.6s)
  Timeout:           1
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 14):
Let x_1 = p + (x * y).
Let x_2 = w + (y * y).
Let x_3 = z + (x * x).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (x_1 * x_1) <= (x_2 * x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (7.6s) (14920777)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 15):
Let x_1 = p + (x * y).
Let x_2 = w + (y * y).
Let x_3 = z + (x * x).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_1 * x_1) <= (x_2 * x_3).
}
Prove: exists i_6 : Z. (((1 + i_6) = n) -> ((x * x * i_6) = x_3)).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (1.4s) (4125606)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 15):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
}
Prove: exists i : Z. ((i = n) -> ((x * x * i) = 0)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (237ms) (8765)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 16):
Let x_1 = z + (x * x).
Let x_2 = p + (x * y).
Let x_3 = w + (y * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x_3 * x_1).
  (* Invariant *)
  Have: (((1 + i_6) = n) -> ((i_6 * x * x) = x_1)).
}
Prove: exists i_7 : Z. (((1 + i_7) = n) -> ((y * y * i_7) = x_3)).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (1.6s) (3949534)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 16):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((n = i) -> ((i * x * x) = 0)).
}
Prove: exists i_1 : Z. ((i_1 = n) -> ((y * y * i_1) = 0)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (309ms) (10771)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 17):
Let x_1 = w + (y * y).
Let x_2 = z + (x * x).
Let x_3 = p + (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_3 * x_3) <= (x_1 * x_2).
  (* Invariant *)
  Have: (((1 + i_6) = n) -> ((i_6 * x * x) = x_2)).
  (* Invariant *)
  Have: (((1 + i_7) = n) -> ((i_7 * y * y) = x_1)).
}
Prove: exists i_8 : Z. (((1 + i_8) = n) -> ((x * y * i_8) = x_3)).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (1.1s) (3685604)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 17):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((n = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n = i_1) -> ((i_1 * y * y) = 0)).
}
Prove: exists i_2 : Z. ((i_2 = n) -> ((x * y * i_2) = 0)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (495ms) (14413)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 18):
Let x_1 = p + (x * y).
Let x_2 = w + (y * y).
Let x_3 = z + (x * x).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_1 * x_1) <= (x_2 * x_3).
  (* Invariant *)
  Have: (((1 + i_6) = n) -> ((i_6 * x * x) = x_3)).
  (* Invariant *)
  Have: (((1 + i_7) = n) -> ((i_7 * y * y) = x_2)).
  (* Invariant *)
  Have: (((1 + i_8) = n) -> ((i_8 * x * y) = x_1)).
}
Prove: 0 <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (17ms) (152)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 19):
Let x_1 = z + (x * x).
Let x_2 = p + (x * y).
Let x_3 = w + (y * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x_3 * x_1).
  (* Invariant *)
  Have: (((1 + i_6) = n) -> ((i_6 * x * x) = x_1)).
  (* Invariant *)
  Have: (((1 + i_7) = n) -> ((i_7 * y * y) = x_3)).
  (* Invariant *)
  Have: (((1 + i_8) = n) -> ((i_8 * x * y) = x_2)).
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (49443)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (11ms) (145)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 20):
Let x_1 = w + (y * y).
Let x_2 = z + (x * x).
Let x_3 = p + (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(n - 1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x_3 * x_3) <= (x_1 * x_2).
  (* Invariant *)
  Have: (((1 + i_6) = n) -> ((i_6 * x * x) = x_2)).
  (* Invariant *)
  Have: (((1 + i_7) = n) -> ((i_7 * y * y) = x_1)).
  (* Invariant *)
  Have: (((1 + i_8) = n) -> ((i_8 * x * y) = x_3)).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (49514)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (15ms) (146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/29_0003/29_merged.c, line 35):
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: ((n_1 = i) -> ((i * x * x) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_1) -> ((i_1 * y * y) = 0)).
  (* Invariant *)
  Have: ((n_1 = i_2) -> ((i_2 * x * y) = 0)).
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: ((n = i_3) -> ((i_3 * x * x) = z)).
  (* Invariant *)
  Have: ((n = i_4) -> ((i_4 * y * y) = w)).
  (* Invariant *)
  Have: ((n = i_5) -> ((i_5 * x * y) = p)).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Else *)
  Have: n <= 0.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0003/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0003/29_merged.c:6: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
