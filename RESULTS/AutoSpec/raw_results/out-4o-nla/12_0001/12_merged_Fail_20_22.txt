[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/12_0001/12_merged.c:28: Warning: 
  Body of function main12 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_main12_loop_invariant_4_preserved (Qed 10ms) (Z3)
[wp] [Timeout] typed_main12_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   20 / 22
  Qed:              13
  Alt-Ergo 2.5.4:    7 (5ms-19ms-91ms)
  Timeout:           2
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Let x = B * q.
Let x_1 = r_2 + x.
Let x_2 = r_2 + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(t) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r_2) /\ (r_2 < B).
  (* Invariant *)
  Have: (x_1 % B) = r_2.
  (* Invariant *)
  Have: (x_1 / B) = q.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r_2) = B
  Then { Have: r = 0. }
  Else { Have: r_2 = r_1. Have: (1 + r_1) = r. }
}
Prove: (0 <= r) /\ (r < B).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35417)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (99)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r_1) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: (x_1 / B) = q.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then { Have: r_1 = 0. }
  Else { Have: (1 + r) = r_1. }
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
}
Prove: ((1 + r + x) % B) = r_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (91ms) (3192)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 % B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = B * q.
Let x_1 = 1 + r + x.
Let x_2 = x_1 % B.
Let x_3 = r + x.
Let x_4 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q_1) /\ is_sint32(q) /\ is_sint32(r_1) /\
      is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_4) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_3 % B) = r.
  (* Invariant *)
  Have: (x_3 / B) = q.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then {
    Let x_5 = 1 + r.
    Have: (1 + q) = q_1.
    Have: ((1 + r + (q * x_5)) % x_5) = 0.
  }
  Else {
    Let x_6 = (1 + r + (B * q_1)) % B.
    Have: (q = q_1) /\ (x_6 = (1 + r_1)) /\ (x_6 = x_5).
  }
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
}
Prove: (x_1 / B) = q_1.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 / B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30251)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (43)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Let x = B * q.
Let x_1 = 1 + r + x.
Let x_2 = x_1 % B.
Let x_3 = r + x.
Let x_4 = r + t + x.
Let x_5 = x_1 / B.
Assume {
  Type: is_sint32(B) /\ is_sint32(q_1) /\ is_sint32(q) /\ is_sint32(r_1) /\
      is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_4) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_3 % B) = r.
  (* Invariant *)
  Have: (x_3 / B) = q.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then {
    Let x_6 = 1 + r.
    Let x_7 = 1 + r + (q * x_6).
    Let x_8 = x_7 / x_6.
    Have: (x_8 = (1 + q_1)) /\ (x_8 = (1 + q)).
    Have: (x_7 % x_6) = 0.
  }
  Else { Have: (x_5 = q) /\ (x_2 = (1 + r_1)) /\ (x_2 = x_6). }
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
}
Prove: (x_2 + (B * x_5)) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (37151)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (216)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_1.
Let x_3 = r_1 + x_2.
Let x_4 = r_1 + t + x_2.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(x_4) /\
      is_sint32(r_1 + t + x_2 - r - x).
  (* Pre-condition *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
  (* Invariant *)
  Have: (x_3 % B) = r_1.
  (* Invariant *)
  Have: (x_3 / B) = q_1.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q_1.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then {
    Let x_5 = 1 + r_1.
    Let x_6 = 1 + r_1 + (q_1 * x_5).
    Let x_7 = 1 + q_1.
    Let x_8 = x_7 * x_5.
    Have: x_7 = q.
    Have: (x_6 = (r + x_8)) /\ (x_8 = x_6).
  }
  Else { Have: q_1 = q. Have: x_5 = r. }
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: (x_1 / B) = q.
}
Prove: x_1 <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (60ms) (180367)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (13ms) (326)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = r + x - 1.
Let x_3 = x_2 / B.
Let x_4 = B * x_3.
Let x_5 = B + x_4.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t - 1) /\
      is_sint32(r + t + x - 1) /\ is_sint32(x_3) /\
      is_sint32(r + x - 1 - x_4).
  (* Pre-condition *)
  Have: 0 < (r + t + x).
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (x_4 < x_1) /\ (x_1 <= x_5).
  (* Invariant *)
  Have: (1 + (x_2 % B) + x_4) = x_1.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: t != 0.
  If x_5 = x_1
  Then {
    Let x_6 = 1 + q_1.
    Have: (((B * x_6) - 1) / B) = q_1.
    Have: x_6 = q.
    Have: r = 0.
  }
  Else { Have: ((1 + r_1) = r) /\ (((r_1 + x) / B) = q). }
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: (x_1 / B) = q.
  (* Invariant *)
  Have: 0 < t.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (43578)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (248)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/12_0001/12_merged.c, line 40):
Let x = r + (B * q).
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x % B) = r.
  (* Invariant *)
  Have: (x / B) = q.
  (* Invariant *)
  Have: 0 <= q.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
