[kernel] Parsing out/7_0005/7_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/7_0005/7_merged.c:44: Warning: 
  Body of function main7 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 41 goals scheduled
[wp] [Timeout] typed_main7_loop_invariant_preserved (Qed 30ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_3_preserved (Qed 40ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_13_preserved (Qed 62ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_15_preserved (Qed 57ms) (Z3)
[wp] [Timeout] typed_main7_assert_missing_return (Qed 5ms) (Z3)
[wp] Proved goals:   36 / 41
  Qed:              31
  Alt-Ergo 2.5.4:    1 (2.5s)
  Z3 4.8.12:         4 (10ms-553ms-2.0s)
  Timeout:           5
------------------------------------------------------------
  Function main7
------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 18):
Let x_1 = q * x.
Let x_2 = s_2 * y.
Let x_3 = x_1 + x_2.
Let x_4 = i * x.
Let x_5 = i_1 * y.
Let x_6 = x_4 + x_5.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_2).
  (* Invariant *)
  Have: (p * s_2) = (1 + (q * r_2)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_3).
  (* Invariant *)
  Have: ((p * x) + (r_2 * y)) = x_6.
  (* Invariant *)
  Have: (x_4 + x_5 + x_1 + x_2) <= (x + y).
  (* Then *)
  Have: x_3 != x_6.
  If x_3 < x_6
  Then { Have: (r_2 = r_1) /\ (s_2 = s). Have: (r + s) = r_1. }
  Else { Have: (s_2 = s_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1). }
}
Prove: (0 <= r) /\ (0 <= s).
Prover Z3 4.8.12 returns Timeout (Qed:30ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:30ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 19):
Let x_1 = q_2 * x.
Let x_2 = s_2 * y.
Let x_3 = x_1 + x_2.
Let x_4 = i * x.
Let x_5 = i_1 * y.
Let x_6 = x_4 + x_5.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_2).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 <= p_2) /\ (0 <= q_2).
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_3).
  (* Invariant *)
  Have: ((p_2 * x) + (r_2 * y)) = x_6.
  (* Invariant *)
  Have: (x_4 + x_5 + x_1 + x_2) <= (x + y).
  (* Then *)
  Have: x_3 != x_6.
  If x_3 < x_6
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
}
Prove: (p * s) = (1 + (q * r)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (2.5s) (3912)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 20):
Let x_1 = q_2 * x.
Let x_2 = s_2 * y.
Let x_3 = x_1 + x_2.
Let x_4 = i * x.
Let x_5 = i_1 * y.
Let x_6 = x_4 + x_5.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_2).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 <= p_2) /\ (0 <= q_2).
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_3).
  (* Invariant *)
  Have: ((p_2 * x) + (r_2 * y)) = x_6.
  (* Invariant *)
  Have: (x_4 + x_5 + x_1 + x_2) <= (x + y).
  (* Then *)
  Have: x_3 != x_6.
  If x_3 < x_6
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
}
Prove: (0 <= p) /\ (0 <= q).
Prover Z3 4.8.12 returns Timeout (Qed:40ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:40ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 22):
Let x_1 = s - r.
Let x_2 = q - p.
Let x_3 = q * x.
Let x_4 = s * y.
Let x_5 = x_3 + x_4.
Let x_6 = i * x.
Let x_7 = i_1 * y.
Let x_8 = x_6 + x_7.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x_8) /\ is_sint32(x_5) /\ is_sint32(x_3 + x_4 - x_6 - x_7).
  (* Residual *)
  When: x_8 <= x_5.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < x_8) /\ (0 < x_5).
  (* Invariant *)
  Have: ((p * x) + (r * y)) = x_8.
  (* Invariant *)
  Have: (x_6 + x_7 + x_3 + x_4) <= (x + y).
  (* Then *)
  Have: x_5 != x_8.
  (* Invariant *)
  Have: r <= s.
  (* Invariant *)
  Have: (p * x_1) = (1 + (r * x_2)).
  (* Invariant *)
  Have: p <= q.
}
Prove: (x_6 + x_7 + (x * x_2) + (y * x_1)) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:41ms) (10ms) (10527)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 25):
Let x_1 = s - r.
Let x_2 = q - p.
Let x_3 = i * x.
Let x_4 = i_1 * y.
Let x_5 = x * x_2.
Let x_6 = y * x_1.
Let x_7 = q * x.
Let x_8 = s * y.
Let x_9 = x_7 + x_8.
Let x_10 = x_3 + x_4.
Let x_11 = x_5 + x_6.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x_10) /\ is_sint32(x_9) /\ is_sint32(x_11) /\
      is_sint32(x_7 + x_8 - x_5 - x_6).
  (* Residual *)
  When: x_10 <= x_9.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < x_10) /\ (0 < x_9).
  (* Invariant *)
  Have: ((p * x) + (r * y)) = x_10.
  (* Invariant *)
  Have: (x_3 + x_4 + x_7 + x_8) <= (x + y).
  (* Then *)
  Have: x_9 != x_10.
  Have: (x_3 + x_4 + x_5 + x_6) = x_9.
  (* Invariant *)
  Have: r <= s.
  (* Invariant *)
  Have: (p * x_1) = (1 + (r * x_2)).
  (* Invariant *)
  Have: p <= q.
}
Prove: (0 < x_11) /\ (x_11 < x_9).
Prover Z3 4.8.12 returns Valid (Qed:48ms) (10ms) (36635)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 27):
Let x_1 = (q * x) + (s * y).
Let x_2 = q_1 * x.
Let x_3 = s_1 * y.
Let x_4 = x_2 + x_3.
Let x_5 = i * x.
Let x_6 = i_1 * y.
Let x_7 = x_5 + x_6.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_7) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_1).
  (* Invariant *)
  Have: (p_2 * s_1) = (1 + (q_1 * r_2)).
  (* Invariant *)
  Have: (0 <= p_2) /\ (0 <= q_1).
  (* Invariant *)
  Have: (0 < x_7) /\ (0 < x_4).
  (* Invariant *)
  Have: ((p_2 * x) + (r_2 * y)) = x_7.
  (* Invariant *)
  Have: (x_5 + x_6 + x_2 + x_3) <= (x + y).
  (* Then *)
  Have: x_4 != x_7.
  If x_4 < x_7
  Then {
    Have: (p_2 = p_1) /\ (q_1 = q) /\ (r_2 = r_1) /\ (s_1 = s).
    Have: (a + (q * x) + (s * y)) = x_7.
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_8 = x * (q_1 - p).
    Let x_9 = y * (s_1 - r).
    Have: (p_2 = p) /\ (r_2 = r) /\ ((p + q) = q_1) /\ ((r + s) = s_1) /\
        ((a + x_8 + x_9) = x_4) /\ ((x_5 + x_6 + x_8 + x_9) = x_4).
  }
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < a) /\ (0 < x_1).
}
Prove: ((p * x) + (r * y)) = a.
Prover Z3 4.8.12 returns Valid (Qed:52ms) (2.0s) (3856447)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 30):
Let x_1 = p * x.
Let x_2 = r * y.
Let x_3 = x_1 + x_2.
Let x_4 = q * x.
Let x_5 = s * y.
Let x_6 = x_4 + x_5.
Let x_7 = q_2 * x.
Let x_8 = s_2 * y.
Let x_9 = x_7 + x_8.
Let x_10 = i * x.
Let x_11 = i_1 * y.
Let x_12 = x_10 + x_11.
Let x_13 = x + y.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_12) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_2).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 <= p_2) /\ (0 <= q_2).
  (* Invariant *)
  Have: (0 < x_12) /\ (0 < x_9).
  (* Invariant *)
  Have: ((p_2 * x) + (r_2 * y)) = x_12.
  (* Invariant *)
  Have: (x_10 + x_11 + x_7 + x_8) <= x_13.
  (* Then *)
  Have: x_9 != x_12.
  If x_9 < x_12
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((x_4 + x_5 + (x * (p_1 - q)) + (y * (r_1 - s))) = x_12).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_4 + x_5 + (x * (q_1 - q)) + (y * (s_1 - s)))
           = ((q_1 * x) + (s_1 * y))).
  }
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_6).
}
Prove: (x_1 + x_4 + x_2 + x_5) <= x_13.
Prover Z3 4.8.12 returns Timeout (Qed:62ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:62ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 32):
Let x_1 = p * x.
Let x_2 = q * x.
Let x_3 = r * y.
Let x_4 = s * y.
Let x_5 = x + y.
Let x_6 = x_1 + x_3.
Let x_7 = x_2 + x_4.
Let x_8 = q_2 * x.
Let x_9 = s_2 * y.
Let x_10 = x_8 + x_9.
Let x_11 = i * x.
Let x_12 = i_1 * y.
Let x_13 = x_11 + x_12.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_13) /\ is_sint32(x_6) /\
      is_sint32(x_7) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i_2 * x) + (i_3 * y)) = x.
  (* Invariant *)
  Have: (0 <= r_2) /\ (0 <= s_2).
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 <= p_2) /\ (0 <= q_2).
  (* Invariant *)
  Have: (0 < x_13) /\ (0 < x_10).
  (* Invariant *)
  Have: ((p_2 * x) + (r_2 * y)) = x_13.
  (* Invariant *)
  Have: (x_11 + x_12 + x_8 + x_9) <= x_5.
  (* Then *)
  Have: x_10 != x_13.
  If x_10 < x_13
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((x_2 + x_4 + (x * (p_1 - q)) + (y * (r_1 - s))) = x_13).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_2 + x_4 + (x * (q_1 - q)) + (y * (s_1 - s)))
           = ((q_1 * x) + (s_1 * y))).
  }
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_7).
  (* Invariant *)
  Have: (x_1 + x_2 + x_3 + x_4) <= x_5.
}
Prove: exists i_5,i_4 : Z. ((x * i_5) + (y * i_4)) = x_6.
Prover Z3 4.8.12 returns Timeout (Qed:57ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:57ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 32):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: exists i_1,i : Z. ((a * i_1) + (b * i)) = a.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (210ms) (276378)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0005/7_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0005/7_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/7_0005/7_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/7_0005/7_merged.c, line 58):
Let x_1 = q * x.
Let x_2 = s * y.
Let x_3 = x_1 + x_2.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i * x) + (i_1 * y)) = x.
  (* Invariant *)
  Have: (0 <= r) /\ (0 <= s).
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 <= p) /\ (0 <= q).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: x_3 = ((p * x) + (r * y)).
  (* Invariant *)
  Have: ((2 * x_1) + (2 * x_2)) <= (x + y).
  (* Invariant *)
  Have: x_3 = ((i_2 * x) + (i_3 * y)).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/7_0005/7_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/7_0005/7_merged.c:5: Warning: 
  No 'assigns' specification for function 'main7'.
  Callers assumptions might be imprecise.
