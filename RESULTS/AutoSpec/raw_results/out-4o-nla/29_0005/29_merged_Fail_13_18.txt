[kernel] Parsing out/29_0005/29_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/29_0005/29_merged.c:27: Warning: 
  Body of function main29 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_main29_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_main29_loop_invariant_established (Qed 0.78ms) (Z3)
[wp] [Timeout] typed_main29_loop_invariant_2_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_main29_loop_invariant_2_established (Qed 0.99ms) (Z3)
[wp] [Timeout] typed_main29_assert_missing_return (Qed 2ms) (Z3)
[wp] Proved goals:   13 / 18
  Qed:               7
  Alt-Ergo 2.5.4:    3 (9ms-406ms-958ms)
  Z3 4.8.12:         3 (10ms-23ms-40ms)
  Timeout:           5
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 14):
Let x_1 = x * y.
Let x_2 = p / x_1.
Let x_3 = y * y * x_2.
Let x_4 = x * x * x_2.
Let x_5 = 0 / x_1.
Let x_6 = p + x_1.
Let x_7 = (x * x) + x_4.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_5) = 0.
  (* Invariant *)
  Have: (y * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_2) = p.
  (* Invariant *)
  Have: (p * p) <= (x * x * y * y * x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (x * x * (x_6 / x_1)) = x_7.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 14):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
}
Prove: (x * x * (0 / (x * y))) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.78ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.78ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 15):
Let x_1 = x * y.
Let x_2 = p / x_1.
Let x_3 = y * y * x_2.
Let x_4 = x * x.
Let x_5 = p + x_1.
Let x_6 = x_5 / x_1.
Let x_7 = x * x * x_6.
Let x_8 = x_7 - x_4.
Let x_9 = 0 / x_1.
Let x_10 = (y * y) + x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_5) /\ is_sint32(x_3) /\ is_sint32(x_10) /\
      is_sint32(x_7) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: x_7 = (x_4 + (x * x * x_2)).
  (* Invariant *)
  Have: (x * y * x_2) = p.
  (* Invariant *)
  Have: (p * p) <= (y * y * x_8 * x_2).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (y * y * x_6) = x_10.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 15):
Let x_1 = 0 / (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
}
Prove: (y * y * x_1) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.99ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.99ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 16):
Let x_1 = y * y.
Let x_2 = x * y.
Let x_3 = p + x_2.
Let x_4 = x_3 / x_2.
Let x_5 = y * y * x_4.
Let x_6 = x * x.
Let x_7 = x * x * x_4.
Let x_8 = x_7 - x_6.
Let x_9 = x_5 - x_1.
Let x_10 = p / x_2.
Let x_11 = 0 / x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_5) /\
      is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_7 = (x_6 + (x * x * x_10)).
  (* Invariant *)
  Have: x_5 = (x_1 + (y * y * x_10)).
  (* Invariant *)
  Have: (x * y * x_10) = p.
  (* Invariant *)
  Have: (p * p) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (x * y * x_4) = x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (958ms) (8830)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 16):
Let x_1 = 0 / (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (x * y * x_1) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (32239)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (9ms) (280)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 17):
Let x_1 = x * y.
Let x_2 = p + x_1.
Let x_3 = x_2 / x_1.
Let x_4 = y * y.
Let x_5 = y * y * x_3.
Let x_6 = x * x.
Let x_7 = x * x * x_3.
Let x_8 = x_7 - x_6.
Let x_9 = x_5 - x_4.
Let x_10 = p / x_1.
Let x_11 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_5) /\
      is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_7 = (x_6 + (x * x * x_10)).
  (* Invariant *)
  Have: x_5 = (x_4 + (y * y * x_10)).
  (* Invariant *)
  Have: (x * y * x_10) = p.
  (* Invariant *)
  Have: (p * p) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * y * x_3) = x_2.
}
Prove: (x_2 * x_2) <= (x * x * y * y * x_3 * x_3).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (252ms) (1742)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 18):
Let x_1 = x * y.
Let x_2 = p + x_1.
Let x_3 = x_2 / x_1.
Let x_4 = y * y.
Let x_5 = y * y * x_3.
Let x_6 = x * x.
Let x_7 = x * x * x_3.
Let x_8 = x_7 - x_6.
Let x_9 = x_5 - x_4.
Let x_10 = p / x_1.
Let x_11 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_5) /\
      is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_7 = (x_6 + (x * x * x_10)).
  (* Invariant *)
  Have: x_5 = (x_4 + (y * y * x_10)).
  (* Invariant *)
  Have: (x * y * x_10) = p.
  (* Invariant *)
  Have: (p * p) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * y * x_3) = x_2.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x * x * y * y * x_3 * x_3).
}
Prove: 0 <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (76357)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 19):
Let x_1 = x * y.
Let x_2 = p + x_1.
Let x_3 = x_2 / x_1.
Let x_4 = x * x * x_3.
Let x_5 = y * y.
Let x_6 = y * y * x_3.
Let x_7 = x * x.
Let x_8 = x_4 - x_7.
Let x_9 = x_6 - x_5.
Let x_10 = p / x_1.
Let x_11 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_4) /\ is_sint32(x_6) /\
      is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_4 = (x_7 + (x * x * x_10)).
  (* Invariant *)
  Have: x_6 = (x_5 + (y * y * x_10)).
  (* Invariant *)
  Have: (x * y * x_10) = p.
  (* Invariant *)
  Have: (p * p) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_7 <= x_4.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * y * x_3) = x_2.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x * x * y * y * x_3 * x_3).
  (* Invariant *)
  Have: 0 <= x_4.
}
Prove: 0 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (40ms) (158544)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 20):
Let x_1 = x * y.
Let x_2 = p + x_1.
Let x_3 = x_2 / x_1.
Let x_4 = y * y * x_3.
Let x_5 = x * x * x_3.
Let x_6 = y * y.
Let x_7 = x * x.
Let x_8 = x_5 - x_7.
Let x_9 = x_4 - x_6.
Let x_10 = p / x_1.
Let x_11 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_4) /\
      is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: x_5 = (x_7 + (x * x * x_10)).
  (* Invariant *)
  Have: x_4 = (x_6 + (y * y * x_10)).
  (* Invariant *)
  Have: (x * y * x_10) = p.
  (* Invariant *)
  Have: (p * p) <= (x_8 * x_9).
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * y * x_3) = x_2.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x * x * y * y * x_3 * x_3).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= x_4.
}
Prove: 0 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (40931)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/29_0005/29_merged.c, line 35):
Let x_1 = x * y.
Let x_2 = p / x_1.
Let x_3 = y * y * x_2.
Let x_4 = x * x * x_2.
Let x_5 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_4) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_5) = 0.
  (* Invariant *)
  Have: (y * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = 0.
  (* Invariant *)
  Have: (x * y * x_2) = p.
  (* Invariant *)
  Have: (p * p) <= (x * x * y * y * x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Else *)
  Have: n <= 0.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0005/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0005/29_merged.c:6: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
