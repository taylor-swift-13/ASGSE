[kernel] Parsing out/23_0005/23_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/23_0005/23_merged.c:22: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/23_0005/23_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_2_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_main23_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   20 / 22
  Qed:              12
  Alt-Ergo 2.5.4:    8
  Timeout:           2
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 9):
Let x_1 = x * x.
Let x_2 = x + x_1.
Let x_3 = 1 + x.
Let x_4 = x_3 * x_3.
Let x_5 = -y.
Let x_6 = x + x_1 - y.
Let x_7 = x_6 * x_6.
Let x_8 = 1 + x + x_1 - y.
Let x_9 = 1 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_9) /\ is_sint32(x_6) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: (y <= x_2) /\ (x_2 <= (10 + y)).
  (* Invariant *)
  Have: x_7 <= (x_8 * x_8).
  (* Invariant *)
  Have: forall i : Z. let x_10 = y + i in ((x_2 <= x_10) -> ((x_10 <= x_2) ->
      ((i * i) <= x_7))).
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_1 = y) \/ (x_1 < y).
  (* Invariant *)
  Have: y <= (10 + x_1).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_1 <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> ((x_2 <= (y + i)) -> ((i * i) <= y))).
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 = x_9) \/ (x_4 <= y).
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 10):
Let x_1 = 1 + x.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + y.
Let x_4 = x * x.
Let x_5 = x + x_4.
Let x_6 = -y.
Let x_7 = x + x_4 - y.
Let x_8 = x_7 * x_7.
Let x_9 = 1 + x + x_4 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (y <= x_5) /\ (x_5 <= (10 + y)).
  (* Invariant *)
  Have: x_8 <= (x_9 * x_9).
  (* Invariant *)
  Have: forall i : Z. let x_10 = y + i in ((x_5 <= x_10) -> ((x_10 <= x_5) ->
      ((i * i) <= x_8))).
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: (x_4 = y) \/ (x_4 < y).
  (* Invariant *)
  Have: y <= (10 + x_4).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_4 <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> ((x_5 <= (y + i)) -> ((i * i) <= y))).
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x_3) \/ (x_2 <= y).
}
Prove: x_2 = x_4.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 11):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x + x_3.
Let x_5 = x * x.
Let x_6 = x_1 + x_5.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Let x_9 = -x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x + x_3 - x_1) /\
      is_sint32(1 + x + x_3 - x_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_7 <= (x_8 * x_8).
  (* Invariant *)
  Have: forall i : Z. ((x_1 <= i) -> ((i <= x_1) -> ((i * i) <= x_7))).
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_4 = x_6) \/ (x_6 < x_4).
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_4 <= (10 + x_1 + x_5).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((x_1 <= i) -> ((i <= x) -> ((x_1 + (i * i)) <= x_4))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x_1) \/ (x_1 <= x).
}
Prove: x <= (9 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (10511)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 12):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x + x_3.
Let x_5 = x * x.
Let x_6 = x_1 + x_5.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Let x_9 = -x_1.
Let x_10 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x + x_3 - x_1) /\
      is_sint32(1 + x + x_3 - x_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_7 <= (x_8 * x_8).
  (* Invariant *)
  Have: forall i : Z. ((x_1 <= i) -> ((i <= x_1) -> ((i * i) <= x_7))).
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_4 = x_6) \/ (x_6 < x_4).
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_4 <= (10 + x_1 + x_5).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((x_1 <= i) -> ((i <= x) -> ((x_1 + (i * i)) <= x_4))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x_1) \/ (x_1 <= x).
  (* Invariant *)
  Have: x <= (9 + x_1).
}
Prove: x_4 < (x_1 + (x_10 * x_10)).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10627)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 12):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
}
Prove: x_1 <= (x_2 * x_2).
Prover Z3 4.8.12 returns Valid (Qed:0.86ms) (10ms) (9265)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.86ms) (4ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 13):
Let x_1 = 2 + x.
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 1 + y.
Let x_5 = x + x_3.
Let x_6 = x * x.
Let x_7 = -y.
Let x_8 = x + x_3 - y.
Let x_9 = x_8 * x_8.
Let x_10 = 1 + x + x_3 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (y <= x_5) /\ (x_5 <= (10 + y)).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: forall i : Z. let x_11 = y + i in ((x_5 <= x_11) -> ((x_11 <= x_5) ->
      ((i * i) <= x_9))).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: (x_6 = y) \/ (x_6 < y).
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: y <= (10 + x_6).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_6 <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> ((x_5 <= (y + i)) -> ((i * i) <= y))).
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = x_4) \/ (x_3 <= y).
  (* Invariant *)
  Have: y <= (9 + x_3).
  (* Invariant *)
  Have: y < (x_1 * x_1).
}
Prove: ((-1) <= x) /\ (x <= 9).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (11085)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 15):
Let x_2 = 1 + x_1.
Let x_3 = x_2 * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = 2 + x_1.
Let x_6 = x_1 * x_1.
Let x_7 = x + x_6.
Let x_8 = x * x.
Let x_9 = 1 + x.
Let x_10 = -x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_1 + x_3 - x) /\
      is_sint32(1 + x_1 + x_3 - x).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_8 <= (x_9 * x_9).
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x) -> ((i * i) <= x_8))).
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: (x_4 = x_7) \/ (x_7 < x_4).
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: x_4 <= (10 + x + x_6).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_7 <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x_1) -> ((x + (i * i)) <= x_4))).
  (* Invariant *)
  Have: x <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x) \/ (x <= x_1).
  (* Invariant *)
  Have: x_1 <= (9 + x).
  (* Invariant *)
  Have: x_4 < (x + (x_5 * x_5)).
  (* Invariant *)
  Have: ((-1) <= x_1) /\ (x_1 <= 9).
}
Prove: x <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10699)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (48)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 16):
Let x_2 = 1 + x_1.
Let x_3 = x_2 * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = 2 + x_1.
Let x_6 = x_1 * x_1.
Let x_7 = x + x_6.
Let x_8 = x * x.
Let x_9 = 1 + x.
Let x_10 = -x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_1 + x_3 - x) /\
      is_sint32(1 + x_1 + x_3 - x).
  (* Goal *)
  When: (x <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_8 <= (x_9 * x_9).
  (* Invariant *)
  Have: forall i_1 : Z. ((x <= i_1) -> ((i_1 <= x) -> ((i_1 * i_1) <= x_8))).
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: (x_4 = x_7) \/ (x_7 < x_4).
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: x_4 <= (10 + x + x_6).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_7 <= x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((x <= i_1) -> ((i_1 <= x_1) ->
      ((x + (i_1 * i_1)) <= x_4))).
  (* Invariant *)
  Have: x <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x) \/ (x <= x_1).
  (* Invariant *)
  Have: x_1 <= (9 + x).
  (* Invariant *)
  Have: x_4 < (x + (x_5 * x_5)).
  (* Invariant *)
  Have: ((-1) <= x_1) /\ (x_1 <= 9).
  (* Invariant *)
  Have: x <= x_2.
}
Prove: (x + (i * i)) <= (1 + x_1 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (10847)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (49)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 17):
Let x_2 = 1 + x_1.
Let x_3 = x_2 * x_2.
Let x_4 = 1 + x_1 + x_3.
Let x_5 = x_1 + x_3.
Let x_6 = 2 + x_1.
Let x_7 = x_1 * x_1.
Let x_8 = x + x_7.
Let x_9 = x * x.
Let x_10 = 1 + x.
Let x_11 = -x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_1 + x_3 - x) /\
      is_sint32(1 + x_1 + x_3 - x).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x) -> ((i * i) <= x_9))).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: (x_5 = x_8) \/ (x_8 < x_5).
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_5 <= (10 + x + x_7).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_8 <= x_5.
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x_1) -> ((x + (i * i)) <= x_5))).
  (* Invariant *)
  Have: x <= x_5.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x) \/ (x <= x_1).
  (* Invariant *)
  Have: x_1 <= (9 + x).
  (* Invariant *)
  Have: x_5 < (x + (x_6 * x_6)).
  (* Invariant *)
  Have: ((-1) <= x_1) /\ (x_1 <= 9).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x_2) -> ((x + (i * i)) <= x_4))).
}
Prove: x <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (10985)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 17):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: forall i : Z. ((x <= i) -> ((i <= x) -> ((i * i) <= x_1))).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30440)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (20)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0005/23_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0005/23_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0005/23_merged.c, line 19) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0005/23_merged.c, line 19) (2/2):
Call Result at line 22
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0005/23_merged.c:4: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/23_0005/23_merged.c:22: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
