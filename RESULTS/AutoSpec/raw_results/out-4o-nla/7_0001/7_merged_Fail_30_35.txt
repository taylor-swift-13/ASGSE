[kernel] Parsing out/7_0001/7_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/7_0001/7_merged.c:41: Warning: 
  Body of function main7 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 35 goals scheduled
[wp] [Timeout] typed_main7_loop_invariant_11_preserved (Qed 51ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_12_preserved (Qed 50ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_13_preserved (Qed 63ms) (Z3)
[wp] [Timeout] typed_main7_loop_invariant_14_preserved (Qed 66ms) (Z3)
[wp] [Timeout] typed_main7_assert_missing_return (Qed 5ms) (Z3)
[wp] Proved goals:   30 / 35
  Qed:              26
  Alt-Ergo 2.5.4:    3 (13ms-54ms-135ms)
  Z3 4.8.12:         1 (6.4s)
  Timeout:           5
------------------------------------------------------------
  Function main7
------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 18):
Let x_1 = q * x.
Let x_2 = s * y.
Let x_3 = x_1 + x_2.
Let x_4 = p * x.
Let x_5 = r * y.
Let x_6 = x_4 + x_5.
Let x_7 = q - p.
Let x_8 = s - r.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_6) /\ is_sint32(x_3) /\ is_sint32(x_1 + x_2 - x_4 - x_5).
  (* Residual *)
  When: x_6 <= x_3.
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_6) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_3).
  (* Invariant *)
  Have: (q != p) /\ (s != r).
  (* Invariant *)
  Have: 0 < (r + s).
  (* Invariant *)
  Have: 0 < (p + q).
  (* Then *)
  Have: x_3 != x_6.
}
Prove: (x_4 + x_5 + (x * x_7) + (y * x_8)) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10245)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (13ms) (392)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 19):
Let x_1 = p * x.
Let x_2 = r * y.
Let x_3 = x_1 + x_2.
Let x_4 = q * x.
Let x_5 = s * y.
Let x_6 = x_4 + x_5.
Let x_7 = p - q.
Let x_8 = r - s.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_3) /\ is_sint32(x_6) /\ is_sint32(x_1 + x_2 - x_4 - x_5).
  (* Residual *)
  When: x_6 < x_3.
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (i_1 * x_6) = 0.
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_6).
  (* Invariant *)
  Have: (q != p) /\ (s != r).
  (* Invariant *)
  Have: 0 < (r + s).
  (* Invariant *)
  Have: 0 < (p + q).
}
Prove: (x_4 + x_5 + (x * x_7) + (y * x_8)) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:49ms) (10ms) (10223)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:49ms) (13ms) (390)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 22):
Let x_1 = (q_2 * x) + (s_2 * y).
Let x_2 = (p_2 * x) + (r_2 * y).
Let x_3 = (p * x) + (r * y).
Let x_4 = (q * x) + (s * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_2) = 0.
  (* Invariant *)
  Have: (i_1 * x_1) = 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_1).
  (* Invariant *)
  Have: (q_2 != p_2) /\ (s_2 != r_2).
  (* Invariant *)
  Have: 0 < (r_2 + s_2).
  (* Invariant *)
  Have: 0 < (p_2 + q_2).
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then {
    Let x_5 = p_1 * x.
    Let x_6 = r_1 * y.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((i_1 * (x_5 + x_6)) = 0) /\
        ((x_5 + x_6 + (i_1 * x_4))
           = ((q * x) + (s * y) + (x * (p_1 - q)) + (y * (r_1 - s)))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_7 = (q_1 * x) + (s_1 * y).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((i_1 * x_7) = 0) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s))) = x_7).
  }
}
Prove: (0 < x_3) /\ (0 < x_4).
Prover Z3 4.8.12 returns Valid (Qed:52ms) (6.4s) (16474811)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 28):
Let x_1 = (p * x) + (r * y).
Let x_2 = (q * x) + (s * y).
Let x_3 = (q_2 * x) + (s_2 * y).
Let x_4 = (p_2 * x) + (r_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: x_2 != x_1.
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_4) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: (q_2 != p_2) /\ (s_2 != r_2).
  (* Invariant *)
  Have: 0 < (r_2 + s_2).
  (* Invariant *)
  Have: 0 < (p_2 + q_2).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_5 = p_1 * x.
    Let x_6 = r_1 * y.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((i_1 * (x_5 + x_6)) = 0) /\
        ((x_5 + x_6 + (i_1 * x_2))
           = ((q * x) + (s * y) + (x * (p_1 - q)) + (y * (r_1 - s)))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_7 = (q_1 * x) + (s_1 * y).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((i_1 * x_7) = 0) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s))) = x_7).
  }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < x_2).
}
Prove: (q != p) /\ (s != r).
Prover Z3 4.8.12 returns Timeout (Qed:51ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:51ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 29):
Let x_1 = (q * x) + (s * y).
Let x_2 = (p * x) + (r * y).
Let x_3 = (q_2 * x) + (s_2 * y).
Let x_4 = (p_2 * x) + (r_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_4) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: (q_2 != p_2) /\ (s_2 != r_2).
  (* Invariant *)
  Have: 0 < (r_2 + s_2).
  (* Invariant *)
  Have: 0 < (p_2 + q_2).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_5 = p_1 * x.
    Let x_6 = r_1 * y.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((i_1 * (x_5 + x_6)) = 0) /\
        ((x_5 + x_6 + (i_1 * x_1))
           = ((q * x) + (s * y) + (x * (p_1 - q)) + (y * (r_1 - s)))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_7 = (q_1 * x) + (s_1 * y).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((i_1 * x_7) = 0) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s))) = x_7).
  }
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_1).
  (* Invariant *)
  Have: ((x_1 != x_2) -> ((q != p) /\ (s != r))).
}
Prove: exists i_2 : Z. ((i_2 * x_2) = 0) /\ ((i_2 * x_1) = 0).
Prover Z3 4.8.12 returns Timeout (Qed:50ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:50ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 29):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: exists i : Z. ((a * i) = 0) /\ ((b * i) = 0).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (135ms) (2213)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 30):
Let x_1 = (q * x) + (s * y).
Let x_2 = (p * x) + (r * y).
Let x_3 = (q_2 * x) + (s_2 * y).
Let x_4 = (p_2 * x) + (r_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_4) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: (q_2 != p_2) /\ (s_2 != r_2).
  (* Invariant *)
  Have: 0 < (r_2 + s_2).
  (* Invariant *)
  Have: 0 < (p_2 + q_2).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_5 = x * (p_1 - q).
    Let x_6 = y * (r_1 - s).
    Let x_7 = i_2 * (x_5 + x_6).
    Let x_8 = p_1 * x.
    Let x_9 = r_1 * y.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_7 = (i_1 * (x_8 + x_9))) /\
        (((q * x) + (s * y) + x_5 + x_6 + x_7) = (x_8 + x_9 + (i_1 * x_1))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_10 = (q_1 * x) + (s_1 * y).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((i_1 * x_10) = 0) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s))) = x_10).
  }
  (* Invariant *)
  Have: (i_2 * x_2) = 0.
  (* Invariant *)
  Have: (i_2 * x_1) = 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_1).
  (* Invariant *)
  Have: ((x_1 != x_2) -> ((q != p) /\ (s != r))).
}
Prove: 0 < (r + s).
Prover Z3 4.8.12 returns Timeout (Qed:63ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:63ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 31):
Let x_1 = (q * x) + (s * y).
Let x_2 = (p * x) + (r * y).
Let x_3 = (q_2 * x) + (s_2 * y).
Let x_4 = (p_2 * x) + (r_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: (i_1 * x_4) = 0.
  (* Invariant *)
  Have: (i_1 * x_3) = 0.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: (q_2 != p_2) /\ (s_2 != r_2).
  (* Invariant *)
  Have: 0 < (r_2 + s_2).
  (* Invariant *)
  Have: 0 < (p_2 + q_2).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_5 = x * (p_1 - q).
    Let x_6 = y * (r_1 - s).
    Let x_7 = i_2 * (x_5 + x_6).
    Let x_8 = p_1 * x.
    Let x_9 = r_1 * y.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_7 = (i_1 * (x_8 + x_9))) /\
        (((q * x) + (s * y) + x_5 + x_6 + x_7) = (x_8 + x_9 + (i_1 * x_1))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_10 = (q_1 * x) + (s_1 * y).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((i_1 * x_10) = 0) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s))) = x_10).
  }
  (* Invariant *)
  Have: (i_2 * x_2) = 0.
  (* Invariant *)
  Have: (i_2 * x_1) = 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_1).
  (* Invariant *)
  Have: ((x_1 != x_2) -> ((q != p) /\ (s != r))).
  (* Invariant *)
  Have: 0 < (r + s).
}
Prove: 0 < (p + q).
Prover Z3 4.8.12 returns Timeout (Qed:66ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:66ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/7_0001/7_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/7_0001/7_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion (file out/7_0001/7_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/7_0001/7_merged.c, line 55):
Let x_1 = p * x.
Let x_2 = r * y.
Let x_3 = x_1 + x_2.
Let x_4 = (q * x) + (s * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (i * x) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i * y) = 0.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((i_1 * x_3) = 0) /\ ((x_1 + x_2 + (i_1 * x_4)) = x_4).
  (* Invariant *)
  Have: 0 < (r + s).
  (* Invariant *)
  Have: 0 < (p + q).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/7_0001/7_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/7_0001/7_merged.c:5: Warning: 
  No 'assigns' specification for function 'main7'.
  Callers assumptions might be imprecise.
