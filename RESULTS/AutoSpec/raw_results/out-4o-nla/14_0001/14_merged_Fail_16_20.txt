[kernel] Parsing out/14_0001/14_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/14_0001/14_merged.c:25: Warning: 
  Body of function main14 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_main14_loop_invariant_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_main14_loop_invariant_6_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_main14_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main14_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   16 / 20
  Qed:              12
  Alt-Ergo 2.5.4:    3 (7ms-26ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           4
------------------------------------------------------------
  Function main14
------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 12):
Let x_1 = x * y_2.
Let x_2 = a * b.
Let x_3 = b - y_2.
Let x_4 = y / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\
      is_sint32(2 * x) /\ is_sint32(x_4) /\ is_sint32(x_2 - x_1).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_2 = 0))).
  (* Invariant *)
  Have: y_2 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y_2) ->
      (x_2 = (x_1 + (a * x_3) + (y_2 * (x / lsl(1, x_3))))))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Have: (y_2 = y_1) /\ (x_2 = (z_1 + (y_1 * (z - z_1)))).
    Have: (x + z_1) = z.
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ (x_2 = (z + (x * y))). }
}
Prove: x_2 = (z + (2 * (x * x_4))).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 15):
Let x_1 = x * y_2.
Let x_2 = a * b.
Let x_3 = b - y_2.
Let x_4 = y / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(2 * x) /\
      is_sint32(x_4) /\ is_sint32(x_2 - x_1) /\
      is_sint32(x_2 - (2 * (x * x_4))).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_2 = 0))).
  (* Invariant *)
  Have: y_2 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y_2) ->
      (x_2 = (x_1 + (a * x_3) + (y_2 * (x / lsl(1, x_3))))))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_5 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_5)) /\ (x_2 = (x + z + x_5)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = (2 * (x * x_4))). }
}
Prove: x_4 <= b.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (102933)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 16):
Let x_1 = y / 2.
Let x_2 = x * y_2.
Let x_3 = a * b.
Let x_4 = b - y_2.
Let x_5 = 2 * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_5) /\
      is_sint32(x_1) /\ is_sint32(x_3 - x_2) /\
      is_sint32(x_3 - (2 * (x * x_1))).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_3 = 0))).
  (* Invariant *)
  Have: y_2 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y_2) ->
      (x_3 = (x_2 + (a * x_4) + (y_2 * (x / lsl(1, x_4))))))).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_6 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_6)) /\ (x_3 = (x + z + x_6)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = (2 * (x * x_1))). }
  (* Invariant *)
  Have: x_1 <= b.
}
Prove: a <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (98930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (14ms) (159)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 17):
Let x_1 = 2 * x.
Let x_2 = y / 2.
Let x_3 = x * y_2.
Let x_4 = a * b.
Let x_5 = b - y_2.
Let x_6 = x * x_2.
Let x_7 = b - x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_4 - x_3) /\ is_sint32(x_4 - (2 * x_6)).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= b) -> ((0 <= i_1) -> (x_4 = 0))).
  (* Invariant *)
  Have: y_2 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y_2) ->
      (x_4 = (x_3 + (a * x_5) + (y_2 * (x / lsl(1, x_5))))))).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_8 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_8)) /\ (x_4 = (x + z + x_8)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = (2 * x_6)). }
  (* Invariant *)
  Have: x_2 <= b.
  (* Invariant *)
  Have: a <= x_1.
}
Prove: x_4 = ((2 * x_6) + (a * x_7) + (x_2 * (x_1 / lsl(1, x_7)))).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 17):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Goal *)
  When: (i <= b) /\ (0 <= i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a * b) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 18):
Let x_1 = y / 2.
Let x_2 = a * b.
Let x_3 = x * x_1.
Let x_4 = 2 * x_3.
Let x_5 = b - x_1.
Let x_6 = 2 * x.
Let x_7 = x * y_2.
Let x_8 = b - y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_6) /\
      is_sint32(x_1) /\ is_sint32(x_2 - x_7) /\ is_sint32(x_2 - x_4).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_2 = 0))).
  (* Invariant *)
  Have: y_2 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y_2) ->
      (x_2 = (x_7 + (a * x_8) + (y_2 * (x / lsl(1, x_8))))))).
  (* Invariant *)
  Have: x_7 <= x_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_9 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_9)) /\ (x_2 = (x + z + x_9)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = x_4). }
  (* Invariant *)
  Have: x_1 <= b.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_1) ->
      (x_2 = (x_4 + (a * x_5) + (x_1 * (x_6 / lsl(1, x_5))))))).
}
Prove: x_4 <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (26ms) (638)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 19):
Let x_1 = y / 2.
Let x_2 = x * x_1.
Let x_3 = 2 * x_2.
Let x_4 = a * b.
Let x_5 = b - x_1.
Let x_6 = 2 * x.
Let x_7 = x * y.
Let x_8 = b - y.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_6) /\ is_sint32(x_1) /\ is_sint32(x_4 - x_7) /\
      is_sint32(x_4 - x_3).
  (* Residual *)
  When: (y % 2) != 1.
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_4 = 0))).
  (* Invariant *)
  Have: y <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      (x_4 = (x_7 + (a * x_8) + (y * (x / lsl(1, x_8))))))).
  (* Invariant *)
  Have: x_7 <= x_4.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y != 0.
  Have: x_7 = x_3.
  (* Invariant *)
  Have: x_1 <= b.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_1) ->
      (x_4 = (x_3 + (a * x_5) + (x_1 * (x_6 / lsl(1, x_5))))))).
  (* Invariant *)
  Have: x_3 <= x_4.
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (98484)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (7ms) (126)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/14_0001/14_merged.c, line 36):
Let x_1 = a * b.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: forall i : Z. ((i <= b) -> ((0 <= i) -> (x_1 = 0))).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/14_0001/14_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/14_0001/14_merged.c:4: Warning: 
  No 'assigns' specification for function 'main14'.
  Callers assumptions might be imprecise.
