[kernel] Parsing out/21_0002/21_merged.c (with preprocessing)
[kernel:typing:no-proto] out/21_0002/21_merged.c:19: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/21_0002/21_merged.c:2: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_main21_loop_invariant_3_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   19 / 20
  Qed:              14
  Alt-Ergo 2.5.4:    5 (5ms-10ms-12ms)
  Timeout:           1
------------------------------------------------------------
  Function main21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 8):
Let x = i * i.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: ((i_1 * i_1) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: (y * y) = x.
  (* Invariant *)
  Have: (y = 0) \/ ((x % y) = 0).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= y) -> ((i_2 * i_2) = x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < y) -> ((i_2 * i_2) = x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < y) -> ((i_2 * i_2) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (y = (-1)) \/ ((x_2 % x_1) = 0).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (37412)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (10ms) (394)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 9):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (y * y) = x_2.
  (* Invariant *)
  Have: (y = 0) \/ ((x_2 % y) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (y = (-1)) \/ ((x_1 % x) = 0).
}
Prove: x_1 = (i * i).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 10):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (y * y) = x_2.
  (* Invariant *)
  Have: (y = 0) \/ ((x_2 % y) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (y = (-1)) \/ ((x_1 % x) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) -> (x_1 = (i_3 * i_3)))).
}
Prove: x_1 = (i * i).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (36128)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (376)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 11):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i_1 * i_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (y * y) = x_2.
  (* Invariant *)
  Have: (y = 0) \/ ((x_2 % y) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (y = (-1)) \/ ((x_1 % x) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) -> (x_1 = (i_3 * i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> (x_1 = (i_3 * i_3)))).
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (36999)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (12ms) (391)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 12):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = i * i.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: ((i_1 * i_1) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: (y * y) = x_2.
  (* Invariant *)
  Have: (y = 0) \/ ((x_2 % y) = 0).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= y) -> ((i_2 * i_2) = x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < y) -> ((i_2 * i_2) = x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < y) -> ((i_2 * i_2) <= x_2))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (y = (-1)) \/ ((x_1 % x) = 0).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> (x_1 = (i_2 * i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= y) -> (x_1 = (i_2 * i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= y) -> ((i_2 * i_2) <= x_1))).
}
Prove: exists i_2 : Z. (x_1 = (i_2 * i_2)) /\ (0 <= i_2) /\ (i_2 <= x).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (37778)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (12ms) (399)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 13):
Let x = 1 + y.
Let x_1 = i * i.
Let x_2 = i_1 * i_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: ((i_2 * i_2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (y * y) = x_2.
  (* Invariant *)
  Have: (y = 0) \/ ((x_2 % y) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < y) -> ((i_3 * i_3) <= x_2))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= y).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x) = x_1.
  (* Invariant *)
  Have: (y = (-1)) \/ ((x_1 % x) = 0).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) -> ((i_3 * i_3) = x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) = x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= y) -> ((i_3 * i_3) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37750)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (90)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Loop assigns (file out/21_0002/21_merged.c, line 16) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0002/21_merged.c, line 16) (2/2):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0002/21_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/21_0002/21_merged.c:2: Warning: 
  No 'assigns' specification for function 'main21'.
  Callers assumptions might be imprecise.
