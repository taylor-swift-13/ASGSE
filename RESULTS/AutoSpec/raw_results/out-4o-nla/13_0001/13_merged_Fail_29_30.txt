[kernel] Parsing out/13_0001/13_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/13_0001/13_merged.c:42: Warning: 
  Body of function main13 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_3_established (Qed 2ms) (Z3)
[wp] Proved goals:   29 / 30
  Qed:              14
  Alt-Ergo 2.5.4:   10 (4ms-44ms-165ms)
  Z3 4.8.12:         5 (10ms-14ms-20ms)
  Timeout:           1
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 14):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = a_6 * b_7 * p_2.
Let x_7 = y - b_7.
Let x_8 = x - a_6.
Let x_9 = y % 2.
Let x_10 = x_3 - y.
Let x_11 = x_10 % 2.
Let x_12 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_10) /\ is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_12.
  (* Invariant *)
  Have: (x_3 + (y * (x + y - x_3))) = 0.
  (* Invariant *)
  Have: (y * x_10) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_3 = y) \/ ((x_9 = 0) /\ (x_11 = 0)) \/
      ((x_9 = 0) /\ (x_11 = 1)) \/ ((x_9 = 1) /\ (x_11 = 0)) \/
      ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: x_3 <= x_12.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_11).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_3 = y) \/ (x_11 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a_6 * p_2 * x_7) + (b_7 * p_2 * x_8)
             + (p_2 * x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 0) /\ (x_2 = 1)) \/
      ((x_1 = 1) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_3 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_13 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_13 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_3 = (q + x_13).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_14 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_3 = (q_2 + (a * p) + x_14)).
              Have: (1 + b) = b_2.
              Have: x_3 = (q + x_14).
            }
            Else {
              Let x_15 = a_3 * p.
              Let x_16 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_3 = (q_3 + x_15 + x_16)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_14).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_13 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_3 = (q + x_13).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_14).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_14)).
          Have: (1 + b) = b_2.
          Have: x_3 = (q + x_14).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_15 + x_16)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
      }
    }
  }
}
Prove: x_3 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Valid (Qed:444ms) (20ms) (51691)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:444ms) (92ms) (1669)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 15):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = a_6 * b_7 * p_2.
Let x_7 = y - b_7.
Let x_8 = x - a_6.
Let x_9 = y % 2.
Let x_10 = x_3 - y.
Let x_11 = x_10 % 2.
Let x_12 = x + y.
Let x_13 = a * b * p.
Let x_14 = y - b.
Let x_15 = x - a.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_10) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_13).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_12.
  (* Invariant *)
  Have: (x_3 + (y * (x + y - x_3))) = 0.
  (* Invariant *)
  Have: (y * x_10) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_3 = y) \/ ((x_9 = 0) /\ (x_11 = 0)) \/
      ((x_9 = 0) /\ (x_11 = 1)) \/ ((x_9 = 1) /\ (x_11 = 0)) \/
      ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: x_3 <= x_12.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_11).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_3 = y) \/ (x_11 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a_6 * p_2 * x_7) + (b_7 * p_2 * x_8)
             + (p_2 * x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 0) /\ (x_2 = 1)) \/
      ((x_1 = 1) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_16 = b_1 / 2.
      Let x_17 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_17 * x_16))).
      Have: x_17 = a.
      Have: x_16 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_18 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
              (x_3 = (q + (b * p) + x_18)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_19 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                  (x_3 = (q_1 + (a * p) + x_19)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_20 = p * (a_3 - 1) * (b_3 - 1).
              Let x_21 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_20 + x_21)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
            (x_3 = (q + (b * p) + x_18)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
              (x_3 = (q_1 + (a * p) + x_19)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_20 + x_21)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: x_3
         = ((2 * x_13) + (a * p * x_14) + (b * p * x_15) + (p * x_15 * x_14)).
Prover Z3 4.8.12 returns Valid (Qed:534ms) (10ms) (54448)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 15):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: (a * b) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 18):
Let x_1 = x * y.
Let x_2 = a * b * p.
Let x_3 = y - b.
Let x_4 = a * p * x_3.
Let x_5 = x - a.
Let x_6 = b * p * x_5.
Let x_7 = p * x_5 * x_3.
Let x_8 = a_6 % 2.
Let x_9 = b_7 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_7 * p_2.
Let x_12 = a_6 * b_7 * p_2.
Let x_13 = y - b_7.
Let x_14 = x - a_6.
Let x_15 = y % 2.
Let x_16 = x_1 - y.
Let x_17 = x_16 % 2.
Let x_18 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_16) /\
      is_sint32(x_1 - x_10 - x_11) /\ is_sint32(x_2 + x_4 + x_6 + x_7).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_18.
  (* Invariant *)
  Have: (x_1 + (y * (x + y - x_1))) = 0.
  (* Invariant *)
  Have: (y * x_16) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_1 = y) \/ ((x_15 = 0) /\ (x_17 = 0)) \/
      ((x_15 = 0) /\ (x_17 = 1)) \/ ((x_15 = 1) /\ (x_17 = 0)) \/
      ((x_15 = 1) /\ (x_17 = 1)).
  (* Invariant *)
  Have: x_1 <= x_18.
  (* Invariant *)
  Have: (0 <= x_15) /\ (0 <= x_17).
  (* Invariant *)
  Have: (x_15 = 1) \/ (x_1 = y) \/ (x_17 = 1).
  (* Invariant *)
  Have: x_12 = (x_10 + x_11).
  (* Invariant *)
  Have: x_1
          = (x_10 + x_11 + x_12 + (a_6 * p_2 * x_13) + (b_7 * p_2 * x_14)
             + (p_2 * x_14 * x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 0) /\ (x_9 = 1)) \/
      ((x_8 = 1) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_8) /\ (0 <= x_9).
  (* Invariant *)
  Have: (x_8 = 1) \/ (x_9 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_8 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_19 = b_1 / 2.
      Let x_20 = a_1 / 2.
      Let x_21 = x - x_20.
      Let x_22 = y - x_19.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1
             = ((a_1 * p_1) + (b_1 * p_1) + (4 * (p_1 * x_20 * x_19))
                + (4 * (p_1 * x_21 * x_22)) + (4 * (p_1 * x_21 * x_19))
                + (4 * (p_1 * x_22 * x_20)))).
      Have: x_20 = a.
      Have: x_19 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_23 = a_2 - 1.
          Let x_24 = b * p * x_23.
          Let x_25 = p * x_23 * x_3.
          Let x_26 = 1 + x - a_2.
          Let x_27 = b * p * x_26.
          Let x_28 = p * x_3 * x_26.
          Have: (a_8 = a_2) /\ (b_5 = b) /\
              ((x_24 + x_25 + x_27 + x_28) = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_24 + x_25 + x_27 + x_28)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_29 = b_2 - 1.
              Let x_30 = a * p * x_29.
              Let x_31 = p * x_29 * x_5.
              Let x_32 = 1 + y - b_2.
              Let x_33 = a * p * x_32.
              Let x_34 = p * x_5 * x_32.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  ((x_30 + x_31 + x_33 + x_34) = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_30 + x_31 + x_33 + x_34)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_35 = a_3 - 1.
              Let x_36 = b_3 - 1.
              Let x_37 = p * x_35 * x_36.
              Let x_38 = 1 + y - b_3.
              Let x_39 = p * x_35 * x_38.
              Let x_40 = 1 + x - a_3.
              Let x_41 = p * x_36 * x_40.
              Let x_42 = p * x_40 * x_38.
              Let x_43 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
                  (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                     = (x_1 + x_43)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
                (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                   = (x_1 + x_43)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((x_30 + x_31 + x_33 + x_34) = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_30 + x_31 + x_33 + x_34)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
                (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                   = (x_1 + x_43)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
              (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                 = (x_1 + x_43)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\
            ((x_24 + x_25 + x_27 + x_28) = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_24 + x_25 + x_27 + x_28)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((x_30 + x_31 + x_33 + x_34) = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_30 + x_31 + x_33 + x_34)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
                (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                   = (x_1 + x_43)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
              (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                 = (x_1 + x_43)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\
              ((x_30 + x_31 + x_33 + x_34) = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_30 + x_31 + x_33 + x_34)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
              (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
                 = (x_1 + x_43)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_37 + x_39 + x_41 + x_42) = (q_2 + x_43)) /\
            (((a_3 * p) + (b_3 * p) + x_37 + x_39 + x_41 + x_42)
               = (x_1 + x_43)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_1 = ((2 * x_2) + x_4 + x_6 + x_7).
}
Prove: x_1 = ((a * p) + (b * p) + x_2 + x_4 + x_6 + x_7).
Prover Z3 4.8.12 returns Valid (Qed:671ms) (10ms) (55613)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 18):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  (* Invariant *)
  Have: (a * b) = 0.
}
Prove: (a + b) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (14)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 20):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = a * b * p.
Let x_5 = b_8 - b.
Let x_6 = x - a.
Let x_7 = a_6 % 2.
Let x_8 = b_7 % 2.
Let x_9 = a_6 * p_2.
Let x_10 = b_7 * p_2.
Let x_11 = a_6 * b_7 * p_2.
Let x_12 = b_8 - b_7.
Let x_13 = x - a_6.
Let x_14 = b_8 % 2.
Let x_15 = x_1 - b_8.
Let x_16 = x_15 % 2.
Let x_17 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_15) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_1 - x_9 - x_10).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_17.
  (* Invariant *)
  Have: (x_1 + (b_8 * (b_8 + x - x_1))) = 0.
  (* Invariant *)
  Have: (b_8 * x_15) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_1 = b_8) \/ ((x_14 = 0) /\ (x_16 = 0)) \/
      ((x_14 = 0) /\ (x_16 = 1)) \/ ((x_14 = 1) /\ (x_16 = 0)) \/
      ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: x_1 <= x_17.
  (* Invariant *)
  Have: (0 <= x_14) /\ (0 <= x_16).
  (* Invariant *)
  Have: (x_14 = 1) \/ (x_1 = b_8) \/ (x_16 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 + x_10).
  (* Invariant *)
  Have: x_1
          = (x_9 + x_10 + x_11 + (a_6 * p_2 * x_12) + (b_7 * p_2 * x_13)
             + (p_2 * x_12 * x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 0) /\ (x_8 = 1)) \/
      ((x_7 = 1) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_7) /\ (0 <= x_8).
  (* Invariant *)
  Have: (x_7 = 1) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_18 = b_1 / 2.
      Let x_19 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_19)) + (4 * (p_1 * x_18)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_19 = a.
      Have: x_18 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_20 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_20)) /\
              (x_1 = (q + (2 * x_3) + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_21 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_21)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_21)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_22 = p * (a_3 - 1).
              Let x_23 = p * (b_3 - 1).
              Let x_24 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_22 + x_23 + x_24)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_21)) /\
                (x_1 = (q_1 + (2 * x_2) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_20)) /\
            (x_1 = (q + (2 * x_3) + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_21)) /\
                (x_1 = (q_1 + (2 * x_2) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_21)) /\
              (x_1 = (q_1 + (2 * x_2) + x_21)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_22 + x_23 + x_24)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_4 = (x_2 + x_3).
  (* Invariant *)
  Have: x_1
          = (x_2 + x_3 + x_4 + (a * p * x_5) + (b * p * x_6)
             + (p * x_5 * x_6)).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:523ms) (20ms) (53629)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 20):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (x_1 + (b * (b + x - x_1))) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (29)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 21):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = a * b * p.
Let x_5 = b_8 - b.
Let x_6 = x - a.
Let x_7 = a_6 % 2.
Let x_8 = b_7 % 2.
Let x_9 = a_6 * p_2.
Let x_10 = b_7 * p_2.
Let x_11 = a_6 * b_7 * p_2.
Let x_12 = b_8 - b_7.
Let x_13 = x - a_6.
Let x_14 = b_8 % 2.
Let x_15 = x_1 - b_8.
Let x_16 = x_15 % 2.
Let x_17 = b_8 + x.
Let x_18 = a % 2.
Let x_19 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_15) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_1 - x_9 - x_10).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_17.
  (* Invariant *)
  Have: (x_1 + (b_8 * (b_8 + x - x_1))) = 0.
  (* Invariant *)
  Have: (b_8 * x_15) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_1 = b_8) \/ ((x_14 = 0) /\ (x_16 = 0)) \/
      ((x_14 = 0) /\ (x_16 = 1)) \/ ((x_14 = 1) /\ (x_16 = 0)) \/
      ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: x_1 <= x_17.
  (* Invariant *)
  Have: (0 <= x_14) /\ (0 <= x_16).
  (* Invariant *)
  Have: (x_14 = 1) \/ (x_1 = b_8) \/ (x_16 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 + x_10).
  (* Invariant *)
  Have: x_1
          = (x_9 + x_10 + x_11 + (a_6 * p_2 * x_12) + (b_7 * p_2 * x_13)
             + (p_2 * x_12 * x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 0) /\ (x_8 = 1)) \/
      ((x_7 = 1) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_7) /\ (0 <= x_8).
  (* Invariant *)
  Have: (x_7 = 1) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
              (x_1 = (q + (2 * x_3) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
            (x_1 = (q + (2 * x_3) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
              (x_1 = (q_1 + (2 * x_2) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_4 = (x_2 + x_3).
  (* Invariant *)
  Have: x_1
          = (x_2 + x_3 + x_4 + (a * p * x_5) + (b * p * x_6)
             + (p * x_5 * x_6)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a = 0) \/ (b = 0) \/ ((x_18 = 0) /\ (x_19 = 0)) \/
    ((x_18 = 0) /\ (x_19 = 1)) \/ ((x_18 = 1) /\ (x_19 = 0)) \/
    ((x_18 = 1) /\ (x_19 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:495ms) (20ms) (54507)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:495ms) (144ms) (2979)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 21):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b % 2.
Let x_4 = x_2 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (x_1 + (b * (b + x - x_1))) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
}
Prove: (x_1 = b) \/ ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 0) /\ (x_4 = 1)) \/
    ((x_3 = 1) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (31970)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (37)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 22):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = x * y.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = a * b * p.
Let x_7 = y - b.
Let x_8 = x - a.
Let x_9 = a_6 % 2.
Let x_10 = b_7 % 2.
Let x_11 = a_6 * p_2.
Let x_12 = b_7 * p_2.
Let x_13 = a_6 * b_7 * p_2.
Let x_14 = y - b_7.
Let x_15 = x - a_6.
Let x_16 = y % 2.
Let x_17 = x_3 - y.
Let x_18 = x_17 % 2.
Let x_19 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_17) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_11 - x_12).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_19.
  (* Invariant *)
  Have: (x_3 + (y * (x + y - x_3))) = 0.
  (* Invariant *)
  Have: (y * x_17) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_3 = y) \/ ((x_16 = 0) /\ (x_18 = 0)) \/
      ((x_16 = 0) /\ (x_18 = 1)) \/ ((x_16 = 1) /\ (x_18 = 0)) \/
      ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: x_3 <= x_19.
  (* Invariant *)
  Have: (0 <= x_16) /\ (0 <= x_18).
  (* Invariant *)
  Have: (x_16 = 1) \/ (x_3 = y) \/ (x_18 = 1).
  (* Invariant *)
  Have: x_13 = (x_11 + x_12).
  (* Invariant *)
  Have: x_3
          = (x_11 + x_12 + x_13 + (a_6 * p_2 * x_14) + (b_7 * p_2 * x_15)
             + (p_2 * x_15 * x_14)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 0) /\ (x_10 = 1)) \/
      ((x_9 = 1) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_10).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
              (x_3 = (q + (2 * x_5) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                  (x_3 = (q_1 + (2 * x_4) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
            (x_3 = (q + (2 * x_5) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
              (x_3 = (q_1 + (2 * x_4) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a * p * x_7) + (b * p * x_8)
             + (p * x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
}
Prove: (a <= x) /\ (b <= y).
Prover Z3 4.8.12 returns Valid (Qed:534ms) (20ms) (54784)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 22):
Let x_1 = b * x.
Let x_2 = b % 2.
Let x_3 = x_1 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_5.
  (* Invariant *)
  Have: (x_1 + (b * (b + x - x_1))) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_1 = b) \/ ((x_2 = 0) /\ (x_4 = 0)) \/ ((x_2 = 0) /\ (x_4 = 1)) \/
      ((x_2 = 1) /\ (x_4 = 0)) \/ ((x_2 = 1) /\ (x_4 = 1)).
}
Prove: x_1 <= x_5.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (38)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = b_8 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = a * b * p.
Let x_7 = b_8 - b.
Let x_8 = x - a.
Let x_9 = a_6 % 2.
Let x_10 = b_7 % 2.
Let x_11 = a_6 * p_2.
Let x_12 = b_7 * p_2.
Let x_13 = a_6 * b_7 * p_2.
Let x_14 = b_8 - b_7.
Let x_15 = x - a_6.
Let x_16 = b_8 % 2.
Let x_17 = x_3 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_11 - x_12).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_19.
  (* Invariant *)
  Have: (x_3 + (b_8 * (b_8 + x - x_3))) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_3.
  (* Invariant *)
  Have: b_8 <= x_3.
  (* Invariant *)
  Have: (x_3 = b_8) \/ ((x_16 = 0) /\ (x_18 = 0)) \/
      ((x_16 = 0) /\ (x_18 = 1)) \/ ((x_16 = 1) /\ (x_18 = 0)) \/
      ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: x_3 <= x_19.
  (* Invariant *)
  Have: (0 <= x_16) /\ (0 <= x_18).
  (* Invariant *)
  Have: (x_16 = 1) \/ (x_3 = b_8) \/ (x_18 = 1).
  (* Invariant *)
  Have: x_13 = (x_11 + x_12).
  (* Invariant *)
  Have: x_3
          = (x_11 + x_12 + x_13 + (a_6 * p_2 * x_14) + (b_7 * p_2 * x_15)
             + (p_2 * x_14 * x_15)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 0) /\ (x_10 = 1)) \/
      ((x_9 = 1) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_10).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
              (x_3 = (q + (2 * x_5) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                  (x_3 = (q_1 + (2 * x_4) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
            (x_3 = (q + (2 * x_5) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
              (x_3 = (q_1 + (2 * x_4) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a * p * x_7) + (b * p * x_8)
             + (p * x_7 * x_8)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
}
Prove: (0 <= x_1) /\ (0 <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:567ms) (10ms) (55293)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:567ms) (165ms) (2981)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = b * x.
Let x_2 = b + x.
Let x_3 = b % 2.
Let x_4 = x_1 - b.
Let x_5 = x_4 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_2.
  (* Invariant *)
  Have: (x_1 + (b * (b + x - x_1))) = 0.
  (* Invariant *)
  Have: (b * x_4) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_1 = b) \/ ((x_3 = 0) /\ (x_5 = 0)) \/ ((x_3 = 0) /\ (x_5 = 1)) \/
      ((x_3 = 1) /\ (x_5 = 0)) \/ ((x_3 = 1) /\ (x_5 = 1)).
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: (0 <= x_3) /\ (0 <= x_5).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32345)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (39)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 24):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = b_8 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = a * b * p.
Let x_7 = b_8 - b.
Let x_8 = x - a.
Let x_9 = a_6 % 2.
Let x_10 = b_7 % 2.
Let x_11 = a_6 * p_2.
Let x_12 = b_7 * p_2.
Let x_13 = a_6 * b_7 * p_2.
Let x_14 = b_8 - b_7.
Let x_15 = x - a_6.
Let x_16 = b_8 % 2.
Let x_17 = x_3 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_11 - x_12).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_19.
  (* Invariant *)
  Have: (x_3 + (b_8 * (b_8 + x - x_3))) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_3.
  (* Invariant *)
  Have: b_8 <= x_3.
  (* Invariant *)
  Have: (x_3 = b_8) \/ ((x_16 = 0) /\ (x_18 = 0)) \/
      ((x_16 = 0) /\ (x_18 = 1)) \/ ((x_16 = 1) /\ (x_18 = 0)) \/
      ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: x_3 <= x_19.
  (* Invariant *)
  Have: (0 <= x_16) /\ (0 <= x_18).
  (* Invariant *)
  Have: (x_16 = 1) \/ (x_3 = b_8) \/ (x_18 = 1).
  (* Invariant *)
  Have: x_13 = (x_11 + x_12).
  (* Invariant *)
  Have: x_3
          = (x_11 + x_12 + x_13 + (a_6 * p_2 * x_14) + (b_7 * p_2 * x_15)
             + (p_2 * x_14 * x_15)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 0) /\ (x_10 = 1)) \/
      ((x_9 = 1) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_10).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
              (x_3 = (q + (2 * x_5) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                  (x_3 = (q_1 + (2 * x_4) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_22)) /\
            (x_3 = (q + (2 * x_5) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
                (x_3 = (q_1 + (2 * x_4) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_23)) /\
              (x_3 = (q_1 + (2 * x_4) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a * p * x_7) + (b * p * x_8)
             + (p * x_7 * x_8)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
}
Prove: (a = 0) \/ (b = 0) \/ (x_1 = 1) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Valid (Qed:522ms) (10ms) (57263)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 24):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = x_5.
  (* Invariant *)
  Have: (x_2 + (b * (b + x - x_2))) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_1 = 0) /\ (x_4 = 0)) \/ ((x_1 = 0) /\ (x_4 = 1)) \/
      ((x_1 = 1) /\ (x_4 = 0)) \/ ((x_1 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_4).
}
Prove: (x_1 = 1) \/ (x_2 = b) \/ (x_4 = 1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (45)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (369ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/13_0001/13_merged.c, line 53):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = b_1 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = a * b * p.
Let x_7 = b_1 - b.
Let x_8 = x - a.
Let x_9 = b_1 % 2.
Let x_10 = x_3 - b_1.
Let x_11 = x_10 % 2.
Let x_12 = b_1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(x_10) /\ is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_12.
  (* Invariant *)
  Have: (x_3 + (b_1 * (b_1 + x - x_3))) = 0.
  (* Invariant *)
  Have: (b_1 * x_10) = x_3.
  (* Invariant *)
  Have: b_1 <= x_3.
  (* Invariant *)
  Have: (x_3 = b_1) \/ ((x_9 = 0) /\ (x_11 = 0)) \/
      ((x_9 = 0) /\ (x_11 = 1)) \/ ((x_9 = 1) /\ (x_11 = 0)) \/
      ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: x_3 <= x_12.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_11).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_3 = b_1) \/ (x_11 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 + x_5).
  (* Invariant *)
  Have: x_3
          = (x_4 + x_5 + x_6 + (a * p * x_7) + (b * p * x_8)
             + (p * x_7 * x_8)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p.
  If a != 0
  Then { (* Else *) Have: b = 0. }
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38977)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (13ms) (217)

------------------------------------------------------------

Goal Loop assigns (file out/13_0001/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0001/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
