[kernel] Parsing out/13_0001/13_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/13_0001/13_merged.c:41: Warning: 
  Body of function main13 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_2_preserved (Qed 414ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_5_preserved (Qed 482ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_5_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_11_preserved (Qed 459ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_11_established (Qed 3ms) (Z3)
[wp] Proved goals:   23 / 28
  Qed:              14
  Alt-Ergo 2.5.4:    5 (4ms-30ms-120ms)
  Z3 4.8.12:         4 (20ms-23ms-30ms)
  Timeout:           5
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 14):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = a_6 * p_2.
Let x_4 = b_7 * p_2.
Let x_5 = y % 2.
Let x_6 = x * y.
Let x_7 = x_6 - y.
Let x_8 = x_7 % 2.
Let x_9 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_7) /\ is_sint32(x_6 - x_3 - x_4).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_6 = x_9.
  (* Invariant *)
  Have: (y * x_7) = x_6.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: (x_6 = y) \/ ((x_5 = 0) /\ (x_8 = 0)) \/ ((x_5 = 0) /\ (x_8 = 1)) \/
      ((x_5 = 1) /\ (x_8 = 0)) \/ ((x_5 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_8).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = y) \/ (x_8 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 0) /\ (x_2 = 1)) \/
      ((x_1 = 1) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_6 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_10 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_6 = (q_1 + x_10 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_6 = (q + x_10).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_11 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_6 = (q_2 + (a * p) + x_11)).
              Have: (1 + b) = b_2.
              Have: x_6 = (q + x_11).
            }
            Else {
              Let x_12 = a_3 * p.
              Let x_13 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_6 = (q_3 + x_12 + x_13)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_6 = (q_2 + (a * p) + x_11)).
            Have: (1 + b) = b_2.
            Have: x_6 = (q + x_11).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_6 = (q_1 + x_10 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_6 = (q + x_10).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_6 = (q_2 + (a * p) + x_11)).
            Have: (1 + b) = b_2.
            Have: x_6 = (q + x_11).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_6 = (q_2 + (a * p) + x_11)).
          Have: (1 + b) = b_2.
          Have: x_6 = (q + x_11).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_6 = (q_3 + x_12 + x_13)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_6 + (p * (a_3 + b_3 - 1))) = (q + x_12 + x_13).
      }
    }
  }
}
Prove: x_6 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:414ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:414ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 17):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = a_6 * p_2.
Let x_4 = b_7 * p_2.
Let x_5 = y % 2.
Let x_6 = x * y.
Let x_7 = x_6 - y.
Let x_8 = x_7 % 2.
Let x_9 = x + y.
Let x_10 = a * b * p.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\
      is_sint32(x_6 - x_3 - x_4) /\ is_sint32(x_6 - x_10).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_6 = x_9.
  (* Invariant *)
  Have: (y * x_7) = x_6.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: (x_6 = y) \/ ((x_5 = 0) /\ (x_8 = 0)) \/ ((x_5 = 0) /\ (x_8 = 1)) \/
      ((x_5 = 1) /\ (x_8 = 0)) \/ ((x_5 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_8).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = y) \/ (x_8 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_2 = 0)) \/ ((x_1 = 0) /\ (x_2 = 1)) \/
      ((x_1 = 1) /\ (x_2 = 0)) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_11 = b_1 / 2.
      Let x_12 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_12 * x_11))).
      Have: x_12 = a.
      Have: x_11 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_13 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_13 = (a_2 * p)) /\
              (x_6 = (q + (b * p) + x_13)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_14 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_14 = (b_2 * p)) /\
                  (x_6 = (q_1 + (a * p) + x_14)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_15 = p * (a_3 - 1) * (b_3 - 1).
              Let x_16 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
                  (x_6 = (q_2 + x_15 + x_16)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_14 = (b_2 * p)) /\
                (x_6 = (q_1 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_13 = (a_2 * p)) /\
            (x_6 = (q + (b * p) + x_13)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_14 = (b_2 * p)) /\
                (x_6 = (q_1 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_14 = (b_2 * p)) /\
              (x_6 = (q_1 + (a * p) + x_14)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_15 + x_16) = ((a_3 * p) + (b_3 * p))) /\
            (x_6 = (q_2 + x_15 + x_16)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: x_10 = ((a * p) + (b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:482ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:482ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 17):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: (a * b) = (a + b).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 19):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = a_6 % 2.
Let x_4 = b_7 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = b_8 % 2.
Let x_8 = b_8 * x.
Let x_9 = x_8 - b_8.
Let x_10 = x_9 % 2.
Let x_11 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_9) /\
      is_sint32(x_8 - x_1 - x_2) /\ is_sint32(x_8 - x_5 - x_6).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_8 = x_11.
  (* Invariant *)
  Have: (b_8 * x_9) = x_8.
  (* Invariant *)
  Have: b_8 <= x_8.
  (* Invariant *)
  Have: (x_8 = b_8) \/ ((x_7 = 0) /\ (x_10 = 0)) \/
      ((x_7 = 0) /\ (x_10 = 1)) \/ ((x_7 = 1) /\ (x_10 = 0)) \/
      ((x_7 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: x_8 <= x_11.
  (* Invariant *)
  Have: (0 <= x_7) /\ (0 <= x_10).
  (* Invariant *)
  Have: (x_7 = 1) \/ (x_8 = b_8) \/ (x_10 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_5 + x_6).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 0) /\ (x_4 = 1)) \/
      ((x_3 = 1) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_3) /\ (0 <= x_4).
  (* Invariant *)
  Have: (x_3 = 1) \/ (x_4 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_3 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_12 = b_1 / 2.
      Let x_13 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_13)) + (4 * (p_1 * x_12)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_13 = a.
      Have: x_12 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_14 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_14)) /\
              (x_8 = (q + (2 * x_2) + x_14)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_15 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_15)) /\
                  (x_8 = (q_1 + (2 * x_1) + x_15)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_16 = p * (a_3 - 1).
              Let x_17 = p * (b_3 - 1).
              Let x_18 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                  (x_8 = (q_2 + x_16 + x_17 + x_18)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_16 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_15)) /\
                (x_8 = (q_1 + (2 * x_1) + x_15)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_16 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_16 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_14)) /\
            (x_8 = (q + (2 * x_2) + x_14)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_15)) /\
                (x_8 = (q_1 + (2 * x_1) + x_15)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_16 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_16 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_15)) /\
              (x_8 = (q_1 + (2 * x_1) + x_15)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_16 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_16 + x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
            (x_8 = (q_2 + x_16 + x_17 + x_18)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_1 + x_2).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:581ms) (20ms) (93352)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 19):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 20):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = a_6 % 2.
Let x_4 = b_7 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = b_8 % 2.
Let x_8 = b_8 * x.
Let x_9 = x_8 - b_8.
Let x_10 = x_9 % 2.
Let x_11 = b_8 + x.
Let x_12 = a % 2.
Let x_13 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_9) /\
      is_sint32(x_8 - x_1 - x_2) /\ is_sint32(x_8 - x_5 - x_6).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_8 = x_11.
  (* Invariant *)
  Have: (b_8 * x_9) = x_8.
  (* Invariant *)
  Have: b_8 <= x_8.
  (* Invariant *)
  Have: (x_8 = b_8) \/ ((x_7 = 0) /\ (x_10 = 0)) \/
      ((x_7 = 0) /\ (x_10 = 1)) \/ ((x_7 = 1) /\ (x_10 = 0)) \/
      ((x_7 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: x_8 <= x_11.
  (* Invariant *)
  Have: (0 <= x_7) /\ (0 <= x_10).
  (* Invariant *)
  Have: (x_7 = 1) \/ (x_8 = b_8) \/ (x_10 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_5 + x_6).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 0) /\ (x_4 = 1)) \/
      ((x_3 = 1) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_3) /\ (0 <= x_4).
  (* Invariant *)
  Have: (x_3 = 1) \/ (x_4 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_3 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_16)) /\
              (x_8 = (q + (2 * x_2) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_17)) /\
                  (x_8 = (q_1 + (2 * x_1) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_8 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_17)) /\
                (x_8 = (q_1 + (2 * x_1) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_16)) /\
            (x_8 = (q + (2 * x_2) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_17)) /\
                (x_8 = (q_1 + (2 * x_1) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_17)) /\
              (x_8 = (q_1 + (2 * x_1) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_8 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_1 + x_2).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a = 0) \/ (b = 0) \/ ((x_12 = 0) /\ (x_13 = 0)) \/
    ((x_12 = 0) /\ (x_13 = 1)) \/ ((x_12 = 1) /\ (x_13 = 0)) \/
    ((x_12 = 1) /\ (x_13 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:452ms) (20ms) (74058)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 20):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b % 2.
Let x_4 = x_2 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
}
Prove: (x_1 = b) \/ ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 0) /\ (x_4 = 1)) \/
    ((x_3 = 1) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (15ms) (343)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 21):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = y % 2.
Let x_10 = x * y.
Let x_11 = x_10 - y.
Let x_12 = x_11 % 2.
Let x_13 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_11) /\
      is_sint32(x_10 - x_3 - x_4) /\ is_sint32(x_10 - x_7 - x_8).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_10 = x_13.
  (* Invariant *)
  Have: (y * x_11) = x_10.
  (* Invariant *)
  Have: y <= x_10.
  (* Invariant *)
  Have: (x_10 = y) \/ ((x_9 = 0) /\ (x_12 = 0)) \/
      ((x_9 = 0) /\ (x_12 = 1)) \/ ((x_9 = 1) /\ (x_12 = 0)) \/
      ((x_9 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: x_10 <= x_13.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_12).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = y) \/ (x_12 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_7 + x_8).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 0) /\ (x_6 = 1)) \/
      ((x_5 = 1) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_6).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
              (x_10 = (q + (2 * x_4) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                  (x_10 = (q_1 + (2 * x_3) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_10 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
            (x_10 = (q + (2 * x_4) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
              (x_10 = (q_1 + (2 * x_3) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_10 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
}
Prove: (a <= x) /\ (b <= y).
Prover Z3 4.8.12 returns Valid (Qed:484ms) (30ms) (88282)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 21):
Let x_1 = b * x.
Let x_2 = b % 2.
Let x_3 = x_1 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_5.
  (* Invariant *)
  Have: (b * x_3) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_1 = b) \/ ((x_2 = 0) /\ (x_4 = 0)) \/ ((x_2 = 0) /\ (x_4 = 1)) \/
      ((x_2 = 1) /\ (x_4 = 0)) \/ ((x_2 = 1) /\ (x_4 = 1)).
}
Prove: x_1 <= x_5.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (47)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 22):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = b_8 % 2.
Let x_10 = b_8 * x.
Let x_11 = x_10 - b_8.
Let x_12 = x_11 % 2.
Let x_13 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_11) /\
      is_sint32(x_10 - x_3 - x_4) /\ is_sint32(x_10 - x_7 - x_8).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_10 = x_13.
  (* Invariant *)
  Have: (b_8 * x_11) = x_10.
  (* Invariant *)
  Have: b_8 <= x_10.
  (* Invariant *)
  Have: (x_10 = b_8) \/ ((x_9 = 0) /\ (x_12 = 0)) \/
      ((x_9 = 0) /\ (x_12 = 1)) \/ ((x_9 = 1) /\ (x_12 = 0)) \/
      ((x_9 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: x_10 <= x_13.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_12).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = b_8) \/ (x_12 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_7 + x_8).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 0) /\ (x_6 = 1)) \/
      ((x_5 = 1) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_6).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
              (x_10 = (q + (2 * x_4) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                  (x_10 = (q_1 + (2 * x_3) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_10 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
            (x_10 = (q + (2 * x_4) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
              (x_10 = (q_1 + (2 * x_3) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_10 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
}
Prove: (0 <= x_1) /\ (0 <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:472ms) (20ms) (70408)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 22):
Let x_1 = b * x.
Let x_2 = b + x.
Let x_3 = b % 2.
Let x_4 = x_1 - b.
Let x_5 = x_4 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_2.
  (* Invariant *)
  Have: (b * x_4) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_1 = b) \/ ((x_3 = 0) /\ (x_5 = 0)) \/ ((x_3 = 0) /\ (x_5 = 1)) \/
      ((x_3 = 1) /\ (x_5 = 0)) \/ ((x_3 = 1) /\ (x_5 = 1)).
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: (0 <= x_3) /\ (0 <= x_5).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (120)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = b_8 % 2.
Let x_10 = b_8 * x.
Let x_11 = x_10 - b_8.
Let x_12 = x_11 % 2.
Let x_13 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_11) /\
      is_sint32(x_10 - x_3 - x_4) /\ is_sint32(x_10 - x_7 - x_8).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_10 = x_13.
  (* Invariant *)
  Have: (b_8 * x_11) = x_10.
  (* Invariant *)
  Have: b_8 <= x_10.
  (* Invariant *)
  Have: (x_10 = b_8) \/ ((x_9 = 0) /\ (x_12 = 0)) \/
      ((x_9 = 0) /\ (x_12 = 1)) \/ ((x_9 = 1) /\ (x_12 = 0)) \/
      ((x_9 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: x_10 <= x_13.
  (* Invariant *)
  Have: (0 <= x_9) /\ (0 <= x_12).
  (* Invariant *)
  Have: (x_9 = 1) \/ (x_10 = b_8) \/ (x_12 = 1).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = (x_7 + x_8).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 0) /\ (x_6 = 1)) \/
      ((x_5 = 1) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_6).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
              (x_10 = (q + (2 * x_4) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                  (x_10 = (q_1 + (2 * x_3) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_10 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_16)) /\
            (x_10 = (q + (2 * x_4) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
                (x_10 = (q_1 + (2 * x_3) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_10 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_17)) /\
              (x_10 = (q_1 + (2 * x_3) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_10 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_10 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
}
Prove: (a = 0) \/ (b = 0) \/ (x_1 = 1) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Timeout (Qed:459ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:459ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = x_5.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_1 = 0) /\ (x_4 = 0)) \/ ((x_1 = 0) /\ (x_4 = 1)) \/
      ((x_1 = 1) /\ (x_4 = 0)) \/ ((x_1 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_4).
}
Prove: (x_1 = 1) \/ (x_2 = b) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (437ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/13_0001/13_merged.c, line 52):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = b_1 % 2.
Let x_6 = b_1 * x.
Let x_7 = x_6 - b_1.
Let x_8 = x_7 % 2.
Let x_9 = b_1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6 - x_3 - x_4).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_6 = x_9.
  (* Invariant *)
  Have: (b_1 * x_7) = x_6.
  (* Invariant *)
  Have: b_1 <= x_6.
  (* Invariant *)
  Have: (x_6 = b_1) \/ ((x_5 = 0) /\ (x_8 = 0)) \/
      ((x_5 = 0) /\ (x_8 = 1)) \/ ((x_5 = 1) /\ (x_8 = 0)) \/
      ((x_5 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: (0 <= x_5) /\ (0 <= x_8).
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = b_1) \/ (x_8 = 1).
  (* Invariant *)
  Have: (a * b * p) = (x_3 + x_4).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_1 = 0) /\ (x_2 = 0)) \/
      ((x_1 = 0) /\ (x_2 = 1)) \/ ((x_1 = 1) /\ (x_2 = 0)) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: (0 <= x_1) /\ (0 <= x_2).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 1) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 < p.
  If a != 0
  Then { (* Else *) Have: b = 0. }
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (120ms) (2852)

------------------------------------------------------------

Goal Loop assigns (file out/13_0001/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0001/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
