[kernel] Parsing out/14_0005/14_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/14_0005/14_merged.c:29: Warning: 
  Body of function main14 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_main14_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main14_loop_invariant_13_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_main14_assert_missing_return (Qed 2ms) (Z3)
[wp] Proved goals:   25 / 28
  Qed:            19
  Z3 4.8.12:       6 (20ms-70ms-240ms)
  Timeout:         3
------------------------------------------------------------
  Function main14
------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 12):
Let x_1 = y_2 % 2.
Let x_2 = x * y_2.
Let x_3 = a * b.
Let x_4 = b % 2.
Let x_5 = y / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\
      is_sint32(x_5) /\ is_sint32(x_3 - x_2).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_4 = 0) -> ((i <= b) -> ((a * i) = x_3))).
  (* Invariant *)
  Have: (x_4 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_3 = (x_2 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_2 <= x_3).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((x_1 = 0) -> ((i <= y_2) -> ((x * i) = x_2))).
  (* Invariant *)
  Have: (x_1 = 0) \/ ((x + x_2) <= x_3).
  (* Then *)
  Have: y_2 != 0.
  If x_1 = 1
  Then {
    Let x_6 = x * y_1.
    Have: (y_2 = y_1) /\ (x_3 = (z_1 + x_6)).
    Have: (z + x_6) = (x + x_3).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ (x_3 = (z + (x * y))). }
}
Prove: (a * (b - x_5)) = z.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (40ms) (160316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 13):
Let x_1 = y_2 % 2.
Let x_2 = x * y_2.
Let x_3 = a * b.
Let x_4 = b % 2.
Let x_5 = y / 2.
Let x_6 = a * (b - x_5).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(2 * x) /\
      is_sint32(x_5) /\ is_sint32(x_3 - x_2) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_4 = 0) -> ((i <= b) -> ((a * i) = x_3))).
  (* Invariant *)
  Have: (x_4 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_3 = (x_2 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_2 <= x_3).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((x_1 = 0) -> ((i <= y_2) -> ((x * i) = x_2))).
  (* Invariant *)
  Have: (x_1 = 0) \/ ((x + x_2) <= x_3).
  (* Then *)
  Have: y_2 != 0.
  If x_1 = 1
  Then {
    Let x_7 = a * (b - ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ (x_3 = (z + (y_1 * (x_7 - z)))).
    Have: x_7 = (x + z).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ (x_3 = ((x * y) + x_6)). }
}
Prove: x_3 = ((2 * (x * x_5)) + x_6).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (50ms) (161593)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 15):
Let x_1 = a * b.
Let x_2 = y / 2.
Let x_3 = x * x_2.
Let x_4 = 2 * x_3.
Let x_5 = y_2 % 2.
Let x_6 = x * y_2.
Let x_7 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(2 * x) /\
      is_sint32(x_2) /\ is_sint32(x_1 - x_6) /\ is_sint32(x_1 - x_4).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_7 = 0) -> ((i <= b) -> ((a * i) = x_1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_1 = (x_6 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_6 <= x_1).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((x_5 = 0) -> ((i <= y_2) -> ((x * i) = x_6))).
  (* Invariant *)
  Have: (x_5 = 0) \/ ((x + x_6) <= x_1).
  (* Then *)
  Have: y_2 != 0.
  If x_5 = 1
  Then {
    Let x_8 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_8)) /\ (x_1 = (x + z + x_8)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = x_4). }
  (* Invariant *)
  Have: x_1 = (x_4 + (a * (b - x_2))).
}
Prove: (x_4 <= x_1) /\ ((-1) <= y).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (30ms) (42731)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 17):
Let x_1 = y / 2.
Let x_2 = x * x_1.
Let x_3 = 2 * x_2.
Let x_4 = a * b.
Let x_5 = y_2 % 2.
Let x_6 = x * y_2.
Let x_7 = b % 2.
Let x_8 = 2 * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_8) /\
      is_sint32(x_1) /\ is_sint32(x_4 - x_6) /\ is_sint32(x_4 - x_3).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_7 = 0) -> ((i <= b) -> ((a * i) = x_4))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_4 = (x_6 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_6 <= x_4).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((x_5 = 0) -> ((i <= y_2) -> ((x * i) = x_6))).
  (* Invariant *)
  Have: (x_5 = 0) \/ ((x + x_6) <= x_4).
  (* Then *)
  Have: y_2 != 0.
  If x_5 = 1
  Then {
    Let x_9 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_9)) /\ (x_4 = (x + z + x_9)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = x_3). }
  (* Invariant *)
  Have: x_4 = (x_3 + (a * (b - x_1))).
  (* Invariant *)
  Have: (x_3 <= x_4) /\ ((-1) <= y).
}
Prove: a <= x_8.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (36849)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 18):
Let x_1 = 2 * x.
Let x_2 = y / 2.
Let x_3 = x * x_2.
Let x_4 = 2 * x_3.
Let x_5 = a * b.
Let x_6 = y_2 % 2.
Let x_7 = x * y_2.
Let x_8 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_5 - x_7) /\ is_sint32(x_5 - x_4).
  (* Goal *)
  When: ((x_2 % 2) = 0) /\ (i <= x_2).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i_1 : Z. ((x_8 = 0) -> ((i_1 <= b) -> ((a * i_1) = x_5))).
  (* Invariant *)
  Have: (x_8 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_5 = (x_7 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_7 <= x_5).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((x_6 = 0) -> ((i_1 <= y_2) -> ((x * i_1) = x_7))).
  (* Invariant *)
  Have: (x_6 = 0) \/ ((x + x_7) <= x_5).
  (* Then *)
  Have: y_2 != 0.
  If x_6 = 1
  Then {
    Let x_9 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_9)) /\ (x_5 = (x + z + x_9)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = x_4). }
  (* Invariant *)
  Have: x_5 = (x_4 + (a * (b - x_2))).
  (* Invariant *)
  Have: (x_4 <= x_5) /\ ((-1) <= y).
  (* Invariant *)
  Have: a <= x_1.
}
Prove: x_3 = (i * x).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (240ms) (706747)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 18):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Goal *)
  When: ((b % 2) = 0) /\ (i <= b).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a * i) = (a * b).
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0005/14_merged.c, line 24):
Let x_1 = y / 2.
Let x_2 = x_1 % 2.
Let x_3 = x * x_1.
Let x_4 = 2 * x.
Let x_5 = 2 * x_3.
Let x_6 = a * b.
Let x_7 = y_2 % 2.
Let x_8 = x * y_2.
Let x_9 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_6 - x_8) /\ is_sint32(x_6 - x_5).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_9 = 0) -> ((i <= b) -> ((a * i) = x_6))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: x_6 = (x_8 + (a * (b - y_2))).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2) /\ (x_8 <= x_6).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((x_7 = 0) -> ((i <= y_2) -> ((x * i) = x_8))).
  (* Invariant *)
  Have: (x_7 = 0) \/ ((x + x_8) <= x_6).
  (* Then *)
  Have: y_2 != 0.
  If x_7 = 1
  Then {
    Let x_10 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_10)) /\ (x_6 = (x + z + x_10)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = x_5). }
  (* Invariant *)
  Have: x_6 = (x_5 + (a * (b - x_1))).
  (* Invariant *)
  Have: (x_5 <= x_6) /\ ((-1) <= y).
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((x_2 = 0) -> ((i <= x_1) -> (x_3 = (x * i)))).
}
Prove: (x_2 = 0) \/ ((x_4 + x_5) <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (40ms) (108561)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0005/14_merged.c, line 24):
Let x_1 = y % 2.
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (0 <= y).
  (* Invariant *)
  Have: forall i : Z. ((x_1 = 0) -> ((i <= y) -> ((x * i) = (x * y)))).
}
Prove: (x_1 = 0) \/ (x <= 0).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/14_0005/14_merged.c, line 40):
Let x_1 = a * b.
Let x_2 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: forall i : Z. ((x_2 = 0) -> ((i <= b) -> ((a * i) = x_1))).
  (* Invariant *)
  Have: (x_2 = 0) \/ (a <= 0).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= x_1).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: forall i : Z. ((i <= 0) -> ((x * i) = 0)).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/14_0005/14_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/14_0005/14_merged.c:4: Warning: 
  No 'assigns' specification for function 'main14'.
  Callers assumptions might be imprecise.
