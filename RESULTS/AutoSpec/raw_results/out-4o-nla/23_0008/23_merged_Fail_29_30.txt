[kernel] Parsing out/23_0008/23_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/23_0008/23_merged.c:26: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/23_0008/23_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] Proved goals:   29 / 30
  Qed:              15
  Alt-Ergo 2.5.4:   14 (2ms-79ms-538ms)
  Timeout:           1
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 9):
Let x_2 = x * x.
Let x_3 = i * i.
Let x_4 = 1 + x.
Let x_5 = x_4 * x_4.
Let x_6 = x - 10.
Let x_7 = x_1 * x_1.
Let x_8 = i_1 * i_1.
Let x_9 = 1 + x_1.
Let x_10 = x_1 - 10.
Let x_11 = 1 + x_3.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_8) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_8.
  (* Invariant *)
  Have: x_8 <= (x_7 + (x_10 * x_10)).
  (* Invariant *)
  Have: x_8 <= (1 + (2 * x_1) + x_7).
  (* Invariant *)
  Have: x_8 <= (x_9 * x_9).
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: x_7 <= x_8.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_8)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 + x_7) <= x_8)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_7) <= x_8)).
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= (x_2 + (x_6 * x_6)).
  (* Invariant *)
  Have: x_3 <= (1 + (2 * x) + x_2).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 + x_2) <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_2) <= x_3)).
  (* Invariant *)
  Have: x <= i.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_5 = x_11.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (531)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 11):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x * x.
Let x_5 = x - 10.
Let x_6 = x_1 * x_1.
Let x_7 = i * i.
Let x_8 = 1 + x_1.
Let x_9 = x_1 - 10.
Let x_10 = x - 9.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_6 = x_7.
  (* Invariant *)
  Have: x_7 <= (x_6 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + (2 * x_1) + x_6).
  (* Invariant *)
  Have: x_7 <= (x_8 * x_8).
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_7)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 + x_6) <= x_7)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_6) <= x_7)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_3 = (1 + x_4).
  (* Invariant *)
  Have: x_3 <= (1 + x_4 + (x_5 * x_5)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_4).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_4 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 + x_4) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_4) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (x <= i_1).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: 0 <= (x_10 * x_10).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (39182)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 11):
Let x_1 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x * x).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
}
Prove: 0 <= (x_1 * x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.79ms) (4ms) (9)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 13):
Let x_2 = x - 9.
Let x_3 = 1 + x.
Let x_4 = x_3 * x_3.
Let x_5 = x * x.
Let x_6 = x - 10.
Let x_7 = x_1 * x_1.
Let x_8 = i * i.
Let x_9 = 1 + x_1.
Let x_10 = x_1 - 10.
Let x_11 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_8) /\ is_sint32(x_4) /\
      is_sint32(x_4 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_8.
  (* Invariant *)
  Have: x_8 <= (x_7 + (x_10 * x_10)).
  (* Invariant *)
  Have: x_8 <= (1 + (2 * x_1) + x_7).
  (* Invariant *)
  Have: x_8 <= (x_9 * x_9).
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: x_7 <= x_8.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_8)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 + x_7) <= x_8)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_7) <= x_8)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_4 = (1 + x_5).
  (* Invariant *)
  Have: x_4 <= (1 + x_5 + (x_6 * x_6)).
  (* Invariant *)
  Have: x_4 <= (2 + (2 * x) + x_5).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_4).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_5 < x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_4)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 + x_5) < x_4)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_5) < x_4)).
  (* Invariant *)
  Have: (x_4 = (1 + (i_1 * i_1))) /\ (x <= i_1).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_2 * x_2).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x_4 <= (x_11 * x_11).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (11521)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (2ms) (118)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 13):
Let x_1 = x - 10.
Let x_2 = x * x.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_1 * x_1).
}
Prove: x_2 <= (x_3 * x_3).
Prover Z3 4.8.12 returns Valid (Qed:0.84ms) (10ms) (9349)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.84ms) (4ms) (20)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 14):
Let x_1 = x * x.
Let x_2 = 1 + x.
Let x_3 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_3 * x_3).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:0.96ms) (10ms) (30203)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.96ms) (4ms) (21)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 15):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x - 9.
Let x_6 = x * x.
Let x_7 = x - 10.
Let x_8 = x_1 * x_1.
Let x_9 = i * i.
Let x_10 = 1 + x_1.
Let x_11 = x_1 - 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_8 = x_9.
  (* Invariant *)
  Have: x_9 <= (x_8 + (x_11 * x_11)).
  (* Invariant *)
  Have: x_9 <= (1 + (2 * x_1) + x_8).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_9)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 + x_8) <= x_9)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_8) <= x_9)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_3 <= (1 + x_6 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_6).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_6 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 + x_6) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_6) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (x <= i_1).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_5 * x_5).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
}
Prove: x <= 9.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (39795)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (119)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 17):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x - 9.
Let x_6 = x * x.
Let x_7 = x - 10.
Let x_8 = x_1 * x_1.
Let x_9 = i_1 * i_1.
Let x_10 = 1 + x_1.
Let x_11 = x_1 - 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Goal *)
  When: i <= x_2.
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_8 = x_9.
  (* Invariant *)
  Have: x_9 <= (x_8 + (x_11 * x_11)).
  (* Invariant *)
  Have: x_9 <= (1 + (2 * x_1) + x_8).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 * i_3) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_3 <= (1 + x_6 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_6).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_6 < x_3.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 * i_3) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_2 * i_2))) /\ (x <= i_2).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_5 * x_5).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: x <= 9.
}
Prove: (i * i) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (46369)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (16ms) (475)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 17):
Let x_1 = x * x.
Let x_2 = 1 + x.
Let x_3 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: i <= x.
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_3 * x_3).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 18):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x - 9.
Let x_6 = x * x.
Let x_7 = x - 10.
Let x_8 = x_1 * x_1.
Let x_9 = i_1 * i_1.
Let x_10 = 1 + x_1.
Let x_11 = x_1 - 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Goal *)
  When: i <= x_2.
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_8 = x_9.
  (* Invariant *)
  Have: x_9 <= (x_8 + (x_11 * x_11)).
  (* Invariant *)
  Have: x_9 <= (1 + (2 * x_1) + x_8).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 * i_3) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_3 <= (1 + x_6 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_6).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_6 < x_3.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 * i_3) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_2 * i_2))) /\ (x <= i_2).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_5 * x_5).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: x <= 9.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_2) -> ((i_3 * i_3) <= x_3)).
}
Prove: i <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (15ms) (504)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 18):
Let x_1 = x * x.
Let x_2 = 1 + x.
Let x_3 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: i <= x.
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_3 * x_3).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= x) -> ((i_1 * i_1) <= x_1)).
}
Prove: i <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (478ms) (24822)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 19):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x - 9.
Let x_6 = x * x.
Let x_7 = x - 10.
Let x_8 = x_1 * x_1.
Let x_9 = i_1 * i_1.
Let x_10 = 1 + x_1.
Let x_11 = x_1 - 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_8 = x_9.
  (* Invariant *)
  Have: x_9 <= (x_8 + (x_11 * x_11)).
  (* Invariant *)
  Have: x_9 <= (1 + (2 * x_1) + x_8).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 * i_3) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_8) <= x_9)).
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_3 <= (1 + x_6 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_6).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_6 < x_3.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 * i_3) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 + x_6) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_2 * i_2))) /\ (x <= i_2).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_5 * x_5).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: x <= 9.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_2) -> ((i_3 * i_3) <= x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_2) -> (i_3 <= 0)).
}
Prove: i <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (11ms) (506)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 19):
Let x_1 = x * x.
Let x_2 = 1 + x.
Let x_3 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_3 * x_3).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= x) -> ((i_1 * i_1) <= x_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= x) -> (i_1 <= 0)).
}
Prove: i <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (538ms) (26006)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 21):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x - 9.
Let x_6 = x * x.
Let x_7 = x - 10.
Let x_8 = x_1 * x_1.
Let x_9 = i * i.
Let x_10 = 1 + x_1.
Let x_11 = x_1 - 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_8 = x_9.
  (* Invariant *)
  Have: x_9 <= (x_8 + (x_11 * x_11)).
  (* Invariant *)
  Have: x_9 <= (1 + (2 * x_1) + x_8).
  (* Invariant *)
  Have: x_9 <= (x_10 * x_10).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_9)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 + x_8) <= x_9)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_8) <= x_9)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_3 <= (1 + x_6 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_3 <= (2 + (2 * x) + x_6).
  (* Invariant *)
  Have: (0 <= x) /\ (0 < x_3).
  (* Invariant *)
  Have: x <= 10.
  (* Invariant *)
  Have: x_6 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 + x_6) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 + x_6) < x_3)).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (x <= i_1).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= (x_5 * x_5).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: x <= 9.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_2) -> ((i_2 * i_2) <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_2) -> (i_2 <= 0)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= 0)).
}
Prove: exists i_2 : Z. (x_3 = (i_2 * i_2)) /\ (x < i_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (15ms) (547)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 21):
Let x_1 = x * x.
Let x_2 = 1 + x.
Let x_3 = x - 10.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= (x_3 * x_3).
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> ((i * i) <= x_1)).
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> (i <= 0)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (i <= 0)).
}
Prove: exists i : Z. ((i * i) = x_1) /\ (x <= i).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (74)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0008/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0008/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/23_0008/23_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0008/23_merged.c, line 23) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0008/23_merged.c:4: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/23_0008/23_merged.c:26: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
