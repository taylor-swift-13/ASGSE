[kernel] Parsing out/13_0003/13_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/13_0003/13_merged.c:47: Warning: 
  Body of function main13 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] Proved goals:   39 / 40
  Qed:              19
  Alt-Ergo 2.5.4:    8
  Z3 4.8.12:        12 (10ms-23ms-30ms)
  Timeout:           1
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 14):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = x - a_6.
Let x_7 = y - b_7.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = x + y.
Let x_11 = x_3 - y.
Let x_12 = x_11 % 2.
Let x_13 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_11) /\ is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_10.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (y * x_11) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = y) \/ (x_12 = 0).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = y) \/ (x_12 = 0) \/ ((x_13 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1) \/ (x_3 = y).
  (* Invariant *)
  Have: (x_3 = y) \/ (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: x_3 <= x_10.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_9.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p_2 * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_3 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_14 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_14 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_3 = (q + x_14).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_15 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_3 = (q_2 + (a * p) + x_15)).
              Have: (1 + b) = b_2.
              Have: x_3 = (q + x_15).
            }
            Else {
              Let x_16 = a_3 * p.
              Let x_17 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_3 = (q_3 + x_16 + x_17)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_15).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_14 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_3 = (q + x_14).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_15).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
          Have: (1 + b) = b_2.
          Have: x_3 = (q + x_15).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
      }
    }
  }
}
Prove: x_3 = (q + (p * ((a * y) + (b * x) - (a * b)))).
Prover Z3 4.8.12 returns Valid (Qed:480ms) (30ms) (52610)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 15):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = x - a_6.
Let x_7 = y - b_7.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = x + y.
Let x_11 = x_3 - y.
Let x_12 = x_11 % 2.
Let x_13 = y % 2.
Let x_14 = p * ((a * y) + (b * x) - (a * b)).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_11) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_14).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_10.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (y * x_11) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = y) \/ (x_12 = 0).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = y) \/ (x_12 = 0) \/ ((x_13 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1) \/ (x_3 = y).
  (* Invariant *)
  Have: (x_3 = y) \/ (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: x_3 <= x_10.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_9.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p_2 * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_15 = b_1 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1))
             = (4 * (p_1 * ((x * x_15) + (y * x_16) - (x_16 * x_15))))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_17 = a_2 - 1.
          Let x_18 = p * ((b * x) + (y * x_17) - (b * x_17)).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
              (x_3 = (q + (b * p) + x_18)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_19 = b_2 - 1.
              Let x_20 = p * ((a * y) + (x * x_19) - (a * x_19)).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (b_2 * p)) /\
                  (x_3 = (q_1 + (a * p) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = p * (a_3 + b_3 - 1).
              Let x_22 = a_3 - 1.
              Let x_23 = b_3 - 1.
              Let x_24 = p * ((x * x_23) + (y * x_22) - (x_22 * x_23)).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_21 + x_24)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
            (x_3 = (q + (b * p) + x_18)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (b_2 * p)) /\
              (x_3 = (q_1 + (a * p) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_21 + x_24) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_21 + x_24)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: x_14 = (a * b * p).
Prover Z3 4.8.12 returns Valid (Qed:587ms) (20ms) (54638)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 18):
Let x_1 = a * b * p.
Let x_2 = a_6 % 2.
Let x_3 = b_7 % 2.
Let x_4 = x * y.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = x - a_6.
Let x_8 = y - b_7.
Let x_9 = x_7 * x_8.
Let x_10 = x_5 + x_6.
Let x_11 = x + y.
Let x_12 = x_4 - y.
Let x_13 = x_12 % 2.
Let x_14 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_12) /\
      is_sint32(x_4 - x_5 - x_6) /\ is_sint32(x_4 - x_1).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_4 = x_11.
  (* Invariant *)
  Have: (x_4 / 2) = 0.
  (* Invariant *)
  Have: (y * x_12) = x_4.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_4 = y) \/ (x_13 = 0).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_4 = y) \/ (x_13 = 0) \/ ((x_14 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1) \/ (x_4 = y).
  (* Invariant *)
  Have: (x_4 = y) \/ (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: x_4 <= x_11.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_10.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + x_9).
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + x_9 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + (p_2 * x_7 * x_8)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_3 = 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_3 = 0) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_2 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_15 = b_1 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_16 * x_15))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_17 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
              (x_4 = (q + (b * p) + x_17)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_18 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                  (x_4 = (q_1 + (a * p) + x_18)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_19 = p * (a_3 - 1) * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_4 = (q_2 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_4 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
            (x_4 = (q + (b * p) + x_17)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_4 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
              (x_4 = (q_1 + (a * p) + x_18)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_4 = (q_2 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (p * ((a * y) + (b * x) - (a * b))) = x_1.
}
Prove: x_4 = (x_1 + ((x - a) * (y - b))).
Prover Z3 4.8.12 returns Valid (Qed:537ms) (20ms) (55988)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 19):
Let x_1 = x * y.
Let x_2 = (x - a) * (y - b).
Let x_3 = a_6 % 2.
Let x_4 = b_7 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = x - a_6.
Let x_8 = y - b_7.
Let x_9 = x_7 * x_8.
Let x_10 = x_5 + x_6.
Let x_11 = x + y.
Let x_12 = x_1 - y.
Let x_13 = x_12 % 2.
Let x_14 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_12) /\
      is_sint32(x_2) /\ is_sint32(x_1 - x_5 - x_6).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_11.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (y * x_12) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_1 = y) \/ (x_13 = 0).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_1 = y) \/ (x_13 = 0) \/ ((x_14 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1) \/ (x_1 = y).
  (* Invariant *)
  Have: (x_1 = y) \/ (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: x_1 <= x_11.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_10.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + x_9).
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + x_9 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + (p_2 * x_7 * x_8)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_4 = 0).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_4 = 0) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_3 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_15 = b_1 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1 = ((a_1 * p_1) + (b_1 * p_1) + ((x - x_16) * (y - x_15)))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_17 = (y - b) * (1 + x - a_2).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_17)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_18 = (x - a) * (1 + y - b_2).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_18)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_19 = (1 + x - a_3) * (1 + y - b_3).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_19 = (q_2 + x_20)) /\
                  (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_19 = (q_2 + x_20)) /\
                (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_19 = (q_2 + x_20)) /\
                (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_19 = (q_2 + x_20)) /\
              (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_17)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_19 = (q_2 + x_20)) /\
                (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_19 = (q_2 + x_20)) /\
              (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_18)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_19 = (q_2 + x_20)) /\
              (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_19 = (q_2 + x_20)) /\
            (((a_3 * p) + (b_3 * p) + x_19) = (x_1 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_1 = (x_2 + (p * ((a * y) + (b * x) - (a * b)))).
  (* Invariant *)
  Have: x_1 = ((a * b * p) + x_2).
}
Prove: ((p * (a + b)) / 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:550ms) (20ms) (56268)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 19):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: ((a + b) / 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 20):
Let x_1 = x * y.
Let x_2 = x - a.
Let x_3 = y - b.
Let x_4 = x_2 * x_3.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = x - a_6.
Let x_10 = y - b_7.
Let x_11 = x_9 * x_10.
Let x_12 = x_7 + x_8.
Let x_13 = x + y.
Let x_14 = x_1 - y.
Let x_15 = x_14 % 2.
Let x_16 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_14) /\
      is_sint32(x_4) /\ is_sint32(x_1 - x_7 - x_8).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_13.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (y * x_14) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_1 = y) \/ (x_15 = 0).
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_1 = y) \/ (x_15 = 0) \/ ((x_16 = 1) /\ (x_15 = 1)).
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_16 = 1) \/ (x_1 = y).
  (* Invariant *)
  Have: (x_1 = y) \/ (x_15 = 0) \/ (x_15 = 1).
  (* Invariant *)
  Have: x_1 <= x_13.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_12.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_12.
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + x_11).
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + x_11 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + (p_2 * x_9 * x_10)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1
             = ((a_1 * p_1) + (b_1 * p_1) + (2 * (p_1 * (x_18 + x_17)))
                + ((x - x_18) * (y - x_17)))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = x_3 * (1 + x - a_2).
          Let x_20 = (p * (a_2 + b - 1)) / 2.
          Have: (a_8 = a_2) /\ (b_5 = b) /\
              ((x_19 + x_20) = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_19 + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_21 = x_2 * (1 + y - b_2).
              Let x_22 = (p * (a + b_2 - 1)) / 2.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  ((x_21 + x_22) = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_21 + x_22)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_23 = (1 + x - a_3) * (1 + y - b_3).
              Let x_24 = (p * (a_3 + b_3 - 2)) / 2.
              Let x_25 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_23 + x_24) = (q_2 + x_25)) /\
                  (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_23 + x_24) = (q_2 + x_25)) /\
                (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((x_21 + x_22) = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_21 + x_22)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_23 + x_24) = (q_2 + x_25)) /\
                (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_23 + x_24) = (q_2 + x_25)) /\
              (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((x_19 + x_20) = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_19 + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((x_21 + x_22) = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_21 + x_22)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_23 + x_24) = (q_2 + x_25)) /\
                (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_23 + x_24) = (q_2 + x_25)) /\
              (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\
              ((x_21 + x_22) = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_21 + x_22)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_23 + x_24) = (q_2 + x_25)) /\
              (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ ((x_23 + x_24) = (q_2 + x_25)) /\
            (((a_3 * p) + (b_3 * p) + x_23 + x_24) = (x_1 + x_25)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (((p * (a + b)) / 2) = 0) /\
      (x_1 = (x_4 + (p * ((a * y) + (b * x) - (a * b))))).
  (* Invariant *)
  Have: x_1 = ((a * b * p) + x_4).
}
Prove: (p * x_2 * x_3) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:572ms) (30ms) (57320)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 21):
Let x_1 = x - a.
Let x_2 = y - b.
Let x_3 = p * x_1 * x_2.
Let x_4 = x_1 * x_2.
Let x_5 = x * y.
Let x_6 = a_6 % 2.
Let x_7 = b_7 % 2.
Let x_8 = a_6 * p_2.
Let x_9 = b_7 * p_2.
Let x_10 = x - a_6.
Let x_11 = y - b_7.
Let x_12 = x_10 * x_11.
Let x_13 = x_8 + x_9.
Let x_14 = x + y.
Let x_15 = x_5 - y.
Let x_16 = x_15 % 2.
Let x_17 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_15) /\
      is_sint32(x_5 - x_8 - x_9) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_14.
  (* Invariant *)
  Have: (x_5 / 2) = 0.
  (* Invariant *)
  Have: (y * x_15) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (x_17 = 0) \/ (x_5 = y) \/ (x_16 = 0).
  (* Invariant *)
  Have: (x_17 = 0) \/ (x_5 = y) \/ (x_16 = 0) \/ ((x_17 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: (x_17 = 0) \/ (x_17 = 1) \/ (x_5 = y).
  (* Invariant *)
  Have: (x_5 = y) \/ (x_16 = 0) \/ (x_16 = 1).
  (* Invariant *)
  Have: x_5 <= x_14.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_13.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_13.
  (* Invariant *)
  Have: x_5 = (x_8 + x_9 + x_12).
  (* Invariant *)
  Have: x_5 = (x_8 + x_9 + x_12 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_5 = (x_8 + x_9 + (p_2 * x_10 * x_11)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_7 = 0).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_7 = 0) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_6 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_18 = b_1 / 2.
      Let x_19 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_5
             = ((a_1 * p_1) + (b_1 * p_1)
                + (4 * (p_1 * (x - x_19) * (y - x_18))))).
      Have: x_19 = a.
      Have: x_18 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_20 = p * x_2 * (1 + x - a_2).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_20 = (q + (b * p))) /\
              (x_5 = ((a_2 * p) + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_21 = p * x_1 * (1 + y - b_2).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_21 = (q_1 + (a * p))) /\
                  (x_5 = ((b_2 * p) + x_21)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_22 = p * (1 + x - a_3) * (1 + y - b_3).
              Let x_23 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_22 = (q_2 + x_23)) /\
                  (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_22 = (q_2 + x_23)) /\
                (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_21 = (q_1 + (a * p))) /\
                (x_5 = ((b_2 * p) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_22 = (q_2 + x_23)) /\
                (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_22 = (q_2 + x_23)) /\
              (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_20 = (q + (b * p))) /\
            (x_5 = ((a_2 * p) + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_21 = (q_1 + (a * p))) /\
                (x_5 = ((b_2 * p) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_22 = (q_2 + x_23)) /\
                (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_22 = (q_2 + x_23)) /\
              (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_21 = (q_1 + (a * p))) /\
              (x_5 = ((b_2 * p) + x_21)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_22 = (q_2 + x_23)) /\
              (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_22 = (q_2 + x_23)) /\
            (((a_3 * p) + (b_3 * p) + x_22) = (x_5 + x_23)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_5 = (x_3 + (p * ((a * y) + (b * x) - (a * b)))).
  (* Invariant *)
  Have: x_5 = ((a * b * p) + x_3).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: x_3 = (x_4 + ((p * (a + b)) / 2)).
}
Prove: x_5 = ((a * p) + (b * p) + x_3).
Prover Z3 4.8.12 returns Valid (Qed:492ms) (30ms) (57807)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 21):
Let x = a + b.
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  (* Invariant *)
  Have: (x / 2) = 0.
}
Prove: (a * b) = x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (8ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 23):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = b_8 - b.
Let x_5 = x - a.
Let x_6 = x_4 * x_5.
Let x_7 = x_2 + x_3.
Let x_8 = a_6 % 2.
Let x_9 = b_7 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_7 * p_2.
Let x_12 = b_8 - b_7.
Let x_13 = x - a_6.
Let x_14 = x_12 * x_13.
Let x_15 = x_10 + x_11.
Let x_16 = b_8 + x.
Let x_17 = x_1 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_1 - x_10 - x_11).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_16.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_19 = 0) \/ (x_1 = b_8) \/ (x_18 = 0).
  (* Invariant *)
  Have: (x_19 = 0) \/ (x_1 = b_8) \/ (x_18 = 0) \/
      ((x_19 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: (x_19 = 0) \/ (x_19 = 1) \/ (x_1 = b_8).
  (* Invariant *)
  Have: (x_1 = b_8) \/ (x_18 = 0) \/ (x_18 = 1).
  (* Invariant *)
  Have: x_1 <= x_16.
  (* Invariant *)
  Have: (p_2 * ((a_6 * b_8) + (b_7 * x) - (a_6 * b_7))) = x_15.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_15.
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + x_14).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + x_14 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + (p_2 * x_12 * x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_9 = 0).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_9 = 0) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_8 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
              (x_1 = (q + (2 * x_3) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
            (x_1 = (q + (2 * x_3) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
              (x_1 = (q_1 + (2 * x_2) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (p * ((a * b_8) + (b * x) - (a * b))) = x_7.
  (* Invariant *)
  Have: (a * b * p) = x_7.
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + x_6).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + x_6 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (p * x_4 * x_5)).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:526ms) (20ms) (57018)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 23):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (33)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (17ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 25):
Let x_1 = b_1 * x.
Let x_2 = a / 2.
Let x_3 = p * x_2.
Let x_4 = 4 * x_3.
Let x_5 = b / 2.
Let x_6 = p * x_5.
Let x_7 = 4 * x_6.
Let x_8 = b_1 - x_5.
Let x_9 = x - x_2.
Let x_10 = x_8 * x_9.
Let x_11 = x_3 + x_6.
Let x_12 = a * p.
Let x_13 = b * p.
Let x_14 = x_12 + x_13.
Let x_15 = b_1 - b.
Let x_16 = x - a.
Let x_17 = x_15 * x_16.
Let x_18 = b_1 + x.
Let x_19 = x_1 - b_1.
Let x_20 = x_19 % 2.
Let x_21 = b_1 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(4 * p) /\ is_sint32(x_2) /\ is_sint32(x_5) /\
      is_sint32(x_19) /\ is_sint32(x_1 - x_12 - x_13) /\
      is_sint32(x_1 - x_4 - x_7).
  (* Residual *)
  When: (b % 2) = 0.
  (* Residual *)
  When: (a % 2) = 0.
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_18.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (b_1 * x_19) = x_1.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_1 = b_1) \/ (x_20 = 0).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_1 = b_1) \/ (x_20 = 0) \/
      ((x_21 = 1) /\ (x_20 = 1)).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_21 = 1) \/ (x_1 = b_1).
  (* Invariant *)
  Have: (x_1 = b_1) \/ (x_20 = 0) \/ (x_20 = 1).
  (* Invariant *)
  Have: x_1 <= x_18.
  (* Invariant *)
  Have: (p * ((a * b_1) + (b * x) - (a * b))) = x_14.
  (* Invariant *)
  Have: (a * b * p) = x_14.
  (* Invariant *)
  Have: x_1 = (x_12 + x_13 + x_17).
  (* Invariant *)
  Have: x_1 = (x_12 + x_13 + x_17 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_1 = (x_12 + x_13 + (p * x_15 * x_16)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: a != 0.
  (* Then *)
  Have: b != 0.
  Have: (x_4 + x_7) = x_14.
  (* Invariant *)
  Have: (p * ((b_1 * x_2) + (x * x_5) - (x_2 * x_5))) = x_11.
  (* Invariant *)
  Have: (p * x_2 * x_5) = x_11.
  (* Invariant *)
  Have: x_1 = (x_4 + x_7 + x_10).
  (* Invariant *)
  Have: x_1 = (x_4 + x_7 + (2 * (p * (x_2 + x_5))) + x_10).
  (* Invariant *)
  Have: x_1 = (x_4 + x_7 + (4 * (p * x_8 * x_9))).
  (* Invariant *)
  Have: ((-1) <= a) /\ ((-1) <= b).
}
Prove: (x_2 = 0) \/ (x_5 = 0) \/ ((x_2 % 2) = 0) \/ ((x_5 % 2) = 0).
Prover Z3 4.8.12 returns Valid (Qed:507ms) (20ms) (45844)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 25):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
}
Prove: ((b % 2) = 0) \/ (x_1 = b) \/ ((x_2 % 2) = 0).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (17ms) (342)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 26):
Let x_1 = a / 2.
Let x_2 = b / 2.
Let x_3 = x_1 % 2.
Let x_4 = x_2 % 2.
Let x_5 = b_1 * x.
Let x_6 = p * x_1.
Let x_7 = 4 * x_6.
Let x_8 = p * x_2.
Let x_9 = 4 * x_8.
Let x_10 = b_1 - x_2.
Let x_11 = x - x_1.
Let x_12 = x_10 * x_11.
Let x_13 = x_6 + x_8.
Let x_14 = a * p.
Let x_15 = b * p.
Let x_16 = x_14 + x_15.
Let x_17 = b_1 - b.
Let x_18 = x - a.
Let x_19 = x_17 * x_18.
Let x_20 = b_1 + x.
Let x_21 = x_5 - b_1.
Let x_22 = x_21 % 2.
Let x_23 = b_1 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(4 * p) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_21) /\ is_sint32(x_5 - x_14 - x_15) /\
      is_sint32(x_5 - x_7 - x_9).
  (* Residual *)
  When: (b % 2) = 0.
  (* Residual *)
  When: (a % 2) = 0.
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_5 = x_20.
  (* Invariant *)
  Have: (x_5 / 2) = 0.
  (* Invariant *)
  Have: (b_1 * x_21) = x_5.
  (* Invariant *)
  Have: b_1 <= x_5.
  (* Invariant *)
  Have: (x_23 = 0) \/ (x_5 = b_1) \/ (x_22 = 0).
  (* Invariant *)
  Have: (x_23 = 0) \/ (x_5 = b_1) \/ (x_22 = 0) \/
      ((x_23 = 1) /\ (x_22 = 1)).
  (* Invariant *)
  Have: (x_23 = 0) \/ (x_23 = 1) \/ (x_5 = b_1).
  (* Invariant *)
  Have: (x_5 = b_1) \/ (x_22 = 0) \/ (x_22 = 1).
  (* Invariant *)
  Have: x_5 <= x_20.
  (* Invariant *)
  Have: (p * ((a * b_1) + (b * x) - (a * b))) = x_16.
  (* Invariant *)
  Have: (a * b * p) = x_16.
  (* Invariant *)
  Have: x_5 = (x_14 + x_15 + x_19).
  (* Invariant *)
  Have: x_5 = (x_14 + x_15 + x_19 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_5 = (x_14 + x_15 + (p * x_17 * x_18)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: a != 0.
  (* Then *)
  Have: b != 0.
  Have: (x_7 + x_9) = x_16.
  (* Invariant *)
  Have: (p * ((b_1 * x_1) + (x * x_2) - (x_1 * x_2))) = x_13.
  (* Invariant *)
  Have: (p * x_1 * x_2) = x_13.
  (* Invariant *)
  Have: x_5 = (x_7 + x_9 + x_12).
  (* Invariant *)
  Have: x_5 = (x_7 + x_9 + (2 * (p * (x_1 + x_2))) + x_12).
  (* Invariant *)
  Have: x_5 = (x_7 + x_9 + (4 * (p * x_10 * x_11))).
  (* Invariant *)
  Have: ((-1) <= a) /\ ((-1) <= b).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ (x_3 = 0) \/ (x_4 = 0).
}
Prove: (x_1 = 0) \/ (x_2 = 0) \/ (x_3 = 0) \/ (x_4 = 0) \/
    ((x_3 = 1) /\ (x_4 = 1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:474ms) (8ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 26):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = (b + x).
  (* Invariant *)
  Have: (x_2 / 2) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0).
}
Prove: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0) \/ ((x_1 = 1) /\ (x_4 = 1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (1ms) (19)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 27):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = b_7 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = b_7 - b.
Let x_7 = x - a.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = b_6 % 2.
Let x_11 = a_6 * p_2.
Let x_12 = b_6 * p_2.
Let x_13 = b_7 - b_6.
Let x_14 = x - a_6.
Let x_15 = x_13 * x_14.
Let x_16 = x_11 + x_12.
Let x_17 = b_7 + x.
Let x_18 = x_3 - b_7.
Let x_19 = x_18 % 2.
Let x_20 = b_7 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_18) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_11 - x_12).
  (* Residual *)
  When: (a_6 % 2) = 0.
  (* Pre-condition *)
  Have: (0 < b_7) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_17.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (b_7 * x_18) = x_3.
  (* Invariant *)
  Have: b_7 <= x_3.
  (* Invariant *)
  Have: (x_20 = 0) \/ (x_3 = b_7) \/ (x_19 = 0).
  (* Invariant *)
  Have: (x_20 = 0) \/ (x_3 = b_7) \/ (x_19 = 0) \/
      ((x_20 = 1) /\ (x_19 = 1)).
  (* Invariant *)
  Have: (x_20 = 0) \/ (x_20 = 1) \/ (x_3 = b_7).
  (* Invariant *)
  Have: (x_3 = b_7) \/ (x_19 = 0) \/ (x_19 = 1).
  (* Invariant *)
  Have: x_3 <= x_17.
  (* Invariant *)
  Have: (p_2 * ((a_6 * b_7) + (b_6 * x) - (a_6 * b_6))) = x_16.
  (* Invariant *)
  Have: (a_6 * b_6 * p_2) = x_16.
  (* Invariant *)
  Have: x_3 = (x_11 + x_12 + x_15).
  (* Invariant *)
  Have: x_3 = (x_11 + x_12 + x_15 + ((p_2 * (a_6 + b_6)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_11 + x_12 + (p_2 * x_13 * x_14)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (b_6 <= b_7) /\ (a_6 <= x).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_6 != 0.
  If x_10 = 0
  Then {
    Let x_21 = b_1 / 2.
    Let x_22 = a_1 / 2.
    Have: (a_6 = a_1) /\ (b_6 = b_1) /\ (p_2 = p_1) /\
        (((4 * (p_1 * x_22)) + (4 * (p_1 * x_21)))
           = ((a_1 * p_1) + (b_1 * p_1))).
    Have: x_22 = a.
    Have: x_21 = b.
    Have: (4 * p_1) = p.
  }
  Else {
    Have: (a_6 = a_5) /\ (b_6 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_7) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Let x_23 = p * (a_2 - 1).
        Have: (a_7 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_23)) /\
            (x_3 = (q + (2 * x_5) + x_23)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_7 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_8) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Let x_24 = p * (b_2 - 1).
            Have: (a_8 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_24)) /\
                (x_3 = (q_1 + (2 * x_4) + x_24)).
            Have: (1 + b) = b_2.
          }
          Else {
            Let x_25 = p * (a_3 - 1).
            Let x_26 = p * (b_3 - 1).
            Let x_27 = p * (a_3 + b_3 - 1).
            Have: (a_8 = a_3) /\ (b_4 = b_3) /\
                ((x_25 + x_26 + x_27) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_25 + x_26 + x_27)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_25 + x_26 + x_27) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_25 + x_26 + x_27)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_8) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_8 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_24)) /\
              (x_3 = (q_1 + (2 * x_4) + x_24)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_8 = a_3) /\ (b_4 = b_3) /\
              ((x_25 + x_26 + x_27) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_25 + x_26 + x_27)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_25 + x_26 + x_27) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_25 + x_26 + x_27)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (p * ((a * b_7) + (b * x) - (a * b))) = x_9.
  (* Invariant *)
  Have: (a * b * p) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0) \/
      ((x_1 = 1) /\ (x_2 = 1)).
}
Prove: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Valid (Qed:530ms) (30ms) (59371)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 27):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = (b + x).
  (* Invariant *)
  Have: (x_2 / 2) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0) \/ ((x_1 = 1) /\ (x_4 = 1)).
}
Prove: (x_1 = 0) \/ (x_1 = 1) \/ (x_2 = b).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (15ms) (381)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 28):
Let x_1 = b % 2.
Let x_2 = a % 2.
Let x_3 = b_8 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = b_8 - b.
Let x_7 = x - a.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = a_6 % 2.
Let x_11 = b_7 % 2.
Let x_12 = a_6 * p_2.
Let x_13 = b_7 * p_2.
Let x_14 = b_8 - b_7.
Let x_15 = x - a_6.
Let x_16 = x_14 * x_15.
Let x_17 = x_12 + x_13.
Let x_18 = b_8 + x.
Let x_19 = x_3 - b_8.
Let x_20 = x_19 % 2.
Let x_21 = b_8 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_19) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_12 - x_13).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_18.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (b_8 * x_19) = x_3.
  (* Invariant *)
  Have: b_8 <= x_3.
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_3 = b_8) \/ (x_20 = 0).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_3 = b_8) \/ (x_20 = 0) \/
      ((x_21 = 1) /\ (x_20 = 1)).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_21 = 1) \/ (x_3 = b_8).
  (* Invariant *)
  Have: (x_3 = b_8) \/ (x_20 = 0) \/ (x_20 = 1).
  (* Invariant *)
  Have: x_3 <= x_18.
  (* Invariant *)
  Have: (p_2 * ((a_6 * b_8) + (b_7 * x) - (a_6 * b_7))) = x_17.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_17.
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + x_16).
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + x_16 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + (p_2 * x_14 * x_15)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_11 = 0).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_11 = 0) \/ ((x_10 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_10 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_22 = b_1 / 2.
      Let x_23 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_23)) + (4 * (p_1 * x_22)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_23 = a.
      Have: x_22 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_24 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_24)) /\
              (x_3 = (q + (2 * x_5) + x_24)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_25 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                  (x_3 = (q_1 + (2 * x_4) + x_25)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_26 = p * (a_3 - 1).
              Let x_27 = p * (b_3 - 1).
              Let x_28 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_26 + x_27 + x_28)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                (x_3 = (q_1 + (2 * x_4) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_24)) /\
            (x_3 = (q + (2 * x_5) + x_24)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                (x_3 = (q_1 + (2 * x_4) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
              (x_3 = (q_1 + (2 * x_4) + x_25)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_26 + x_27 + x_28)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (p * ((a * b_8) + (b * x) - (a * b))) = x_9.
  (* Invariant *)
  Have: (a * b * p) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_1 = 0).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_1 = 0) \/
      ((x_2 = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_1 = 1).
}
Prove: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Valid (Qed:516ms) (20ms) (59822)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 28):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = (b + x).
  (* Invariant *)
  Have: (x_2 / 2) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = b) \/ (x_4 = 0) \/ ((x_1 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1) \/ (x_2 = b).
}
Prove: (x_2 = b) \/ (x_4 = 0) \/ (x_4 = 1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (19ms) (382)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 29):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = x * y.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = x - a.
Let x_7 = y - b.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = a_6 % 2.
Let x_11 = b_7 % 2.
Let x_12 = a_6 * p_2.
Let x_13 = b_7 * p_2.
Let x_14 = x - a_6.
Let x_15 = y - b_7.
Let x_16 = x_14 * x_15.
Let x_17 = x_12 + x_13.
Let x_18 = x + y.
Let x_19 = x_3 - y.
Let x_20 = x_19 % 2.
Let x_21 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_19) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_12 - x_13).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_18.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (y * x_19) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_3 = y) \/ (x_20 = 0).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_3 = y) \/ (x_20 = 0) \/ ((x_21 = 1) /\ (x_20 = 1)).
  (* Invariant *)
  Have: (x_21 = 0) \/ (x_21 = 1) \/ (x_3 = y).
  (* Invariant *)
  Have: (x_3 = y) \/ (x_20 = 0) \/ (x_20 = 1).
  (* Invariant *)
  Have: x_3 <= x_18.
  (* Invariant *)
  Have: (p_2 * ((a_6 * y) + (b_7 * x) - (a_6 * b_7))) = x_17.
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_17.
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + x_16).
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + x_16 + ((p_2 * (a_6 + b_7)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_12 + x_13 + (p_2 * x_14 * x_15)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_11 = 0).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_11 = 0) \/ ((x_10 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_10 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_22 = b_1 / 2.
      Let x_23 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_23)) + (4 * (p_1 * x_22)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_23 = a.
      Have: x_22 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_24 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_24)) /\
              (x_3 = (q + (2 * x_5) + x_24)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_25 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                  (x_3 = (q_1 + (2 * x_4) + x_25)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_26 = p * (a_3 - 1).
              Let x_27 = p * (b_3 - 1).
              Let x_28 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_26 + x_27 + x_28)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                (x_3 = (q_1 + (2 * x_4) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_5 + x_24)) /\
            (x_3 = (q + (2 * x_5) + x_24)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
                (x_3 = (q_1 + (2 * x_4) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_4 + x_25)) /\
              (x_3 = (q_1 + (2 * x_4) + x_25)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_26 + x_27 + x_28)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (p * ((a * y) + (b * x) - (a * b))) = x_9.
  (* Invariant *)
  Have: (a * b * p) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_1 = 1).
}
Prove: (a <= x) /\ (b <= y).
Prover Z3 4.8.12 returns Valid (Qed:582ms) (20ms) (58277)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 29):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = x_2 % 2.
Let x_4 = b % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_5.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_1 = b) \/ (x_3 = 0).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_1 = b) \/ (x_3 = 0) \/ ((x_4 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1) \/ (x_1 = b).
  (* Invariant *)
  Have: (x_1 = b) \/ (x_3 = 0) \/ (x_3 = 1).
}
Prove: x_1 <= x_5.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (50)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (439ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0003/13_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0003/13_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/13_0003/13_merged.c, line 58):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = b_1 * x.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = b_1 - b.
Let x_7 = x - a.
Let x_8 = x_6 * x_7.
Let x_9 = x_4 + x_5.
Let x_10 = b_1 + x.
Let x_11 = x_3 - b_1.
Let x_12 = x_11 % 2.
Let x_13 = b_1 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(x_11) /\ is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_10.
  (* Invariant *)
  Have: (x_3 / 2) = 0.
  (* Invariant *)
  Have: (b_1 * x_11) = x_3.
  (* Invariant *)
  Have: b_1 <= x_3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = b_1) \/ (x_12 = 0).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_3 = b_1) \/ (x_12 = 0) \/
      ((x_13 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: (x_3 = b_1) \/ (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: x_3 <= x_10.
  (* Invariant *)
  Have: (p * ((a * b_1) + (b * x) - (a * b))) = x_9.
  (* Invariant *)
  Have: (a * b * p) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_8 + ((p * (a + b)) / 2)).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (p * x_6 * x_7)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_2 = 0) \/
      ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: 0 < p.
  If a != 0
  Then { (* Else *) Have: b = 0. }
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (39498)

------------------------------------------------------------

Goal Loop assigns (file out/13_0003/13_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0003/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
