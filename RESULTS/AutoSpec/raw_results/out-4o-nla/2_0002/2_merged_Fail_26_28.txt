[kernel] Parsing out/2_0002/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0002/2_merged.c:26: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_6_established (Qed 0.86ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_8_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   26 / 28
  Qed:              19
  Alt-Ergo 2.5.4:    6 (5ms-9ms)
  Z3 4.8.12:         1 (50ms)
  Timeout:           2
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 10):
Let x_1 = to_sint32((x - r) / y).
Let x_2 = y * x_1.
Let x_3 = r + x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(x) /\
      is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x_3.
  If (1 + r) = y
  Then { Have: to_sint32((x - r) / (1 + r)) = q_1. Have: (1 + q_1) = q. }
  Else { Have: x_1 = q. }
}
Prove: (q * y) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (50ms) (143528)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = to_sint32((x - r_1) / y).
Let x_3 = y * x_2.
Let x_4 = r_1 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_1 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_1.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_4.
  If (1 + r_1) = y
  Then {
    Have: to_sint32((x - r_1) / (1 + r_1)) = q_1.
    Have: r = 0.
    Have: (1 + q_1) = q.
  }
  Else { Have: x_2 = q. Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: (r + x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (69033)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (164)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 14):
Let x_1 = q * y.
Let x_2 = to_sint32((x - r_1) / y).
Let x_3 = y * x_2.
Let x_4 = r_1 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_1 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_1.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_4.
  If (1 + r_1) = y
  Then {
    Have: to_sint32((x - r_1) / (1 + r_1)) = q_1.
    Have: r = 0.
    Have: (1 + q_1) = q.
  }
  Else { Have: x_2 = q. Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (r + x_1) <= x.
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (35841)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (7ms) (169)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 15):
Let x_1 = q * y.
Let x_2 = to_sint32((x - r_1) / y).
Let x_3 = y * x_2.
Let x_4 = r_1 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_1 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_1.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_4.
  If (1 + r_1) = y
  Then {
    Have: to_sint32((x - r_1) / (1 + r_1)) = q_1.
    Have: r = 0.
    Have: (1 + q_1) = q.
  }
  Else { Have: x_2 = q. Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: (r + x_1) <= x.
  (* Invariant *)
  Have: r < y.
}
Prove: to_sint32((x - r) / y) = q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (50ms) (165744)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: to_sint32(x / y) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.86ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.86ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 17):
Let x_1 = y * to_sint32((x - r) / y).
Let x_2 = r + x_1.
Let x_3 = to_sint32((x - r_2) / y).
Let x_4 = y * x_3.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_5.
  If (1 + r_2) = y
  Then {
    Let x_6 = 1 + r_2.
    Have: ((1 + q) = to_sint32(x / x_6)) /\ (to_sint32((x - r_2) / x_6) = q).
    Have: r = 0.
  }
  Else {
    Let x_7 = -r_1.
    Have: (r_2 = r_1) /\
        (to_sint32((x - 1 - r_1) / y) = to_sint32((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: r < y.
}
Prove: x_2 < x.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 19):
Let x_1 = y * to_sint32((x - r) / y).
Let x_2 = r + x_1.
Let x_3 = to_sint32((x - r_2) / y).
Let x_4 = y * x_3.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_5.
  If (1 + r_2) = y
  Then {
    Let x_6 = 1 + r_2.
    Have: ((1 + q) = to_sint32(x / x_6)) /\ (to_sint32((x - r_2) / x_6) = q).
    Have: r = 0.
  }
  Else {
    Let x_7 = -r_1.
    Have: (r_2 = r_1) /\
        (to_sint32((x - 1 - r_1) / y) = to_sint32((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_2 < x.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (36389)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (179)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 20):
Let x_1 = to_sint32((x - r) / y).
Let x_2 = y * x_1.
Let x_3 = r + x_2.
Let x_4 = to_sint32((x - r_2) / y).
Let x_5 = y * x_4.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_6 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_6.
  If (1 + r_2) = y
  Then {
    Let x_7 = 1 + r_2.
    Have: ((1 + q) = to_sint32(x / x_7)) /\ (to_sint32((x - r_2) / x_7) = q).
    Have: r = 0.
  }
  Else {
    Let x_8 = -r_1.
    Have: (r_2 = r_1) /\
        (to_sint32((x - 1 - r_1) / y) = to_sint32((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (44550)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (229)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 21):
Let x_1 = to_sint32((x - r) / y).
Let x_2 = y * x_1.
Let x_3 = r + x_2.
Let x_4 = to_sint32((x - r_2) / y).
Let x_5 = y * x_4.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: to_sint32(x / y) = 0.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_6 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_6.
  If (1 + r_2) = y
  Then {
    Let x_7 = 1 + r_2.
    Have: ((1 + q) = to_sint32(x / x_7)) /\ (to_sint32((x - r_2) / x_7) = q).
    Have: r = 0.
  }
  Else {
    Let x_8 = -r_1.
    Have: (r_2 = r_1) /\
        (to_sint32((x - 1 - r_1) / y) = to_sint32((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (40ms) (142853)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (86)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0002/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0002/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0002/2_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/2_0002/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0002/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
