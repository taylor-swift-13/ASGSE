[kernel] Parsing out/2_0005/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0005/2_merged.c:23: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_5_established (Qed 0.77ms) (Z3)
[wp] Proved goals:   19 / 22
  Qed:              13
  Alt-Ergo 2.5.4:    6
  Timeout:           3
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 10):
Let x_1 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_1)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (r + (q * y)) < x.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 12):
Let x_1 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_1)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (35369)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 13):
Let x_1 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_1)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
  (* Invariant *)
  Have: r < y.
}
Prove: (q = (-1)) \/ (q = 0).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (46032)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (25ms) (582)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 13):
Let x_1 = x / y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 14):
Let x_1 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_1)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (q = (-1)) \/ (q = 0).
}
Prove: ((x - r) / y) = q.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (29ms) (725)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 14):
Let x_1 = x / y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_1 = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.77ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.77ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 15):
Let x_1 = (x - r) / y.
Let x_2 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_2)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_2 = (-1)) \/ (x_2 = 0).
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then {
    Let x_3 = 1 + r_2.
    Let x_4 = x / x_3.
    Have: (x_4 = (1 + q)) /\ (x_4 = (1 + ((x - r_2) / x_3))).
    Have: r = 0.
  }
  Else {
    Let x_5 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + (y * x_1)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
}
Prove: x_1 <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 18):
Let x_1 = (x - r) / y.
Let x_2 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_2)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_2 = (-1)) \/ (x_2 = 0).
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then {
    Let x_3 = 1 + r_2.
    Let x_4 = x / x_3.
    Have: (x_4 = (1 + q)) /\ (x_4 = (1 + ((x - r_2) / x_3))).
    Have: r = 0.
  }
  Else {
    Let x_5 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + (y * x_1)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (36108)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (9ms) (88)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 19):
Let x_1 = (x - r) / y.
Let x_2 = (x - r_2) / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (r_2 + (y * x_2)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_2 = (-1)) \/ (x_2 = 0).
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then {
    Let x_3 = 1 + r_2.
    Let x_4 = x / x_3.
    Have: (x_4 = (1 + q)) /\ (x_4 = (1 + ((x - r_2) / x_3))).
    Have: r = 0.
  }
  Else {
    Let x_5 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + (y * x_1)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (37719)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (7ms) (75)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0005/2_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/2_0005/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0005/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
