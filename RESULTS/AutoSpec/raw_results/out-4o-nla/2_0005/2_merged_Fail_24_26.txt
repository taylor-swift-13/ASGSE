[kernel] Parsing out/2_0005/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0005/2_merged.c:25: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_3_established (Qed 0.72ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_12_established (Qed 1ms) (Z3)
[wp] Proved goals:   24 / 26
  Qed:              13
  Alt-Ergo 2.5.4:   11 (4ms-9ms-16ms)
  Timeout:           2
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 10):
Let x_1 = x - r_2.
Let x_2 = x_1 / y.
Let x_3 = y * x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_3) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_2 = (-1)) \/ (x_2 = 0).
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (x_1 % y) = 0.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + (x_1 / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (r + (q * y)) < x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35500)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (13ms) (176)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 12):
Let x_1 = q * y.
Let x_2 = x - r_2.
Let x_3 = x_2 / y.
Let x_4 = y * x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_4) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_4).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_3 = (-1)) \/ (x_3 = 0).
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (x_2 % y) = 0.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + (x_2 / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
}
Prove: x < (r + y + x_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (35667)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (203)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 12):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
}
Prove: x < y.
Prover Z3 4.8.12 returns Timeout (Qed:0.72ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.72ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 13):
Let x_1 = q * y.
Let x_2 = x - r_2.
Let x_3 = x_2 / y.
Let x_4 = y * x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_4) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_4).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_3 = (-1)) \/ (x_3 = 0).
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (x_2 % y) = 0.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + (x_2 / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (35852)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (209)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 14):
Let x_1 = q * y.
Let x_2 = x - r_2.
Let x_3 = x_2 / y.
Let x_4 = y * x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_4) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_4).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_3 = (-1)) \/ (x_3 = 0).
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (x_2 % y) = 0.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + (x_2 / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
  (* Invariant *)
  Have: r < y.
}
Prove: (q = (-1)) \/ (q = 0).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36372)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (110)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 14):
Let x_1 = x / y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Valid (Qed:0.97ms) (10ms) (30101)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.97ms) (4ms) (40)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 15):
Let x_1 = q * y.
Let x_2 = x - r_2.
Let x_3 = x_2 / y.
Let x_4 = y * x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_4) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_4).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_3 = (-1)) \/ (x_3 = 0).
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (x_2 % y) = 0.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + (x_2 / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (q = (-1)) \/ (q = 0).
}
Prove: ((x - r) / y) = q.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (36514)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (9ms) (416)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 15):
Let x_1 = x / y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_1 = 0.
Prover Z3 4.8.12 returns Valid (Qed:0.85ms) (10ms) (30117)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.85ms) (5ms) (38)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 16):
Let x_1 = (x - r) / y.
Let x_2 = y * x_1.
Let x_3 = x - r_2.
Let x_4 = x_3 / y.
Let x_5 = y * x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_5) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_5).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_4 = (-1)) \/ (x_4 = 0).
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_3 % y) = 0.
  If (1 + r_2) = y
  Then {
    Let x_6 = 1 + r_2.
    Let x_7 = x / x_6.
    Have: (x_7 = (1 + q)) /\ (x_7 = (1 + (x_3 / x_6))).
    Have: r = 0.
  }
  Else {
    Let x_8 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + x_2) < x.
  (* Invariant *)
  Have: x < (r + y + x_2).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
}
Prove: x_1 <= 0.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (37075)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (228)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 19):
Let x_1 = (x - r) / y.
Let x_2 = y * x_1.
Let x_3 = x - r_2.
Let x_4 = x_3 / y.
Let x_5 = y * x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_5) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_5).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_4 = (-1)) \/ (x_4 = 0).
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_3 % y) = 0.
  If (1 + r_2) = y
  Then {
    Let x_6 = 1 + r_2.
    Let x_7 = x / x_6.
    Have: (x_7 = (1 + q)) /\ (x_7 = (1 + (x_3 / x_6))).
    Have: r = 0.
  }
  Else {
    Let x_8 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + x_2) < x.
  (* Invariant *)
  Have: x < (r + y + x_2).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (37859)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (10ms) (247)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 20):
Let x_1 = (x - r) / y.
Let x_2 = y * x_1.
Let x_3 = x - r_2.
Let x_4 = x_3 / y.
Let x_5 = y * x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_5) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_5).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_4 = (-1)) \/ (x_4 = 0).
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_3 % y) = 0.
  If (1 + r_2) = y
  Then {
    Let x_6 = 1 + r_2.
    Let x_7 = x / x_6.
    Have: (x_7 = (1 + q)) /\ (x_7 = (1 + (x_3 / x_6))).
    Have: r = 0.
  }
  Else {
    Let x_8 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + x_2) < x.
  (* Invariant *)
  Have: x < (r + y + x_2).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_1 = (-1)) \/ (x_1 = 0).
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (37501)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (10ms) (239)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0005/2_merged.c, line 21):
Let x_1 = x - r.
Let x_2 = x_1 / y.
Let x_3 = y * x_2.
Let x_4 = x - r_2.
Let x_5 = x_4 / y.
Let x_6 = y * x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: (r_2 + x_6) < x.
  (* Invariant *)
  Have: x < (r_2 + y + x_6).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: (x_5 = (-1)) \/ (x_5 = 0).
  (* Invariant *)
  Have: x_5 <= 0.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_4 % y) = 0.
  If (1 + r_2) = y
  Then {
    Let x_7 = 1 + r_2.
    Let x_8 = x / x_7.
    Have: (x_8 = (1 + q)) /\ (x_8 = (1 + (x_4 / x_7))).
    Have: r = 0.
  }
  Else {
    Let x_9 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (r + x_3) < x.
  (* Invariant *)
  Have: x < (r + y + x_3).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: (x_2 = (-1)) \/ (x_2 = 0).
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_2.
}
Prove: (x_1 % y) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (38183)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (16ms) (410)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0005/2_merged.c, line 21):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: (x % y) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0005/2_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Loop assigns (file out/2_0005/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0005/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
