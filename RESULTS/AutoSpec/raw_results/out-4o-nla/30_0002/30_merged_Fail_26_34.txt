[kernel] Parsing out/30_0002/30_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/30_0002/30_merged.c:32: Warning: 
  Body of function main30 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] [Timeout] typed_main30_loop_invariant_established (Qed 0.72ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main30_assert_missing_return (Qed 3ms) (Z3)
[wp] [Timeout] typed_main30_loop_invariant_16_established (Qed 2ms) (Z3)
[wp] Proved goals:   26 / 34
  Qed:              12
  Alt-Ergo 2.5.4:    6 (5ms-16ms-32ms)
  Z3 4.8.12:         8 (10ms-19ms-30ms)
  Timeout:           8
------------------------------------------------------------
  Function main30
------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 11):
Let x_1 = 1 + n.
Let x_2 = y * y * x_1.
Let x_3 = x * x * x_1.
Let x_4 = n - 1.
Let x_5 = x * y * x_1.
Let x_6 = x * y.
Let x_7 = x_5 / x_6.
Let x_8 = 1 + n_1.
Let x_9 = n_1 - 1.
Let x_10 = 0 / x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: (x * x * x_10) = 0.
  (* Invariant *)
  Have: (x * x * x_8) = 0.
  (* Invariant *)
  Have: (y * y * x_10) = 0.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (y * y * x_8) = 0.
  (* Invariant *)
  Have: (x * y * x_10) = 0.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_8) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_4) = 0.
  (* Invariant *)
  Have: (x * x * x_7) = x_3.
  (* Invariant *)
  Have: (y * y * x_7) = x_2.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_7) = x_5.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (x * x * (n - 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (38689)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 11):
Assume { Type: is_sint32(n) /\ is_sint32(x). }
Prove: (x * x * (n - 1)) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.72ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.72ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 13):
Let x_1 = 1 + n.
Let x_2 = y * y * x_1.
Let x_3 = x * x * x_1.
Let x_4 = n - 1.
Let x_5 = x * y * x_1.
Let x_6 = x * y.
Let x_7 = x_5 / x_6.
Let x_8 = 1 + n_1.
Let x_9 = n_1 - 1.
Let x_10 = 0 / x_6.
Let x_11 = (x * x) + x_3.
Let x_12 = x_6 + x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_2) /\
      is_sint32(x_11) /\ is_sint32(x_12).
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: (x * x * x_10) = 0.
  (* Invariant *)
  Have: (x * x * x_8) = 0.
  (* Invariant *)
  Have: (y * y * x_10) = 0.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (y * y * x_8) = 0.
  (* Invariant *)
  Have: (x * y * x_10) = 0.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_8) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_4) = 0.
  (* Invariant *)
  Have: (x * x * x_7) = x_3.
  (* Invariant *)
  Have: (y * y * x_7) = x_2.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_7) = x_5.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * (n - 2)) = 0.
}
Prove: (x * x * (x_12 / x_6)) = x_11.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (30ms) (72191)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 13):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * (n - 1)) = 0.
}
Prove: (x * x * (0 / (x * y))) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 14):
Let x_1 = 1 + n.
Let x_2 = y * y * x_1.
Let x_3 = x * x.
Let x_4 = x * y.
Let x_5 = x * y * x_1.
Let x_6 = x_4 + x_5.
Let x_7 = x * x * (x_6 / x_4).
Let x_8 = x_7 - x_3.
Let x_9 = n - 1.
Let x_10 = x_5 / x_4.
Let x_11 = 1 + n_1.
Let x_12 = n_1 - 1.
Let x_13 = 0 / x_4.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_9) /\ is_sint32(x_5) /\ is_sint32(x_2) /\ is_sint32(x_6) /\
      is_sint32(x_7) /\ is_sint32(x_8).
  (* Invariant *)
  Have: (x * x * x_12) = 0.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: (x * x * x_11) = 0.
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: (y * y * x_12) = 0.
  (* Invariant *)
  Have: (y * y * x_11) = 0.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * y * x_12) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: x_7 = (x_3 + (x * x * x_10)).
  (* Invariant *)
  Have: x_7 = (x_3 + (x * x * x_1)).
  (* Invariant *)
  Have: (y * y * x_10) = x_2.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_10) = x_5.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_1 * x_1) <= (y * y * x_1 * x_8).
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * (n - 2)) = 0.
}
Prove: x_7 = (n * x * x).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (41581)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 14):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * (n - 1)) = 0.
  (* Invariant *)
  Have: (x * x * (0 / (x * y))) = 0.
}
Prove: (x * x * (1 + n)) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 15):
Let x_1 = x * y.
Let x_2 = 1 + n.
Let x_3 = x * y * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = x_4 / x_1.
Let x_6 = n * x * x.
Let x_7 = y * y * x_2.
Let x_8 = x * x.
Let x_9 = x_6 - x_8.
Let x_10 = n - 1.
Let x_11 = x_3 / x_1.
Let x_12 = 1 + n_1.
Let x_13 = n_1 - 1.
Let x_14 = 0 / x_1.
Let x_15 = (y * y) + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_10) /\ is_sint32(x_6) /\ is_sint32(x_9) /\
      is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_15).
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: (x * x * x_14) = 0.
  (* Invariant *)
  Have: (x * x * x_12) = 0.
  (* Invariant *)
  Have: (y * y * x_14) = 0.
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: (y * y * x_12) = 0.
  (* Invariant *)
  Have: (x * y * x_14) = 0.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * y * x_12) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_10) = 0.
  (* Invariant *)
  Have: x_6 = (x_8 + (x * x * x_11)).
  (* Invariant *)
  Have: x_6 = (x_8 + (x * x * x_2)).
  (* Invariant *)
  Have: (y * y * x_11) = x_7.
  (* Invariant *)
  Have: (y * y * x_10) = 0.
  (* Invariant *)
  Have: (x * y * x_11) = x_3.
  (* Invariant *)
  Have: (x * y * x_10) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_2 * x_2) <= (y * y * x_2 * x_9).
  (* Invariant *)
  Have: x_8 <= x_6.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * (n - 2)) = 0.
  (* Invariant *)
  Have: (x * x * x_5) = x_6.
}
Prove: (y * y * x_5) = x_15.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (71948)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 15):
Let x_1 = 0 / (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * (n - 1)) = 0.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * (1 + n)) = 0.
}
Prove: (y * y * x_1) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 16):
Let x_1 = x * y.
Let x_2 = 1 + n.
Let x_3 = x * y * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = x_4 / x_1.
Let x_6 = n * x * x.
Let x_7 = n - 2.
Let x_8 = y * y.
Let x_9 = y * y * x_5.
Let x_10 = x * x.
Let x_11 = x_6 - x_10.
Let x_12 = x_9 - x_8.
Let x_13 = n - 1.
Let x_14 = x_3 / x_1.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_6) /\ is_sint32(x_11) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_12).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_6 = (x_10 + (x * x * x_14)).
  (* Invariant *)
  Have: x_6 = (x_10 + (x * x * x_2)).
  (* Invariant *)
  Have: x_9 = (x_8 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_9 = (x_8 + (y * y * x_2)).
  (* Invariant *)
  Have: (x * y * x_14) = x_3.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_2 * x_2) <= (x_11 * x_12).
  (* Invariant *)
  Have: x_10 <= x_6.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_7) = 0.
  (* Invariant *)
  Have: (x * x * x_5) = x_6.
}
Prove: (y * y * x_7) = 0.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (41728)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 16):
Let x_1 = 0 / (x * y).
Let x_2 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * (1 + n)) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (y * y * x_2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 18):
Let x_1 = n - 2.
Let x_2 = x * y.
Let x_3 = 1 + n.
Let x_4 = x * y * x_3.
Let x_5 = x_2 + x_4.
Let x_6 = x_5 / x_2.
Let x_7 = n * x * x.
Let x_8 = y * y.
Let x_9 = y * y * x_6.
Let x_10 = x * x.
Let x_11 = x_7 - x_10.
Let x_12 = x_9 - x_8.
Let x_13 = n - 1.
Let x_14 = x_4 / x_2.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_7) /\ is_sint32(x_11) /\
      is_sint32(x_4) /\ is_sint32(x_5) /\ is_sint32(x_9) /\ is_sint32(x_12).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_7 = (x_10 + (x * x * x_14)).
  (* Invariant *)
  Have: x_7 = (x_10 + (x * x * x_3)).
  (* Invariant *)
  Have: x_9 = (x_8 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_9 = (x_8 + (y * y * x_3)).
  (* Invariant *)
  Have: (x * y * x_14) = x_4.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_3 * x_3) <= (x_11 * x_12).
  (* Invariant *)
  Have: x_10 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_6) = x_7.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: x_9 = (n * y * y).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (42351)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 18):
Let x_1 = n - 1.
Let x_2 = 0 / (x * y).
Let x_3 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_3) = 0.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (y * y * x_3) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 19):
Let x_1 = n - 2.
Let x_2 = x * y.
Let x_3 = 1 + n.
Let x_4 = x * y * x_3.
Let x_5 = x_2 + x_4.
Let x_6 = x_5 / x_2.
Let x_7 = n * y * y.
Let x_8 = n * x * x.
Let x_9 = y * y.
Let x_10 = x * x.
Let x_11 = x_8 - x_10.
Let x_12 = x_7 - x_9.
Let x_13 = n - 1.
Let x_14 = x_4 / x_2.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_8) /\ is_sint32(x_7) /\
      is_sint32(x_11) /\ is_sint32(x_12) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_14)).
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_3)).
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_3)).
  (* Invariant *)
  Have: (x * y * x_14) = x_4.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_3 * x_3) <= (x_11 * x_12).
  (* Invariant *)
  Have: x_10 <= x_8.
  (* Invariant *)
  Have: x_9 <= x_7.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_6) = x_8.
  (* Invariant *)
  Have: (y * y * x_6) = x_7.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (x * y * x_6) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (30ms) (72974)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (16ms) (624)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 19):
Let x_1 = 1 + n.
Let x_2 = n - 1.
Let x_3 = 0 / (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_3) = 0.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_3) = 0.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (x * y * x_3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (38540)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (43)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 20):
Let x_1 = x * y.
Let x_2 = 1 + n.
Let x_3 = x * y * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = x_4 / x_1.
Let x_6 = n - 2.
Let x_7 = n * y * y.
Let x_8 = n * x * x.
Let x_9 = y * y.
Let x_10 = x * x.
Let x_11 = x_8 - x_10.
Let x_12 = x_7 - x_9.
Let x_13 = n - 1.
Let x_14 = x_3 / x_1.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_8) /\ is_sint32(x_7) /\
      is_sint32(x_11) /\ is_sint32(x_12) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_14)).
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_2)).
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_2)).
  (* Invariant *)
  Have: (x * y * x_14) = x_3.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_2 * x_2) <= (x_11 * x_12).
  (* Invariant *)
  Have: x_10 <= x_8.
  (* Invariant *)
  Have: x_9 <= x_7.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_6) = 0.
  (* Invariant *)
  Have: (x * x * x_5) = x_8.
  (* Invariant *)
  Have: (y * y * x_5) = x_7.
  (* Invariant *)
  Have: (y * y * x_6) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = x_4.
}
Prove: (x * y * x_6) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (41360)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (32ms) (625)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 20):
Let x_1 = 0 / (x * y).
Let x_2 = 1 + n.
Let x_3 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_3) = 0.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_3) = 0.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: (x * y * x_3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (30ms) (56255)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (55)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 22):
Let x_1 = n - 2.
Let x_2 = x * y.
Let x_3 = 1 + n.
Let x_4 = x * y * x_3.
Let x_5 = x_2 + x_4.
Let x_6 = x_5 / x_2.
Let x_7 = n * y * y.
Let x_8 = n * x * x.
Let x_9 = y * y.
Let x_10 = x * x.
Let x_11 = x_8 - x_10.
Let x_12 = x_7 - x_9.
Let x_13 = n - 1.
Let x_14 = x_4 / x_2.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_8) /\ is_sint32(x_7) /\
      is_sint32(x_11) /\ is_sint32(x_12) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_14)).
  (* Invariant *)
  Have: x_8 = (x_10 + (x * x * x_3)).
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_7 = (x_9 + (y * y * x_3)).
  (* Invariant *)
  Have: (x * y * x_14) = x_4.
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: (x * x * y * y * x_3 * x_3) <= (x_11 * x_12).
  (* Invariant *)
  Have: x_10 <= x_8.
  (* Invariant *)
  Have: x_9 <= x_7.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_6) = x_8.
  (* Invariant *)
  Have: (y * y * x_6) = x_7.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (x * y * x_6) = x_5.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: (n * x * y) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (42768)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (25ms) (578)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 22):
Let x_1 = n - 1.
Let x_2 = 0 / (x * y).
Let x_3 = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_3) = 0.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_3) = 0.
  (* Invariant *)
  Have: (x * y * x_2) = 0.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: (x * y * x_3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (45872)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (63)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 24):
Let x_1 = n - 2.
Let x_2 = n * x * y.
Let x_3 = x * y.
Let x_4 = x_2 / x_3.
Let x_5 = n * y * y.
Let x_6 = n * x * x.
Let x_7 = y * y.
Let x_8 = x * x.
Let x_9 = x_2 - x_3.
Let x_10 = x_6 - x_8.
Let x_11 = x_5 - x_7.
Let x_12 = 1 + n.
Let x_13 = n - 1.
Let x_14 = x_9 / x_3.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_6) /\ is_sint32(x_2) /\
      is_sint32(x_5) /\ is_sint32(x_10) /\ is_sint32(x_9) /\ is_sint32(x_11).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_6 = (x_8 + (x * x * x_14)).
  (* Invariant *)
  Have: x_6 = (x_8 + (x * x * x_12)).
  (* Invariant *)
  Have: x_5 = (x_7 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_5 = (x_7 + (y * y * x_12)).
  (* Invariant *)
  Have: x_2 = (x_3 + (x * y * x_14)).
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: x_2 = (x_3 + (x * y * x_12)).
  (* Invariant *)
  Have: (x_9 * x_9) <= (x_10 * x_11).
  (* Invariant *)
  Have: x_8 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (x * x * x_4) = x_6.
  (* Invariant *)
  Have: (y * y * x_4) = x_5.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (x * y * x_4) = x_2.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: 0 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (40754)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 25):
Let x_1 = n * x * x.
Let x_2 = n - 2.
Let x_3 = n * x * y.
Let x_4 = x * y.
Let x_5 = x_3 / x_4.
Let x_6 = n * y * y.
Let x_7 = y * y.
Let x_8 = x * x.
Let x_9 = x_3 - x_4.
Let x_10 = x_1 - x_8.
Let x_11 = x_6 - x_7.
Let x_12 = 1 + n.
Let x_13 = n - 1.
Let x_14 = x_9 / x_4.
Let x_15 = 1 + n_1.
Let x_16 = n_1 - 1.
Let x_17 = 0 / x_4.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_13) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_10) /\ is_sint32(x_9) /\ is_sint32(x_11).
  (* Invariant *)
  Have: (x * x * x_16) = 0.
  (* Invariant *)
  Have: (x * x * x_17) = 0.
  (* Invariant *)
  Have: (x * x * x_15) = 0.
  (* Invariant *)
  Have: (y * y * x_17) = 0.
  (* Invariant *)
  Have: (y * y * x_16) = 0.
  (* Invariant *)
  Have: (y * y * x_15) = 0.
  (* Invariant *)
  Have: (x * y * x_17) = 0.
  (* Invariant *)
  Have: (x * y * x_16) = 0.
  (* Invariant *)
  Have: (x * y * x_15) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_13) = 0.
  (* Invariant *)
  Have: x_1 = (x_8 + (x * x * x_14)).
  (* Invariant *)
  Have: x_1 = (x_8 + (x * x * x_12)).
  (* Invariant *)
  Have: x_6 = (x_7 + (y * y * x_14)).
  (* Invariant *)
  Have: (y * y * x_13) = 0.
  (* Invariant *)
  Have: x_6 = (x_7 + (y * y * x_12)).
  (* Invariant *)
  Have: x_3 = (x_4 + (x * y * x_14)).
  (* Invariant *)
  Have: (x * y * x_13) = 0.
  (* Invariant *)
  Have: x_3 = (x_4 + (x * y * x_12)).
  (* Invariant *)
  Have: (x_9 * x_9) <= (x_10 * x_11).
  (* Invariant *)
  Have: x_8 <= x_1.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_5) = x_1.
  (* Invariant *)
  Have: (y * y * x_5) = x_6.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (x * y * x_5) = x_3.
  (* Invariant *)
  Have: (x * y * x_2) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (40639)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0002/30_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0002/30_merged.c, line 26):
Let x_1 = 1 + n.
Let x_2 = n - 1.
Let x_3 = 0 / (x * y).
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: (x * x * x_2) = 0.
  (* Invariant *)
  Have: (x * x * x_3) = 0.
  (* Invariant *)
  Have: (x * x * x_1) = 0.
  (* Invariant *)
  Have: (y * y * x_3) = 0.
  (* Invariant *)
  Have: (y * y * x_2) = 0.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (x * y * x_3) = 0.
  (* Invariant *)
  Have: (x * y * x_2) = 0.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/30_0002/30_merged.c, line 40):
Let x_1 = 1 + n.
Let x_2 = y * y * x_1.
Let x_3 = x * x * x_1.
Let x_4 = n - 1.
Let x_5 = x * y * x_1.
Let x_6 = x * y.
Let x_7 = x_5 / x_6.
Let x_8 = 1 + n_1.
Let x_9 = n_1 - 1.
Let x_10 = 0 / x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x * x * x_9) = 0.
  (* Invariant *)
  Have: (x * x * x_10) = 0.
  (* Invariant *)
  Have: (x * x * x_8) = 0.
  (* Invariant *)
  Have: (y * y * x_10) = 0.
  (* Invariant *)
  Have: (y * y * x_9) = 0.
  (* Invariant *)
  Have: (y * y * x_8) = 0.
  (* Invariant *)
  Have: (x * y * x_10) = 0.
  (* Invariant *)
  Have: (x * y * x_9) = 0.
  (* Invariant *)
  Have: (x * y * x_8) = 0.
  (* Invariant *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (x * x * x_4) = 0.
  (* Invariant *)
  Have: (x * x * x_7) = x_3.
  (* Invariant *)
  Have: (y * y * x_7) = x_2.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_7) = x_5.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Else *)
  Have: n <= 0.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/30_0002/30_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/30_0002/30_merged.c:2: Warning: 
  No 'assigns' specification for function 'main30'.
  Callers assumptions might be imprecise.
