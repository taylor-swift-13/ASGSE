[kernel] Parsing out/10_0004/10_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/10_0004/10_merged.c:28: Warning: 
  Body of function main10 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_main10_loop_invariant_2_preserved (Qed 5ms) (Alt-Ergo)
[wp] [Timeout] typed_main10_loop_invariant_3_preserved (Qed 5ms) (Alt-Ergo)
[wp] [Timeout] typed_main10_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main10_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main10_assert_missing_return (Qed 3ms) (Alt-Ergo)
[wp] Proved goals:   21 / 26
  Qed:              15
  Alt-Ergo 2.5.4:    6 (15ms-190ms-551ms)
  Timeout:           5
------------------------------------------------------------
  Function main10
------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 13):
Let x = c * z.
Let x_1 = 1 + x - z.
Let x_2 = z * x_1.
Let x_3 = y * z.
Let x_4 = 1 + x.
Let x_5 = c - 1.
Let x_6 = z - 1.
Let r = real_of_int(z).
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(1 + c) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_6) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_5)) = real_of_int(y).
  (* Invariant *)
  Have: x = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_5) / x_6)) = x_4.
  (* Invariant *)
  Have: (z + ((1 + x_2) / z)) = x_4.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (z + x_2) = (x + x_3).
  (* Then *)
  Have: c < k.
}
Prove: pow(r, real_of_int(c)) = real_of_int(x_3).
Prover Z3 4.8.12 returns Failed
out of memory
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 14):
Let r = real_of_int(z).
Let x = y * z.
Let x_1 = c * z.
Let x_2 = 1 + x_1 - z.
Let x_3 = z * x_2.
Let x_4 = 1 + x_3.
Let x_5 = 1 + x_1.
Let x_6 = c - 1.
Let x_7 = z - 1.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(1 + c) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_7) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_6)) = real_of_int(y).
  (* Invariant *)
  Have: x_1 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_6) / x_7)) = x_5.
  (* Invariant *)
  Have: (z + (x_4 / z)) = x_5.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_1.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (z + x_3) = (x_1 + x).
  (* Then *)
  Have: c < k.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x).
}
Prove: x_3 = (z * (x - 1)).
Prover Z3 4.8.12 returns Failed
out of memory
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 15):
Let r = real_of_int(z).
Let x = y * z.
Let x_1 = c * z.
Let x_2 = 1 + x_1 - z.
Let x_3 = z * x_2.
Let x_4 = z * (x - 1).
Let x_5 = 1 + x_1.
Let x_6 = c - 1.
Let x_7 = z - 1.
Let x_8 = 1 + x_4.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(1 + c) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_7) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_6)) = real_of_int(y).
  (* Invariant *)
  Have: x_1 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_6) / x_7)) = x_5.
  (* Invariant *)
  Have: (z + ((1 + x_3) / z)) = x_5.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_1.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (z + x_3) = (x_1 + x).
  (* Then *)
  Have: c < k.
  Have: x_3 = x_4.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x).
}
Prove: (lxor(c, z) / x_7) = x_8.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (432ms) (6837)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 15):
Assume {
  Type: is_sint32(k) /\ is_sint32(z).
  (* Pre-condition *)
  Have: (0 < k) /\ (0 <= z) /\ (k <= 10) /\ (z <= 10).
}
Prove: (z / (z - 1)) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 16):
Let x = z - 1.
Let x_1 = lxor(c, z) / x.
Let x_2 = y * z.
Let r = real_of_int(z).
Let x_3 = c * z.
Let x_4 = 1 + x_3 - z.
Let x_5 = z * x_4.
Let x_6 = 1 + x_5.
Let x_7 = 1 + x_3.
Let x_8 = c - 1.
Let x_9 = 1 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x_9) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_8)) = real_of_int(y).
  (* Invariant *)
  Have: x_3 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_8) / x)) = x_7.
  (* Invariant *)
  Have: (z + (x_6 / z)) = x_7.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_3.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (z + x_5) = (x_3 + x_2).
  (* Then *)
  Have: c < k.
  Have: x_1 = x_6.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x_2).
  (* Invariant *)
  Have: x_1 = (1 + (z * (x_2 - 1))).
}
Prove: (1 + (z * x_9)) = (z + x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (551ms) (12121)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 17):
Let x = 1 + c.
Let x_1 = z * x.
Let x_2 = 1 + x_1.
Let x_3 = z - 1.
Let x_4 = y * z.
Let r = real_of_int(z).
Let x_5 = -z.
Let x_6 = c * z.
Let x_7 = 1 + x_6 - z.
Let x_8 = z * x_7.
Let x_9 = z + x_8.
Let x_10 = 1 + x_6.
Let x_11 = c - 1.
Let x_12 = 1 + x_1 - z.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_12).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_3) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_11)) = real_of_int(y).
  (* Invariant *)
  Have: x_6 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_11) / x_3)) = x_10.
  (* Invariant *)
  Have: (z + ((1 + x_8) / z)) = x_10.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_6.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: x_9 = (x_6 + x_4).
  (* Then *)
  Have: c < k.
  Have: x_1 = x_9.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x_4).
  (* Invariant *)
  Have: x_1 = (z + (z * (x_4 - 1))).
  (* Invariant *)
  Have: x_2 = (z + (lxor(c, z) / x_3)).
}
Prove: (z + ((1 + (z * x_12)) / z)) = x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (71ms) (2752)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 17):
Assume {
  Type: is_sint32(k) /\ is_sint32(z).
  (* Pre-condition *)
  Have: (0 < k) /\ (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / (z - 1)) = 1.
}
Prove: ((1 + z) / z) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 19):
Let x = -z.
Let x_1 = 1 + c.
Let x_2 = z * x_1.
Let x_3 = 1 + x_2 - z.
Let x_4 = 1 + x_2.
Let x_5 = z - 1.
Let x_6 = y * z.
Let r = real_of_int(z).
Let x_7 = c * z.
Let x_8 = 1 + x_7 - z.
Let x_9 = z * x_8.
Let x_10 = z + x_9.
Let x_11 = 1 + x_7.
Let x_12 = c - 1.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_5) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_12)) = real_of_int(y).
  (* Invariant *)
  Have: x_7 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_12) / x_5)) = x_11.
  (* Invariant *)
  Have: (z + ((1 + x_9) / z)) = x_11.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_7.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: x_10 = (x_7 + x_6).
  (* Then *)
  Have: c < k.
  Have: x_2 = x_10.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x_6).
  (* Invariant *)
  Have: x_2 = (z + (z * (x_6 - 1))).
  (* Invariant *)
  Have: x_4 = (z + (lxor(c, z) / x_5)).
  (* Invariant *)
  Have: (z + ((1 + (z * x_3)) / z)) = x_4.
}
Prove: 0 < x_6.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (57ms) (927)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 20):
Let x = y * z.
Let x_1 = -z.
Let x_2 = 1 + c.
Let x_3 = z * x_2.
Let x_4 = 1 + x_3 - z.
Let x_5 = 1 + x_3.
Let x_6 = z - 1.
Let r = real_of_int(z).
Let x_7 = c * z.
Let x_8 = 1 + x_7 - z.
Let x_9 = z * x_8.
Let x_10 = z + x_9.
Let x_11 = 1 + x_7.
Let x_12 = c - 1.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_8) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_6) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_12)) = real_of_int(y).
  (* Invariant *)
  Have: x_7 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_12) / x_6)) = x_11.
  (* Invariant *)
  Have: (z + ((1 + x_9) / z)) = x_11.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_7.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: x_10 = (x_7 + x).
  (* Then *)
  Have: c < k.
  Have: x_3 = x_10.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x).
  (* Invariant *)
  Have: x_3 = (z + (z * (x - 1))).
  (* Invariant *)
  Have: x_5 = (z + (lxor(c, z) / x_6)).
  (* Invariant *)
  Have: (z + ((1 + (z * x_4)) / z)) = x_5.
  (* Invariant *)
  Have: 0 < x.
}
Prove: z <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (112577)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (18ms) (278)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 22):
Let x = 1 + c.
Let x_1 = z * x.
Let x_2 = y * z.
Let x_3 = -z.
Let x_4 = 1 + x_1 - z.
Let x_5 = z * x_4.
Let x_6 = 1 + x_1.
Let x_7 = z - 1.
Let r = real_of_int(z).
Let x_8 = c * z.
Let x_9 = 1 + x_8 - z.
Let x_10 = z * x_9.
Let x_11 = z + x_10.
Let x_12 = 1 + x_8.
Let x_13 = c - 1.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_7) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(r, real_of_int(x_13)) = real_of_int(y).
  (* Invariant *)
  Have: x_8 = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_13) / x_7)) = x_12.
  (* Invariant *)
  Have: (z + ((1 + x_10) / z)) = x_12.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x_8.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: x_11 = (x_8 + x_2).
  (* Then *)
  Have: c < k.
  Have: x_1 = x_11.
  (* Invariant *)
  Have: pow(r, real_of_int(c)) = real_of_int(x_2).
  (* Invariant *)
  Have: x_1 = (z + (z * (x_2 - 1))).
  (* Invariant *)
  Have: x_6 = (z + (lxor(c, z) / x_7)).
  (* Invariant *)
  Have: (z + ((1 + x_5) / z)) = x_6.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: z <= x_1.
}
Prove: (z + x_5) = ((y * z * z) + x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (15ms) (354)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0004/10_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0004/10_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/10_0004/10_merged.c, line 34):
Let x = c * z.
Let x_1 = 1 + x - z.
Let x_2 = z * x_1.
Let x_3 = 1 + x.
Let x_4 = c - 1.
Let x_5 = z - 1.
Assume {
  Type: is_sint32(c) /\ is_sint32(k) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= z) /\ (k <= 10) /\ (z <= 10).
  (* Invariant *)
  Have: (z / x_5) = 1.
  (* Invariant *)
  Have: ((1 + z) / z) = 1.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: pow(real_of_int(z), real_of_int(x_4)) = real_of_int(y).
  (* Invariant *)
  Have: x = (z + (z * (y - 1))).
  (* Invariant *)
  Have: (z + (lxor(z, x_4) / x_5)) = x_3.
  (* Invariant *)
  Have: (z + ((1 + x_2) / z)) = x_3.
  (* Invariant *)
  Have: c <= k.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: z <= x.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (z + x_2) = (x + (y * z)).
  (* Else *)
  Have: k <= c.
}
Prove: false.
Prover Z3 4.8.12 returns Failed
out of memory
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/10_0004/10_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/10_0004/10_merged.c:5: Warning: 
  No 'assigns' specification for function 'main10'.
  Callers assumptions might be imprecise.
