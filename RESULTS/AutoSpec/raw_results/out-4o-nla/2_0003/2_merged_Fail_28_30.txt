[kernel] Parsing out/2_0003/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0003/2_merged.c:27: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_6_established (Qed 0.60ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] Proved goals:   28 / 30
  Qed:              19
  Alt-Ergo 2.5.4:    9
  Timeout:           2
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 10):
Let x = y * (1 + q_1).
Let x_1 = q_1 * y.
Let x_2 = r + x_1.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(y) /\
      is_sint32(x).
  (* Invariant *)
  Have: (x = 0) \/ (x = y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q_1.
  If (1 + r) = y
  Then { Have: (1 + q_1) = q. }
  Else { Have: q_1 = q. }
}
Prove: (q * y) <= x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32147)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 11):
Let x = q * y.
Let x_1 = y * (1 + q_1).
Let x_2 = q_1 * y.
Let x_3 = r + x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(y) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = y).
  (* Invariant *)
  Have: x_1 < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: x_2 < x_1.
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x_3 < x_1.
  (* Invariant *)
  Have: x_1 < (r + y + x_2).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q_1.
  If (1 + r) = y
  Then { Have: (1 + q_1) = q. }
  Else { Have: q_1 = q. }
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x < x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32268)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 12):
Let x = q * y.
Let x_1 = y * (1 + q_1).
Let x_2 = q_1 * y.
Let x_3 = r_2 + x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = y).
  (* Invariant *)
  Have: x_1 < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: x_2 < x_1.
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x_3 < x_1.
  (* Invariant *)
  Have: x_1 < (r_2 + y + x_2).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_1 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x < x_1.
}
Prove: (r + x) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (33463)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 13):
Let x = q * y.
Let x_1 = r + x.
Let x_2 = y * (1 + q_1).
Let x_3 = q_1 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = y).
  (* Invariant *)
  Have: x_2 < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_3 < x_2.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_4 < x_2.
  (* Invariant *)
  Have: x_2 < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_1 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: x_1 < x_2.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (33592)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (69)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 15):
Let x = q_1 * y.
Let x_1 = r + x.
Let x_2 = y * (1 + q).
Let x_3 = q * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q_1) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = y).
  (* Invariant *)
  Have: x_2 < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_3 < x_2.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_4 < x_2.
  (* Invariant *)
  Have: x_2 < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + q) = q_1. }
  Else { Have: (q = q_1) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_1 < x_2.
}
Prove: x_2 = (y * (1 + q_1)).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (33778)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: y = x.
Prover Z3 4.8.12 returns Timeout (Qed:0.60ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.60ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 17):
Let x = q * y.
Let x_1 = r + x.
Let x_2 = y * (1 + q).
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = y).
  (* Invariant *)
  Have: x_2 < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_3 < x_2.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_4 < x_2.
  (* Invariant *)
  Have: (y * (1 + q_2)) = x_2.
  (* Invariant *)
  Have: x_2 < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_1 < x_2.
}
Prove: x_2 < (r + y + x).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34581)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (2ms) (90)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 17):
Assume { Type: is_sint32(x). (* Pre-condition *) Have: 0 < x. }
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 18):
Let x = y * (1 + q).
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x).
  (* Invariant *)
  Have: (x = 0) \/ (x = y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: (y * (1 + q_2)) = x.
  (* Invariant *)
  Have: x < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
}
Prove: r < y.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (89)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 22):
Let x = y * (1 + q).
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x).
  (* Invariant *)
  Have: (x = 0) \/ (x = y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: (y * (1 + q_2)) = x.
  (* Invariant *)
  Have: x < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
  (* Invariant *)
  Have: r < y.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34328)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (88)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 23):
Let x = y * (1 + q).
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(y) /\ is_sint32(x).
  (* Invariant *)
  Have: (x = 0) \/ (x = y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: (y * (1 + q_2)) = x.
  (* Invariant *)
  Have: x < (r_2 + y + x_3).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (r + y + x_1).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34808)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0003/2_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/2_0003/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0003/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
