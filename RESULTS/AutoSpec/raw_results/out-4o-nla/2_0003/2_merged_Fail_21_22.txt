[kernel] Parsing out/2_0003/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0003/2_merged.c:23: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_7_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   21 / 22
  Qed:              15
  Alt-Ergo 2.5.4:    6
  Timeout:           1
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 10):
Let x_1 = q_2 * y.
Let x_2 = r + x_1.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r) = y
  Then { Have: q_2 = q_1. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. }
}
Prove: (q * y) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (30ms) (52021)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = r_2 + x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: (r + x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (39632)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (6ms) (141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 12):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: (x_2 = x) \/ (x_2 < x).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33348)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 14):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x_2 = x) \/ (x_2 < x).
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34207)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (156)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 16):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x_2 = x) \/ (x_2 < x).
  (* Invariant *)
  Have: r < y.
}
Prove: x_2 < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 18):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_2 < x.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (34061)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (153)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0003/2_merged.c, line 19):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (34189)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (154)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0003/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0003/2_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/2_0003/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0003/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
