[kernel] Parsing out/29_0002/29_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/29_0002/29_merged.c:26: Warning: 
  Body of function main29 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] [Timeout] typed_main29_loop_invariant_established (Qed 0.81ms) (Z3)
[wp] [Timeout] typed_main29_assert_missing_return (Qed 2ms) (Z3)
[wp] Proved goals:   14 / 16
  Qed:               7
  Alt-Ergo 2.5.4:    6 (6ms-13ms-19ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function main29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 14):
Let x_1 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
}
Prove: (y * y * x_1) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34213)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 14):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
}
Prove: (n * y * y) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.81ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.81ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 15):
Let x_1 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
}
Prove: (x * y * x_1) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (35614)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (71)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 15):
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (n * y * y) = 0.
}
Prove: (n * x * y) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30358)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (13ms) (357)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 16):
Let x_1 = n - 1.
Let x_2 = p + (x * y).
Let x_3 = w + (y * y).
Let x_4 = z + (x * x).
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (y * y * x_1) = 0.
  (* Invariant *)
  Have: (x * y * x_1) = 0.
}
Prove: (x_2 * x_2) <= (x_3 * x_4).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (53486)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 17):
Let x_1 = p + (x * y).
Let x_2 = w + (y * y).
Let x_3 = z + (x * x).
Let x_4 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: (x_1 * x_1) <= (x_2 * x_3).
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36399)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (19ms) (287)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 18):
Let x_1 = z + (x * x).
Let x_2 = p + (x * y).
Let x_3 = w + (y * y).
Let x_4 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: (x_2 * x_2) <= (x_3 * x_1).
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36410)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (16ms) (241)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 19):
Let x_1 = w + (y * y).
Let x_2 = z + (x * x).
Let x_3 = p + (x * y).
Let x_4 = n - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_4) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: 0 < n.
  (* Invariant *)
  Have: (y * y * x_4) = 0.
  (* Invariant *)
  Have: (x * y * x_4) = 0.
  (* Invariant *)
  Have: (x_3 * x_3) <= (x_1 * x_2).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36525)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (17ms) (278)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0002/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0002/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/29_0002/29_merged.c, line 34):
Assume {
  Type: is_sint32(n) /\ is_sint32(n_1) /\ is_sint32(p) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: 0 <= y.
  (* Pre-condition *)
  Have: 0 <= n_1.
  (* Invariant *)
  Have: (n_1 * y * y) = 0.
  (* Invariant *)
  Have: (n_1 * x * y) = 0.
  (* Invariant *)
  Have: (n * y * y) = 0.
  (* Invariant *)
  Have: (n * x * y) = 0.
  (* Invariant *)
  Have: (p * p) <= (w * z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= w.
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= n.
  (* Else *)
  Have: n <= 0.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0002/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0002/29_merged.c:6: Warning: 
  No 'assigns' specification for function 'main29'.
  Callers assumptions might be imprecise.
