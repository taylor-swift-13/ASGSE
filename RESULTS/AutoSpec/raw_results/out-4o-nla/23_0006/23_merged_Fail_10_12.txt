[kernel] Parsing out/23_0006/23_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/23_0006/23_merged.c:17: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/23_0006/23_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_main23_loop_invariant_4_preserved (Qed 4ms) (Z3)
[wp] Proved goals:   10 / 12
  Qed:               7
  Alt-Ergo 2.5.4:    3 (4ms-5ms)
  Timeout:           2
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0006/23_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0006/23_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0006/23_merged.c, line 10):
Let x_2 = x * x.
Let x_3 = 1 + x.
Let x_4 = x_1 * x_1.
Let x_5 = 1 + x_1.
Let x_6 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(1 + x_2).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_4 < (x_5 * x_5).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: x_2 < (x_3 * x_3).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (2 + x_2) <= (x_6 * x_6).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (9783)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0006/23_merged.c, line 10):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
}
Prove: x_1 < (x_2 * x_2).
Prover Z3 4.8.12 returns Valid (Qed:0.66ms) (10ms) (29579)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.66ms) (4ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0006/23_merged.c, line 11):
Let x_2 = x * x.
Let x_3 = 2 + x.
Let x_4 = 1 + x.
Let x_5 = x_1 * x_1.
Let x_6 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_5) /\
      is_sint32(1 + x_2).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_5 < (x_6 * x_6).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_2 < (x_4 * x_4).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (2 + x_2) <= (x_3 * x_3).
}
Prove: ((-1) <= x) /\ (x <= 9).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0006/23_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0006/23_merged.c, line 12):
Let x_2 = x * x.
Let x_3 = 2 + x.
Let x_4 = 1 + x.
Let x_5 = x_4 * x_4.
Let x_6 = x_1 * x_1.
Let x_7 = 1 + x_1.
Let x_8 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_6 < (x_7 * x_7).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_2 < x_5.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (2 + x_2) <= (x_3 * x_3).
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
}
Prove: x_5 <= x_8.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0006/23_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0006/23_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0006/23_merged.c, line 13):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (29800)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (19)

------------------------------------------------------------

Goal Loop assigns (file out/23_0006/23_merged.c, line 14) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0006/23_merged.c, line 14) (2/2):
Call Result at line 17
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0006/23_merged.c:4: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/23_0006/23_merged.c:17: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
