[kernel] Parsing out/2_0001/2_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/2_0001/2_merged.c:28: Warning: 
  Body of function main2 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] Proved goals:   30 / 32
  Qed:              22
  Alt-Ergo 2.5.4:    8 (4ms-9ms-16ms)
  Timeout:           2
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 10):
Let x_1 = (x - r_2) / y.
Let x_2 = r_2 + (y * x_1).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_1)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_1.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (r + (q * y)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (42110)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (88)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 11):
Let x_1 = r + (q * y).
Let x_2 = (x - r_2) / y.
Let x_3 = r_2 + (y * x_2).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_2)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: x_1 < x.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 14):
Let x_1 = r + (q * y).
Let x_2 = (x - r_2) / y.
Let x_3 = r_2 + (y * x_2).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_2)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
}
Prove: x < (y * (1 + q)).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (42494)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (12ms) (236)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: x < y.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 16):
Let x_1 = r + (q * y).
Let x_2 = (x - r_2) / y.
Let x_3 = r_2 + (y * x_2).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_2)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x < (y * (1 + q)).
}
Prove: r < y.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 17):
Let x_1 = r + (q * y).
Let x_2 = (x - r_2) / y.
Let x_3 = r_2 + (y * x_2).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_2)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: (1 + ((x - r_2) / (1 + r_2))) = q. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x < (y * (1 + q)).
  (* Invariant *)
  Have: r < y.
}
Prove: ((x - r) / y) = q.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (39158)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (16ms) (503)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 17):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (x / y) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30112)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (35)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 18):
Let x_1 = (x - r) / y.
Let x_2 = r + (y * x_1).
Let x_3 = (x - r_2) / y.
Let x_4 = r_2 + (y * x_3).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_3)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: x_3 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  If (1 + r_2) = y
  Then {
    Let x_5 = 1 + r_2.
    Let x_6 = x / x_5.
    Have: (x_6 = (1 + q)) /\ (x_6 = (1 + ((x - r_2) / x_5))).
    Have: r = 0.
  }
  Else {
    Let x_7 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_1)).
  (* Invariant *)
  Have: r < y.
}
Prove: x_1 <= 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (12ms) (274)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 23):
Let x_1 = (x - r) / y.
Let x_2 = r + (y * x_1).
Let x_3 = (x - r_2) / y.
Let x_4 = r_2 + (y * x_3).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_3)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: x_3 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  If (1 + r_2) = y
  Then {
    Let x_5 = 1 + r_2.
    Let x_6 = x / x_5.
    Have: (x_6 = (1 + q)) /\ (x_6 = (1 + ((x - r_2) / x_5))).
    Have: r = 0.
  }
  Else {
    Let x_7 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_1)).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: x_1 <= 1.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (36747)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (12ms) (274)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 24):
Let x_1 = (x - r) / y.
Let x_2 = r + (y * x_1).
Let x_3 = (x - r_2) / y.
Let x_4 = r_2 + (y * x_3).
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x / y) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_3)).
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: x_3 <= 1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= x_3.
  If (1 + r_2) = y
  Then {
    Let x_5 = 1 + r_2.
    Let x_6 = x / x_5.
    Have: (x_6 = (1 + q)) /\ (x_6 = (1 + ((x - r_2) / x_5))).
    Have: r = 0.
  }
  Else {
    Let x_7 = -r_1.
    Have: (r_2 = r_1) /\ (((x - 1 - r_1) / y) = ((x - r_1) / y)).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x < (y * (1 + x_1)).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (38360)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (276)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/2_0001/2_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/2_0001/2_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0001/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
