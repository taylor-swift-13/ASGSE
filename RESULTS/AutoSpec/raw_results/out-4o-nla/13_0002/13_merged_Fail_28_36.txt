[kernel] Parsing out/13_0002/13_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/13_0002/13_merged.c:45: Warning: 
  Body of function main13 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_preserved (Qed 402ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_5_preserved (Qed 440ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_6_preserved (Qed 536ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_6_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_9_preserved (Qed 450ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_12_preserved (Qed 464ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_14_preserved (Qed 524ms) (Z3)
[wp] [Timeout] typed_main13_assert_missing_return (Qed 11ms) (Z3)
[wp] Proved goals:   28 / 36
  Qed:              22
  Alt-Ergo 2.5.4:    3 (3ms-7ms-13ms)
  Z3 4.8.12:         3 (20ms)
  Timeout:           8
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 13):
Let x_1 = a_6 % 2.
Let x_2 = a_6 * p_2.
Let x_3 = b_7 * p_2.
Let x_4 = x_2 + x_3.
Let x_5 = x * y.
Let x_6 = x + y.
Let x_7 = b_7 % 2.
Let x_8 = x_5 - x_2 - x_3.
Let x_9 = y % 2.
Let x_10 = x_5 - y.
Let x_11 = x_10 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_10) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_6.
  (* Invariant *)
  Have: (y * x_10) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_5 <= x_6))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_4.
  (* Invariant *)
  Have: x_5 = (x_2 + x_3 + (p_2 * (x - a_6) * (y - b_7))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_8 % p_2) = 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_7 = 0) \/ ((x_1 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_6))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_5 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_12 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_5 = (q_1 + x_12 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_5 = (q + x_12).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_13 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_5 = (q_2 + (a * p) + x_13)).
              Have: (1 + b) = b_2.
              Have: x_5 = (q + x_13).
            }
            Else {
              Let x_14 = a_3 * p.
              Let x_15 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_5 = (q_3 + x_14 + x_15)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_13)).
            Have: (1 + b) = b_2.
            Have: x_5 = (q + x_13).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_5 = (q_1 + x_12 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_5 = (q + x_12).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_13)).
            Have: (1 + b) = b_2.
            Have: x_5 = (q + x_13).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_13)).
          Have: (1 + b) = b_2.
          Have: x_5 = (q + x_13).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_14 + x_15)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_14 + x_15).
      }
    }
  }
}
Prove: x_5 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:402ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:402ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (17ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 17):
Let x_1 = a_6 % 2.
Let x_2 = a_6 * p_2.
Let x_3 = b_7 * p_2.
Let x_4 = x_2 + x_3.
Let x_5 = x * y.
Let x_6 = x + y.
Let x_7 = b_7 % 2.
Let x_8 = x_5 - x_2 - x_3.
Let x_9 = y % 2.
Let x_10 = x_5 - y.
Let x_11 = x_10 % 2.
Let x_12 = a * b * p.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_10) /\
      is_sint32(x_8) /\ is_sint32(x_5 - x_12).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_6.
  (* Invariant *)
  Have: (y * x_10) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_5 <= x_6))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_4.
  (* Invariant *)
  Have: x_5 = (x_2 + x_3 + (p_2 * (x - a_6) * (y - b_7))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_8 % p_2) = 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_7 = 0) \/ ((x_1 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_6))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_13 = b_1 / 2.
      Let x_14 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_14 * x_13))).
      Have: x_14 = a.
      Have: x_13 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_15 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_15 = (a_2 * p)) /\
              (x_5 = (q + (b * p) + x_15)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_16 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (b_2 * p)) /\
                  (x_5 = (q_1 + (a * p) + x_16)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_17 = p * (a_3 - 1) * (b_3 - 1).
              Let x_18 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                  (x_5 = (q_2 + x_17 + x_18)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (b_2 * p)) /\
                (x_5 = (q_1 + (a * p) + x_16)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_15 = (a_2 * p)) /\
            (x_5 = (q + (b * p) + x_15)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (b_2 * p)) /\
                (x_5 = (q_1 + (a * p) + x_16)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_17 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (b_2 * p)) /\
              (x_5 = (q_1 + (a * p) + x_16)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_17 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_17 + x_18) = ((a_3 * p) + (b_3 * p))) /\
            (x_5 = (q_2 + x_17 + x_18)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: x_5 = (x_12 + (p * (x - a) * (y - b))).
Prover Z3 4.8.12 returns Timeout (Qed:440ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:440ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 18):
Let x_1 = x * y.
Let x_2 = p * (x - a) * (y - b).
Let x_3 = a_6 % 2.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = x_4 + x_5.
Let x_7 = x + y.
Let x_8 = b_7 % 2.
Let x_9 = x_1 - x_4 - x_5.
Let x_10 = y % 2.
Let x_11 = x_1 - y.
Let x_12 = x_11 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_11) /\
      is_sint32(x_9) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_7.
  (* Invariant *)
  Have: (y * x_11) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_12 = 0) \/ ((x_10 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_1 <= x_7))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_6.
  (* Invariant *)
  Have: x_1 = (x_4 + x_5 + (p_2 * (x - a_6) * (y - b_7))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_9 % p_2) = 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_8 = 0) \/ ((x_3 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_7))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_6 <= x_1.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_3 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_13 = b_1 / 2.
      Let x_14 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1
             = ((a_1 * p_1) + (b_1 * p_1)
                + (4 * (p_1 * (x - x_14) * (y - x_13))))).
      Have: x_14 = a.
      Have: x_13 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_15 = p * (y - b) * (1 + x - a_2).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_15 = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_15)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_16 = p * (x - a) * (1 + y - b_2).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_16)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_17 = p * (1 + x - a_3) * (1 + y - b_3).
              Let x_18 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_17 = (q_2 + x_18)) /\
                  (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_17 = (q_2 + x_18)) /\
                (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_16)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_17 = (q_2 + x_18)) /\
                (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_17 = (q_2 + x_18)) /\
              (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_15 = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_15)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_16)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_17 = (q_2 + x_18)) /\
                (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_17 = (q_2 + x_18)) /\
              (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_16 = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_16)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_17 = (q_2 + x_18)) /\
              (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_17 = (q_2 + x_18)) /\
            (((a_3 * p) + (b_3 * p) + x_17) = (x_1 + x_18)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: x_1 = ((a * b * p) + x_2).
}
Prove: x_1 = ((a * p) + (b * p) + x_2).
Prover Z3 4.8.12 returns Timeout (Qed:536ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:536ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 18):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: (a * b) = (a + b).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 19):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = a_6 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = x_5 + x_6.
Let x_8 = b_8 + x.
Let x_9 = b_7 % 2.
Let x_10 = x_1 - x_5 - x_6.
Let x_11 = b_8 % 2.
Let x_12 = x_1 - b_8.
Let x_13 = x_12 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_12) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_10).
  (* Goal *)
  When: b != 0.
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_8.
  (* Invariant *)
  Have: (b_8 * x_12) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_13 = 0) \/ ((x_11 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_1 <= x_8))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_7.
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + (p_2 * (b_8 - b_7) * (x - a_6))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_10 % p_2) = 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_9 = 0) \/ ((x_4 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_8))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_4 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_16)) /\
              (x_1 = (q + (2 * x_3) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                (x_1 = (q_1 + (2 * x_2) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_16)) /\
            (x_1 = (q + (2 * x_3) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                (x_1 = (q_1 + (2 * x_2) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
              (x_1 = (q_1 + (2 * x_2) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_2 + x_3).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (p * (b_8 - b) * (x - a))).
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:497ms) (20ms) (80505)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 19):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: b != 0.
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (30792)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (3ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 20):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = a_6 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = x_5 + x_6.
Let x_8 = b_8 + x.
Let x_9 = b_7 % 2.
Let x_10 = x_1 - x_5 - x_6.
Let x_11 = b_8 % 2.
Let x_12 = x_1 - b_8.
Let x_13 = x_12 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_12) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_8.
  (* Invariant *)
  Have: (b_8 * x_12) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_13 = 0) \/ ((x_11 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_1 <= x_8))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_7.
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + (p_2 * (b_8 - b_7) * (x - a_6))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_10 % p_2) = 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_9 = 0) \/ ((x_4 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_8))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_4 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_14 = b_1 / 2.
      Let x_15 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_15)) + (4 * (p_1 * x_14)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_15 = a.
      Have: x_14 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_16 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_16)) /\
              (x_1 = (q + (2 * x_3) + x_16)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_17 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_17)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_18 = p * (a_3 - 1).
              Let x_19 = p * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_18 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                (x_1 = (q_1 + (2 * x_2) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_16)) /\
            (x_1 = (q + (2 * x_3) + x_16)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
                (x_1 = (q_1 + (2 * x_2) + x_17)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_18 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_17)) /\
              (x_1 = (q_1 + (2 * x_2) + x_17)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_18 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_18 + x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_18 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_2 + x_3).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (p * (b_8 - b) * (x - a))).
  (* Invariant *)
  Have: ((b != 0) -> (0 <= a)).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:468ms) (20ms) (82525)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 21):
Let x_1 = b_1 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = a_6 % 2.
Let x_5 = a_6 * p_2.
Let x_6 = b_8 * p_2.
Let x_7 = x_5 + x_6.
Let x_8 = b_1 + x.
Let x_9 = b_8 % 2.
Let x_10 = x_1 - x_5 - x_6.
Let x_11 = b_1 % 2.
Let x_12 = x_1 - b_1.
Let x_13 = x_12 % 2.
Let x_14 = x_1 - x_2 - x_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\ is_sint32(b_5) /\
      is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\ is_sint32(b_1) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_12) /\
      is_sint32(x_14) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_8.
  (* Invariant *)
  Have: (b_1 * x_12) = x_1.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_13 = 0) \/ ((x_11 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_1 <= x_8))).
  (* Invariant *)
  Have: (a_6 * b_8 * p_2) = x_7.
  (* Invariant *)
  Have: x_1 = (x_5 + x_6 + (p_2 * (b_1 - b_8) * (x - a_6))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_8).
  (* Invariant *)
  Have: (x_10 % p_2) = 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_9 = 0) \/ ((x_4 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_8) <= x_8))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_8 != 0.
  If x_4 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_8 = b_7) /\ (p_2 = p_3).
    If (b_7 % 2) = 0
    Then {
      Let x_15 = b_2 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_7 = b_2) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_16)) + (4 * (p_1 * x_15)))
             = ((a_1 * p_1) + (b_2 * p_1))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_7 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_6).
        If (b_6 % 2) = 0
        Then {
          Let x_17 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_3 + x_17)) /\
              (x_1 = (q + (2 * x_3) + x_17)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_6 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_5).
            If (b_5 % 2) = 1
            Then {
              Let x_18 = p * (b_3 - 1).
              Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_2 + x_18)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_18)).
              Have: (1 + b) = b_3.
            }
            Else {
              Let x_19 = p * (a_3 - 1).
              Let x_20 = p * (b_4 - 1).
              Let x_21 = p * (a_3 + b_4 - 1).
              Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                  ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
                  (x_1 = (q_2 + x_19 + x_20 + x_21)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_4.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_4) /\
                ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
                (x_1 = (q_2 + x_19 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_2 + x_18)) /\
                (x_1 = (q_1 + (2 * x_2) + x_18)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
                (x_1 = (q_2 + x_19 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
              (x_1 = (q_2 + x_19 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_8 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_6).
      If (b_6 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_3 + x_17)) /\
            (x_1 = (q + (2 * x_3) + x_17)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_6 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_2 + x_18)) /\
                (x_1 = (q_1 + (2 * x_2) + x_18)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
                (x_1 = (q_2 + x_19 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
              (x_1 = (q_2 + x_19 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_5).
        If (b_5 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_2 + x_18)) /\
              (x_1 = (q_1 + (2 * x_2) + x_18)).
          Have: (1 + b) = b_3.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_5 = b_4) /\
              ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
              (x_1 = (q_2 + x_19 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_4) /\
            ((x_19 + x_20 + x_21) = ((a_3 * p) + (b_4 * p))) /\
            (x_1 = (q_2 + x_19 + x_20 + x_21)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_4.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_2 + x_3).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (p * (b_1 - b) * (x - a))).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a = 0) \/ (b = 0) \/ ((x_14 % p) = 0).
Prover Z3 4.8.12 returns Timeout (Qed:450ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:450ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 22):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = b_8 * x.
Let x_4 = x_3 - x_1 - x_2.
Let x_5 = a_6 % 2.
Let x_6 = a_6 * p_2.
Let x_7 = b_7 * p_2.
Let x_8 = x_6 + x_7.
Let x_9 = b_8 + x.
Let x_10 = b_7 % 2.
Let x_11 = x_3 - x_6 - x_7.
Let x_12 = b_8 % 2.
Let x_13 = x_3 - b_8.
Let x_14 = x_13 % 2.
Let x_15 = a % 2.
Let x_16 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_13) /\
      is_sint32(x_4) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_3 = x_9.
  (* Invariant *)
  Have: (b_8 * x_13) = x_3.
  (* Invariant *)
  Have: b_8 <= x_3.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_14 = 0) \/ ((x_12 = 1) /\ (x_14 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_3 <= x_9))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_8.
  (* Invariant *)
  Have: x_3 = (x_6 + x_7 + (p_2 * (b_8 - b_7) * (x - a_6))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_11 % p_2) = 0.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_10 = 0) \/ ((x_5 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_7) <= x_9))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_8 <= x_3.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_18)) + (4 * (p_1 * x_17)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_19)) /\
              (x_3 = (q + (2 * x_2) + x_19)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_20 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                  (x_3 = (q_1 + (2 * x_1) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = p * (a_3 - 1).
              Let x_22 = p * (b_3 - 1).
              Let x_23 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_21 + x_22 + x_23)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                (x_3 = (q_1 + (2 * x_1) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_19)) /\
            (x_3 = (q + (2 * x_2) + x_19)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                (x_3 = (q_1 + (2 * x_1) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
              (x_3 = (q_1 + (2 * x_1) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_21 + x_22 + x_23)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_1 + x_2).
  (* Invariant *)
  Have: x_3 = (x_1 + x_2 + (p * (b_8 - b) * (x - a))).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_4 % p) = 0).
}
Prove: (x_15 = 0) \/ (x_16 = 0) \/ ((x_15 = 1) /\ (x_16 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:444ms) (20ms) (54332)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 22):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b % 2.
Let x_4 = x_2 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = (b + x).
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
}
Prove: (x_3 = 0) \/ (x_4 = 0) \/ ((x_3 = 1) /\ (x_4 = 1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (13ms) (292)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 24):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = x * y.
Let x_6 = x_5 - x_3 - x_4.
Let x_7 = a_6 % 2.
Let x_8 = a_6 * p_2.
Let x_9 = b_7 * p_2.
Let x_10 = x_8 + x_9.
Let x_11 = x + y.
Let x_12 = b_7 % 2.
Let x_13 = x_5 - x_8 - x_9.
Let x_14 = y % 2.
Let x_15 = x_5 - y.
Let x_16 = x_15 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_15) /\
      is_sint32(x_6) /\ is_sint32(x_13).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_11.
  (* Invariant *)
  Have: (y * x_15) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> (x_5 <= x_11))).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: x_5 = (x_8 + x_9 + (p_2 * (x - a_6) * (y - b_7))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_13 % p_2) = 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_12 = 0) \/ ((x_7 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      ((a_6 + b_7) <= x_11))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_10 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_18)) + (4 * (p_1 * x_17)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_19)) /\
              (x_5 = (q + (2 * x_4) + x_19)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_20 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_20)) /\
                  (x_5 = (q_1 + (2 * x_3) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = p * (a_3 - 1).
              Let x_22 = p * (b_3 - 1).
              Let x_23 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                  (x_5 = (q_2 + x_21 + x_22 + x_23)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_20)) /\
                (x_5 = (q_1 + (2 * x_3) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_19)) /\
            (x_5 = (q + (2 * x_4) + x_19)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_20)) /\
                (x_5 = (q_1 + (2 * x_3) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_20)) /\
              (x_5 = (q_1 + (2 * x_3) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
            (x_5 = (q_2 + x_21 + x_22 + x_23)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = (x_3 + x_4).
  (* Invariant *)
  Have: x_5 = (x_3 + x_4 + (p * (x - a) * (y - b))).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_6 % p) = 0).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
}
Prove: (a + b) <= x_11.
Prover Z3 4.8.12 returns Timeout (Qed:464ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:464ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 24):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = x_5.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_4 = 0) \/ ((x_1 = 1) /\ (x_4 = 1)).
}
Prove: x_2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (31329)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (47)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (441ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 26):
Let x_1 = b_1 + x.
Let x_2 = a % 2.
Let x_3 = b % 2.
Let x_4 = a * p.
Let x_5 = b * p.
Let x_6 = b_1 * x.
Let x_7 = x_6 - x_4 - x_5.
Let x_8 = x_4 + x_5.
Let x_9 = a_6 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_8 * p_2.
Let x_12 = x_10 + x_11.
Let x_13 = b_8 % 2.
Let x_14 = x_6 - x_10 - x_11.
Let x_15 = b_1 % 2.
Let x_16 = x_6 - b_1.
Let x_17 = x_16 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\ is_sint32(b_5) /\
      is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\ is_sint32(b_1) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_16) /\
      is_sint32(x_7) /\ is_sint32(x_14).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_6 = x_1.
  (* Invariant *)
  Have: (b_1 * x_16) = x_6.
  (* Invariant *)
  Have: b_1 <= x_6.
  (* Invariant *)
  Have: (x_15 = 0) \/ (x_17 = 0) \/ ((x_15 = 1) /\ (x_17 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_6 <= x_1))).
  (* Invariant *)
  Have: (a_6 * b_8 * p_2) = x_12.
  (* Invariant *)
  Have: x_6 = (x_10 + x_11 + (p_2 * (b_1 - b_8) * (x - a_6))).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_8).
  (* Invariant *)
  Have: (x_14 % p_2) = 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_13 = 0) \/ ((x_9 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a_6 + b_8) <= x_1))).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_12 <= x_6.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_8 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_8 = b_7) /\ (p_2 = p_3).
    If (b_7 % 2) = 0
    Then {
      Let x_18 = b_2 / 2.
      Let x_19 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_7 = b_2) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_19)) + (4 * (p_1 * x_18)))
             = ((a_1 * p_1) + (b_2 * p_1))).
      Have: x_19 = a.
      Have: x_18 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_7 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_6).
        If (b_6 % 2) = 0
        Then {
          Let x_20 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_5 + x_20)) /\
              (x_6 = (q + (2 * x_5) + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_6 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_5).
            If (b_5 % 2) = 1
            Then {
              Let x_21 = p * (b_3 - 1).
              Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_4 + x_21)) /\
                  (x_6 = (q_1 + (2 * x_4) + x_21)).
              Have: (1 + b) = b_3.
            }
            Else {
              Let x_22 = p * (a_3 - 1).
              Let x_23 = p * (b_4 - 1).
              Let x_24 = p * (a_3 + b_4 - 1).
              Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                  ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
                  (x_6 = (q_2 + x_22 + x_23 + x_24)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_4.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_4) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_4 + x_21)) /\
                (x_6 = (q_1 + (2 * x_4) + x_21)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_8 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_6).
      If (b_6 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_5 + x_20)) /\
            (x_6 = (q + (2 * x_5) + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_6 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_4 + x_21)) /\
                (x_6 = (q_1 + (2 * x_4) + x_21)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_5).
        If (b_5 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_4 + x_21)) /\
              (x_6 = (q_1 + (2 * x_4) + x_21)).
          Have: (1 + b) = b_3.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_5 = b_4) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_4) /\
            ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_4 * p))) /\
            (x_6 = (q_2 + x_22 + x_23 + x_24)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_4.
      }
    }
  }
  (* Invariant *)
  Have: (a * b * p) = x_8.
  (* Invariant *)
  Have: x_6 = (x_4 + x_5 + (p * (b_1 - b) * (x - a))).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_7 % p) = 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_3 = 0) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a + b) <= x_1))).
  (* Invariant *)
  Have: 0 < p.
}
Prove: x_8 <= x_6.
Prover Z3 4.8.12 returns Timeout (Qed:524ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:524ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (24ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/13_0002/13_merged.c, line 56):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = x_1 + x_2.
Let x_4 = b_1 * x.
Let x_5 = b_1 + x.
Let x_6 = a % 2.
Let x_7 = b % 2.
Let x_8 = x_4 - x_1 - x_2.
Let x_9 = b_1 % 2.
Let x_10 = x_4 - b_1.
Let x_11 = x_10 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(x_10) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_4 = x_5.
  (* Invariant *)
  Have: (b_1 * x_10) = x_4.
  (* Invariant *)
  Have: b_1 <= x_4.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> (x_4 <= x_5))).
  (* Invariant *)
  Have: (a * b * p) = x_3.
  (* Invariant *)
  Have: x_4 = (x_1 + x_2 + (p * (b_1 - b) * (x - a))).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (a = 0) \/ (b = 0) \/ ((x_8 % p) = 0).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_7 = 0) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((a + b) <= x_5))).
  (* Invariant *)
  Have: 0 < p.
  (* Invariant *)
  Have: x_3 <= x_4.
  If a != 0
  Then { (* Else *) Have: b = 0. }
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0002/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
