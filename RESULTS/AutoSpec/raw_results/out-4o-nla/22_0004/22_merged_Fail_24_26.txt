[kernel] Parsing out/22_0004/22_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/22_0004/22_merged.c:24: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/22_0004/22_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_main22_loop_invariant_2_established (Qed 0.99ms) (Z3)
[wp] [Timeout] typed_main22_loop_invariant_7_established (Qed 3ms) (Z3)
[wp] Proved goals:   24 / 26
  Qed:              11
  Alt-Ergo 2.5.4:   12
  Z3 4.8.12:         1 (10ms)
  Timeout:           2
------------------------------------------------------------
  Function main22
------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 9):
Let x_2 = i * i.
Let x_3 = x * x.
Let x_4 = x - 1.
Let x_5 = i_1 * i_1.
Let x_6 = x_1 * x_1.
Let x_7 = x_1 - 1.
Let x_8 = 1 + x.
Let x_9 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_8) /\ is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_6 = x_5.
  (* Invariant *)
  Have: x_5 = (1 + (x_7 * x_7)).
  (* Invariant *)
  Have: x_5 <= (1 + x_6).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_5) -> (i_4 <= x_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_5)).
  (* Invariant *)
  Have: ((i_2 * i_2) = x_5) /\ (x_1 <= i_2).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_2 = (1 + (x_4 * x_4)).
  (* Invariant *)
  Have: x_2 <= (1 + x_3).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_2) -> (i_4 <= x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_2)).
  (* Invariant *)
  Have: ((i_3 * i_3) = x_2) /\ (x <= i_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_8 * x_8) = x_9.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (29362)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 10):
Let x_1 = x * x.
Let x_2 = x - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
}
Prove: x_1 = (1 + (x_2 * x_2)).
Prover Z3 4.8.12 returns Timeout (Qed:0.99ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.99ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 11):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x * x.
Let x_5 = 1 + x_4.
Let x_6 = x - 1.
Let x_7 = i * i.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_7) -> (i_4 <= x_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_7)).
  (* Invariant *)
  Have: ((i_1 * i_1) = x_7) /\ (x_1 <= i_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_4 = (1 + (x_6 * x_6)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_4) -> (i_4 <= x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_4)).
  (* Invariant *)
  Have: (x_4 = (i_2 * i_2)) /\ (x <= i_2).
  (* Invariant *)
  Have: (x_4 = (i_3 * i_3)) /\ (0 <= i_3).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_3 = x_5.
}
Prove: x_4 <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 11):
Let x_1 = x * x.
Let x_2 = x - 1.
Let x_3 = x_2 * x_2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_1 = x_4.
}
Prove: x_3 <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (23)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 12):
Let x_1 = x - 1.
Let x_2 = x_1 * x_1.
Let x_3 = x * x.
Let x_4 = 1 + x_2.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_3 = x_4.
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: x <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30421)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (23)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 13):
Let x_2 = x * x.
Let x_3 = 1 + x.
Let x_4 = x_3 * x_3.
Let x_5 = 1 + x_2.
Let x_6 = x - 1.
Let x_7 = i * i.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_7) -> (i_4 <= x_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_7)).
  (* Invariant *)
  Have: ((i_1 * i_1) = x_7) /\ (x_1 <= i_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_2 = (1 + (x_6 * x_6)).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_2) -> (i_4 <= x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_2)).
  (* Invariant *)
  Have: (x_2 = (i_2 * i_2)) /\ (x <= i_2).
  (* Invariant *)
  Have: (x_2 = (i_3 * i_3)) /\ (0 <= i_3).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_2 <= x_4.
}
Prove: x_4 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (29181)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 13):
Let x_1 = x - 1.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = x * x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_4 = x_3.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x <= x_3.
}
Prove: x_4 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30003)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 14):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x * x.
Let x_5 = 1 + x_4.
Let x_6 = x - 1.
Let x_7 = i_1 * i_1.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Goal *)
  When: (i * i) <= x_5.
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_7) -> (i_5 <= x_1)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_7)).
  (* Invariant *)
  Have: ((i_2 * i_2) = x_7) /\ (x_1 <= i_2).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_4 = (1 + (x_6 * x_6)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_4) -> (i_5 <= x)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_4)).
  (* Invariant *)
  Have: (x_4 = (i_3 * i_3)) /\ (x <= i_3).
  (* Invariant *)
  Have: (x_4 = (i_4 * i_4)) /\ (0 <= i_4).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: x_3 <= x_5.
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (29527)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 14):
Let x_1 = x * x.
Let x_2 = x - 1.
Let x_3 = x_2 * x_2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_4).
  (* Goal *)
  When: (i * i) <= x_4.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_1 = x_4.
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x_1 <= x_4.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (32310)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (25)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 15):
Let x_2 = x * x.
Let x_3 = 1 + x_2.
Let x_4 = 1 + x.
Let x_5 = x_4 * x_4.
Let x_6 = x - 1.
Let x_7 = i_1 * i_1.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_7) -> (i_5 <= x_1)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_7)).
  (* Invariant *)
  Have: ((i_2 * i_2) = x_7) /\ (x_1 <= i_2).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_2 = (1 + (x_6 * x_6)).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_2) -> (i_5 <= x)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_2)).
  (* Invariant *)
  Have: (x_2 = (i_3 * i_3)) /\ (x <= i_3).
  (* Invariant *)
  Have: (x_2 = (i_4 * i_4)) /\ (0 <= i_4).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_5 = x_3.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_5 <= x_3.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_3) -> (i_5 <= x_4)).
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (29906)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (7ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 15):
Let x_1 = x - 1.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = x * x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_3).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_4 = x_3.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 * i_1) <= x_3) -> (i_1 <= x)).
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 16):
Let x_2 = x * x.
Let x_3 = 1 + x_2.
Let x_4 = 1 + x.
Let x_5 = x_4 * x_4.
Let x_6 = x - 1.
Let x_7 = i * i.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_7) -> (i_4 <= x_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_7)).
  (* Invariant *)
  Have: ((i_1 * i_1) = x_7) /\ (x_1 <= i_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_2 = (1 + (x_6 * x_6)).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_2) -> (i_4 <= x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_2)).
  (* Invariant *)
  Have: (x_2 = (i_2 * i_2)) /\ (x <= i_2).
  (* Invariant *)
  Have: (x_2 = (i_3 * i_3)) /\ (0 <= i_3).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_5 = x_3.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_5 <= x_3.
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 * i_4) <= x_3) -> (i_4 <= x_4)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (i_4 <= x_3)).
}
Prove: exists i_4 : Z. ((i_4 * i_4) = x_3) /\ (x < i_4).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (7ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 16):
Let x_1 = x - 1.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = x * x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_4 = x_3.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: forall i : Z. (((i * i) <= x_3) -> (i <= x)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (i <= x_3)).
}
Prove: exists i : Z. ((i * i) = x_3) /\ (x <= i).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (32433)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (62)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 17):
Let x_2 = i * i.
Let x_3 = 1 + x.
Let x_4 = x_3 * x_3.
Let x_5 = x * x.
Let x_6 = x - 1.
Let x_7 = i_1 * i_1.
Let x_8 = x_1 * x_1.
Let x_9 = x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_7) /\
      is_sint32(x_2 - 1).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Initializer *)
  Init: x_8 = x_7.
  (* Invariant *)
  Have: x_7 = (1 + (x_9 * x_9)).
  (* Invariant *)
  Have: x_7 <= (1 + x_8).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_7) -> (i_5 <= x_1)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_7)).
  (* Invariant *)
  Have: ((i_2 * i_2) = x_7) /\ (x_1 <= i_2).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: x_2 = (2 + (x_6 * x_6)).
  (* Invariant *)
  Have: x_2 <= (2 + x_5).
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x_5 < x_2.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) < x_2) -> (i_5 <= x)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 < x_2)).
  (* Invariant *)
  Have: (x_2 = (1 + (i_3 * i_3))) /\ (x <= i_3).
  (* Invariant *)
  Have: (x_2 = (1 + (i_4 * i_4))) /\ (0 <= i_4).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_4 = x_2.
  (* Invariant *)
  Have: x_2 <= (1 + x_4).
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: forall i_5 : Z. (((i_5 * i_5) <= x_2) -> (i_5 <= x_3)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (i_5 <= x_2)).
  (* Invariant *)
  Have: x < i.
}
Prove: exists i_5 : Z. ((i_5 * i_5) = x_2) /\ (0 <= i_5).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (31220)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (125)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 17):
Let x_1 = i * i.
Let x_2 = x * x.
Let x_3 = x - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 * x_3)).
  (* Invariant *)
  Have: x_1 <= (1 + x_2).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 * i_1) <= x_1) -> (i_1 <= x)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (i_1 <= x_1)).
  (* Invariant *)
  Have: x <= i.
}
Prove: exists i_1 : Z. ((i_1 * i_1) = x_1) /\ (0 <= i_1).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (26017)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (100)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/22_0004/22_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/22_0004/22_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/22_0004/22_merged.c, line 21) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/22_0004/22_merged.c, line 21) (2/2):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/22_0004/22_merged.c:4: Warning: 
  No 'assigns' specification for function 'main22'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/22_0004/22_merged.c:24: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
