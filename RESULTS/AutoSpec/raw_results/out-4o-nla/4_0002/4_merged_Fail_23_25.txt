[kernel] Parsing out/4_0002/4_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/4_0002/4_merged.c:24: Warning: 
  Body of function main4 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] [Timeout] typed_main4_loop_invariant_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_main4_loop_invariant_3_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   23 / 25
  Qed:              16
  Alt-Ergo 2.5.4:    7 (5ms-8ms-18ms)
  Timeout:           2
------------------------------------------------------------
  Function main4
------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 10):
Let x_1 = x / y.
Let x_2 = q_2 * y.
Let x_3 = r + x_2.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r) = y
  Then { Have: q_2 = q_1. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. }
}
Prove: (q * y) < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = x / y.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_2.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 < x.
}
Prove: (r + x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (42404)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (147)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 12):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: x_2 < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 16):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
}
Prove: (r = 0) \/ (r < y).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34668)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 17):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: (r = 0) \/ (r < y).
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34483)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 18):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: r < y.
}
Prove: q <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (18ms) (483)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: 0 <= (x / y).
Prover Z3 4.8.12 returns Valid (Qed:0.75ms) (10ms) (29876)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.75ms) (5ms) (33)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 19):
Let x_1 = x / y.
Let x_2 = q * y.
Let x_3 = r + x_2.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34913)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (9ms) (160)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 20):
Let x_1 = x / y.
Let x_2 = q * y.
Let x_3 = r + x_2.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_4 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (35749)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (161)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/4_0002/4_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/4_0002/4_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/4_0002/4_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/4_0002/4_merged.c:4: Warning: 
  No 'assigns' specification for function 'main4'.
  Callers assumptions might be imprecise.
