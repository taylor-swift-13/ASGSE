[kernel] Parsing out/4_0002/4_merged.c (with preprocessing)
[kernel:CERT:MSC:37] out/4_0002/4_merged.c:26: Warning: 
  Body of function main4 falls-through. Adding a return statement
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_main4_loop_invariant_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_main4_loop_invariant_9_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_main4_loop_invariant_9_established (Qed 0.92ms) (Z3)
[wp] Proved goals:   26 / 29
  Qed:              22
  Alt-Ergo 2.5.4:    4 (4ms-6ms-12ms)
  Timeout:           3
------------------------------------------------------------
  Function main4
------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 10):
Let x_1 = q_2 * y.
Let x_2 = (x - x_1) % y.
Let x_3 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (x_1 + x_2) < x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: x_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + x_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. Have: (1 + ((x - (q * y)) % y)) = r. }
}
Prove: (r + (q * y)) < x.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = (x - x_2) % y.
Let x_4 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_2 + x_3) < x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 < y.
  (* Invariant *)
  Have: q_2 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + x_3) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. Have: (1 + ((x - x_1) % y)) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
}
Prove: x_1 < x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (59830)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (144)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 17):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = (x - x_2) % y.
Let x_4 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_2 + x_3) < x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 < y.
  (* Invariant *)
  Have: q_2 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + x_3) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. Have: (1 + ((x - x_1) % y)) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
  (* Invariant *)
  Have: x_1 < x.
}
Prove: (r = 0) \/ (r < y).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (4ms) (77)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 18):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = (x - x_2) % y.
Let x_4 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_2 + x_3) < x.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: x_3 < y.
  (* Invariant *)
  Have: q_2 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + x_3) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. Have: (1 + ((x - x_1) % y)) = r. }
  (* Invariant *)
  Have: (r + x_1) < x.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: (r = 0) \/ (r < y).
}
Prove: ((x - x_1) % y) = r.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: (x % y) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.92ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.92ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 20):
Let x_1 = 1 + q.
Let x_2 = y * x_1.
Let x_3 = q * y.
Let x_4 = (x - x_3) % y.
Let x_5 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x_4).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_3 + x_4) < x.
  (* Invariant *)
  Have: x_3 < x.
  (* Invariant *)
  Have: x_4 < y.
  (* Invariant *)
  Have: q <= x_5.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= q.
  Have: (1 + x_4) = y.
  Have: ((x - x_2) % y) = 0.
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: q < x_5.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (40ms) (155471)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (12ms) (457)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: 0 < y.
}
Prove: 0 <= (x / y).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30357)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (44)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/4_0002/4_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/4_0002/4_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/4_0002/4_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/4_0002/4_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Loop assigns (file out/4_0002/4_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/4_0002/4_merged.c:4: Warning: 
  No 'assigns' specification for function 'main4'.
  Callers assumptions might be imprecise.
