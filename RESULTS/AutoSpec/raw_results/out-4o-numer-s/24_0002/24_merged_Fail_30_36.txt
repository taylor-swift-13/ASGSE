[kernel] Parsing out/24_0002/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_hoo24_loop_invariant_2_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_12_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_12_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_14_established (Qed 1ms) (Z3)
[wp] Proved goals:   30 / 36
  Qed:              18
  Alt-Ergo 2.5.4:    5 (5ms-24ms-84ms)
  Z3 4.8.12:         7 (10ms-710ms-2s)
  Timeout:           6
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 12):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = 2 * n.
Let x_2 = n / 2.
Let x_3 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = x_2 * x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 + (n / x_2)) / 2) != x_2.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_2).
  (* Invariant *)
  Have: x_5 <= (n + (x_1 / 0)).
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_3 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + x_2).
  (* Invariant *)
  Have: (prev_guess_1 < prev_guess_0) \/ (x <= n).
  (* Invariant *)
  Have: x <= (n + prev_guess_0).
  (* Invariant *)
  Have: x <= (n + (x_1 / prev_guess_1)).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
}
Prove: prev_guess_0 <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 13):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = 2 * n.
Let x_3 = n / 2.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = x_3 * x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_3 + (n / x_3)) / 2) != x_3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: x_5 <= (n + (x_2 / 0)).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + x_3).
  (* Invariant *)
  Have: (prev_guess_1 < prev_guess_0) \/ (x_1 <= n).
  (* Invariant *)
  Have: x_1 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_1 <= (n + (x_2 / prev_guess_1)).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x.
}
Prove: prev_guess_0 < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (39289)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 14):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = 2 * n.
Let x_3 = n / 2.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = x_3 * x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_3 + (n / x_3)) / 2) != x_3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: x_5 <= (n + (x_2 / 0)).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + x_3).
  (* Invariant *)
  Have: (prev_guess_1 < prev_guess_0) \/ (x_1 <= n).
  (* Invariant *)
  Have: x_1 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_1 <= (n + (x_2 / prev_guess_1)).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 < n.
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (110ms) (219987)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 17):
Let x = guess_0 * guess_0.
Let x_1 = (guess_0 + (n / guess_0)) / 2.
Let x_2 = 2 * n.
Let x_3 = n / 2.
Let x_4 = prev_guess_0 * prev_guess_0.
Let x_5 = x_3 * x_3.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != guess_0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_3 + (n / x_3)) / 2) != x_3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: x_5 <= (n + (x_2 / 0)).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= (1 + x_3).
  (* Invariant *)
  Have: x <= (guess_0 + n).
  (* Invariant *)
  Have: x <= (n + (x_2 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: ((x_1 + (n / x_1)) / 2) != x_1.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (1s) (1382712)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: ((x + (n / x)) / 2) != x.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 18):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = guess_0 * guess_0.
Let x_2 = 2 * n.
Let x_3 = n / 2.
Let x_4 = prev_guess_0 * prev_guess_0.
Let x_5 = x_3 * x_3.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_3 + (n / x_3)) / 2) != x_3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: x_5 <= (n + (x_2 / 0)).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= (1 + x_3).
  (* Invariant *)
  Have: x_1 <= (guess_0 + n).
  (* Invariant *)
  Have: x_1 <= (n + (x_2 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (40728)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (84ms) (2120)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (30440)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (8ms) (105)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 19):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = guess_0 * guess_0.
Let x_2 = 2 * n.
Let x_3 = n / 2.
Let x_4 = 1 + x_3.
Let x_5 = prev_guess_0 * prev_guess_0.
Let x_6 = x_3 * x_3.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_3 + (n / x_3)) / 2) != x_3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_6 <= (n + x_3).
  (* Invariant *)
  Have: x_6 <= (n + (x_2 / 0)).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= x_4.
  (* Invariant *)
  Have: x_1 <= (guess_0 + n).
  (* Invariant *)
  Have: x_1 <= (n + (x_2 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
  (* Invariant *)
  Have: x <= n.
}
Prove: x <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (2s) (3562862)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 21):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = 1 + x_1.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = 2 * n.
Let x_5 = prev_guess_1 * prev_guess_1.
Let x_6 = x_1 * x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_1 + (n / x_1)) / 2) != x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_6 <= (n + x_1).
  (* Invariant *)
  Have: x_6 <= (n + (x_4 / 0)).
  (* Invariant *)
  Have: x_1 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: x_3 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_3 <= (n + (x_4 / prev_guess_1)).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: (prev_guess_0 < x) \/ ((x * x) <= n).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (35005)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (71)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 21):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
  (* Invariant *)
  Have: x <= n.
}
Prove: ((x * x) <= n) \/ (2 <= n).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (34347)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (10ms) (139)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 22):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = x * x.
Let x_2 = n / 2.
Let x_3 = 1 + x_2.
Let x_4 = guess_0 * guess_0.
Let x_5 = 2 * n.
Let x_6 = prev_guess_0 * prev_guess_0.
Let x_7 = x_2 * x_2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 + (n / x_2)) / 2) != x_2.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_7 <= (n + x_2).
  (* Invariant *)
  Have: x_7 <= (n + (x_5 / 0)).
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= x_3.
  (* Invariant *)
  Have: x_4 <= (guess_0 + n).
  (* Invariant *)
  Have: x_4 <= (n + (x_5 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (guess_0 < x) \/ (x_1 <= n).
}
Prove: x_1 <= (n + x).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 22):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_1 <= n) \/ (2 <= n).
}
Prove: x_1 <= (n + x).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 23):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = x * x.
Let x_2 = n / 2.
Let x_3 = 1 + x_2.
Let x_4 = prev_guess_0 * prev_guess_0.
Let x_5 = 2 * n.
Let x_6 = prev_guess_1 * prev_guess_1.
Let x_7 = x_2 * x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 + (n / x_2)) / 2) != x_2.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_7 <= (n + x_2).
  (* Invariant *)
  Have: x_7 <= (n + (x_5 / 0)).
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= x_3.
  (* Invariant *)
  Have: x_4 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_4 <= (n + (x_5 / prev_guess_1)).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (prev_guess_0 < x) \/ (x_1 <= n).
  (* Invariant *)
  Have: x_1 <= (n + x).
}
Prove: x_1 <= (n + (x_5 / prev_guess_0)).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (1.7s) (2776185)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 23):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_1 <= n) \/ (2 <= n).
  (* Invariant *)
  Have: x_1 <= (n + x).
}
Prove: x_1 <= (n + ((2 * n) / 0)).
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 24):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_1 <= n) \/ (2 <= n).
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: x_1 <= (n + ((2 * n) / 0)).
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 26):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 * x_1.
Let x_3 = 2 * n.
Let x_4 = n / 2.
Let x_5 = 1 + x_4.
Let x_6 = guess_0 * guess_0.
Let x_7 = prev_guess_0 * prev_guess_0.
Let x_8 = x_4 * x_4.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_4 + (n / x_4)) / 2) != x_4.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_8 <= (n + x_4).
  (* Invariant *)
  Have: x_8 <= (n + (x_3 / 0)).
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= x_5.
  (* Invariant *)
  Have: x_6 <= (guess_0 + n).
  (* Invariant *)
  Have: x_6 <= (n + (x_3 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: ((x_1 + (n / x_1)) / 2) != x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: (guess_0 < x_1) \/ (x_2 <= n).
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_2 <= (n + (x_3 / guess_0)).
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (38464)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0002/24_merged.c, line 27):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 * x_1.
Let x_3 = 2 * n.
Let x_4 = n / 2.
Let x_5 = 1 + x_4.
Let x_6 = guess_0 * guess_0.
Let x_7 = prev_guess_0 * prev_guess_0.
Let x_8 = x_4 * x_4.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_4 + (n / x_4)) / 2) != x_4.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_8 <= (n + x_4).
  (* Invariant *)
  Have: x_8 <= (n + (x_3 / 0)).
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: guess_0 <= x_5.
  (* Invariant *)
  Have: x_6 <= (guess_0 + n).
  (* Invariant *)
  Have: x_6 <= (n + (x_3 / prev_guess_0)).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: ((x_1 + (n / x_1)) / 2) != x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: (guess_0 < x_1) \/ (x_2 <= n).
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_2 <= (n + (x_3 / guess_0)).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (42249)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0002/24_merged.c, line 27):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) != x.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_1 <= n) \/ (2 <= n).
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: x_1 <= (n + ((2 * n) / 0)).
  (* Invariant *)
  Have: x != 0.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31882)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (11ms) (170)

------------------------------------------------------------

Goal Assertion (file out/24_0002/24_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/24_0002/24_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0002/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
