[kernel] Parsing out/21_0003/21_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_hoo21_loop_invariant_4_preserved (Qed 23ms) (Z3)
[wp] [Timeout] typed_hoo21_loop_invariant_5_preserved (Qed 38ms) (Z3)
[wp] Proved goals:   28 / 30
  Qed:              23
  Alt-Ergo 2.5.4:    4 (0.80ms-26ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function hoo21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 17):
Let x_1 = v + x.
Let x_2 = 2 * Y.
Let x_3 = Y * x.
Let x_4 = 2 * x_3.
Let x_5 = x_2 + x_4.
Assume {
  Type: is_sint32(Y) /\ is_sint32(v) /\ is_sint32(x) /\ is_sint32(1 + x) /\
      is_sint32(v - x_4) /\ is_sint32(x_2 + x_4 - v).
  (* Residual *)
  When: v < 0.
  (* Pre-condition *)
  Have: v < x_5.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: v <= (Y + x_4).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_1 <= (1 + x_2 + x_4).
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: 0 <= (Y + x_3).
  (* Then *)
  Have: x_1 <= x_5.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (31695)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (0.80ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 20):
Let x_1 = 1 + x.
Let x_2 = 2 * Y.
Let x_3 = Y * x.
Let x_4 = 2 * x_3.
Let x_5 = X * y_1.
Let x_6 = X + (2 * x_5).
Let x_7 = x * y_1.
Let x_8 = -X.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\
      is_sint32(v_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_1) /\ is_sint32(x_2 - X) /\
      is_sint32(x_2 + x_4 - X - (2 * x_5)).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y_1 <= x.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: x_5 = (y_1 + x_7).
  (* Invariant *)
  Have: x_7 = x_5.
  (* Invariant *)
  Have: x_7 = (y_1 + x_5).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: (2 * y_1) <= x.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_5 <= (Y + x_3).
  (* Then *)
  Have: x <= X.
  If (x_2 + x_4) < x_6
  Then {
    Let x_9 = 2 * (X * y).
    Have: (y_1 = y) /\ ((X + v_1 + x_9) = (x_2 + x_4)).
    Have: (X + v + x_9) = ((4 * Y) + x_4).
  }
  Else {
    Let x_10 = 2 * x_5.
    Have: (X + v_2 + x_10) = (x_2 + x_4).
    Have: (v + (3 * X) + x_10) = ((4 * Y) + x_4).
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: y <= x_1.
}
Prove: (X + v + (2 * y) + (2 * (y * x_1))) = (x_2 + (2 * (Y * x_1))).
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 21):
Let x_1 = 1 + x.
Let x_2 = 2 * y.
Let x_3 = Y * x.
Let x_4 = 2 * x_3.
Let x_5 = y * x_1.
Let x_6 = 2 * x_5.
Let x_7 = v + x_2 + x_4 + x_6.
Let x_8 = Y * x_1.
Let x_9 = 2 * x_8.
Let x_10 = 2 * Y.
Let x_11 = x_10 + x_9 - v - x_2 - x_6.
Let x_12 = y_1 * x_11.
Let x_13 = 2 * x_12.
Let x_14 = v + x + x_2 + x_6.
Let x_15 = x_10 + x_9.
Let x_16 = x * y_1.
Let x_17 = v + x_2 + x_6.
Let x_18 = (-2) * x_8.
Assume {
  Type: is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\ is_sint32(v_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(v + x_2 + x_6 - x_9) /\ is_sint32(x_11) /\
      is_sint32(v + x_2 + x_4 + x_6 - x_9 - x_13).
  (* Pre-condition *)
  Have: x_17 < x_15.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: x_17 <= (Y + x_9).
  (* Invariant *)
  Have: y_1 <= x.
  (* Invariant *)
  Have: x_14 <= (1 + x_10 + x_9).
  (* Invariant *)
  Have: x_12 = (y_1 + x_16).
  (* Invariant *)
  Have: x_12 = x_16.
  (* Invariant *)
  Have: x_16 = (y_1 + x_12).
  (* Invariant *)
  Have: x_7 <= (x_10 + x_9 + x_13).
  (* Invariant *)
  Have: (2 * y_1) <= x.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_12 <= (Y + x_3).
  (* Then *)
  Have: x_14 <= x_15.
  If x_7 < (x_9 + x_13)
  Then {
    Have: (y_1 = y) /\ ((v_1 + x_10) = v) /\
        ((x_8 + (y * (x_9 - v_1 - x_2 - x_6))) = (Y + y + x_3 + x_5)).
  }
  Else {
    Let x_19 = 1 + y_1.
    Let x_20 = x_1 * x_19.
    Have: ((4 + v + v_2 + (4 * y_1) + (4 * x_20)) = (x_10 + (4 * x_8))) /\
        ((1 + v_2 + y_1 + x_20
          + (y_1 * (2 + v_2 + (2 * y_1) + (2 * x_20) - x_9)))
           = (Y + x_3 + x_8)).
    Have: x_19 = y.
  }
  (* Invariant *)
  Have: y <= x_1.
}
Prove: y = 0.
Prover Z3 4.8.12 returns Timeout (Qed:38ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:38ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 24):
Let x_1 = 1 + x.
Let x_2 = y * x_1.
Let x_3 = X * y.
Let x_4 = 2 * Y.
Let x_5 = Y * x.
Let x_6 = 2 * x_5.
Let x_7 = X * y_2.
Let x_8 = X + (2 * x_7).
Let x_9 = x * y_2.
Let x_10 = -X.
Let x_11 = 2 * (Y * x_1).
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(x_1) /\ is_sint32(x_4 - X) /\
      is_sint32(x_4 + x_6 - X - (2 * x_7)) /\
      is_sint32(x_4 + x_11 - X - (2 * x_3)).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y_2 <= x.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: x_7 = (y_2 + x_9).
  (* Invariant *)
  Have: x_9 = x_7.
  (* Invariant *)
  Have: x_9 = (y_2 + x_7).
  (* Invariant *)
  Have: x_6 <= x_8.
  (* Invariant *)
  Have: (2 * y_2) <= x.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_7 <= (Y + x_5).
  (* Then *)
  Have: x <= X.
  If (x_4 + x_6) < x_8
  Then {
    Have: (y_2 = y) /\ ((Y * x_1) = (Y + x_5)) /\
        ((X + v + (2 * x_3)) = x_11).
  }
  Else {
    Let x_12 = 1 + y_1.
    Let x_13 = X * x_12.
    Have: (y_2 = y_1) /\ ((Y + x_5 + x_13) = (X + (X * y_1) + (Y * x_1))) /\
        ((v_1 + (2 * x_13)) = (X + x_11)).
    Have: x_12 = y.
  }
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_3 = (y + x_2).
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_2 = (y + x_3).
}
Prove: x_11 <= (X + (2 * x_3)).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (39918)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 26):
Let x_1 = 1 + x.
Let x_2 = 2 * (Y * x_1).
Let x_3 = X * y.
Let x_4 = y * x_1.
Let x_5 = 2 * Y.
Let x_6 = Y * x.
Let x_7 = 2 * x_6.
Let x_8 = X * y_2.
Let x_9 = X + (2 * x_8).
Let x_10 = x * y_2.
Let x_11 = -X.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(x_1) /\ is_sint32(x_5 - X) /\
      is_sint32(x_5 + x_7 - X - (2 * x_8)) /\
      is_sint32(x_5 + x_2 - X - (2 * x_3)).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y_2 <= x.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: x_8 = (y_2 + x_10).
  (* Invariant *)
  Have: x_10 = x_8.
  (* Invariant *)
  Have: x_10 = (y_2 + x_8).
  (* Invariant *)
  Have: x_7 <= x_9.
  (* Invariant *)
  Have: (2 * y_2) <= x.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_8 <= (Y + x_6).
  (* Then *)
  Have: x <= X.
  If (x_5 + x_7) < x_9
  Then {
    Have: (y_2 = y) /\ ((Y * x_1) = (Y + x_6)) /\
        ((X + v + (2 * x_3)) = x_2).
  }
  Else {
    Let x_12 = 1 + y_1.
    Let x_13 = X * x_12.
    Have: (y_2 = y_1) /\ ((Y + x_6 + x_13) = (X + (X * y_1) + (Y * x_1))) /\
        ((v_1 + (2 * x_13)) = (X + x_2)).
    Have: x_12 = y.
  }
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_3 = (y + x_4).
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_4 = (y + x_3).
  (* Invariant *)
  Have: x_2 <= (X + (2 * x_3)).
}
Prove: (2 * y) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:32ms) (10ms) (38795)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (26ms) (504)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 28):
Let x_1 = 2 * y.
Let x_2 = 1 + x.
Let x_3 = Y * x_2.
Let x_4 = 2 * x_3.
Let x_5 = 1 + y.
Let x_6 = X * x_5.
Let x_7 = x_2 * x_5.
Let x_8 = Y * x.
Let x_9 = X * y.
Let x_10 = 2 * x_8.
Let x_11 = X + (2 * x_9).
Let x_12 = x * y.
Let x_13 = 2 * Y.
Let x_14 = -X.
Let x_15 = (-2) * x_6.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_13 - X) /\
      is_sint32(x_13 + x_10 - X - (2 * x_9)) /\
      is_sint32(X + x_4 - (2 * x_6)) /\
      is_sint32(x_13 + x_4 - X - (2 * x_6)).
  (* Residual *)
  When: x_11 <= (x_13 + x_10).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: x_9 = (y + x_12).
  (* Invariant *)
  Have: x_12 = x_9.
  (* Invariant *)
  Have: x_12 = (y + x_9).
  (* Invariant *)
  Have: x_10 <= x_11.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_9 <= (Y + x_8).
  (* Then *)
  Have: x <= X.
  Have: (Y + x_8 + x_6) = (X + x_9 + x_3).
  (* Invariant *)
  Have: x_6 = (1 + y + x_7).
  (* Invariant *)
  Have: x_7 = x_6.
  (* Invariant *)
  Have: x_7 = (1 + y + x_6).
  (* Invariant *)
  Have: x_4 <= (X + (2 * x_6)).
  (* Invariant *)
  Have: x_1 < x.
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (34761)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (8ms) (141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0003/21_merged.c, line 30):
Let x_1 = 1 + x.
Let x_2 = Y * x_1.
Let x_3 = 2 * x_2.
Let x_4 = X * y.
Let x_5 = y * x_1.
Let x_6 = 2 * Y.
Let x_7 = Y * x.
Let x_8 = 2 * x_7.
Let x_9 = X * y_2.
Let x_10 = X + (2 * x_9).
Let x_11 = x * y_2.
Let x_12 = -X.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(x_1) /\ is_sint32(x_6 - X) /\
      is_sint32(x_6 + x_8 - X - (2 * x_9)) /\
      is_sint32(x_6 + x_3 - X - (2 * x_4)).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y_2 <= x.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: x_9 = (y_2 + x_11).
  (* Invariant *)
  Have: x_11 = x_9.
  (* Invariant *)
  Have: x_11 = (y_2 + x_9).
  (* Invariant *)
  Have: x_8 <= x_10.
  (* Invariant *)
  Have: (2 * y_2) <= x.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_9 <= (Y + x_7).
  (* Then *)
  Have: x <= X.
  If (x_6 + x_8) < x_10
  Then { Have: (y_2 = y) /\ (x_2 = (Y + x_7)) /\ ((X + v + (2 * x_4)) = x_3).
  }
  Else {
    Let x_13 = 1 + y_1.
    Let x_14 = X * x_13.
    Have: (y_2 = y_1) /\ ((Y + x_7 + x_14) = (X + (X * y_1) + x_2)) /\
        ((v_1 + (2 * x_14)) = (X + x_3)).
    Have: x_13 = y.
  }
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_4 = (y + x_5).
  (* Invariant *)
  Have: x_5 = x_4.
  (* Invariant *)
  Have: x_5 = (y + x_4).
  (* Invariant *)
  Have: x_3 <= (X + (2 * x_4)).
  (* Invariant *)
  Have: (2 * y) <= x_1.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x_4 <= (Y + x_2).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (40544)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (18ms) (532)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0003/21_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/21_0003/21_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/21_0003/21_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0003/21_merged.c:6: Warning: 
  No 'assigns' specification for function 'hoo21'.
  Callers assumptions might be imprecise.
