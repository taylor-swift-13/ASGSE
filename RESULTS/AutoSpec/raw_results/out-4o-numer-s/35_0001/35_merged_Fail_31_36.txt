[kernel] Parsing out/35_0001/35_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_hoo35_loop_invariant_established (Qed 0.70ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_5_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_17_established (Qed 1ms) (Z3)
[wp] Proved goals:   31 / 36
  Qed:              14
  Alt-Ergo 2.5.4:   15 (3ms-43ms-195ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           5
------------------------------------------------------------
  Function hoo35
------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 12):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_3.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_3 <= (n + IAbs.abs(x_2)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
}
Prove: ((x + x_1) / 2) = prev_guess_0.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (270ms) (547244)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (195ms) (3719)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 12):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Pre-condition *) Have: 0 < n.
}
Prove: (((n / 0) + x) / 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.70ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.70ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 14):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_3.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_3 <= (n + IAbs.abs(x_2)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = prev_guess_0.
}
Prove: prev_guess_0 < n.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (49614)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 15):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_3.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_3 <= (n + IAbs.abs(x_2)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
}
Prove: x_3 <= (x_1 * x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (98ms) (1944)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 15):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: 0 <= (x * x).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (10)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 16):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = n / prev_guess_0.
Let x_2 = (prev_guess_0 + x_1) / 2.
Let x_3 = prev_guess_0 - prev_guess_1.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_2 <= prev_guess_0.
  (* Invariant *)
  Have: ((x_1 + x_2) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= (x_2 * x_2).
}
Prove: x_2 != prev_guess_0.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= (x * x).
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 17):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = guess_0 * guess_0.
Let x_3 = guess_0 - prev_guess_0.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((guess_0 + (n / prev_guess_0)) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= x_2.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_2 <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: x_1 <= guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_2 <= (x_1 * x_1).
  (* Invariant *)
  Have: x_1 != guess_0.
}
Prove: x_1 <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (3ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= (x * x).
  (* Invariant *)
  Have: x != 0.
}
Prove: x <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (9ms) (99)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 18):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = prev_guess_0 * prev_guess_0.
Let x_3 = prev_guess_0 - prev_guess_1.
Let x_4 = 2 * n.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_5) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_5)).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_5 + (n / x_5)) / 2) <= x_5.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_2.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_2 <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_2 <= (x_1 * x_1).
  (* Invariant *)
  Have: x_1 != prev_guess_0.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: (x_1 / 2) <= prev_guess_0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (51602)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (72ms) (1493)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= (x * x).
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= n.
}
Prove: n <= 3.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 19):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = prev_guess_0 * prev_guess_0.
Let x_3 = x_1 * x_1.
Let x_4 = prev_guess_0 - prev_guess_1.
Let x_5 = 2 * n.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_6) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_7 <= (n + IAbs.abs(x_6)).
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) <= x_6.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_2.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_2 <= (n + IAbs.abs(x_4)).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (x_4 * x_4) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_1 != prev_guess_0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (x_1 / 2) <= prev_guess_0.
}
Prove: x_3 <= (n + IAbs.abs(x_1 - prev_guess_0)).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (52921)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (86ms) (2335)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 19):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
}
Prove: x_1 <= (n + IAbs.abs(x)).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (50481)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (11ms) (236)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 20):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = x_1 * x_1.
Let x_3 = guess_0 * guess_0.
Let x_4 = guess_0 - prev_guess_0.
Let x_5 = 2 * n.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((n / 0) + x_6) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_7 <= (n + IAbs.abs(x_6)).
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) <= x_6.
  (* Invariant *)
  Have: ((guess_0 + (n / prev_guess_0)) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= x_3.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_3 <= (n + IAbs.abs(x_4)).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x_4 * x_4) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: x_1 <= guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (x_1 / 2) <= guess_0.
  (* Invariant *)
  Have: x_2 <= (n + IAbs.abs(x_1 - guess_0)).
}
Prove: x_2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (53061)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (76ms) (1926)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 20):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= (n + IAbs.abs(x)).
}
Prove: x_1 <= (2 * n).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32166)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (12ms) (242)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 23):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = x_1 * x_1.
Let x_3 = 2 * n.
Let x_4 = x_1 - prev_guess_0.
Let x_5 = prev_guess_0 * prev_guess_0.
Let x_6 = prev_guess_0 - prev_guess_1.
Let x_7 = n / 2.
Let x_8 = x_7 * x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_7) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != prev_guess_0.
  (* Invariant *)
  Have: (((n / 0) + x_7) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_8.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_8 <= (n + IAbs.abs(x_7)).
  (* Invariant *)
  Have: x_8 <= x_3.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_7 + (n / x_7)) / 2) <= x_7.
  (* Invariant *)
  Have: ((prev_guess_0 + (n / prev_guess_1)) / 2) = prev_guess_1.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= x_5.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_5 <= (n + IAbs.abs(x_6)).
  (* Invariant *)
  Have: x_5 <= x_3.
  (* Invariant *)
  Have: (x_6 * x_6) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: x_1 <= prev_guess_0.
  (* Invariant *)
  Have: ((x + x_1) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (x_1 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_2 <= (n + IAbs.abs(x_4)).
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: (x_4 * x_4) <= n.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (53544)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 23):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= (n + IAbs.abs(x)).
  (* Invariant *)
  Have: x_1 <= (2 * n).
}
Prove: x_1 <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (10ms) (263)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 25):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_2 - guess_0.
Let x_4 = x_2 * x_2.
Let x_5 = 2 * n.
Let x_6 = guess_0 * guess_0.
Let x_7 = guess_0 - prev_guess_0.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_8) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (((n / 0) + x_8) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_9 <= (n + IAbs.abs(x_8)).
  (* Invariant *)
  Have: x_9 <= x_5.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_8 + (n / x_8)) / 2) <= x_8.
  (* Invariant *)
  Have: ((guess_0 + (n / prev_guess_0)) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= x_6.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_7)).
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: (x_7 * x_7) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: x_2 <= guess_0.
  (* Invariant *)
  Have: ((x + x_2) / 2) = guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_2 != guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (x_2 / 2) <= guess_0.
  (* Invariant *)
  Have: x_4 <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
}
Prove: (-1) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (43712)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (17ms) (572)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 27):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_2 - guess_0.
Let x_4 = x_2 * x_2.
Let x_5 = 2 * n.
Let x_6 = guess_0 * guess_0.
Let x_7 = guess_0 - prev_guess_0.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_8) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (((n / 0) + x_8) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_9 <= (n + IAbs.abs(x_8)).
  (* Invariant *)
  Have: x_9 <= x_5.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_8 + (n / x_8)) / 2) <= x_8.
  (* Invariant *)
  Have: ((guess_0 + (n / prev_guess_0)) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= x_6.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_7)).
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: (x_7 * x_7) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: x_2 <= guess_0.
  (* Invariant *)
  Have: ((x + x_2) / 2) = guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_2 != guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (x_2 / 2) <= guess_0.
  (* Invariant *)
  Have: x_4 <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: 2 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (53844)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (18ms) (575)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 27):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= (n + IAbs.abs(x)).
  (* Invariant *)
  Have: x_1 <= (2 * n).
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32369)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (13ms) (270)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 28):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_2 - guess_0.
Let x_4 = x_2 * x_2.
Let x_5 = 2 * n.
Let x_6 = guess_0 * guess_0.
Let x_7 = guess_0 - prev_guess_0.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_8) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (((n / 0) + x_8) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_9 <= (n + IAbs.abs(x_8)).
  (* Invariant *)
  Have: x_9 <= x_5.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((x_8 + (n / x_8)) / 2) <= x_8.
  (* Invariant *)
  Have: ((guess_0 + (n / prev_guess_0)) / 2) = prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= x_6.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_6 <= (n + IAbs.abs(x_7)).
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: (x_7 * x_7) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: x_2 <= guess_0.
  (* Invariant *)
  Have: ((x + x_2) / 2) = guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_2 != guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (x_2 / 2) <= guess_0.
  (* Invariant *)
  Have: x_4 <= (n + IAbs.abs(x_3)).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 2 <= x_1.
}
Prove: ((x_2 + (n / x_2)) / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (56691)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (16ms) (290)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 28):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (((n / 0) + x) / 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= (n + IAbs.abs(x)).
  (* Invariant *)
  Have: x_1 <= (2 * n).
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 2 <= n.
}
Prove: ((x + (n / x)) / 2) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/35_0001/35_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Loop assigns (file out/35_0001/35_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/35_0001/35_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo35'.
  Callers assumptions might be imprecise.
