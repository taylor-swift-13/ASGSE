[kernel] Parsing out/17_0004/17_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_hoo17_loop_invariant_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_2_preserved (Qed 32ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_4_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_5_preserved (Qed 22ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_8_established (Qed 0.62ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_9_established (Qed 0.76ms) (Z3)
[wp] Proved goals:   14 / 20
  Qed:               6
  Alt-Ergo 2.5.4:    8
  Timeout:           6
------------------------------------------------------------
  Function hoo17
------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_1 <= 20000001.
  (* Invariant *)
  Have: x_1 <= 20000017.
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: x_1 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_1.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x < y_3.
  (* Invariant *)
  Have: x <= (16 + y_3).
  (* Invariant *)
  Have: x <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x.
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
}
Prove: y <= 20000001.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
}
Prove: x <= 20000001.
Prover Z3 4.8.12 returns Timeout (Qed:32ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:32ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
}
Prove: x <= 20000001.
Prover Alt-Ergo 2.5.4 returns Valid (4ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
}
Prove: x <= 20000000.
Prover Z3 4.8.12 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
}
Prove: x <= 20000000.
Prover Z3 4.8.12 returns Valid (10ms) (29765)
Prover Alt-Ergo 2.5.4 returns Valid (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 17):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
}
Prove: x < y.
Prover Z3 4.8.12 returns Timeout (Qed:22ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:22ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x < y.
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (35447)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (7ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:0.56ms) (10ms) (29869)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.56ms) (20)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 19):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: x <= (15 + y).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (35569)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (3ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 19):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: x <= (15 + y).
Prover Z3 4.8.12 returns Valid (Qed:0.55ms) (10ms) (29991)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.55ms) (4ms) (21)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (15 + y).
}
Prove: (-20000000) <= y.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (36269)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (7ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (15 + y).
}
Prove: (-20000000) <= y.
Prover Z3 4.8.12 returns Timeout (Qed:0.62ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.62ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0004/17_merged.c, line 21):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000017.
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000017.
  (* Invariant *)
  Have: x_3 <= 20000000.
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 <= (15 + y_3).
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (15 + y).
  (* Invariant *)
  Have: (-20000000) <= y.
}
Prove: (-20000000) <= x.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (36417)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (7ms) (70)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0004/17_merged.c, line 21):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= 20000017.
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (15 + y).
  (* Invariant *)
  Have: (-20000000) <= y.
}
Prove: (-20000000) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:0.76ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.76ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/17_0004/17_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/17_0004/17_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/17_0004/17_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo17'.
  Callers assumptions might be imprecise.
