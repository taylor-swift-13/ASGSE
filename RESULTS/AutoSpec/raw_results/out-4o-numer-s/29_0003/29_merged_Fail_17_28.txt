[kernel] Parsing out/29_0003/29_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Failure] typed_hoo29_loop_invariant_2_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_4_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_6_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_8_established (Qed 0.95ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_8_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_10_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_12_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_12_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_13_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo29_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] Proved goals:   17 / 28
  Qed:              15
  Alt-Ergo 2.5.4:    2 (3ms-7ms)
  Failed:           11
------------------------------------------------------------
  Function hoo29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 14):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = 1 + prev_guess_0.
Let x_2 = -n.
Let x_3 = prev_guess_1 * prev_guess_1.
Let x_4 = n / 2.
Let x_5 = x_4 * x_4.
Let x_6 = 1 + x_4.
Let x_7 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_4) /\ is_sint32(x_7).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_5 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_5 <= n) /\ (n < (x_6 * x_6)).
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: prev_guess_1 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 = prev_guess_0) \/
      (((prev_guess_1 + (n / prev_guess_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: IAbs.abs(x - n) < IAbs.abs(x_3 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x <= n) /\ (n < (x_1 * x_1)).
}
Prove: prev_guess_0 <= x_7.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 15):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = 1 + prev_guess_0.
Let x_3 = -n.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_6 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_6 <= n) /\ (n < (x_7 * x_7)).
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: prev_guess_1 < prev_guess_0.
  (* Invariant *)
  Have: (x_5 = prev_guess_0) \/
      (((prev_guess_1 + (n / prev_guess_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_1 - n) < IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_1 <= n) /\ (n < (x_2 * x_2)).
  (* Invariant *)
  Have: prev_guess_0 <= x.
}
Prove: prev_guess_0 < n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 16):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = 1 + prev_guess_0.
Let x_3 = -n.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x).
  (* Goal *)
  When: x != prev_guess_0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_6 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_6 <= n) /\ (n < (x_7 * x_7)).
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: prev_guess_1 < prev_guess_0.
  (* Invariant *)
  Have: (x_5 = prev_guess_0) \/
      (((prev_guess_1 + (n / prev_guess_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_1 - n) < IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_1 <= n) /\ (n < (x_2 * x_2)).
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 < n.
}
Prove: prev_guess_0 < x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.76ms) (20ms) (29980)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.76ms) (7ms) (86)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 18):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = guess_0 * guess_0.
Let x_2 = 1 + guess_0.
Let x_3 = -n.
Let x_4 = prev_guess_0 * prev_guess_0.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_5) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_6 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_6 <= n) /\ (n < (x_7 * x_7)).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: prev_guess_0 < guess_0.
  (* Invariant *)
  Have: (x_5 = guess_0) \/
      (((prev_guess_0 + (n / prev_guess_0)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_1 - n) < IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_1 <= n) /\ (n < (x_2 * x_2)).
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: ((x != guess_0) -> (guess_0 < x)).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (2 <= n)).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.95ms) (10ms) (30232)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.95ms) (3ms) (63)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 20):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = 1 + prev_guess_0.
Let x_3 = -n.
Let a = IAbs.abs(x_1 - n).
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_6 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_6 <= n) /\ (n < (x_7 * x_7)).
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: prev_guess_1 < prev_guess_0.
  (* Invariant *)
  Have: (x_5 = prev_guess_0) \/
      (((prev_guess_1 + (n / prev_guess_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: a < IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_1 <= n) /\ (n < (x_2 * x_2)).
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: ((x != prev_guess_0) -> (prev_guess_0 < x)).
  (* Invariant *)
  Have: x <= n.
}
Prove: IAbs.abs((x * x) - n) < a.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 20):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (2 <= n)).
  (* Invariant *)
  Have: x <= n.
}
Prove: IAbs.abs((x * x) - n) < IAbs.abs(n).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 22):
Let x = -n.
Let x_1 = guess_0 + (n / guess_0).
Let x_2 = x_1 / 2.
Let x_3 = guess_0 * guess_0.
Let a = IAbs.abs(x_3 - n).
Let x_4 = 1 + guess_0.
Let x_5 = prev_guess_0 * prev_guess_0.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_6) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_7 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_7 <= n) /\ (n < (x_8 * x_8)).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: prev_guess_0 < guess_0.
  (* Invariant *)
  Have: (x_6 = guess_0) \/
      (((prev_guess_0 + (n / prev_guess_0)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: a < IAbs.abs(x_5 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_3 <= n) /\ (n < (x_4 * x_4)).
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: ((x_2 != guess_0) -> (guess_0 < x_2)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: IAbs.abs((x_2 * x_2) - n) < a.
}
Prove: (-1) <= x_1.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 24):
Let x = guess_0 + (n / guess_0).
Let x_1 = -n.
Let x_2 = x / 2.
Let x_3 = guess_0 * guess_0.
Let a = IAbs.abs(x_3 - n).
Let x_4 = 1 + guess_0.
Let x_5 = prev_guess_0 * prev_guess_0.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_6) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_7 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_7 <= n) /\ (n < (x_8 * x_8)).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: prev_guess_0 < guess_0.
  (* Invariant *)
  Have: (x_6 = guess_0) \/
      (((prev_guess_0 + (n / prev_guess_0)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: a < IAbs.abs(x_5 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_3 <= n) /\ (n < (x_4 * x_4)).
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: ((x_2 != guess_0) -> (guess_0 < x_2)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: IAbs.abs((x_2 * x_2) - n) < a.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 24):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (2 <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs((x * x) - n) < IAbs.abs(n).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0003/29_merged.c, line 25):
Let x = prev_guess_0 + (n / prev_guess_0).
Let x_1 = -n.
Let x_2 = x / 2.
Let x_3 = x_2 * x_2.
Let x_4 = prev_guess_0 * prev_guess_0.
Let a = IAbs.abs(x_4 - n).
Let x_5 = 1 + prev_guess_0.
Let x_6 = prev_guess_1 * prev_guess_1.
Let x_7 = n / 2.
Let x_8 = x_7 * x_7.
Let x_9 = 1 + x_7.
Let x_10 = 1 + x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_7) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_8 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_8 <= n) /\ (n < (x_9 * x_9)).
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: prev_guess_1 < prev_guess_0.
  (* Invariant *)
  Have: (x_7 = prev_guess_0) \/
      (((prev_guess_1 + (n / prev_guess_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: a < IAbs.abs(x_6 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 <= n) /\ (n < (x_5 * x_5)).
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: ((x_2 != prev_guess_0) -> (prev_guess_0 < x_2)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: IAbs.abs(x_3 - n) < a.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 2 <= x.
}
Prove: (x_2 = prev_guess_0) \/ ((x_3 <= n) /\ (n < (x_10 * x_10))).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0003/29_merged.c, line 25):
Let x = n / 2.
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs(x_1 - n) < IAbs.abs(n).
  (* Invariant *)
  Have: 2 <= n.
}
Prove: (x_1 <= n) /\ (n < (x_2 * x_2)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Assertion (file out/29_0003/29_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/29_0003/29_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0003/29_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo29'.
  Callers assumptions might be imprecise.
