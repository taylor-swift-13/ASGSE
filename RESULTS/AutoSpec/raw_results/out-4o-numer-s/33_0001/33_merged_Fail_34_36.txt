[kernel] Parsing out/33_0001/33_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_hoo33_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo33_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] Proved goals:   34 / 36
  Qed:              24
  Alt-Ergo 2.5.4:    7
  Z3 4.8.12:         3 (10ms-13ms-20ms)
  Timeout:           2
------------------------------------------------------------
  Function hoo33
------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 18):
Let x_1 = i * y.
Let x_2 = i * y * y.
Let x_3 = x_1 / y.
Let x_4 = x + x_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x - y) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < x_4.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (y / y) = 0.
  (* Invariant *)
  Have: (0 / y) = 0.
  (* Invariant *)
  Have: (i_1 * y) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y * x_4) = ((x * y) + x_2).
  (* Invariant *)
  Have: x_3 = (x_1 + ((y + x_1) / y)).
  (* Invariant *)
  Have: (y * x_3) = x_1.
  (* Invariant *)
  Have: (x_2 / y) = x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_2).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: y < x.
}
Prove: (2 * y) <= x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34275)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
}
Prove: y <= x.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 19):
Let x_1 = b * i.
Let x_2 = b * b * i.
Let x_3 = x_1 / b.
Let x_4 = b + x_1.
Let x_5 = x + x_1.
Let x_6 = b * x_5.
Let x_7 = x - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_7) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < x_5.
  (* Pre-condition *)
  Have: 0 < b.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (b / b) = 0.
  (* Invariant *)
  Have: (0 / b) = 0.
  (* Invariant *)
  Have: (b * i_1) = 0.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: x_6 = ((b * x) + x_2).
  (* Invariant *)
  Have: x_3 = (x_1 + (x_4 / b)).
  (* Invariant *)
  Have: (b * x_3) = x_1.
  (* Invariant *)
  Have: (x_2 / b) = x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_2).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: b < x.
  (* Invariant *)
  Have: (2 * b) <= x.
}
Prove: x_6 = ((b * x_7) + (b * x_4)).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10167)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (294)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 20):
Let x_1 = i * u.
Let x_2 = x + x_1.
Let x_3 = u * x_2.
Let x_4 = x - u.
Let x_5 = u + x_1.
Let x_6 = 2 * u.
Let x_7 = i * u * u.
Let x_8 = x_1 / u.
Let x_9 = x_5 / u.
Assume {
  Type: is_sint32(u) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < x_2.
  (* Pre-condition *)
  Have: 0 < u.
  (* Invariant *)
  Have: u <= x_2.
  (* Invariant *)
  Have: (u / u) = 0.
  (* Invariant *)
  Have: (0 / u) = 0.
  (* Invariant *)
  Have: (i_1 * u) = 0.
  (* Invariant *)
  Have: u <= x.
  (* Invariant *)
  Have: x_3 = ((u * x) + x_7).
  (* Invariant *)
  Have: x_8 = (x_1 + x_9).
  (* Invariant *)
  Have: (u * x_8) = x_1.
  (* Invariant *)
  Have: (x_7 / u) = x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_7).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: u < x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_3 = ((u * x_4) + (u * x_5)).
}
Prove: x_9 = (u + x_1 + ((x_6 + x_1) / u)).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (35471)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 20):
Assume {
  Type: is_sint32(a) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: y <= a.
}
Prove: (y / y) = (0 / y).
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 22):
Let x_1 = -y.
Let x_2 = 2 * y.
Let x_3 = i * y.
Let x_4 = (x_2 + x_3) / y.
Let x_5 = -x_4.
Let x_6 = y + x_3.
Let x_7 = x_6 / y.
Let x_8 = x + x_7 - y - x_4.
Let x_9 = y * x_8.
Let x_10 = x - y.
Let x_11 = i * y * y.
Let x_12 = x_7 - y - x_4.
Let x_13 = x + x_7.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3) /\ is_sint32(x_10) /\
      is_sint32(x_6) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: (y + x_4) < x_13.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_2 + x_4) <= x_13.
  (* Invariant *)
  Have: (y / y) = 0.
  (* Invariant *)
  Have: (0 / y) = 0.
  (* Invariant *)
  Have: (i_1 * y) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: x_9 = ((x * y) + x_11).
  (* Invariant *)
  Have: (y + (x_3 / y) + x_4) = (2 * x_7).
  (* Invariant *)
  Have: (y * (x_12 / y)) = x_3.
  (* Invariant *)
  Have: ((y * x_12) / y) = x_3.
  (* Invariant *)
  Have: x_7 = (y + x_3 + x_4).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_11).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: y < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_9 = ((y * x_10) + (y * x_6)).
}
Prove: (y * ((x_7 - x_4) / y)) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37568)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 22):
Let x_1 = u / u.
Let x_2 = -x_1.
Let x_3 = 0 / u.
Let x_4 = x + x_3 - x_1.
Assume {
  Type: is_sint32(u) /\ is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: x_1 < (x + x_3).
  (* Pre-condition *)
  Have: 0 < u.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: u <= x.
  (* Invariant *)
  Have: (u * x_4) = (u * x).
}
Prove: (u * ((x_3 - x_1) / u)) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (8ms) (92)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 24):
Let x_1 = i * y.
Let x_2 = y + x_1.
Let x_3 = x_2 / y.
Let x_4 = 2 * y.
Let x_5 = x + x_1.
Let x_6 = y * x_5.
Let x_7 = x - y.
Let x_8 = i * y * y.
Let x_9 = x_1 / y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_7) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < x_5.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (y / y) = 0.
  (* Invariant *)
  Have: (0 / y) = 0.
  (* Invariant *)
  Have: (i_1 * y) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: x_6 = ((x * y) + x_8).
  (* Invariant *)
  Have: x_9 = (x_1 + x_3).
  (* Invariant *)
  Have: (y * x_9) = x_1.
  (* Invariant *)
  Have: (x_8 / y) = x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_8).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: y < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_6 = ((y * x_7) + (y * y * x_3)).
  (* Invariant *)
  Have: x_3 = (y + x_1 + ((x_4 + x_1) / y)).
  (* Invariant *)
  Have: (y * x_3) = x_2.
}
Prove: ((y * x_2) / y) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36619)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (12ms) (421)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 24):
Let x_1 = u / u.
Let x_2 = -x_1.
Let x_3 = 0 / u.
Let x_4 = x_3 - x_1.
Let x_5 = x + x_3 - x_1.
Assume {
  Type: is_sint32(u) /\ is_sint32(x) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: x_1 < (x + x_3).
  (* Pre-condition *)
  Have: 0 < u.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: u <= x.
  (* Invariant *)
  Have: (u * x_5) = (u * x).
  (* Invariant *)
  Have: (u * (x_4 / u)) = 0.
}
Prove: ((u * x_4) / u) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32070)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (34)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 26):
Let x_1 = b * i.
Let x_2 = b + x_1.
Let x_3 = x_2 / b.
Let x_4 = 2 * b.
Let x_5 = x + x_1.
Let x_6 = b * x_5.
Let x_7 = x - b.
Let x_8 = b * x_2.
Let x_9 = b * b * i.
Let x_10 = x_1 / b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_7) /\
      is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < x_5.
  (* Pre-condition *)
  Have: 0 < b.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (b / b) = 0.
  (* Invariant *)
  Have: (0 / b) = 0.
  (* Invariant *)
  Have: (b * i_1) = 0.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: x_6 = ((b * x) + x_9).
  (* Invariant *)
  Have: x_10 = (x_1 + x_3).
  (* Invariant *)
  Have: (b * x_10) = x_1.
  (* Invariant *)
  Have: (x_9 / b) = x_1.
  (* Invariant *)
  Have: (x_8 / b) = x_2.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + x_9).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: b < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_6 = ((b * x_7) + x_8).
  (* Invariant *)
  Have: x_3 = (b + x_1 + ((x_4 + x_1) / b)).
  (* Invariant *)
  Have: (b * x_3) = x_2.
}
Prove: exists i_2 : Z. (b * i_2) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (37559)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (28ms) (706)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 26):
Let x_1 = b / b.
Let x_2 = -x_1.
Let x_3 = 0 / b.
Let x_4 = x_3 - x_1.
Let x_5 = x + x_3 - x_1.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: x_1 < (x + x_3).
  (* Pre-condition *)
  Have: 0 < b.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: (b * x_5) = (b * x).
  (* Invariant *)
  Have: (b * (x_4 / b)) = 0.
  (* Invariant *)
  Have: ((b * x_4) / b) = 0.
}
Prove: exists i : Z. let x_6 = b * i in (x_6 = 0) /\ (x_3 = (x_1 + x_6)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (34782)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (162)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 29):
Let x = i * y * y.
Let x_1 = i * y.
Let x_2 = x_1 / y.
Let x_3 = y + x_1.
Let x_4 = a * y.
Let x_5 = -x_1.
Let x_6 = a - x_1.
Let x_7 = x_1 - y.
Let x_8 = y * x_7.
Let x_9 = x_7 / y.
Let x_10 = a + y - x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_7) /\
      is_sint32(x_6) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: y <= a.
  (* Invariant *)
  Have: (y / y) = 0.
  (* Invariant *)
  Have: (0 / y) = 0.
  (* Invariant *)
  Have: (i_1 * y) = 0.
  (* Invariant *)
  Have: x_1 <= a.
  (* Invariant *)
  Have: x_4 = (x_8 + (y * x_10)).
  (* Invariant *)
  Have: (y + x_9) = (x_1 + x_2).
  (* Invariant *)
  Have: x_1 = (y + (y * x_9)).
  (* Invariant *)
  Have: x_1 = (y + (x_8 / y)).
  (* Invariant *)
  Have: x_1 = (y + (i_2 * y)).
  (* Invariant *)
  Have: x_1 < (a + y).
  (* Invariant *)
  Have: x_1 < (a + y + x_8).
  (* Invariant *)
  Have: y <= x_1.
  (* Then *)
  Have: x_1 < a.
  (* Invariant *)
  Have: x_3 <= a.
  (* Invariant *)
  Have: x_4 = (x + (y * x_6)).
  (* Invariant *)
  Have: x_2 = (x_1 + (x_3 / y)).
  (* Invariant *)
  Have: (y * x_2) = x_1.
  (* Invariant *)
  Have: (x / y) = x_1.
}
Prove: x_1 < (a + x).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (36667)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (31ms) (872)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/33_0001/33_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/33_0001/33_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Assertion (file out/33_0001/33_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/33_0001/33_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/33_0001/33_merged.c:5: Warning: 
  No 'assigns' specification for function 'hoo33'.
  Callers assumptions might be imprecise.
