[kernel] Parsing out/35_0003/35_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_hoo35_loop_invariant_5_established (Qed 0.78ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_6_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_8_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] Proved goals:   24 / 28
  Qed:              12
  Alt-Ergo 2.5.4:    8 (5ms-12ms-40ms)
  Z3 4.8.12:         4 (10ms-20ms)
  Timeout:           4
------------------------------------------------------------
  Function hoo35
------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 13):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = n / 2.
Let x_2 = x_1 * x_1.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_1 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_1) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= (n + prev_guess_0).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - prev_guess_1) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
}
Prove: prev_guess_0 < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (49047)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 15):
Let x = guess_0 * guess_0.
Let x_1 = n / 2.
Let x_2 = x_1 * x_1.
Let x_3 = (guess_0 + (n / guess_0)) / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_1 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_1) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x <= (guess_0 + n).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - prev_guess_0) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 < n.
}
Prove: x_3 <= n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (39137)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 15):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Invariant *) Have: 0 < n. }
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.56ms) (10ms) (29796)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.56ms) (8ms) (56)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 16):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = n / 2.
Let x_3 = x_2 * x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_3 <= (n + x_2).
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_2) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + prev_guess_0).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - prev_guess_1) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: (x / 2) <= prev_guess_0.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (40846)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: n <= 3.
Prover Z3 4.8.12 returns Timeout (Qed:0.78ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.78ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 17):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = guess_0 * guess_0.
Let x_2 = n / 2.
Let x_3 = x_2 * x_2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_3 <= (n + x_2).
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_2) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (guess_0 + n).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - prev_guess_0) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x / 2) <= guess_0.
}
Prove: (x * x) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
}
Prove: (x * x) <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (51250)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (68)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 18):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = x * x.
Let x_2 = guess_0 * guess_0.
Let x_3 = n / 2.
Let x_4 = x_3 * x_3.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + x_3).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_3) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (guess_0 + n).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - prev_guess_0) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x / 2) <= guess_0.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: x_1 <= (n + x).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (41466)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 18):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: x_1 <= (n + x).
Prover Z3 4.8.12 returns Valid (Qed:0.98ms) (10ms) (30495)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.98ms) (8ms) (105)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 19):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = x * x.
Let x_2 = prev_guess_0 * prev_guess_0.
Let x_3 = n / 2.
Let x_4 = x_3 * x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + x_3).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_3) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + prev_guess_0).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - prev_guess_1) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
}
Prove: x != prev_guess_0.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 19):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 21):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = x * x.
Let x_2 = prev_guess_0 * prev_guess_0.
Let x_3 = n / 2.
Let x_4 = x_3 * x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= (n + x_3).
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_3) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 / 2) <= prev_guess_1.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + prev_guess_0).
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - prev_guess_1) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: x != prev_guess_0.
}
Prove: IAbs.abs(x - prev_guess_0) <= n.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (45216)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 21):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: x != 0.
}
Prove: IAbs.abs(x) <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (9ms) (210)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 23):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 * x_1.
Let x_3 = guess_0 * guess_0.
Let x_4 = n / 2.
Let x_5 = x_4 * x_4.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_4).
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_4) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_3 <= (guess_0 + n).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - prev_guess_0) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (x_1 / 2) <= guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(x_1 - guess_0) <= n.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (39917)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (40ms) (955)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0003/35_merged.c, line 24):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 * x_1.
Let x_3 = guess_0 * guess_0.
Let x_4 = n / 2.
Let x_5 = x_4 * x_4.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= (n + x_4).
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: IAbs.abs(x_4) <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: (guess_0 / 2) <= prev_guess_0.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_3 <= (guess_0 + n).
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - prev_guess_0) <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (x_1 / 2) <= guess_0.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= (n + x_1).
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: IAbs.abs(x_1 - guess_0) <= n.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (46826)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0003/35_merged.c, line 24):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: n <= 3.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: IAbs.abs(x) <= n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31627)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (11ms) (111)

------------------------------------------------------------

Goal Assertion (file out/35_0003/35_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/35_0003/35_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/35_0003/35_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo35'.
  Callers assumptions might be imprecise.
