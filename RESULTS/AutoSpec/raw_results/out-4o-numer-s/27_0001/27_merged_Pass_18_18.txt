[kernel] Parsing out/27_0001/27_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              12
  Alt-Ergo 2.5.4:    5 (6ms-15ms-35ms)
  Z3 4.8.12:         1 (20ms)
------------------------------------------------------------
  Function hoo27
------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 11):
Let x = q * y.
Let x_1 = a + b + x.
Assume {
  Type: is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b) /\ is_sint32(q_1) /\
      is_sint32(q) /\ is_sint32(y) /\ is_sint32(b - 1) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= (a + x).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 <= a) /\ (a < y).
  (* Invariant *)
  Have: 0 <= q.
  (* Invariant *)
  Have: 0 <= b.
  (* Then *)
  Have: b != 0.
  If (1 + a) = y
  Then { Have: (1 + q) = q_1. Have: a_1 = 0. }
  Else { Have: q = q_1. Have: (1 + a) = a_1. }
}
Prove: (1 + a + x) = (a_1 + (q_1 * y)).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (50ms) (85883)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (75)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 12):
Let x_1 = q_2 * y.
Let x_2 = b_1 + y + x_1.
Let x_3 = q * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x - a - x_3) /\ is_sint32(x - b_1 - x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((b_1 + x_1) <= x) /\ (x < x_2).
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Then *)
  Have: b_1 != 0.
  If x_2 = (1 + x)
  Then {
    Let x_4 = 1 + q_1.
    Let x_5 = x_4 * (1 + x - b_1 - (q_1 * y)).
    Let x_6 = 1 + x.
    Have: (q_2 = q_1) /\ ((b + x_5) = x_6) /\ ((b_1 + x_5) = x_6).
    Have: x_4 = q.
    Have: a = 0.
  }
  Else {
    Have: (q_2 = q) /\ ((a_1 + b_1 + x_3) = x).
    Have: (a + b_1 + x_3) = x_6.
  }
}
Prove: 0 <= (a + x_3).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (50332)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 13):
Let x_1 = q_2 * y.
Let x_2 = b_2 + y + x_1.
Let x_3 = q * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x - b - x_3) /\ is_sint32(x - b_2 - x_1).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: b_2 <= x.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((b_2 + x_1) <= x) /\ (x < x_2).
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Then *)
  Have: b_2 != 0.
  If x_2 = (1 + x)
  Then {
    Let x_4 = 1 + q_1.
    Let x_5 = x_4 * (1 + x - b_2 - (q_1 * y)).
    Let x_6 = 1 + x.
    Have: (q_2 = q_1) /\ ((b_1 + x_5) = x_6) /\ ((b_2 + x_5) = x_6).
    Have: x_4 = q.
    Have: (b + x_5) = x.
  }
  Else { Have: (q_2 = q) /\ ((a + b_2 + x_3) = x). Have: (1 + b) = b_2. }
  (* Invariant *)
  Have: b <= x.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (36696)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (35ms) (358)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 14):
Let x = q * y.
Let x_1 = q_1 * y.
Let x_2 = a + b_1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_2) /\ is_sint32(b_1) /\
      is_sint32(q) /\ is_sint32(q_2) /\ is_sint32(q_1) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(a + b_1 + x_1 - b - x).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= (a + x_1).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (0 <= a) /\ (a < y).
  (* Invariant *)
  Have: 0 <= q_1.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Then *)
  Have: b_1 != 0.
  If (1 + a) = y
  Then {
    Let x_3 = 1 + q_2.
    Let x_4 = 1 + a.
    Let x_5 = x_4 * x_3.
    Let x_6 = q_2 * x_4.
    Have: (q_1 = q_2) /\ (x_5 = (1 + a + x_6)) /\
        ((1 + a + b_1 + x_6) = (b_2 + x_5)).
    Have: x_3 = q.
    Have: (1 + b) = b_2.
  }
  Else { Have: q_1 = q. Have: (1 + b) = b_1. }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: ((b + x) <= x_2) /\ (x_2 < (b + y + x)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (11ms) (364)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 16):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = b_2 + y + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(b_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x - b - x_1) /\ is_sint32(x - b_2 - x_2).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: b_2 <= x.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((b_2 + x_2) <= x) /\ (x < x_3).
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Then *)
  Have: b_2 != 0.
  If x_3 = (1 + x)
  Then {
    Let x_4 = 1 + q_1.
    Let x_5 = x_4 * (1 + x - b_2 - (q_1 * y)).
    Let x_6 = 1 + x.
    Have: (q_2 = q_1) /\ ((b_1 + x_5) = x_6) /\ ((b_2 + x_5) = x_6).
    Have: x_4 = q.
    Have: (b + x_5) = x.
  }
  Else { Have: (q_2 = q) /\ ((a + b_2 + x_1) = x). Have: (1 + b) = b_2. }
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((b + x_1) <= x) /\ (x < (b + y + x_1)).
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (36300)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (13ms) (146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 17):
Let x = q * y.
Let x_1 = a + x.
Let x_2 = q_1 * y.
Let x_3 = a_1 + b + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(q) /\ is_sint32(q_2) /\ is_sint32(q_1) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(a_1 + b + x_2 - a - x).
  (* Pre-condition *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= (a_1 + x_2).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (0 <= a_1) /\ (a_1 < y).
  (* Invariant *)
  Have: 0 <= q_1.
  (* Invariant *)
  Have: 0 <= b.
  (* Then *)
  Have: b != 0.
  If (1 + a_1) = y
  Then {
    Let x_4 = 1 + q_2.
    Let x_5 = 1 + a_1.
    Let x_6 = x_5 * x_4.
    Let x_7 = q_2 * x_5.
    Have: (q_1 = q_2) /\ (x_6 = (1 + a_1 + x_7)) /\
        ((1 + a_1 + b + x_7) = (b_1 + x_6)).
    Have: x_4 = q.
    Have: a = 0.
  }
  Else { Have: q_1 = q. Have: x_5 = a. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 <= a) /\ (a < y).
  (* Invariant *)
  Have: 0 <= q.
}
Prove: x_1 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (40ms) (82758)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (12ms) (277)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/27_0001/27_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/27_0001/27_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/27_0001/27_merged.c:5: Warning: 
  No 'assigns' specification for function 'hoo27'.
  Callers assumptions might be imprecise.
