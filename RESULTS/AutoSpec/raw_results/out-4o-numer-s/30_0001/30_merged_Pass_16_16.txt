[kernel] Parsing out/30_0001/30_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] Proved goals:   16 / 16
  Qed:              11
  Alt-Ergo 2.5.4:    5
------------------------------------------------------------
  Function hoo30
------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 16):
Let x_1 = -r.
Let x_2 = 2 * x.
Let x_3 = r * r.
Let x_4 = x_2 + x_3 - r.
Let x_5 = x_4 / 2.
Let x_6 = x_2 + x_3.
Assume {
  Type: is_sint32(r) /\ is_sint32(x) /\ is_sint32(1 + r) /\
      is_sint32(x - r) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (x_4 % 2) = 0.
  (* Pre-condition *)
  Have: r < x_6.
  (* Invariant *)
  Have: (r + (2 * x_5)) = x_6.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: r <= x_5.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: r < x.
}
Prove: x <= (r + x_5).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (31816)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 17):
Let x_2 = -x_1.
Let x_3 = x - x_1.
Let x_4 = x_1 + x + (x_3 * x_3).
Let x_5 = x_4 / 2.
Let x_6 = x_1 + x_5.
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(1 + x - x_1) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (x_4 % 2) = 0.
  (* Pre-condition *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: x_4 = (2 * x_5).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_1 <= x.
  (* Then *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: x_1 <= x_5.
}
Prove: x < x_6.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (31981)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 19):
Let x_1 = -r.
Let x_2 = 2 * x.
Let x_3 = r * r.
Let x_4 = x_2 + x_3 - r.
Let x_5 = x_4 / 2.
Let x_6 = x_2 + x_3.
Let x_7 = 1 + r.
Assume {
  Type: is_sint32(r) /\ is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x - r) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (x_4 % 2) = 0.
  (* Pre-condition *)
  Have: r < x_6.
  (* Invariant *)
  Have: (r + (2 * x_5)) = x_6.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: r <= x_5.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: r < x.
  (* Invariant *)
  Have: x <= (r + x_5).
  (* Invariant *)
  Have: r < x_5.
}
Prove: (x_7 * x_7) = (1 + (2 * r) + x_3).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (9841)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (4ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 19):
Let x = a / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(x).
  (* Pre-condition *)
  Have: (a % 2) = 0.
  (* Pre-condition *)
  Have: 0 < a.
}
Prove: (2 * x) = a.
Prover Z3 4.8.12 returns Valid (Qed:0.77ms) (20ms) (30658)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.77ms) (10ms) (93)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/30_0001/30_merged.c, line 21):
Let x_2 = 3 * x.
Let x_3 = -x.
Let x_4 = 1 + x_1 - x.
Let x_5 = x_4 * x_4.
Let x_6 = x_2 + x_5 - 1 - x_1.
Let x_7 = x_6 / 2.
Let x_8 = x + x_7.
Let x_9 = x_1 - x.
Let x_10 = x_2 + x_5.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_9) /\ is_sint32(x_4) /\
      is_sint32(x_6) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: (x_6 % 2) = 0.
  (* Pre-condition *)
  Have: (2 + x_1) <= x_10.
  (* Invariant *)
  Have: (1 + x_1 + (2 * x_7)) = x_10.
  (* Invariant *)
  Have: x_1 <= x_10.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: ((2 * x) + x_5) = (1 + (2 * x_1) + (x_9 * x_9)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x <= x_1.
  (* Then *)
  Have: 0 < x.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: x_1 < x_8.
}
Prove: x <= (1 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (32442)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (48)

------------------------------------------------------------

Goal Establishment of Invariant (file out/30_0001/30_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/30_0001/30_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Loop assigns (file out/30_0001/30_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/30_0001/30_merged.c:6: Warning: 
  No 'assigns' specification for function 'hoo30'.
  Callers assumptions might be imprecise.
