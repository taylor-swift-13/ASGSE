[kernel] Parsing out/24_0003/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Failure] typed_hoo24_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_3_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_5_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_6_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_7_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_8_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_9_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_assert (Qed 2ms) (Z3)
[wp] Proved goals:   17 / 28
  Qed:              15
  Alt-Ergo 2.5.4:    2 (7ms-9ms)
  Failed:           11
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 12):
Let x = -n.
Let x_1 = n / prev_guess_0.
Let a = IAbs.abs(prev_guess_0 - prev_guess_1).
Let a_1 = IAbs.abs(n).
Let x_2 = n / 2.
Let a_2 = IAbs.abs(x_2).
Let x_3 = (prev_guess_0 + x_1) / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_2 <= a_1.
  (* Invariant *)
  Have: IAbs.abs(x_2 - (n / x_2)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (IAbs.abs((x_2 * x_2) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= a_2.
  (* Invariant *)
  Have: a <= a_1.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - x_1)
          <= IAbs.abs(prev_guess_1 - (n / prev_guess_1)).
  (* Invariant *)
  Have: IAbs.abs((prev_guess_0 * prev_guess_0) - n)
          < IAbs.abs((prev_guess_1 * prev_guess_1) - n).
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
}
Prove: prev_guess_0 <= x_3.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 13):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = -n.
Let a = IAbs.abs(guess_0 - prev_guess_0).
Let a_1 = IAbs.abs(n).
Let x_3 = n / 2.
Let a_2 = IAbs.abs(x_3).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: a_2 <= a_1.
  (* Invariant *)
  Have: IAbs.abs(x_3 - (n / x_3)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_3 = 0) \/ (IAbs.abs((x_3 * x_3) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a <= a_2.
  (* Invariant *)
  Have: a <= a_1.
  (* Invariant *)
  Have: IAbs.abs(guess_0 - x) <= IAbs.abs(prev_guess_0 - (n / prev_guess_0)).
  (* Invariant *)
  Have: IAbs.abs((guess_0 * guess_0) - n)
          < IAbs.abs((prev_guess_0 * prev_guess_0) - n).
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 13):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Pre-condition *) Have: 0 < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.95ms) (20ms) (29796)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.95ms) (7ms) (56)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 15):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = -n.
Let a = IAbs.abs(prev_guess_0 - prev_guess_1).
Let a_1 = IAbs.abs(n).
Let x_3 = n / 2.
Let a_2 = IAbs.abs(x_3).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: a_2 <= a_1.
  (* Invariant *)
  Have: IAbs.abs(x_3 - (n / x_3)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_3 = 0) \/ (IAbs.abs((x_3 * x_3) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= a_2.
  (* Invariant *)
  Have: a <= a_1.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - x)
          <= IAbs.abs(prev_guess_1 - (n / prev_guess_1)).
  (* Invariant *)
  Have: IAbs.abs((prev_guess_0 * prev_guess_0) - n)
          < IAbs.abs((prev_guess_1 * prev_guess_1) - n).
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: IAbs.abs(x_1 - prev_guess_0) <= a_2.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 16):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let a = IAbs.abs(x_1 - prev_guess_0).
Let x_2 = n / 2.
Let a_1 = IAbs.abs(x_2).
Let x_3 = -n.
Let a_2 = IAbs.abs(prev_guess_0 - prev_guess_1).
Let a_3 = IAbs.abs(n).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_1 <= a_3.
  (* Invariant *)
  Have: IAbs.abs(x_2 - (n / x_2)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (IAbs.abs((x_2 * x_2) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a_2 <= a_1.
  (* Invariant *)
  Have: a_2 <= a_3.
  (* Invariant *)
  Have: IAbs.abs(prev_guess_0 - x)
          <= IAbs.abs(prev_guess_1 - (n / prev_guess_1)).
  (* Invariant *)
  Have: IAbs.abs((prev_guess_0 * prev_guess_0) - n)
          < IAbs.abs((prev_guess_1 * prev_guess_1) - n).
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= a_1.
}
Prove: a <= a_3.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: IAbs.abs(x) <= IAbs.abs(n).
Prover Z3 4.8.12 returns Valid (Qed:0.82ms) (10ms) (31502)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.82ms) (9ms) (97)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 17):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let a = IAbs.abs(x_1 - prev_guess_0).
Let a_1 = IAbs.abs(n).
Let x_2 = n / 2.
Let a_2 = IAbs.abs(x_2).
Let x_3 = -n.
Let a_3 = IAbs.abs(prev_guess_0 - x).
Let a_4 = IAbs.abs(prev_guess_0 - prev_guess_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_2 <= a_1.
  (* Invariant *)
  Have: IAbs.abs(x_2 - (n / x_2)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (IAbs.abs((x_2 * x_2) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a_4 <= a_2.
  (* Invariant *)
  Have: a_4 <= a_1.
  (* Invariant *)
  Have: a_3 <= IAbs.abs(prev_guess_1 - (n / prev_guess_1)).
  (* Invariant *)
  Have: IAbs.abs((prev_guess_0 * prev_guess_0) - n)
          < IAbs.abs((prev_guess_1 * prev_guess_1) - n).
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= a_2.
  (* Invariant *)
  Have: a <= a_1.
}
Prove: IAbs.abs(x_1 - (n / x_1)) <= a_3.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs(x) <= IAbs.abs(n).
}
Prove: IAbs.abs(x - (n / x)) <= IAbs.abs(n / 0).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 18):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let a = IAbs.abs(prev_guess_0 - x).
Let a_1 = IAbs.abs(x_1 - prev_guess_0).
Let a_2 = IAbs.abs(n).
Let x_2 = n / 2.
Let a_3 = IAbs.abs(x_2).
Let x_3 = -n.
Let a_4 = IAbs.abs((prev_guess_0 * prev_guess_0) - n).
Let a_5 = IAbs.abs(prev_guess_0 - prev_guess_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_3 <= a_2.
  (* Invariant *)
  Have: IAbs.abs(x_2 - (n / x_2)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_2 = 0) \/ (IAbs.abs((x_2 * x_2) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a_5 <= a_3.
  (* Invariant *)
  Have: a_5 <= a_2.
  (* Invariant *)
  Have: a <= IAbs.abs(prev_guess_1 - (n / prev_guess_1)).
  (* Invariant *)
  Have: a_4 < IAbs.abs((prev_guess_1 * prev_guess_1) - n).
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= a_3.
  (* Invariant *)
  Have: a_1 <= a_2.
  (* Invariant *)
  Have: IAbs.abs(x_1 - (n / x_1)) <= a.
}
Prove: (x_1 = prev_guess_0) \/ (IAbs.abs((x_1 * x_1) - n) < a_4).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs(x) <= IAbs.abs(n).
  (* Invariant *)
  Have: IAbs.abs(x - (n / x)) <= IAbs.abs(n / 0).
}
Prove: (x = 0) \/ (IAbs.abs((x * x) - n) < IAbs.abs(n)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 19):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = x_1 / 2.
Let x_3 = -n.
Let a = IAbs.abs((guess_0 * guess_0) - n).
Let a_1 = IAbs.abs(guess_0 - x).
Let a_2 = IAbs.abs(x_2 - guess_0).
Let a_3 = IAbs.abs(n).
Let x_4 = n / 2.
Let a_4 = IAbs.abs(x_4).
Let a_5 = IAbs.abs(guess_0 - prev_guess_0).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: a_4 <= a_3.
  (* Invariant *)
  Have: IAbs.abs(x_4 - (n / x_4)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x_4 = 0) \/ (IAbs.abs((x_4 * x_4) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a_5 <= a_4.
  (* Invariant *)
  Have: a_5 <= a_3.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(prev_guess_0 - (n / prev_guess_0)).
  (* Invariant *)
  Have: a < IAbs.abs((prev_guess_0 * prev_guess_0) - n).
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_2 <= a_4.
  (* Invariant *)
  Have: a_2 <= a_3.
  (* Invariant *)
  Have: IAbs.abs(x_2 - (n / x_2)) <= a_1.
  (* Invariant *)
  Have: (x_2 = guess_0) \/ (IAbs.abs((x_2 * x_2) - n) < a).
}
Prove: 2 <= x_1.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 19):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs(x) <= IAbs.abs(n).
  (* Invariant *)
  Have: IAbs.abs(x - (n / x)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x = 0) \/ (IAbs.abs((x * x) - n) < IAbs.abs(n)).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0003/24_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0003/24_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/24_0003/24_merged.c, line 32):
Let x = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: IAbs.abs(x) <= IAbs.abs(n).
  (* Invariant *)
  Have: IAbs.abs(x - (n / x)) <= IAbs.abs(n / 0).
  (* Invariant *)
  Have: (x = 0) \/ (IAbs.abs((x * x) - n) < IAbs.abs(n)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 < guess_0.
}
Prove: (guess_0 * guess_0) <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Loop assigns (file out/24_0003/24_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0003/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
