[kernel] Parsing out/32_0003/32_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] [Timeout] typed_hoo32_loop_invariant_preserved (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo32_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo32_loop_invariant_5_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   13 / 16
  Qed:              11
  Alt-Ergo 2.5.4:    2 (4ms-5ms)
  Timeout:           3
------------------------------------------------------------
  Function hoo32
------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 9):
Let x_2 = x * x.
Let x_3 = x_1 * x_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_3 <= 1000.
  (* Invariant *)
  Have: x_1 <= 32.
  (* Invariant *)
  Have: x_1 <= 1000.
  (* Invariant *)
  Have: y <= 1000.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x <= 32.
  (* Invariant *)
  Have: x <= 1000.
  (* Invariant *)
  Have: (x + x_2) <= (10 + y).
  (* Invariant *)
  Have: x_2 <= 1000.
}
Prove: y <= 999.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 9):
Let x_1 = x * x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
}
Prove: x_1 <= 1000.
Prover Z3 4.8.12 returns Valid (Qed:0.56ms) (10ms) (29643)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.56ms) (4ms) (13)

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 10):
Let x_2 = x * x.
Let x_3 = x_1 * x_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_3 <= 1000.
  (* Invariant *)
  Have: x_1 <= 32.
  (* Invariant *)
  Have: x_1 <= 1000.
  (* Invariant *)
  Have: y <= 1000.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x <= 32.
  (* Invariant *)
  Have: x <= 1000.
  (* Invariant *)
  Have: (x + x_2) <= (10 + y).
  (* Invariant *)
  Have: x_2 <= 1000.
  (* Invariant *)
  Have: y <= 999.
}
Prove: ((-1) <= x) /\ (x <= 9).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 13):
Let x_2 = x * x.
Let x_3 = 10 + y.
Let x_4 = x_1 * x_1.
Let x_5 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(1 + y) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_4 <= 1000.
  (* Invariant *)
  Have: x_1 <= 32.
  (* Invariant *)
  Have: x_1 <= 1000.
  (* Invariant *)
  Have: y <= 1000.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x <= 32.
  (* Invariant *)
  Have: x <= 1000.
  (* Invariant *)
  Have: (x + x_2) <= x_3.
  (* Invariant *)
  Have: x_2 <= 1000.
  (* Invariant *)
  Have: y <= 999.
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
  (* Invariant *)
  Have: x <= 31.
  (* Invariant *)
  Have: x <= 999.
}
Prove: (x + (x_5 * x_5)) <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 14):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 10 + y.
Let x_5 = x * x.
Let x_6 = x_1 * x_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(1 + y) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Invariant *)
  Have: x_6 <= 1000.
  (* Invariant *)
  Have: x_1 <= 32.
  (* Invariant *)
  Have: x_1 <= 1000.
  (* Invariant *)
  Have: y <= 1000.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x <= 32.
  (* Invariant *)
  Have: x <= 1000.
  (* Invariant *)
  Have: (x + x_5) <= x_4.
  (* Invariant *)
  Have: x_5 <= 1000.
  (* Invariant *)
  Have: y <= 999.
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
  (* Invariant *)
  Have: x <= 31.
  (* Invariant *)
  Have: x <= 999.
  (* Invariant *)
  Have: (x + x_3) <= x_4.
}
Prove: x_3 <= 1000.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33375)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/32_0003/32_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/32_0003/32_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Assertion (file out/32_0003/32_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/32_0003/32_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/32_0003/32_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo32'.
  Callers assumptions might be imprecise.
