[kernel] Parsing out/24_0005/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Failure] typed_hoo24_loop_invariant_4_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_6_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_7_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_8_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_9_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_10_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_6_established (Qed 0.99ms) (Z3)
[wp] Proved goals:   16 / 24
  Qed:              13
  Alt-Ergo 2.5.4:    3
  Failed:            7
  Timeout:           1
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 14):
Let x = -n.
Let x_1 = prev_guess_0 * prev_guess_0.
Let x_2 = prev_guess_1 * prev_guess_1.
Let x_3 = prev_guess_0 - prev_guess_1.
Let x_4 = n / prev_guess_0.
Let x_5 = n / 2.
Let x_6 = x_5 * x_5.
Let x_7 = (prev_guess_0 + x_4) / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_5) /\ is_sint32(x_7).
  (* Goal *)
  When: x_7 != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_5 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_5 <= (n / x_5))).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_6 <= n)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (0 < x_6)).
  (* Invariant *)
  Have: IAbs.abs(x_6 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: (prev_guess_0 < prev_guess_1) \/ (prev_guess_1 < prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= (prev_guess_1 + x_4).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 0 < (x_3 * x_3).
  (* Invariant *)
  Have: IAbs.abs(x_1 - n) <= IAbs.abs(x_2 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
}
Prove: (prev_guess_0 < x_7) \/ (x_7 < prev_guess_0).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 14):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.74ms) (20ms) (29766)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.74ms) (8ms) (84)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 16):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = -n.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = prev_guess_0 - prev_guess_1.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_6 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_6 <= (n / x_6))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (0 < x_7)).
  (* Invariant *)
  Have: IAbs.abs(x_7 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: (prev_guess_0 < prev_guess_1) \/ (prev_guess_1 < prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= (prev_guess_1 + x).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: 0 < (x_5 * x_5).
  (* Invariant *)
  Have: IAbs.abs(x_3 - n) <= IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (prev_guess_0 < x_1) \/ (x_1 < prev_guess_0).
}
Prove: x_1 <= (prev_guess_0 + (n / x_1)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
}
Prove: x <= (n / x).
Prover Z3 4.8.12 returns Timeout (Qed:0.99ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.99ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 17):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = -n.
Let x_3 = guess_0 * guess_0.
Let x_4 = prev_guess_0 * prev_guess_0.
Let x_5 = guess_0 - prev_guess_0.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_6 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_6 <= (n / x_6))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (0 < x_7)).
  (* Invariant *)
  Have: IAbs.abs(x_7 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: (guess_0 < prev_guess_0) \/ (prev_guess_0 < guess_0).
  (* Invariant *)
  Have: guess_0 <= (prev_guess_0 + x).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: 0 < (x_5 * x_5).
  (* Invariant *)
  Have: IAbs.abs(x_3 - n) <= IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: (guess_0 < x_1) \/ (x_1 < guess_0).
  (* Invariant *)
  Have: x_1 <= (guess_0 + (n / x_1)).
}
Prove: (x_1 * x_1) <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= (n / x).
}
Prove: (x * x) <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (71514)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (27ms) (534)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 18):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = -n.
Let x_3 = prev_guess_0 * prev_guess_0.
Let x_4 = prev_guess_1 * prev_guess_1.
Let x_5 = prev_guess_0 - prev_guess_1.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let x_8 = x_1 - prev_guess_0.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_6 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_6 <= (n / x_6))).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 <= n)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (0 < x_7)).
  (* Invariant *)
  Have: IAbs.abs(x_7 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: (prev_guess_0 < prev_guess_1) \/ (prev_guess_1 < prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= (prev_guess_1 + x).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: 0 < (x_5 * x_5).
  (* Invariant *)
  Have: IAbs.abs(x_3 - n) <= IAbs.abs(x_4 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (prev_guess_0 < x_1) \/ (x_1 < prev_guess_0).
  (* Invariant *)
  Have: x_1 <= (prev_guess_0 + (n / x_1)).
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
}
Prove: 0 < (x_8 * x_8).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 18):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x <= (n / x).
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: 0 < x_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (2456)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (20)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 19):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = x_1 - prev_guess_0.
Let x_3 = x_1 * x_1.
Let x_4 = -n.
Let x_5 = prev_guess_0 * prev_guess_0.
Let a = IAbs.abs(x_5 - n).
Let x_6 = prev_guess_1 * prev_guess_1.
Let x_7 = prev_guess_0 - prev_guess_1.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_8) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_8 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_8 <= (n / x_8))).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 <= n)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (0 < x_9)).
  (* Invariant *)
  Have: IAbs.abs(x_9 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: (prev_guess_0 < prev_guess_1) \/ (prev_guess_1 < prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= (prev_guess_1 + x).
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: 0 < (x_7 * x_7).
  (* Invariant *)
  Have: a <= IAbs.abs(x_6 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: ((x_1 != prev_guess_0) ->
      ((prev_guess_0 < x_1) \/ (x_1 < prev_guess_0))).
  (* Invariant *)
  Have: ((x_1 != prev_guess_0) -> (x_1 <= (prev_guess_0 + (n / x_1)))).
  (* Invariant *)
  Have: ((x_1 != prev_guess_0) -> (x_3 <= n)).
  (* Invariant *)
  Have: ((x_1 != prev_guess_0) -> (0 < (x_2 * x_2))).
}
Prove: IAbs.abs(x_3 - n) <= a.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 19):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x != 0) -> (x <= (n / x))).
  (* Invariant *)
  Have: ((x != 0) -> (x_1 <= n)).
  (* Invariant *)
  Have: ((x != 0) -> (0 < x_1)).
}
Prove: IAbs.abs(x_1 - n) <= IAbs.abs(n).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 20):
Let x = -n.
Let x_1 = n / prev_guess_0.
Let x_2 = (prev_guess_0 + x_1) / 2.
Let x_3 = x_2 * x_2.
Let x_4 = prev_guess_0 * prev_guess_0.
Let a = IAbs.abs(x_4 - n).
Let x_5 = x_2 - prev_guess_0.
Let x_6 = prev_guess_1 * prev_guess_1.
Let x_7 = prev_guess_0 - prev_guess_1.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_8 != 0) -> (2 <= n)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_8 <= (n / x_8))).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 <= n)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (0 < x_9)).
  (* Invariant *)
  Have: IAbs.abs(x_9 - n) <= IAbs.abs(n).
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: (prev_guess_0 < prev_guess_1) \/ (prev_guess_1 < prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= (prev_guess_1 + x_1).
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: 0 < (x_7 * x_7).
  (* Invariant *)
  Have: a <= IAbs.abs(x_6 - n).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: ((x_2 != prev_guess_0) ->
      ((prev_guess_0 < x_2) \/ (x_2 < prev_guess_0))).
  (* Invariant *)
  Have: ((x_2 != prev_guess_0) -> (x_2 <= (prev_guess_0 + (n / x_2)))).
  (* Invariant *)
  Have: ((x_2 != prev_guess_0) -> (x_3 <= n)).
  (* Invariant *)
  Have: ((x_2 != prev_guess_0) -> (0 < (x_5 * x_5))).
  (* Invariant *)
  Have: IAbs.abs(x_3 - n) <= a.
}
Prove: 0 <= prev_guess_0.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/24_0005/24_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/24_0005/24_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0005/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
