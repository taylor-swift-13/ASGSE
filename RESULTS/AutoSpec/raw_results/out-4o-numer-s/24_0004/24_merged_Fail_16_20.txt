[kernel] Parsing out/24_0004/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_hoo24_loop_invariant_preserved (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_2_preserved (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_5_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_5_established (Qed 0.68ms) (Z3)
[wp] Proved goals:   16 / 20
  Qed:              10
  Alt-Ergo 2.5.4:    6 (6ms-29ms-110ms)
  Timeout:           4
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 11):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= x.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
}
Prove: prev_guess_0 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 12):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= x.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x.
}
Prove: (prev_guess_0 * prev_guess_0) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 13):
Let x = n / 2.
Let x_1 = (guess_0 + (n / guess_0)) / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34603)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (17ms) (242)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 13):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Pre-condition *) Have: 0 < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.59ms) (20ms) (29796)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.59ms) (7ms) (56)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 15):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= x_1.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: x <= n.
}
Prove: x != prev_guess_0.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 15):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.68ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.68ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 16):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Goal *)
  When: x != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= x_1.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: x <= n.
}
Prove: prev_guess_0 <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (110ms) (1330)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 18):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33731)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (17ms) (140)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0004/24_merged.c, line 19):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (35058)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (14ms) (164)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0004/24_merged.c, line 19):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x != 0.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30001)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (6ms) (89)

------------------------------------------------------------

Goal Assertion (file out/24_0004/24_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/24_0004/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0004/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
