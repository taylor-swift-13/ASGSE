[kernel] Parsing out/17_0003/17_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_hoo17_loop_invariant_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_2_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_3_preserved (Qed 25ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_6_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_8_established (Qed 0.74ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_10_established (Qed 0.65ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_12_established (Qed 0.96ms) (Z3)
[wp] Proved goals:   18 / 26
  Qed:               9
  Alt-Ergo 2.5.4:    9
  Timeout:           8
------------------------------------------------------------
  Function hoo17
------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_1 <= 20000001.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_1.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_1.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_1.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y_3.
  (* Invariant *)
  Have: x <= (16 + y_3).
  (* Invariant *)
  Have: x < y_3.
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x.
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
}
Prove: y <= 20000001.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
}
Prove: x <= 20000001.
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
}
Prove: x <= 20000001.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.52ms) (5ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
}
Prove: x <= y.
Prover Z3 4.8.12 returns Timeout (Qed:25ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:25ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (35317)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (4ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:0.70ms) (10ms) (29661)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.70ms) (17)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: x < y.
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
}
Prove: (-20000007) <= x.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (36169)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (9ms) (70)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: (-20000007) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:0.74ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.74ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 21):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: (-20000007) <= x.
}
Prove: (-20000001) <= y.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:29ms) (8ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 21):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: (-20000007) <= x.
}
Prove: (-20000001) <= y.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 22):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
}
Prove: (-20000001) <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (8ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 22):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
}
Prove: (-20000001) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:0.65ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.65ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 23):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_4 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= 20000001.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_4.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_4.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_4.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= 20000001.
  (* Invariant *)
  Have: x_3 <= y_3.
  (* Invariant *)
  Have: x_3 <= (16 + y_3).
  (* Invariant *)
  Have: x_3 < y_3.
  (* Invariant *)
  Have: (-20000007) <= x_3.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x_3.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x_3.
  If x_3 < 0
  Then { Have: x_3 = x_1. Have: (7 + x_1) = x. }
  Else { Have: x_3 = x_2. Have: (10 + x_2) = x. }
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
  (* Invariant *)
  Have: (-20000001) <= x.
}
Prove: (-20000000) <= y.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (35900)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (3ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 23):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
  (* Invariant *)
  Have: (-20000001) <= x.
}
Prove: (-20000000) <= y.
Prover Z3 4.8.12 returns Valid (Qed:0.79ms) (10ms) (30106)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.79ms) (5ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0003/17_merged.c, line 24):
Let x_2 = 10 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4) /\ is_sint32(x_2).
  (* Residual *)
  When: 0 <= x.
  (* Pre-condition *)
  Have: x_1 < y_4.
  (* Pre-condition *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: x_1 <= 20000001.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: (-20000007) <= x_1.
  (* Invariant *)
  Have: (-20000001) <= y_4.
  (* Invariant *)
  Have: (-20000001) <= x_1.
  (* Invariant *)
  Have: (-20000000) <= y_4.
  (* Invariant *)
  Have: (-20000000) <= x_1.
  (* Invariant *)
  Have: y_3 <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= y_3.
  (* Invariant *)
  Have: x <= (16 + y_3).
  (* Invariant *)
  Have: x < y_3.
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y_3.
  (* Invariant *)
  Have: (-20000001) <= x.
  (* Invariant *)
  Have: (-20000000) <= y_3.
  (* Invariant *)
  Have: (-20000000) <= x.
  If y_3 < 0
  Then { Have: y_3 = y_1. Have: (10 + y) = y_1. }
  Else { Have: y_3 = y_2. Have: (3 + y_2) = y. }
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 19999991.
  (* Invariant *)
  Have: x_2 <= y.
  (* Invariant *)
  Have: x <= (6 + y).
  (* Invariant *)
  Have: (11 + x) <= y.
  (* Invariant *)
  Have: (-20000017) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
  (* Invariant *)
  Have: (-20000011) <= x.
  (* Invariant *)
  Have: (-20000000) <= y.
}
Prove: (-20000010) <= x.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (34772)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (6ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0003/17_merged.c, line 24):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: x <= 20000001.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: (-20000007) <= x.
  (* Invariant *)
  Have: (-20000001) <= y.
  (* Invariant *)
  Have: (-20000001) <= x.
  (* Invariant *)
  Have: (-20000000) <= y.
}
Prove: (-20000000) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:0.96ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.96ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/17_0003/17_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/17_0003/17_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/17_0003/17_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo17'.
  Callers assumptions might be imprecise.
