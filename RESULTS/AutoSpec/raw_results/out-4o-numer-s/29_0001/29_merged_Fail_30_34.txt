[kernel] Parsing out/29_0001/29_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] [Timeout] typed_hoo29_loop_invariant_11_established (Qed 0.88ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_12_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_15_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo29_assert (Qed 2ms) (Z3)
[wp] Proved goals:   30 / 34
  Qed:              23
  Alt-Ergo 2.5.4:    7 (3ms-16ms-41ms)
  Timeout:           4
------------------------------------------------------------
  Function hoo29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 16):
Let x = n / 2.
Let x_1 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x * x) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: prev_guess_1 <= (1 + prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
}
Prove: prev_guess_0 <= (1 + x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (41ms) (386)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 18):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_1 != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((x != guess_0) -> (guess_0 <= (1 + x))).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (35283)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (24ms) (308)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
}
Prove: x <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (58)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 21):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((x_1 != guess_0) -> (guess_0 <= (1 + x_1))).
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34122)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (13ms) (146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 23):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((x_1 != guess_0) -> (guess_0 <= (1 + x_1))).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (36890)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (15ms) (177)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 23):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.88ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.88ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 24):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: 0 < guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x_2 != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: prev_guess_0 <= (1 + guess_0).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((x_1 != guess_0) -> (guess_0 <= (1 + x_1))).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 2 <= x.
}
Prove: (x_1 * x_1) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 26):
Let x = n / 2.
Let x_1 = 1 + x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
}
Prove: ((x * x) <= n) \/ (n < (x_1 * x_1)).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30977)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (71)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 27):
Let x = n / 2.
Let x_1 = 1 + x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: n < (x_1 * x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
}
Prove: (x * x) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0001/29_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0001/29_merged.c, line 28):
Let x = n / 2.
Let x_1 = 1 + x.
Let x_2 = x_1 * x_1.
Let x_3 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_3 <= n) \/ (n < x_2).
  (* Invariant *)
  Have: ((n < x_2) -> (x_3 <= n)).
}
Prove: x_3 <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (4622)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (3ms) (15)

------------------------------------------------------------

Goal Assertion (file out/29_0001/29_merged.c, line 37):
Let x = n / 2.
Let x_1 = 1 + guess_0.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((x != 0) -> ((-3) <= n)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x * x) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
}
Prove: n < (x_1 * x_1).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0001/29_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0001/29_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo29'.
  Callers assumptions might be imprecise.
