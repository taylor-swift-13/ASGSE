[kernel] Parsing out/17_0001/17_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_hoo17_loop_invariant_established (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_2_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_3_established (Qed 0.75ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_4_preserved (Qed 27ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_5_preserved (Qed 28ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_7_preserved (Qed 33ms) (Z3)
[wp] [Timeout] typed_hoo17_loop_invariant_12_established (Qed 2ms) (Z3)
[wp] Proved goals:   20 / 28
  Qed:               9
  Alt-Ergo 2.5.4:   11
  Timeout:           8
------------------------------------------------------------
  Function hoo17
------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 13):
Let x_2 = x_1 - x.
Let x_3 = -y_1.
Let x_4 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: 0 <= y.
  (* Pre-condition *)
  Have: x < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y_1).
  (* Invariant *)
  Have: x <= (19 + y_1).
  (* Invariant *)
  Have: x <= (15 + y_1).
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: ((x < 0) -> ((x % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_4 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_4 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_2 % 10) = (x_1 % 10))).
  (* Invariant *)
  Have: x_1 <= y_4.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: x_1 < y_4.
  (* Invariant *)
  Have: x_1 <= (19 + y_4).
  (* Invariant *)
  Have: x_1 <= (15 + y_4).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_2 % 7) = (x_1 % 7))).
  (* Invariant *)
  Have: x <= x_1.
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
}
Prove: ((y - y_1) % 3) = (y % 3).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (318ms) (3699)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: 0 <= y.
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
}
Prove: (y % 3) = 0.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 14):
Let x_2 = -y_1.
Let x_3 = x_1 - x.
Let x_4 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y_1).
  (* Invariant *)
  Have: x <= (19 + y_1).
  (* Invariant *)
  Have: x <= (15 + y_1).
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: ((x < 0) -> ((x % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_4 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_4 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_3 % 10) = (x_1 % 10))).
  (* Invariant *)
  Have: x_1 <= y_4.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: x_1 < y_4.
  (* Invariant *)
  Have: x_1 <= (19 + y_4).
  (* Invariant *)
  Have: x_1 <= (15 + y_4).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_3 % 7) = (x_1 % 7))).
  (* Invariant *)
  Have: x <= x_1.
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> (((y - y_1) % 3) = (y % 3))).
}
Prove: y <= 20000001.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 15):
Let x_2 = x_1 - x.
Let x_3 = -y_1.
Let x_4 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: y < 0.
  (* Pre-condition *)
  Have: x < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y_1).
  (* Invariant *)
  Have: x <= (19 + y_1).
  (* Invariant *)
  Have: x <= (15 + y_1).
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: ((x < 0) -> ((x % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_4 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_4 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_2 % 10) = (x_1 % 10))).
  (* Invariant *)
  Have: x_1 <= y_4.
  (* Invariant *)
  Have: x_1 <= (16 + y_4).
  (* Invariant *)
  Have: x_1 < y_4.
  (* Invariant *)
  Have: x_1 <= (19 + y_4).
  (* Invariant *)
  Have: x_1 <= (15 + y_4).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_2 % 7) = (x_1 % 7))).
  (* Invariant *)
  Have: x <= x_1.
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: y <= 20000001.
}
Prove: ((y - y_1) % 10) = (y % 10).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (345ms) (3421)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: y < 0.
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
}
Prove: (y % 10) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.75ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.75ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 16):
Let x_5 = -y_1.
Let x_6 = y - y_1.
Let x_7 = -x_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: 0 <= x.
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_6 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_6 % 10) = (y % 10))).
}
Prove: ((x - x_1) % 10) = (x % 10).
Prover Z3 4.8.12 returns Timeout (Qed:27ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:27ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: 0 <= x.
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
}
Prove: (x % 10) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 17):
Let x_5 = -x_1.
Let x_6 = -y_1.
Let x_7 = y - y_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_7 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_7 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x) -> (((x - x_1) % 10) = (x % 10))).
}
Prove: x <= y.
Prover Z3 4.8.12 returns Timeout (Qed:28ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:28ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 18):
Let x_5 = -x_1.
Let x_6 = -y_1.
Let x_7 = y - y_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_7 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_7 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x) -> (((x - x_1) % 10) = (x % 10))).
  (* Invariant *)
  Have: x <= y.
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (38960)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:29ms) (8ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
}
Prove: x <= (16 + y).
Prover Z3 4.8.12 returns Valid (Qed:0.69ms) (10ms) (30421)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.69ms) (4ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 19):
Let x_5 = -x_1.
Let x_6 = -y_1.
Let x_7 = y - y_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_7 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_7 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x) -> (((x - x_1) % 10) = (x % 10))).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: x < y.
Prover Z3 4.8.12 returns Timeout (Qed:33ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:33ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 20):
Let x_5 = -x_1.
Let x_6 = -y_1.
Let x_7 = y - y_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_7 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_7 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x) -> (((x - x_1) % 10) = (x % 10))).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
}
Prove: x <= (19 + y).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (39192)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y).
}
Prove: x <= (19 + y).
Prover Z3 4.8.12 returns Valid (Qed:0.95ms) (20ms) (30543)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.95ms) (5ms) (17)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 22):
Let x_5 = -x_1.
Let x_6 = -y_1.
Let x_7 = y - y_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_7 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_7 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x) -> (((x - x_1) % 10) = (x % 10))).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= (19 + y).
}
Prove: x <= (15 + y).
Prover Z3 4.8.12 returns Valid (Qed:35ms) (10ms) (39314)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (6ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 22):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (19 + y).
}
Prove: x <= (15 + y).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (30665)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (3ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 23):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (19 + y).
  (* Invariant *)
  Have: x <= (15 + y).
}
Prove: x <= 20000000.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (30784)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (19)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 24):
Let x_5 = -y_1.
Let x_6 = y - y_1.
Let x_7 = -x_1.
Let x_8 = x_4 - x_1.
Let x_9 = y_4 - y_1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: x < 0.
  (* Pre-condition *)
  Have: x_1 < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_1 % 10) = 0)).
  (* Invariant *)
  Have: x_1 <= (16 + y_1).
  (* Invariant *)
  Have: x_1 <= (19 + y_1).
  (* Invariant *)
  Have: x_1 <= (15 + y_1).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_1 % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_9 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_9 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_8 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_8 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x_1 <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_6 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_6 % 10) = (y % 10))).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= (19 + y).
  (* Invariant *)
  Have: x <= (15 + y).
  (* Invariant *)
  Have: x <= 20000000.
}
Prove: ((x - x_1) % 7) = (x % 7).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:47ms) (94ms) (977)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 24):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: x < 0.
  (* Pre-condition *)
  Have: x < y.
  (* Pre-condition *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((0 <= y) -> ((y % 3) = 0)).
  (* Invariant *)
  Have: ((y < 0) -> ((y % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y).
  (* Invariant *)
  Have: x <= (19 + y).
  (* Invariant *)
  Have: x <= (15 + y).
  (* Invariant *)
  Have: x <= 20000000.
}
Prove: (x % 7) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 25):
Let x_5 = -x.
Let x_6 = x_1 - x.
Let x_7 = -y_1.
Let x_8 = y - y_1.
Let x_9 = x_4 - x.
Let x_10 = y_4 - y_1.
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Pre-condition *)
  Have: x < y_1.
  (* Pre-condition *)
  Have: y_1 <= 20000001.
  (* Invariant *)
  Have: ((0 <= y_1) -> ((y_1 % 3) = 0)).
  (* Invariant *)
  Have: ((y_1 < 0) -> ((y_1 % 10) = 0)).
  (* Invariant *)
  Have: ((0 <= x) -> ((x % 10) = 0)).
  (* Invariant *)
  Have: x <= (16 + y_1).
  (* Invariant *)
  Have: x <= (19 + y_1).
  (* Invariant *)
  Have: x <= (15 + y_1).
  (* Invariant *)
  Have: x <= 20000000.
  (* Invariant *)
  Have: ((x < 0) -> ((x % 7) = 0)).
  (* Invariant *)
  Have: ((0 <= y_4) -> ((x_10 % 3) = (y_4 % 3))).
  (* Invariant *)
  Have: y_4 <= 20000001.
  (* Invariant *)
  Have: ((y_4 < 0) -> ((x_10 % 10) = (y_4 % 10))).
  (* Invariant *)
  Have: ((0 <= x_4) -> ((x_9 % 10) = (x_4 % 10))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: x_4 <= (16 + y_4).
  (* Invariant *)
  Have: x_4 < y_4.
  (* Invariant *)
  Have: x_4 <= (19 + y_4).
  (* Invariant *)
  Have: x_4 <= (15 + y_4).
  (* Invariant *)
  Have: x_4 <= 20000000.
  (* Invariant *)
  Have: ((x_4 < 0) -> ((x_9 % 7) = (x_4 % 7))).
  (* Invariant *)
  Have: x <= x_4.
  If x_4 < 0
  Then { Have: x_4 = x_2. Have: (7 + x_2) = x_1. }
  Else { Have: x_4 = x_3. Have: (10 + x_3) = x_1. }
  If y_4 < 0
  Then { Have: y_4 = y_2. Have: (10 + y) = y_2. }
  Else { Have: y_4 = y_3. Have: (3 + y_3) = y. }
  (* Invariant *)
  Have: ((0 <= y) -> ((x_8 % 3) = (y % 3))).
  (* Invariant *)
  Have: y <= 20000001.
  (* Invariant *)
  Have: ((y < 0) -> ((x_8 % 10) = (y % 10))).
  (* Invariant *)
  Have: ((0 <= x_1) -> ((x_6 % 10) = (x_1 % 10))).
  (* Invariant *)
  Have: x_1 <= y.
  (* Invariant *)
  Have: x_1 <= (16 + y).
  (* Invariant *)
  Have: x_1 < y.
  (* Invariant *)
  Have: x_1 <= (19 + y).
  (* Invariant *)
  Have: x_1 <= (15 + y).
  (* Invariant *)
  Have: x_1 <= 20000000.
  (* Invariant *)
  Have: ((x_1 < 0) -> ((x_6 % 7) = (x_1 % 7))).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (50320)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (4ms) (87)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Assertion (file out/17_0001/17_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Loop assigns (file out/17_0001/17_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/17_0001/17_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo17'.
  Callers assumptions might be imprecise.
