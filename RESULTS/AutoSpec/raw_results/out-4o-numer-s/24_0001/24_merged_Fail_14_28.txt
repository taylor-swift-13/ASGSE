[kernel] Parsing out/24_0001/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Failure] typed_hoo24_loop_invariant_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_2_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_4_preserved (Qed 3ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_6_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_7_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_8_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_10_preserved (Qed 5ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_11_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_11_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_12_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_12_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_13_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   14 / 28
  Qed:              12
  Alt-Ergo 2.5.4:    2 (7ms-7ms)
  Failed:           14
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 11):
Let x = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x).
Let x_1 = n / 2.
Let x_2 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x_2 = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x * x) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
}
Prove: (x_2 = x_1) \/ (((x_2 + (n / x_2)) / 2) = prev_guess_0).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 12):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_2).
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = prev_guess_0).
}
Prove: prev_guess_0 <= x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 13):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_2).
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x.
}
Prove: prev_guess_0 <= ((prev_guess_0 + x) / 2).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 14):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_2).
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x) / 2).
}
Prove: prev_guess_0 < n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 16):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = guess_0 - prev_guess_0.
Let a = IAbs.abs(x_2).
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = guess_0) \/ (x = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= ((guess_0 + prev_guess_0) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= x.
  (* Invariant *)
  Have: guess_0 <= ((guess_0 + x) / 2).
  (* Invariant *)
  Have: guess_0 < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.69ms) (10ms) (30014)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.69ms) (7ms) (62)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 17):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_1 = n / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_2).
Let a_1 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: IAbs.abs(x - prev_guess_0) <= x_1.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: IAbs.abs(x) <= x.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30927)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (96)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 18):
Let x = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let a = IAbs.abs(x - prev_guess_0).
Let x_1 = n / 2.
Let x_2 = prev_guess_0 - prev_guess_1.
Let a_1 = IAbs.abs(x_2).
Let a_2 = IAbs.abs(x_1).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a_2 <= x_1.
  (* Invariant *)
  Have: a_2 < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_1 * x_1) <= n.
  (* Invariant *)
  Have: (x_1 = prev_guess_0) \/ (x = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x = x_1) \/ (((x + (n / x)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: a <= x_1.
}
Prove: a < (2 * IAbs.abs(x)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 18):
Let x = n / 2.
Let a = IAbs.abs(x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: a <= x.
}
Prove: a < (2 * IAbs.abs(x)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 20):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let a = IAbs.abs(x_1 - guess_0).
Let x_2 = n / 2.
Let x_3 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_3).
Let a_2 = IAbs.abs(x_2).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_2 <= x_2.
  (* Invariant *)
  Have: a_2 < (2 * IAbs.abs(x_2)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (x_2 = guess_0) \/ (x_1 = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= ((guess_0 + prev_guess_0) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a_1 <= x_2.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (((x_1 + (n / x_1)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 <= ((guess_0 + x_1) / 2).
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x_1)).
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 21):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let a = IAbs.abs(x_1 - guess_0).
Let x_2 = n / 2.
Let x_3 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_3).
Let a_2 = IAbs.abs(x_2).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: a_2 <= x_2.
  (* Invariant *)
  Have: a_2 < (2 * IAbs.abs(x_2)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (x_2 = guess_0) \/ (x_1 = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= ((guess_0 + prev_guess_0) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a_1 <= x_2.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (((x_1 + (n / x_1)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 <= ((guess_0 + x_1) / 2).
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 21):
Let x = n / 2.
Let a = IAbs.abs(x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x)).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 22):
Let x = prev_guess_0 + (n / prev_guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 - prev_guess_0.
Let a = IAbs.abs(x_2).
Let x_3 = n / 2.
Let x_4 = prev_guess_0 - prev_guess_1.
Let a_1 = IAbs.abs(x_4).
Let a_2 = IAbs.abs(x_3).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: a_2 <= x_3.
  (* Invariant *)
  Have: a_2 < (2 * IAbs.abs(x_3)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (x_3 = prev_guess_0) \/ (x_1 = prev_guess_1).
  (* Invariant *)
  Have: prev_guess_1 <= prev_guess_0.
  (* Invariant *)
  Have: prev_guess_1 <= ((prev_guess_0 + prev_guess_1) / 2).
  (* Invariant *)
  Have: prev_guess_1 < n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: a_1 <= x_3.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Then *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: (x_1 = x_3) \/ (((x_1 + (n / x_1)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x_1.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x_1) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 2 <= x.
}
Prove: (x_2 * x_2) <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 22):
Let x = n / 2.
Let a = IAbs.abs(x).
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x)).
  (* Invariant *)
  Have: 2 <= n.
}
Prove: (x * x) <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 23):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 - guess_0.
Let a = IAbs.abs(x_2).
Let x_3 = n / 2.
Let x_4 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_4).
Let a_2 = IAbs.abs(x_3).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: a_2 <= x_3.
  (* Invariant *)
  Have: a_2 < (2 * IAbs.abs(x_3)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (x_3 = guess_0) \/ (x_1 = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= guess_0.
  (* Invariant *)
  Have: prev_guess_0 <= ((guess_0 + prev_guess_0) / 2).
  (* Invariant *)
  Have: prev_guess_0 < n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: a_1 <= x_3.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(guess_0)).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= n.
  (* Invariant *)
  Have: (guess_0 * guess_0) <= n.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: (x_1 = x_3) \/ (((x_1 + (n / x_1)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= x_1.
  (* Invariant *)
  Have: guess_0 <= ((guess_0 + x_1) / 2).
  (* Invariant *)
  Have: guess_0 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x_1)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 2 <= x.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
}
Prove: (x_1 * x_1) <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Assertion (file out/24_0001/24_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/24_0001/24_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0001/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
