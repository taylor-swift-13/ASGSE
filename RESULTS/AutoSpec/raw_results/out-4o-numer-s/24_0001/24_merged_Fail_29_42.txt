[kernel] Parsing out/24_0001/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 42 goals scheduled
[wp] [Failure] typed_hoo24_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_2_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_4_preserved (Qed 5ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_7_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_6_established (Qed 0.77ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_11_preserved (Qed 6ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_13_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_9_established (Qed 2ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_15_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] [Failure] typed_hoo24_loop_invariant_18_established (Qed 2ms) (Z3)
[wp] Proved goals:   29 / 42
  Qed:              27
  Alt-Ergo 2.5.4:    1 (7ms)
  Z3 4.8.12:         1 (10ms)
  Failed:            9
  Timeout:           4
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 11):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_3).
Let x_4 = x / 2.
Let x_5 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_6) /\
      is_sint32(x_5).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_6)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_5 <= prev_guess_0.
  (* Invariant *)
  Have: x_5 <= ((prev_guess_0 + x_5) / 2).
  (* Invariant *)
  Have: x_5 < n.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: x_5 != prev_guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= (x_2 * x_2).
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_3 * x_3) <= x.
}
Prove: (x_2 = x_4) \/ (((x_2 + (x / x_2)) / 2) = prev_guess_0).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 12):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_4).
Let x_5 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_6) /\
      is_sint32(x_5).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_6)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_5 <= prev_guess_0.
  (* Invariant *)
  Have: x_5 <= ((prev_guess_0 + x_5) / 2).
  (* Invariant *)
  Have: x_5 < n.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: x_5 != prev_guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= (x_2 * x_2).
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= x.
  (* Invariant *)
  Have: (x_2 = x_3) \/ (((x_2 + (x / x_2)) / 2) = prev_guess_0).
}
Prove: prev_guess_0 <= x_2.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 13):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_4).
Let x_5 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_6) /\
      is_sint32(x_5).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_6)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_5 <= prev_guess_0.
  (* Invariant *)
  Have: x_5 <= ((prev_guess_0 + x_5) / 2).
  (* Invariant *)
  Have: x_5 < n.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: x_5 != prev_guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= (x_2 * x_2).
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= x.
  (* Invariant *)
  Have: (x_2 = x_3) \/ (((x_2 + (x / x_2)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
}
Prove: prev_guess_0 <= ((prev_guess_0 + x_2) / 2).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 14):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_4).
Let x_5 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_6 = n / 2.
Let x_7 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_6) /\
      is_sint32(x_5).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_7.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: ((x_6 + (n / x_6)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_6)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_5 <= prev_guess_0.
  (* Invariant *)
  Have: x_5 <= ((prev_guess_0 + x_5) / 2).
  (* Invariant *)
  Have: x_5 < n.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: x_5 != prev_guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= (x_2 * x_2).
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= x.
  (* Invariant *)
  Have: (x_2 = x_3) \/ (((x_2 + (x / x_2)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x_2) / 2).
}
Prove: prev_guess_0 < x.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.77ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.77ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 17):
Let x = guess_0 * guess_0.
Let x_1 = guess_0 + (x / guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = guess_0 - x_2.
Let a = IAbs.abs(x_4).
Let x_5 = x_2 * x_2.
Let x_6 = (guess_0 + (n / guess_0)) / 2.
Let x_7 = n / 2.
Let x_8 = x_7 * x_7.
Let a_1 = IAbs.abs(x_7).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x_7) /\
      is_sint32(x_6).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_8.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: ((x_7 + (n / x_7)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_7.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_7)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_6 <= guess_0.
  (* Invariant *)
  Have: x_6 <= ((guess_0 + x_6) / 2).
  (* Invariant *)
  Have: x_6 < n.
  (* Invariant *)
  Have: (x_6 * x_6) <= n.
  (* Invariant *)
  Have: x_6 != guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= x.
  (* Invariant *)
  Have: (x_2 = x_3) \/ (((x_2 + (x / x_2)) / 2) = guess_0).
  (* Invariant *)
  Have: guess_0 <= x_2.
  (* Invariant *)
  Have: guess_0 <= ((guess_0 + x_2) / 2).
  (* Invariant *)
  Have: guess_0 < x.
}
Prove: x <= x_5.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 17):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
}
Prove: n <= (x * x).
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 18):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: n <= (x * x).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (30526)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (67)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 19):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: x <= n.
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 21):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x_2 * x_2.
Let x_4 = x / 2.
Let x_5 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_5).
Let x_6 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_7 = n / 2.
Let x_8 = x_7 * x_7.
Let a_1 = IAbs.abs(x_7).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_7) /\
      is_sint32(x_6).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_8.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: ((x_7 + (n / x_7)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_7.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_7)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_6 <= prev_guess_0.
  (* Invariant *)
  Have: x_6 <= ((prev_guess_0 + x_6) / 2).
  (* Invariant *)
  Have: x_6 < n.
  (* Invariant *)
  Have: (x_6 * x_6) <= n.
  (* Invariant *)
  Have: x_6 != prev_guess_0.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_5 * x_5) <= x.
  (* Invariant *)
  Have: (x_2 = x_4) \/ (((x_2 + (x / x_2)) / 2) = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x_2) / 2).
  (* Invariant *)
  Have: prev_guess_0 < x.
  (* Invariant *)
  Have: x <= x_3.
}
Prove: x_3 <= (2 * x).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 23):
Let x = prev_guess_0 * prev_guess_0.
Let x_1 = prev_guess_0 + (x / prev_guess_0).
Let x_2 = x_1 / 2.
Let x_3 = x_2 * x_2.
Let x_4 = x / 2.
Let x_5 = (x_2 + (x / x_2)) / 2.
Let x_6 = prev_guess_0 - x_2.
Let a = IAbs.abs(x_6).
Let x_7 = (prev_guess_0 + (n / prev_guess_0)) / 2.
Let x_8 = n / 2.
Let x_9 = x_8 * x_8.
Let a_1 = IAbs.abs(x_8).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(x_8) /\
      is_sint32(x_7).
  (* Goal *)
  When: x_7 != prev_guess_0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_9.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: ((x_8 + (n / x_8)) / 2) = 0.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 < (2 * IAbs.abs(x_8)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: x_7 <= prev_guess_0.
  (* Invariant *)
  Have: x_7 <= ((prev_guess_0 + x_7) / 2).
  (* Invariant *)
  Have: x_7 < n.
  (* Invariant *)
  Have: (x_7 * x_7) <= n.
  (* Invariant *)
  Have: n <= x.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(prev_guess_0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_6 * x_6) <= x.
  (* Invariant *)
  Have: (x_2 = x_4) \/ (x_5 = prev_guess_0).
  (* Invariant *)
  Have: prev_guess_0 <= x_2.
  (* Invariant *)
  Have: prev_guess_0 <= ((prev_guess_0 + x_2) / 2).
  (* Invariant *)
  Have: prev_guess_0 < x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x_3 <= (2 * x).
}
Prove: x_5 = prev_guess_0.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 23):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: ((x + (n / x)) / 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 24):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) = 0.
}
Prove: IAbs.abs(x) <= x.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32194)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 25):
Let x = n / 2.
Let a = IAbs.abs(x).
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) = 0.
  (* Invariant *)
  Have: a <= x.
}
Prove: a < (2 * IAbs.abs(x)).
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 28):
Let x = n / 2.
Let a = IAbs.abs(x).
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-3) <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: ((x + (n / x)) / 2) = 0.
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: a < (2 * IAbs.abs(x)).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Failed
[Why3 Error] anomaly: Not_found
Prover Alt-Ergo 2.5.4 returns Failed
[Why3 Error] anomaly: Not_found

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0001/24_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0001/24_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Assertion (file out/24_0001/24_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/24_0001/24_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0001/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
