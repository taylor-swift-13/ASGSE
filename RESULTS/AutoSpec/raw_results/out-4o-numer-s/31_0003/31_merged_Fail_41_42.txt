[kernel] Parsing out/31_0003/31_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 42 goals scheduled
[wp] [Timeout] typed_hoo31_loop_invariant_6_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   41 / 42
  Qed:              31
  Alt-Ergo 2.5.4:    8 (4ms-9ms-36ms)
  Z3 4.8.12:         2 (20ms-40ms)
  Timeout:           1
------------------------------------------------------------
  Function hoo31
------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 17):
Let x = 1 + (2 * R).
Let x_1 = x * x.
Let x_2 = 4 * R.
Let x_3 = R * R.
Let x_4 = 4 * x_3.
Let x_5 = v * v.
Let x_6 = v - 1.
Let x_7 = x_6 / 2.
Let x_8 = r + v.
Let x_9 = 1 + x_3 - r - v.
Let x_10 = R - 1.
Let x_11 = 2 + v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_11) /\
      is_sint32(r + v - 1) /\ is_sint32(x) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: x_8 <= x_3.
  (* Pre-condition *)
  Have: (r + v + (x_10 * x_10)) <= x_3.
  (* Pre-condition *)
  Have: 0 < x_8.
  (* Pre-condition *)
  Have: (x_9 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_8 <= (1 + x_3).
  (* Invariant *)
  Have: x_1 = (1 + x_2 + x_4).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x.
  (* Invariant *)
  Have: (1 + x_7 + (x_7 * x_7)) = v.
  (* Invariant *)
  Have: (1 + ((x_6 * x_6) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_7) * x_7)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_5 / 4)) <= x_3.
  (* Invariant *)
  Have: ((6 * v) + x_1) = (6 + x_2 + x_5 + x_4).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
}
Prove: (x_11 % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (44741)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (36ms) (1190)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 18):
Let x = 2 + v.
Let x_1 = 2 * R.
Let x_2 = 1 + x_1.
Let x_3 = x_2 * x_2.
Let x_4 = 4 * R.
Let x_5 = R * R.
Let x_6 = 4 * x_5.
Let x_7 = v * v.
Let x_8 = v - 1.
Let x_9 = x_8 / 2.
Let x_10 = r + v.
Let x_11 = 1 + x_5 - r - v.
Let x_12 = R - 1.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(r + v - 1) /\ is_sint32(x_2) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: x_10 <= x_5.
  (* Pre-condition *)
  Have: (r + v + (x_12 * x_12)) <= x_5.
  (* Pre-condition *)
  Have: 0 < x_10.
  (* Pre-condition *)
  Have: (x_11 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_10 <= (1 + x_5).
  (* Invariant *)
  Have: x_3 = (1 + x_4 + x_6).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: (1 + x_9 + (x_9 * x_9)) = v.
  (* Invariant *)
  Have: (1 + ((x_8 * x_8) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_9) * x_9)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_7 / 4)) <= x_5.
  (* Invariant *)
  Have: ((6 * v) + x_3) = (6 + x_4 + x_7 + x_6).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: v < x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34104)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (103)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 18):
Let x = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x * x) < A.
  (* Pre-condition *)
  Have: A <= (R * R).
  (* Pre-condition *)
  Have: (A % 2) = 1.
}
Prove: 0 <= R.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (30016)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (15)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 22):
Let x = 2 * R.
Let x_1 = 2 + v.
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 4 * R.
Let x_5 = R * R.
Let x_6 = 4 * x_5.
Let x_7 = v * v.
Let x_8 = v - 1.
Let x_9 = x_8 / 2.
Let x_10 = -v.
Let x_11 = 1 + x_5 - r - v.
Let x_12 = r + v.
Let x_13 = R - 1.
Let x_14 = (1 + v) / 2.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(r + v - 1) /\ is_sint32(x_2) /\ is_sint32(r - v) /\
      is_sint32(x_11).
  (* Pre-condition *)
  Have: x_12 <= x_5.
  (* Pre-condition *)
  Have: (r + v + (x_13 * x_13)) <= x_5.
  (* Pre-condition *)
  Have: 0 < x_12.
  (* Pre-condition *)
  Have: (x_11 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_3 = (1 + x_4 + x_6).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: (1 + x_9 + (x_9 * x_9)) = v.
  (* Invariant *)
  Have: (1 + ((x_8 * x_8) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_9) * x_9)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_7 / 4)) <= x_5.
  (* Invariant *)
  Have: ((6 * v) + x_3) = (6 + x_4 + x_7 + x_6).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: v < x.
}
Prove: (1 + x_14 + (x_14 * x_14)) = (2 * v).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 23):
Let x = 2 * R.
Let x_1 = 2 + v.
Let x_2 = r + v.
Let x_3 = 1 + v.
Let x_4 = x_3 / 2.
Let x_5 = x_4 * x_4.
Let x_6 = 1 + x.
Let x_7 = x_6 * x_6.
Let x_8 = 2 * v.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = v * v.
Let x_13 = x_4 + x_5.
Let x_14 = v - 1.
Let x_15 = x_14 / 2.
Let x_16 = v + x_10 - r - x_4 - x_5.
Let x_17 = r + x_4 + x_5.
Let x_18 = R - 1.
Let x_19 = v + x_10.
Let x_20 = -v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(x_6) /\ is_sint32(r - v) /\ is_sint32(r + x_4 + x_5 - v) /\
      is_sint32(x_16).
  (* Pre-condition *)
  Have: x_17 < x_19.
  (* Pre-condition *)
  Have: (r + x_4 + (x_18 * x_18) + x_5) < x_19.
  (* Pre-condition *)
  Have: v <= x_17.
  (* Pre-condition *)
  Have: (x_16 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_7 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: v <= (1 + r + x_4 + x_5).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_6.
  (* Invariant *)
  Have: (v + x_15 + (x_15 * x_15)) = x_13.
  (* Invariant *)
  Have: x_13 = (v + ((x_14 * x_14) / 4)).
  (* Invariant *)
  Have: (x_4 + x_5 + ((1 + x_15) * x_15)) = v.
  (* Invariant *)
  Have: v <= x_13.
  (* Invariant *)
  Have: (r + (x_12 / 4)) <= x_10.
  (* Invariant *)
  Have: (1 + x_4 + x_5) = x_8.
  (* Invariant *)
  Have: x_2 <= x_10.
  (* Invariant *)
  Have: ((4 * x_4) + x_7 + (4 * x_5)) = (2 + x_8 + x_9 + x_12 + x_11).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: v < x.
}
Prove: ((x_3 * x_3) / 4) = x_13.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (47247)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 24):
Let x = 1 + v.
Let x_1 = (x * x) / 4.
Let x_2 = x / 2.
Let x_3 = 2 * R.
Let x_4 = 2 + v.
Let x_5 = r + v.
Let x_6 = 1 + x_3.
Let x_7 = x_6 * x_6.
Let x_8 = 2 * v.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = v * v.
Let x_13 = v - 1.
Let x_14 = x_13 / 2.
Let x_15 = v + x_10 - r - x_1.
Let x_16 = r + x_1.
Let x_17 = R - 1.
Let x_18 = v + x_10.
Let x_19 = -v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_4) /\
      is_sint32(x_6) /\ is_sint32(r - v) /\ is_sint32(r + x_1 - v) /\
      is_sint32(x_15).
  (* Pre-condition *)
  Have: x_16 < x_18.
  (* Pre-condition *)
  Have: (r + (x_17 * x_17) + x_1) < x_18.
  (* Pre-condition *)
  Have: v <= x_16.
  (* Pre-condition *)
  Have: (x_15 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_7 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: v <= (1 + r + x_1).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_6.
  (* Invariant *)
  Have: x_1 = (v + x_14 + (x_14 * x_14)).
  (* Invariant *)
  Have: x_1 = (v + ((x_13 * x_13) / 4)).
  (* Invariant *)
  Have: (x_1 + ((1 + x_14) * x_14)) = v.
  (* Invariant *)
  Have: v <= x_1.
  (* Invariant *)
  Have: (r + (x_12 / 4)) <= x_10.
  (* Invariant *)
  Have: (1 + x_1) = x_8.
  (* Invariant *)
  Have: x_5 <= x_10.
  (* Invariant *)
  Have: (x_7 + (4 * x_1)) = (2 + x_8 + x_9 + x_12 + x_11).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_4 % 2) = 1.
  (* Invariant *)
  Have: v < x_3.
  (* Invariant *)
  Have: x_1 = (x_2 + (x_2 * x_2)).
}
Prove: (x_1 + ((1 + x_2) * x_2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (40ms) (102529)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 25):
Let x = 1 + v.
Let x_1 = x / 2.
Let x_2 = (1 + x_1) * x_1.
Let x_3 = 2 * R.
Let x_4 = 2 + v.
Let x_5 = r + v.
Let x_6 = 1 + x_3.
Let x_7 = x_6 * x_6.
Let x_8 = 2 * v.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = v * v.
Let x_13 = v + x_2.
Let x_14 = v - 1.
Let x_15 = x_14 / 2.
Let x_16 = v + x_10 + x_2 - r.
Let x_17 = R - 1.
Let x_18 = v + x_10 + x_2.
Let x_19 = -v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_4) /\
      is_sint32(x_6) /\ is_sint32(r - v) /\ is_sint32(r - v - x_2) /\
      is_sint32(x_16).
  (* Pre-condition *)
  Have: r < x_18.
  (* Pre-condition *)
  Have: (r + (x_17 * x_17)) < x_18.
  (* Pre-condition *)
  Have: x_13 <= r.
  (* Pre-condition *)
  Have: (x_16 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_7 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: x_13 <= (1 + r).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_6.
  (* Invariant *)
  Have: (v + x_15 + (x_15 * x_15) + x_2) = 0.
  (* Invariant *)
  Have: (v + ((x_14 * x_14) / 4) + x_2) = 0.
  (* Invariant *)
  Have: ((1 + x_15) * x_15) = x_13.
  (* Invariant *)
  Have: x_13 <= 0.
  (* Invariant *)
  Have: (r + (x_12 / 4)) <= x_10.
  (* Invariant *)
  Have: (x_8 + x_2) = 1.
  (* Invariant *)
  Have: x_5 <= x_10.
  (* Invariant *)
  Have: x_7 = (2 + x_8 + x_9 + x_12 + x_11 + (4 * x_2)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_4 % 2) = 1.
  (* Invariant *)
  Have: v < x_3.
  (* Invariant *)
  Have: (x_1 + (x_1 * x_1) + x_2) = 0.
  (* Invariant *)
  Have: (((x * x) / 4) + x_2) = 0.
}
Prove: x_2 <= 0.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35858)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (116)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 27):
Let x = 1 + v.
Let x_1 = x / 2.
Let x_2 = (1 + x_1) * x_1.
Let x_3 = 2 * R.
Let x_4 = 2 + v.
Let x_5 = R * R.
Let x_6 = v + x_5 + x_2.
Let x_7 = 2 * v.
Let x_8 = 1 + x_3.
Let x_9 = x_8 * x_8.
Let x_10 = 4 * R.
Let x_11 = 4 * x_5.
Let x_12 = v * v.
Let x_13 = v + x_2.
Let x_14 = v - 1.
Let x_15 = x_14 / 2.
Let x_16 = R - 1.
Let x_17 = -A.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(v) /\ is_sint32(x_4) /\
      is_sint32(x_8) /\ is_sint32(x_5 - A) /\ is_sint32(x_5 + x_2 - A) /\
      is_sint32(v + x_5 + x_2 - A).
  (* Pre-condition *)
  Have: (x_16 * x_16) < A.
  (* Pre-condition *)
  Have: A <= x_5.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: 0 <= A.
  (* Invariant *)
  Have: x_9 = (1 + x_10 + x_11).
  (* Invariant *)
  Have: A <= (1 + x_5).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_8.
  (* Invariant *)
  Have: (v + x_15 + (x_15 * x_15) + x_2) = 0.
  (* Invariant *)
  Have: (v + ((x_14 * x_14) / 4) + x_2) = 0.
  (* Invariant *)
  Have: ((1 + x_15) * x_15) = x_13.
  (* Invariant *)
  Have: x_13 <= 0.
  (* Invariant *)
  Have: (v + (x_12 / 4) + x_2) <= A.
  (* Invariant *)
  Have: (x_7 + x_2) = 1.
  (* Invariant *)
  Have: 0 < A.
  (* Invariant *)
  Have: x_9 = (2 + x_7 + x_10 + x_12 + x_11 + (4 * x_2)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: A <= x_6.
  (* Invariant *)
  Have: A <= (x_7 + x_5 + x_2).
  (* Then *)
  Have: A < x_6.
  (* Invariant *)
  Have: (x_4 % 2) = 1.
  (* Invariant *)
  Have: v < x_3.
  (* Invariant *)
  Have: (x_1 + (x_1 * x_1) + x_2) = 0.
  (* Invariant *)
  Have: (((x * x) / 4) + x_2) = 0.
  (* Invariant *)
  Have: x_2 <= 0.
}
Prove: (((x_4 * x_4) / 4) + x_2) <= A.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (40637)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (111)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 28):
Let x = 2 + v.
Let x_1 = R * R.
Let x_2 = 1 + v.
Let x_3 = x_2 / 2.
Let x_4 = (1 + x_3) * x_3.
Let x_5 = 2 * R.
Let x_6 = r + v.
Let x_7 = 1 + x_5.
Let x_8 = x_7 * x_7.
Let x_9 = 2 * v.
Let x_10 = 4 * R.
Let x_11 = 4 * x_1.
Let x_12 = v * v.
Let x_13 = v + x_4.
Let x_14 = v - 1.
Let x_15 = x_14 / 2.
Let x_16 = v + x_1 + x_4 - r.
Let x_17 = R - 1.
Let x_18 = v + x_1 + x_4.
Let x_19 = -v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_7) /\ is_sint32(r - v) /\ is_sint32(r - v - x_4) /\
      is_sint32(x_16).
  (* Pre-condition *)
  Have: r < x_18.
  (* Pre-condition *)
  Have: (r + (x_17 * x_17)) < x_18.
  (* Pre-condition *)
  Have: x_13 <= r.
  (* Pre-condition *)
  Have: (x_16 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_8 = (1 + x_10 + x_11).
  (* Invariant *)
  Have: x_13 <= (1 + r).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_7.
  (* Invariant *)
  Have: (v + x_15 + (x_15 * x_15) + x_4) = 0.
  (* Invariant *)
  Have: (v + ((x_14 * x_14) / 4) + x_4) = 0.
  (* Invariant *)
  Have: ((1 + x_15) * x_15) = x_13.
  (* Invariant *)
  Have: x_13 <= 0.
  (* Invariant *)
  Have: (r + (x_12 / 4)) <= x_1.
  (* Invariant *)
  Have: (x_9 + x_4) = 1.
  (* Invariant *)
  Have: x_6 <= x_1.
  (* Invariant *)
  Have: x_8 = (2 + x_9 + x_10 + x_12 + x_11 + (4 * x_4)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: v < x_5.
  (* Invariant *)
  Have: (x_3 + (x_3 * x_3) + x_4) = 0.
  (* Invariant *)
  Have: (((x_2 * x_2) / 4) + x_4) = 0.
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: (r + ((x * x) / 4)) <= (v + x_1).
}
Prove: x_13 = (-1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (40470)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (116)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 30):
Let x = R * R.
Let x_1 = x - r.
Let x_2 = R - 1.
Let x_3 = 1 + (2 * R).
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: r < x.
  (* Pre-condition *)
  Have: (r + (x_2 * x_2)) < x.
  (* Pre-condition *)
  Have: 0 <= r.
  (* Pre-condition *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
}
Prove: (x_3 * x_3) = (1 + (4 * R) + (4 * x)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (9607)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 35):
Let x = 1 + (2 * R).
Let x_1 = R * R.
Let x_2 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(x) /\ is_sint32(x_1 - A).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_2 * x_2) < A.
  (* Pre-condition *)
  Have: A <= x_1.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x * x) = (1 + (4 * R) + (4 * x_1)).
}
Prove: A <= (1 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (30759)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (26)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/31_0003/31_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/31_0003/31_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/31_0003/31_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo31'.
  Callers assumptions might be imprecise.
