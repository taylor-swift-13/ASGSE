[kernel] Parsing out/31_0003/31_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 46 goals scheduled
[wp] [Timeout] typed_hoo31_loop_invariant_6_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_hoo31_loop_invariant_15_established (Qed 2ms) (Z3)
[wp] Proved goals:   44 / 46
  Qed:              33
  Alt-Ergo 2.5.4:   10
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function hoo31
------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 17):
Let x = 1 + (2 * R).
Let x_1 = x * x.
Let x_2 = 4 * R.
Let x_3 = R * R.
Let x_4 = 4 * x_3.
Let x_5 = v * v.
Let x_6 = v - 1.
Let x_7 = x_6 / 2.
Let x_8 = v / 2.
Let x_9 = r + v - 1.
Let x_10 = r + v.
Let x_11 = 1 + x_3 - r - v.
Let x_12 = R - 1.
Let x_13 = 2 + v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_13) /\
      is_sint32(x_9) /\ is_sint32(x) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: x_10 <= x_3.
  (* Pre-condition *)
  Have: (r + v + (x_12 * x_12)) <= x_3.
  (* Pre-condition *)
  Have: 0 < x_10.
  (* Pre-condition *)
  Have: (x_11 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_10 <= (1 + x_3).
  (* Invariant *)
  Have: (x_9 % 2) = 0.
  (* Invariant *)
  Have: x_1 = (1 + x_2 + x_4).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x.
  (* Invariant *)
  Have: (1 + ((x_8 - 1) * x_8)) = v.
  (* Invariant *)
  Have: (1 + x_7 + (x_7 * x_7)) = v.
  (* Invariant *)
  Have: (1 + ((x_6 * x_6) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_7) * x_7)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_5 / 4)) <= x_3.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: ((6 * v) + x_1) = (6 + x_2 + x_5 + x_4).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
}
Prove: (x_13 % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (49929)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (56ms) (2124)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 18):
Let x = 2 + v.
Let x_1 = 2 * R.
Let x_2 = 1 + x_1.
Let x_3 = x_2 * x_2.
Let x_4 = 4 * R.
Let x_5 = R * R.
Let x_6 = 4 * x_5.
Let x_7 = v * v.
Let x_8 = v - 1.
Let x_9 = x_8 / 2.
Let x_10 = v / 2.
Let x_11 = r + v - 1.
Let x_12 = r + v.
Let x_13 = 1 + x_5 - r - v.
Let x_14 = R - 1.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_11) /\ is_sint32(x_2) /\ is_sint32(x_13).
  (* Pre-condition *)
  Have: x_12 <= x_5.
  (* Pre-condition *)
  Have: (r + v + (x_14 * x_14)) <= x_5.
  (* Pre-condition *)
  Have: 0 < x_12.
  (* Pre-condition *)
  Have: (x_13 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: x_12 <= (1 + x_5).
  (* Invariant *)
  Have: (x_11 % 2) = 0.
  (* Invariant *)
  Have: x_3 = (1 + x_4 + x_6).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: (1 + ((x_10 - 1) * x_10)) = v.
  (* Invariant *)
  Have: (1 + x_9 + (x_9 * x_9)) = v.
  (* Invariant *)
  Have: (1 + ((x_8 * x_8) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_9) * x_9)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_7 / 4)) <= x_5.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: ((6 * v) + x_3) = (6 + x_4 + x_7 + x_6).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: v < x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34784)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (8ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 18):
Let x = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x * x) < A.
  (* Pre-condition *)
  Have: A <= (R * R).
  (* Pre-condition *)
  Have: (A % 2) = 1.
}
Prove: 0 <= R.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (30016)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (15)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 22):
Let x = 2 * R.
Let x_1 = 2 + v.
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 4 * R.
Let x_5 = R * R.
Let x_6 = 4 * x_5.
Let x_7 = v * v.
Let x_8 = v - 1.
Let x_9 = x_8 / 2.
Let x_10 = v / 2.
Let x_11 = r + v - 1.
Let x_12 = -v.
Let x_13 = 1 + x_5 - r - v.
Let x_14 = r + v.
Let x_15 = R - 1.
Let x_16 = x_1 / 2.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(x_11) /\ is_sint32(x_2) /\ is_sint32(r - v) /\
      is_sint32(x_13).
  (* Pre-condition *)
  Have: x_14 <= x_5.
  (* Pre-condition *)
  Have: (r + v + (x_15 * x_15)) <= x_5.
  (* Pre-condition *)
  Have: 0 < x_14.
  (* Pre-condition *)
  Have: (x_13 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_11 % 2) = 0.
  (* Invariant *)
  Have: x_3 = (1 + x_4 + x_6).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: (1 + ((x_10 - 1) * x_10)) = v.
  (* Invariant *)
  Have: (1 + x_9 + (x_9 * x_9)) = v.
  (* Invariant *)
  Have: (1 + ((x_8 * x_8) / 4)) = v.
  (* Invariant *)
  Have: (v + ((1 + x_9) * x_9)) = 1.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: (r + (x_7 / 4)) <= x_5.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: ((6 * v) + x_3) = (6 + x_4 + x_7 + x_6).
  (* Invariant *)
  Have: 0 <= r.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: v < x.
}
Prove: (1 + ((x_16 - 1) * x_16)) = (2 * v).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 23):
Let x = 2 * R.
Let x_1 = 2 + v.
Let x_2 = r + v.
Let x_3 = x_1 / 2.
Let x_4 = (x_3 - 1) * x_3.
Let x_5 = 1 + x.
Let x_6 = x_5 * x_5.
Let x_7 = 2 * v.
Let x_8 = 4 * R.
Let x_9 = R * R.
Let x_10 = 4 * x_9.
Let x_11 = v * v.
Let x_12 = v - 1.
Let x_13 = x_12 / 2.
Let x_14 = v / 2.
Let x_15 = -v.
Let x_16 = r + x_4 - v.
Let x_17 = v + x_9 - r - x_4.
Let x_18 = r + x_4.
Let x_19 = R - 1.
Let x_20 = v + x_9.
Let x_21 = (1 + v) / 2.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(x_5) /\ is_sint32(r - v) /\ is_sint32(x_16) /\
      is_sint32(x_17).
  (* Pre-condition *)
  Have: x_18 < x_20.
  (* Pre-condition *)
  Have: (r + (x_19 * x_19) + x_4) < x_20.
  (* Pre-condition *)
  Have: v <= x_18.
  (* Pre-condition *)
  Have: (x_17 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_16 % 2) = 0.
  (* Invariant *)
  Have: x_6 = (1 + x_8 + x_10).
  (* Invariant *)
  Have: v <= (1 + r + x_4).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_5.
  (* Invariant *)
  Have: x_4 = (v + ((x_14 - 1) * x_14)).
  (* Invariant *)
  Have: x_4 = (v + x_13 + (x_13 * x_13)).
  (* Invariant *)
  Have: x_4 = (v + ((x_12 * x_12) / 4)).
  (* Invariant *)
  Have: (x_4 + ((1 + x_13) * x_13)) = v.
  (* Invariant *)
  Have: v <= x_4.
  (* Invariant *)
  Have: (r + (x_11 / 4)) <= x_9.
  (* Invariant *)
  Have: (1 + x_4) = x_7.
  (* Invariant *)
  Have: x_2 <= x_9.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: (x_6 + (4 * x_4)) = (2 + x_7 + x_8 + x_11 + x_10).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: v < x.
}
Prove: x_4 = (x_21 + (x_21 * x_21)).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (100ms) (212943)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (89ms) (3330)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 24):
Let x = 2 + v.
Let x_1 = x / 2.
Let x_2 = 1 + v.
Let x_3 = x_2 / 2.
Let x_4 = x_3 * x_3.
Let x_5 = x_3 + x_4.
Let x_6 = 2 * R.
Let x_7 = r + v.
Let x_8 = 1 + x_6.
Let x_9 = x_8 * x_8.
Let x_10 = 2 * v.
Let x_11 = 4 * R.
Let x_12 = R * R.
Let x_13 = 4 * x_12.
Let x_14 = v * v.
Let x_15 = v - 1.
Let x_16 = x_15 / 2.
Let x_17 = v / 2.
Let x_18 = -v.
Let x_19 = r + x_3 + x_4 - v.
Let x_20 = v + x_12 - r - x_3 - x_4.
Let x_21 = r + x_3 + x_4.
Let x_22 = R - 1.
Let x_23 = v + x_12.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_8) /\ is_sint32(r - v) /\ is_sint32(x_19) /\
      is_sint32(x_20).
  (* Pre-condition *)
  Have: x_21 < x_23.
  (* Pre-condition *)
  Have: (r + x_3 + (x_22 * x_22) + x_4) < x_23.
  (* Pre-condition *)
  Have: v <= x_21.
  (* Pre-condition *)
  Have: (x_20 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_19 % 2) = 0.
  (* Invariant *)
  Have: x_9 = (1 + x_11 + x_13).
  (* Invariant *)
  Have: v <= (1 + r + x_3 + x_4).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_8.
  (* Invariant *)
  Have: x_5 = (v + ((x_17 - 1) * x_17)).
  (* Invariant *)
  Have: (v + x_16 + (x_16 * x_16)) = x_5.
  (* Invariant *)
  Have: x_5 = (v + ((x_15 * x_15) / 4)).
  (* Invariant *)
  Have: (x_3 + x_4 + ((1 + x_16) * x_16)) = v.
  (* Invariant *)
  Have: v <= x_5.
  (* Invariant *)
  Have: (r + (x_14 / 4)) <= x_12.
  (* Invariant *)
  Have: (1 + x_3 + x_4) = x_10.
  (* Invariant *)
  Have: x_7 <= x_12.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: ((4 * x_3) + x_9 + (4 * x_4)) = (2 + x_10 + x_11 + x_14 + x_13).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: v < x_6.
  (* Invariant *)
  Have: ((x_1 - 1) * x_1) = x_5.
}
Prove: ((x_2 * x_2) / 4) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (52882)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 25):
Let x = 1 + v.
Let x_1 = (x * x) / 4.
Let x_2 = x / 2.
Let x_3 = 2 + v.
Let x_4 = x_3 / 2.
Let x_5 = 2 * R.
Let x_6 = r + v.
Let x_7 = 1 + x_5.
Let x_8 = x_7 * x_7.
Let x_9 = 2 * v.
Let x_10 = 4 * R.
Let x_11 = R * R.
Let x_12 = 4 * x_11.
Let x_13 = v * v.
Let x_14 = v - 1.
Let x_15 = x_14 / 2.
Let x_16 = v / 2.
Let x_17 = -v.
Let x_18 = r + x_1 - v.
Let x_19 = v + x_11 - r - x_1.
Let x_20 = r + x_1.
Let x_21 = R - 1.
Let x_22 = v + x_11.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_3) /\
      is_sint32(x_7) /\ is_sint32(r - v) /\ is_sint32(x_18) /\
      is_sint32(x_19).
  (* Pre-condition *)
  Have: x_20 < x_22.
  (* Pre-condition *)
  Have: (r + (x_21 * x_21) + x_1) < x_22.
  (* Pre-condition *)
  Have: v <= x_20.
  (* Pre-condition *)
  Have: (x_19 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_18 % 2) = 0.
  (* Invariant *)
  Have: x_8 = (1 + x_10 + x_12).
  (* Invariant *)
  Have: v <= (1 + r + x_1).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_7.
  (* Invariant *)
  Have: x_1 = (v + ((x_16 - 1) * x_16)).
  (* Invariant *)
  Have: x_1 = (v + x_15 + (x_15 * x_15)).
  (* Invariant *)
  Have: x_1 = (v + ((x_14 * x_14) / 4)).
  (* Invariant *)
  Have: (x_1 + ((1 + x_15) * x_15)) = v.
  (* Invariant *)
  Have: v <= x_1.
  (* Invariant *)
  Have: (r + (x_13 / 4)) <= x_11.
  (* Invariant *)
  Have: (1 + x_1) = x_9.
  (* Invariant *)
  Have: x_6 <= x_11.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: (x_8 + (4 * x_1)) = (2 + x_9 + x_10 + x_13 + x_12).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_3 % 2) = 1.
  (* Invariant *)
  Have: v < x_5.
  (* Invariant *)
  Have: x_1 = ((x_4 - 1) * x_4).
  (* Invariant *)
  Have: x_1 = (x_2 + (x_2 * x_2)).
}
Prove: (x_1 + ((1 + x_2) * x_2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (60ms) (161573)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (99ms) (4059)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 26):
Let x = 1 + v.
Let x_1 = x / 2.
Let x_2 = (1 + x_1) * x_1.
Let x_3 = 2 + v.
Let x_4 = x_3 / 2.
Let x_5 = 2 * R.
Let x_6 = r + v.
Let x_7 = 1 + x_5.
Let x_8 = x_7 * x_7.
Let x_9 = 2 * v.
Let x_10 = 4 * R.
Let x_11 = R * R.
Let x_12 = 4 * x_11.
Let x_13 = v * v.
Let x_14 = v + x_2.
Let x_15 = v - 1.
Let x_16 = x_15 / 2.
Let x_17 = v / 2.
Let x_18 = -v.
Let x_19 = r - v - x_2.
Let x_20 = v + x_11 + x_2 - r.
Let x_21 = R - 1.
Let x_22 = v + x_11 + x_2.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_3) /\
      is_sint32(x_7) /\ is_sint32(r - v) /\ is_sint32(x_19) /\
      is_sint32(x_20).
  (* Pre-condition *)
  Have: r < x_22.
  (* Pre-condition *)
  Have: (r + (x_21 * x_21)) < x_22.
  (* Pre-condition *)
  Have: x_14 <= r.
  (* Pre-condition *)
  Have: (x_20 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_19 % 2) = 0.
  (* Invariant *)
  Have: x_8 = (1 + x_10 + x_12).
  (* Invariant *)
  Have: x_14 <= (1 + r).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_7.
  (* Invariant *)
  Have: (v + ((x_17 - 1) * x_17) + x_2) = 0.
  (* Invariant *)
  Have: (v + x_16 + (x_16 * x_16) + x_2) = 0.
  (* Invariant *)
  Have: (v + ((x_15 * x_15) / 4) + x_2) = 0.
  (* Invariant *)
  Have: ((1 + x_16) * x_16) = x_14.
  (* Invariant *)
  Have: x_14 <= 0.
  (* Invariant *)
  Have: (r + (x_13 / 4)) <= x_11.
  (* Invariant *)
  Have: (x_9 + x_2) = 1.
  (* Invariant *)
  Have: x_6 <= x_11.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: x_8 = (2 + x_9 + x_10 + x_13 + x_12 + (4 * x_2)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_3 % 2) = 1.
  (* Invariant *)
  Have: v < x_5.
  (* Invariant *)
  Have: (((x_4 - 1) * x_4) + x_2) = 0.
  (* Invariant *)
  Have: (x_1 + (x_1 * x_1) + x_2) = 0.
  (* Invariant *)
  Have: (((x * x) / 4) + x_2) = 0.
}
Prove: x_2 <= 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (36958)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 28):
Let x = 1 + v.
Let x_1 = x / 2.
Let x_2 = (1 + x_1) * x_1.
Let x_3 = 2 + v.
Let x_4 = x_3 / 2.
Let x_5 = 2 * R.
Let x_6 = R * R.
Let x_7 = v + x_6 + x_2.
Let x_8 = 2 * v.
Let x_9 = 1 + x_5.
Let x_10 = x_9 * x_9.
Let x_11 = 4 * R.
Let x_12 = 4 * x_6.
Let x_13 = v * v.
Let x_14 = -A.
Let x_15 = v + x_6 + x_2 - A.
Let x_16 = v + x_2.
Let x_17 = v - 1.
Let x_18 = x_17 / 2.
Let x_19 = v / 2.
Let x_20 = x_6 - A.
Let x_21 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(v) /\ is_sint32(x_3) /\
      is_sint32(x_9) /\ is_sint32(x_20) /\ is_sint32(x_6 + x_2 - A) /\
      is_sint32(x_15).
  (* Pre-condition *)
  Have: (x_21 * x_21) < A.
  (* Pre-condition *)
  Have: A <= x_6.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (x_20 % 2) = 0.
  (* Invariant *)
  Have: x_10 = (1 + x_11 + x_12).
  (* Invariant *)
  Have: A <= (1 + x_6).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_9.
  (* Invariant *)
  Have: (v + ((x_19 - 1) * x_19) + x_2) = 0.
  (* Invariant *)
  Have: (v + x_18 + (x_18 * x_18) + x_2) = 0.
  (* Invariant *)
  Have: (v + ((x_17 * x_17) / 4) + x_2) = 0.
  (* Invariant *)
  Have: ((1 + x_18) * x_18) = x_16.
  (* Invariant *)
  Have: x_16 <= 0.
  (* Invariant *)
  Have: (v + (x_13 / 4) + x_2) <= A.
  (* Invariant *)
  Have: (x_8 + x_2) = 1.
  (* Invariant *)
  Have: 0 < A.
  (* Invariant *)
  Have: (x_15 % 2) = 0.
  (* Invariant *)
  Have: x_10 = (2 + x_8 + x_11 + x_13 + x_12 + (4 * x_2)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: A <= x_7.
  (* Invariant *)
  Have: A <= (x_8 + x_6 + x_2).
  (* Then *)
  Have: A < x_7.
  (* Invariant *)
  Have: (x_3 % 2) = 1.
  (* Invariant *)
  Have: v < x_5.
  (* Invariant *)
  Have: (((x_4 - 1) * x_4) + x_2) = 0.
  (* Invariant *)
  Have: (x_1 + (x_1 * x_1) + x_2) = 0.
  (* Invariant *)
  Have: (((x * x) / 4) + x_2) = 0.
  (* Invariant *)
  Have: x_2 <= 0.
}
Prove: (((x_3 * x_3) / 4) + x_2) <= A.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (43843)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (7ms) (145)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 29):
Let x = 2 + v.
Let x_1 = R * R.
Let x_2 = 1 + v.
Let x_3 = x_2 / 2.
Let x_4 = (1 + x_3) * x_3.
Let x_5 = x / 2.
Let x_6 = 2 * R.
Let x_7 = r + v.
Let x_8 = 1 + x_6.
Let x_9 = x_8 * x_8.
Let x_10 = 2 * v.
Let x_11 = 4 * R.
Let x_12 = 4 * x_1.
Let x_13 = v * v.
Let x_14 = v + x_4.
Let x_15 = v - 1.
Let x_16 = x_15 / 2.
Let x_17 = v / 2.
Let x_18 = -v.
Let x_19 = r - v - x_4.
Let x_20 = v + x_1 + x_4 - r.
Let x_21 = R - 1.
Let x_22 = v + x_1 + x_4.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_8) /\ is_sint32(r - v) /\ is_sint32(x_19) /\
      is_sint32(x_20).
  (* Pre-condition *)
  Have: r < x_22.
  (* Pre-condition *)
  Have: (r + (x_21 * x_21)) < x_22.
  (* Pre-condition *)
  Have: x_14 <= r.
  (* Pre-condition *)
  Have: (x_20 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_19 % 2) = 0.
  (* Invariant *)
  Have: x_9 = (1 + x_11 + x_12).
  (* Invariant *)
  Have: x_14 <= (1 + r).
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: v <= x_8.
  (* Invariant *)
  Have: (v + ((x_17 - 1) * x_17) + x_4) = 0.
  (* Invariant *)
  Have: (v + x_16 + (x_16 * x_16) + x_4) = 0.
  (* Invariant *)
  Have: (v + ((x_15 * x_15) / 4) + x_4) = 0.
  (* Invariant *)
  Have: ((1 + x_16) * x_16) = x_14.
  (* Invariant *)
  Have: x_14 <= 0.
  (* Invariant *)
  Have: (r + (x_13 / 4)) <= x_1.
  (* Invariant *)
  Have: (x_10 + x_4) = 1.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: x_9 = (2 + x_10 + x_11 + x_13 + x_12 + (4 * x_4)).
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Then *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: v < x_6.
  (* Invariant *)
  Have: (((x_5 - 1) * x_5) + x_4) = 0.
  (* Invariant *)
  Have: (x_3 + (x_3 * x_3) + x_4) = 0.
  (* Invariant *)
  Have: (((x_2 * x_2) / 4) + x_4) = 0.
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: (r + ((x * x) / 4)) <= (v + x_1).
}
Prove: x_14 = (-1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (44324)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (9ms) (151)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 31):
Let x = R * R.
Let x_1 = R - 1.
Let x_2 = x - A.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(1 + (2 * R)) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_1 * x_1) < A.
  (* Pre-condition *)
  Have: A <= x.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
}
Prove: (x_2 % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 32):
Let x = R * R.
Let x_1 = x - r.
Let x_2 = R - 1.
Let x_3 = 1 + (2 * R).
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: r < x.
  (* Pre-condition *)
  Have: (r + (x_2 * x_2)) < x.
  (* Pre-condition *)
  Have: 0 <= r.
  (* Pre-condition *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (r % 2) = 0.
}
Prove: (x_3 * x_3) = (1 + (4 * R) + (4 * x)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (9655)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 37):
Let x = 1 + (2 * R).
Let x_1 = R * R.
Let x_2 = x_1 - A.
Let x_3 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_3 * x_3) < A.
  (* Pre-condition *)
  Have: A <= x_1.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: 0 <= R.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (x * x) = (1 + (4 * R) + (4 * x_1)).
}
Prove: A <= (1 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30977)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0003/31_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0003/31_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/31_0003/31_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/31_0003/31_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/31_0003/31_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo31'.
  Callers assumptions might be imprecise.
