[kernel] Parsing out/35_0005/35_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 38 goals scheduled
[wp] [Timeout] typed_hoo35_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_3_established (Qed 0.70ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_4_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_6_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_10_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_10_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_13_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_17_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_18_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   28 / 38
  Qed:              15
  Alt-Ergo 2.5.4:    7 (2ms-18ms-80ms)
  Z3 4.8.12:         6
  Timeout:          10
------------------------------------------------------------
  Function hoo35
------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 14):
Let x = n / prev_guess_0.
Let x_1 = prev_guess_0 - x.
Let x_2 = prev_guess_1 - prev_guess_0.
Let x_3 = -prev_guess_1.
Let x_4 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_4).
Let x_5 = prev_guess_0 * prev_guess_0.
Let x_6 = n / 2.
Let x_7 = n / x_6.
Let x_8 = x_6 - x_7.
Let x_9 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Let x_10 = (prev_guess_0 + x) / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_9 <= (n + x_6).
  (* Invariant *)
  Have: (x_9 / 2) != 0.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_7).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: (((n * x_6) / x_6) + (x_8 * x_8)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_5 <= (n + prev_guess_0).
  (* Invariant *)
  Have: ((x_4 * x_4) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_2 * x_2) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_1 * x_1)) <= n.
}
Prove: x_10 != prev_guess_0.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 14):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Pre-condition *) Have: 0 < n.
}
Prove: x != 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.70ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.70ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 15):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = guess_0 - x.
Let x_3 = prev_guess_0 - guess_0.
Let x_4 = -prev_guess_0.
Let x_5 = guess_0 - prev_guess_0.
Let a = IAbs.abs(x_5).
Let x_6 = guess_0 * guess_0.
Let x_7 = n / 2.
Let x_8 = n / x_7.
Let x_9 = x_7 - x_8.
Let x_10 = x_7 * x_7.
Let a_1 = IAbs.abs(x_7).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_7) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_10.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_10 <= (n + x_7).
  (* Invariant *)
  Have: (x_10 / 2) != 0.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_8).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_10 <= n.
  (* Invariant *)
  Have: (((n * x_7) / x_7) + (x_9 * x_9)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_6 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_6 <= (guess_0 + n).
  (* Invariant *)
  Have: ((x_5 * x_5) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_2 * x_2)) <= n.
  (* Invariant *)
  Have: x_1 != guess_0.
}
Prove: x_7 <= (x_1 * x_1).
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 15):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
}
Prove: x <= (x * x).
Prover Z3 4.8.12 returns Valid (Qed:0.78ms) (20ms) (33163)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.78ms) (7ms) (69)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 16):
Let x = n / 2.
Let x_1 = n / guess_0.
Let x_2 = (guess_0 + x_1) / 2.
Let x_3 = guess_0 - x_1.
Let x_4 = prev_guess_0 - guess_0.
Let x_5 = -prev_guess_0.
Let x_6 = guess_0 - prev_guess_0.
Let a = IAbs.abs(x_6).
Let x_7 = guess_0 * guess_0.
Let x_8 = n / x.
Let x_9 = x - x_8.
Let x_10 = x * x.
Let a_1 = IAbs.abs(x).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_10.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_10 <= (n + x).
  (* Invariant *)
  Have: (x_10 / 2) != 0.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_8).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_10 <= n.
  (* Invariant *)
  Have: (((n * x) / x) + (x_9 * x_9)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_7 <= (guess_0 + n).
  (* Invariant *)
  Have: ((x_6 * x_6) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x_1 - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_4 * x_4) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_3 * x_3)) <= n.
  (* Invariant *)
  Have: x_2 != guess_0.
  (* Invariant *)
  Have: x <= (x_2 * x_2).
}
Prove: x_2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (49213)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 16):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= (x * x).
}
Prove: x <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (59)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 17):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = n / 2.
Let x_3 = x_1 * x_1.
Let x_4 = guess_0 - x.
Let x_5 = prev_guess_0 - guess_0.
Let x_6 = -prev_guess_0.
Let x_7 = guess_0 - prev_guess_0.
Let a = IAbs.abs(x_7).
Let x_8 = guess_0 * guess_0.
Let x_9 = n / x_2.
Let x_10 = x_2 - x_9.
Let x_11 = x_2 * x_2.
Let a_1 = IAbs.abs(x_2).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= x_11.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_11 <= (n + x_2).
  (* Invariant *)
  Have: (x_11 / 2) != 0.
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_9).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_11 <= n.
  (* Invariant *)
  Have: (((n * x_2) / x_2) + (x_10 * x_10)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_2 <= x_8.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_8 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_8 <= (guess_0 + n).
  (* Invariant *)
  Have: ((x_7 * x_7) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_4 * x_4)) <= n.
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: x_3 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 17):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 18):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = x_1 * x_1.
Let x_3 = n / 2.
Let x_4 = prev_guess_0 - x.
Let x_5 = prev_guess_1 - prev_guess_0.
Let x_6 = -prev_guess_1.
Let x_7 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_7).
Let x_8 = prev_guess_0 * prev_guess_0.
Let x_9 = n + prev_guess_0.
Let x_10 = n / x_3.
Let x_11 = x_3 - x_10.
Let x_12 = x_3 * x_3.
Let a_1 = IAbs.abs(x_3).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= x_12.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_12 <= (n + x_3).
  (* Invariant *)
  Have: (x_12 / 2) != 0.
  (* Invariant *)
  Have: x_3 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_10).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_12 <= n.
  (* Invariant *)
  Have: (((n * x_3) / x_3) + (x_11 * x_11)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_3 <= x_8.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_8 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: ((x_7 * x_7) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_5 * x_5) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_4 * x_4)) <= n.
  (* Invariant *)
  Have: x_1 != prev_guess_0.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_2 <= n.
}
Prove: x_2 <= x_9.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (2ms) (96)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 19):
Let x = n / guess_0.
Let x_1 = (guess_0 + x) / 2.
Let x_2 = x_1 * x_1.
Let x_3 = guess_0 + n.
Let x_4 = n / 2.
Let x_5 = guess_0 - x.
Let x_6 = prev_guess_0 - guess_0.
Let x_7 = -prev_guess_0.
Let x_8 = guess_0 - prev_guess_0.
Let a = IAbs.abs(x_8).
Let x_9 = guess_0 * guess_0.
Let x_10 = n / x_4.
Let x_11 = x_4 - x_10.
Let x_12 = x_4 * x_4.
Let a_1 = IAbs.abs(x_4).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= x_12.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_12 <= (n + x_4).
  (* Invariant *)
  Have: (x_12 / 2) != 0.
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_10).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_12 <= n.
  (* Invariant *)
  Have: (((n * x_4) / x_4) + (x_11 * x_11)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_4 <= x_9.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: x_9 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_9 <= x_3.
  (* Invariant *)
  Have: ((x_8 * x_8) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_6 * x_6) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_5 * x_5)) <= n.
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: x_2 <= (n + x_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (49685)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (80ms) (1540)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 19):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: x_1 <= (n + x).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30626)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (111)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 21):
Let x = n / prev_guess_0.
Let x_1 = (prev_guess_0 + x) / 2.
Let x_2 = x_1 * x_1.
Let x_3 = n + prev_guess_0.
Let x_4 = n / 2.
Let x_5 = prev_guess_0 - x.
Let x_6 = -prev_guess_0.
Let x_7 = prev_guess_1 - prev_guess_0.
Let x_8 = -prev_guess_1.
Let x_9 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_9).
Let x_10 = prev_guess_0 * prev_guess_0.
Let x_11 = n / x_4.
Let x_12 = x_4 - x_11.
Let x_13 = x_4 * x_4.
Let a_1 = IAbs.abs(x_4).
Let x_14 = x_1 - prev_guess_0.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Goal *)
  When: x_1 != prev_guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= x_13.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_13 <= (n + x_4).
  (* Invariant *)
  Have: (x_13 / 2) != 0.
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_11).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_13 <= n.
  (* Invariant *)
  Have: (((n * x_4) / x_4) + (x_12 * x_12)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_4 <= x_10.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_10 <= n.
  (* Invariant *)
  Have: x_10 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_10 <= x_3.
  (* Invariant *)
  Have: ((x_9 * x_9) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_7 * x_7) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_5 * x_5)) <= n.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_2 <= (n + x_1).
}
Prove: ((x_14 * x_14) / 2) != 0.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 21):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
}
Prove: (x_1 / 2) != 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 23):
Let x = -prev_guess_0.
Let x_1 = n / prev_guess_0.
Let x_2 = (prev_guess_0 + x_1) / 2.
Let x_3 = x_2 - prev_guess_0.
Let x_4 = x_2 * x_2.
Let x_5 = n + prev_guess_0.
Let x_6 = n / 2.
Let x_7 = prev_guess_0 - x_1.
Let x_8 = prev_guess_1 - prev_guess_0.
Let x_9 = -prev_guess_1.
Let x_10 = prev_guess_0 - prev_guess_1.
Let a = IAbs.abs(x_10).
Let x_11 = prev_guess_0 * prev_guess_0.
Let x_12 = n / x_6.
Let x_13 = x_6 - x_12.
Let x_14 = x_6 * x_6.
Let a_1 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_14.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_14 <= (n + x_6).
  (* Invariant *)
  Have: (x_14 / 2) != 0.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_12).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_14 <= n.
  (* Invariant *)
  Have: (((n * x_6) / x_6) + (x_13 * x_13)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_6 <= x_11.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_11 <= n.
  (* Invariant *)
  Have: x_11 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_11 <= x_5.
  (* Invariant *)
  Have: ((x_10 * x_10) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x_1 - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_8 * x_8) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_7 * x_7)) <= n.
  (* Invariant *)
  Have: x_2 != prev_guess_0.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: x_4 <= (n + x_2).
  (* Invariant *)
  Have: ((x_3 * x_3) / 2) != 0.
}
Prove: IAbs.abs(x_3) <= n.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (58684)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 23):
Let x = n / 2.
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: (x_1 / 2) != 0.
  (* Invariant *)
  Have: x != 0.
}
Prove: IAbs.abs(x) <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (14ms) (290)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 24):
Let x = -prev_guess_0.
Let x_1 = n / prev_guess_0.
Let x_2 = (prev_guess_0 + x_1) / 2.
Let x_3 = x_2 - prev_guess_0.
Let a = IAbs.abs(x_3).
Let x_4 = x_2 * x_2.
Let x_5 = n + prev_guess_0.
Let x_6 = n / 2.
Let x_7 = prev_guess_0 - x_1.
Let x_8 = prev_guess_1 - prev_guess_0.
Let x_9 = -prev_guess_1.
Let x_10 = prev_guess_0 - prev_guess_1.
Let a_1 = IAbs.abs(x_10).
Let x_11 = prev_guess_0 * prev_guess_0.
Let x_12 = n / x_6.
Let x_13 = x_6 - x_12.
Let x_14 = x_6 * x_6.
Let a_2 = IAbs.abs(x_6).
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_6) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_14.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: x_14 <= (n + x_6).
  (* Invariant *)
  Have: (x_14 / 2) != 0.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: a_2 <= n.
  (* Invariant *)
  Have: a_2 <= IAbs.abs(x_12).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_14 <= n.
  (* Invariant *)
  Have: (((n * x_6) / x_6) + (x_13 * x_13)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_6 <= x_11.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_11 <= n.
  (* Invariant *)
  Have: x_11 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_11 <= x_5.
  (* Invariant *)
  Have: ((x_10 * x_10) / 2) != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_1 - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_8 * x_8) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_7 * x_7)) <= n.
  (* Invariant *)
  Have: x_2 != prev_guess_0.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: x_4 <= (n + x_2).
  (* Invariant *)
  Have: ((x_3 * x_3) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
}
Prove: a <= IAbs.abs((n / x_2) - prev_guess_0).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 24):
Let x = n / 2.
Let a = IAbs.abs(x).
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: (x_1 / 2) != 0.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: a <= n.
}
Prove: a <= IAbs.abs(n / x).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (190ms) (505335)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 26):
Let x = -guess_0.
Let x_1 = n / guess_0.
Let x_2 = guess_0 + x_1.
Let x_3 = x_2 / 2.
Let x_4 = x_3 - guess_0.
Let a = IAbs.abs(x_4).
Let x_5 = x_3 * x_3.
Let x_6 = guess_0 + n.
Let x_7 = n / 2.
Let x_8 = guess_0 - x_1.
Let x_9 = prev_guess_0 - guess_0.
Let x_10 = -prev_guess_0.
Let x_11 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_11).
Let x_12 = guess_0 * guess_0.
Let x_13 = n / x_7.
Let x_14 = x_7 - x_13.
Let x_15 = x_7 * x_7.
Let a_2 = IAbs.abs(x_7).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_7) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_15.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_15 <= (n + x_7).
  (* Invariant *)
  Have: (x_15 / 2) != 0.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: a_2 <= n.
  (* Invariant *)
  Have: a_2 <= IAbs.abs(x_13).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_15 <= n.
  (* Invariant *)
  Have: (((n * x_7) / x_7) + (x_14 * x_14)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_7 <= x_12.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_12 <= n.
  (* Invariant *)
  Have: x_12 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_12 <= x_6.
  (* Invariant *)
  Have: ((x_11 * x_11) / 2) != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x_1 - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_9 * x_9) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_8 * x_8)) <= n.
  (* Invariant *)
  Have: x_3 != guess_0.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: ((x_4 * x_4) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs((n / x_3) - guess_0).
}
Prove: (-1) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (49216)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 27):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = -guess_0.
Let x_3 = x_1 / 2.
Let x_4 = x_3 - guess_0.
Let a = IAbs.abs(x_4).
Let x_5 = x_3 * x_3.
Let x_6 = guess_0 + n.
Let x_7 = n / 2.
Let x_8 = guess_0 - x.
Let x_9 = prev_guess_0 - guess_0.
Let x_10 = -prev_guess_0.
Let x_11 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_11).
Let x_12 = guess_0 * guess_0.
Let x_13 = n / x_7.
Let x_14 = x_7 - x_13.
Let x_15 = x_7 * x_7.
Let a_2 = IAbs.abs(x_7).
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_7) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_15.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_15 <= (n + x_7).
  (* Invariant *)
  Have: (x_15 / 2) != 0.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: a_2 <= n.
  (* Invariant *)
  Have: a_2 <= IAbs.abs(x_13).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_15 <= n.
  (* Invariant *)
  Have: (((n * x_7) / x_7) + (x_14 * x_14)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_7 <= x_12.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_12 <= n.
  (* Invariant *)
  Have: x_12 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_12 <= x_6.
  (* Invariant *)
  Have: ((x_11 * x_11) / 2) != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_9 * x_9) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_8 * x_8)) <= n.
  (* Invariant *)
  Have: x_3 != guess_0.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: ((x_4 * x_4) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs((n / x_3) - guess_0).
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: 2 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (62080)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 27):
Let x = n / 2.
Let a = IAbs.abs(x).
Let x_1 = x * x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: (x_1 / 2) != 0.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(n / x).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32828)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (10ms) (194)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 28):
Let x = n / prev_guess_0.
Let x_1 = prev_guess_0 + x.
Let x_2 = -prev_guess_0.
Let x_3 = x_1 / 2.
Let x_4 = x_3 - prev_guess_0.
Let a = IAbs.abs(x_4).
Let x_5 = x_3 * x_3.
Let x_6 = n + prev_guess_0.
Let x_7 = n / 2.
Let x_8 = prev_guess_0 - x.
Let x_9 = prev_guess_1 - prev_guess_0.
Let x_10 = -prev_guess_1.
Let x_11 = prev_guess_0 - prev_guess_1.
Let a_1 = IAbs.abs(x_11).
Let x_12 = prev_guess_0 * prev_guess_0.
Let x_13 = n / x_7.
Let x_14 = x_7 - x_13.
Let x_15 = x_7 * x_7.
Let a_2 = IAbs.abs(x_7).
Let x_16 = prev_guess_0 - x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(prev_guess_0) /\ is_sint32(prev_guess_1) /\
      is_sint32(x_7) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_15.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_15 <= (n + x_7).
  (* Invariant *)
  Have: (x_15 / 2) != 0.
  (* Invariant *)
  Have: x_7 != 0.
  (* Invariant *)
  Have: a_2 <= n.
  (* Invariant *)
  Have: a_2 <= IAbs.abs(x_13).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_15 <= n.
  (* Invariant *)
  Have: (((n * x_7) / x_7) + (x_14 * x_14)) <= n.
  (* Invariant *)
  Have: prev_guess_1 <= n.
  (* Invariant *)
  Have: (prev_guess_1 * prev_guess_1) <= n.
  (* Invariant *)
  Have: prev_guess_1 != prev_guess_0.
  (* Invariant *)
  Have: x_7 <= x_12.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: x_12 <= n.
  (* Invariant *)
  Have: x_12 <= (n + prev_guess_1).
  (* Invariant *)
  Have: x_12 <= x_6.
  (* Invariant *)
  Have: ((x_11 * x_11) / 2) != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x - prev_guess_1).
  (* Invariant *)
  Have: 0 <= prev_guess_1.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < prev_guess_0.
  (* Invariant *)
  Have: (x_9 * x_9) <= n.
  (* Invariant *)
  Have: (((n * prev_guess_0) / prev_guess_0) + (x_8 * x_8)) <= n.
  (* Invariant *)
  Have: x_3 != prev_guess_0.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_5 <= (n + x_3).
  (* Invariant *)
  Have: ((x_4 * x_4) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs((n / x_3) - prev_guess_0).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 2 <= x_1.
}
Prove: (x_16 * x_16) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0005/35_merged.c, line 29):
Let x = n / guess_0.
Let x_1 = guess_0 + x.
Let x_2 = x_1 / 2.
Let x_3 = guess_0 - x_2.
Let x_4 = -guess_0.
Let x_5 = x_2 - guess_0.
Let a = IAbs.abs(x_5).
Let x_6 = n / x_2.
Let x_7 = x_2 * x_2.
Let x_8 = guess_0 + n.
Let x_9 = n / 2.
Let x_10 = guess_0 - x.
Let x_11 = prev_guess_0 - guess_0.
Let x_12 = -prev_guess_0.
Let x_13 = guess_0 - prev_guess_0.
Let a_1 = IAbs.abs(x_13).
Let x_14 = guess_0 * guess_0.
Let x_15 = n / x_9.
Let x_16 = x_9 - x_15.
Let x_17 = x_9 * x_9.
Let a_2 = IAbs.abs(x_9).
Let x_18 = x_2 - x_6.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_9) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_9 <= x_17.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: x_17 <= (n + x_9).
  (* Invariant *)
  Have: (x_17 / 2) != 0.
  (* Invariant *)
  Have: x_9 != 0.
  (* Invariant *)
  Have: a_2 <= n.
  (* Invariant *)
  Have: a_2 <= IAbs.abs(x_15).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_17 <= n.
  (* Invariant *)
  Have: (((n * x_9) / x_9) + (x_16 * x_16)) <= n.
  (* Invariant *)
  Have: prev_guess_0 <= n.
  (* Invariant *)
  Have: (prev_guess_0 * prev_guess_0) <= n.
  (* Invariant *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x_9 <= x_14.
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: x_14 <= n.
  (* Invariant *)
  Have: x_14 <= (n + prev_guess_0).
  (* Invariant *)
  Have: x_14 <= x_8.
  (* Invariant *)
  Have: ((x_13 * x_13) / 2) != 0.
  (* Invariant *)
  Have: a_1 <= n.
  (* Invariant *)
  Have: a_1 <= IAbs.abs(x - prev_guess_0).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Invariant *)
  Have: (x_11 * x_11) <= n.
  (* Invariant *)
  Have: (((guess_0 * n) / guess_0) + (x_10 * x_10)) <= n.
  (* Invariant *)
  Have: x_2 != guess_0.
  (* Invariant *)
  Have: x_9 <= x_7.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_7 <= x_8.
  (* Invariant *)
  Have: x_7 <= (n + x_2).
  (* Invariant *)
  Have: ((x_5 * x_5) / 2) != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x_6 - guess_0).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: (x_3 * x_3) <= n.
}
Prove: (((n * x_2) / x_2) + (x_18 * x_18)) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0005/35_merged.c, line 29):
Let x = n / 2.
Let x_1 = x * x.
Let a = IAbs.abs(x).
Let x_2 = n / x.
Let x_3 = x - x_2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_1 <= (n + x).
  (* Invariant *)
  Have: (x_1 / 2) != 0.
  (* Invariant *)
  Have: x != 0.
  (* Invariant *)
  Have: a <= n.
  (* Invariant *)
  Have: a <= IAbs.abs(x_2).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: (((n * x) / x) + (x_3 * x_3)) <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (200ms) (415733)

------------------------------------------------------------

Goal Assertion (file out/35_0005/35_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Loop assigns (file out/35_0005/35_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/35_0005/35_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo35'.
  Callers assumptions might be imprecise.
