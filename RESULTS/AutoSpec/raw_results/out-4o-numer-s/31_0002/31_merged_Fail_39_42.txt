[kernel] Parsing out/31_0002/31_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 42 goals scheduled
[wp] [Timeout] typed_hoo31_loop_invariant_6_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_hoo31_loop_invariant_13_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo31_loop_invariant_20_established (Qed 2ms) (Z3)
[wp] Proved goals:   39 / 42
  Qed:              30
  Alt-Ergo 2.5.4:    4 (1ms-6ms-10ms)
  Z3 4.8.12:         5 (10ms-14ms-20ms)
  Timeout:           3
------------------------------------------------------------
  Function hoo31
------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 17):
Let x = v - 1.
Let x_1 = x * x.
Let x_2 = x_1 / 4.
Let x_3 = v * v.
Let x_4 = 1 + (2 * R).
Let x_5 = x_4 * x_4.
Let x_6 = 4 * R.
Let x_7 = R * R.
Let x_8 = 4 * x_7.
Let x_9 = r + x_2.
Let x_10 = x_7 - r - x_2.
Let x_11 = R - 1.
Let x_12 = 2 + v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_12) /\
      is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: x_9 < x_7.
  (* Pre-condition *)
  Have: (r + (x_11 * x_11) + x_2) < x_7.
  (* Pre-condition *)
  Have: 0 <= x_9.
  (* Pre-condition *)
  Have: (x_10 % 2) = 1.
  (* Invariant *)
  Have: (x_9 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_6 + x_8).
  (* Invariant *)
  Have: 0 < x_9.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: ((2 * v) + x_5 + (4 * x_2)) = (2 + x_6 + x_3 + x_8).
  (* Invariant *)
  Have: x_2 = (x_3 / 4).
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_1.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
}
Prove: (x_12 % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (47932)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 21):
Let x = 2 + v.
Let x_1 = v - 1.
Let x_2 = x_1 * x_1.
Let x_3 = x_2 / 4.
Let x_4 = v * v.
Let x_5 = 4 * x_3.
Let x_6 = 1 + (2 * R).
Let x_7 = x_6 * x_6.
Let x_8 = 4 * R.
Let x_9 = R * R.
Let x_10 = 4 * x_9.
Let x_11 = r + x_3.
Let x_12 = x_9 - r - x_3.
Let x_13 = R - 1.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_6) /\ is_sint32(r - v) /\ is_sint32(x_11) /\
      is_sint32(x_12).
  (* Pre-condition *)
  Have: x_11 < x_9.
  (* Pre-condition *)
  Have: (r + (x_13 * x_13) + x_3) < x_9.
  (* Pre-condition *)
  Have: 0 <= x_11.
  (* Pre-condition *)
  Have: (x_12 % 2) = 1.
  (* Invariant *)
  Have: (x_11 % 2) = 0.
  (* Invariant *)
  Have: x_7 = (1 + x_8 + x_10).
  (* Invariant *)
  Have: 0 < x_11.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: ((2 * v) + x_7 + x_5) = (2 + x_8 + x_4 + x_10).
  (* Invariant *)
  Have: x_3 = (x_4 / 4).
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_2.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: (2 + (6 * v) + x_7 + x_5) = (x_8 + x_10 + (x * x)).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (10549)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (1ms) (102)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 21):
Let x = R * R.
Let x_1 = x - r.
Let x_2 = R - 1.
Let x_3 = 1 + (2 * R).
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: r < x.
  (* Pre-condition *)
  Have: (r + (x_2 * x_2)) < x.
  (* Pre-condition *)
  Have: 0 <= r.
  (* Pre-condition *)
  Have: (x_1 % 2) = 1.
}
Prove: (x_3 * x_3) = (1 + (4 * R) + (4 * x)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (9575)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 22):
Let x = v - 1.
Let x_1 = x * x.
Let x_2 = x_1 / 4.
Let x_3 = 4 * x_2.
Let x_4 = 1 + (2 * R).
Let x_5 = x_4 * x_4.
Let x_6 = 4 * R.
Let x_7 = R * R.
Let x_8 = 4 * x_7.
Let x_9 = 2 + v.
Let x_10 = x_9 * x_9.
Let x_11 = v * v.
Let x_12 = r + x_2.
Let x_13 = x_7 - r - x_2.
Let x_14 = R - 1.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_9) /\
      is_sint32(x_4) /\ is_sint32(r - v) /\ is_sint32(x_12) /\
      is_sint32(x_13).
  (* Pre-condition *)
  Have: x_12 < x_7.
  (* Pre-condition *)
  Have: (r + (x_14 * x_14) + x_2) < x_7.
  (* Pre-condition *)
  Have: 0 <= x_12.
  (* Pre-condition *)
  Have: (x_13 % 2) = 1.
  (* Invariant *)
  Have: (x_12 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_6 + x_8).
  (* Invariant *)
  Have: 0 < x_12.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: ((2 * v) + x_5 + x_3) = (2 + x_6 + x_11 + x_8).
  (* Invariant *)
  Have: x_2 = (x_11 / 4).
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_1.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_9 % 2) = 1.
  (* Invariant *)
  Have: (2 + (6 * v) + x_5 + x_3) = (x_6 + x_8 + x_10).
}
Prove: (x_10 / 4) = (v + x_2).
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 23):
Let x = 2 * v.
Let x_1 = 2 + v.
Let x_2 = x_1 * x_1.
Let x_3 = x_2 / 4.
Let x_4 = 4 * x_3.
Let x_5 = 1 + (2 * R).
Let x_6 = x_5 * x_5.
Let x_7 = 4 * R.
Let x_8 = R * R.
Let x_9 = 4 * x_8.
Let x_10 = v - 1.
Let x_11 = v + ((x_10 * x_10) / 4).
Let x_12 = v * v.
Let x_13 = r + x_3.
Let x_14 = -v.
Let x_15 = r + x_3 - v.
Let x_16 = v + x_8 - r - x_3.
Let x_17 = R - 1.
Let x_18 = v + x_8.
Let x_19 = 1 + v.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(x_5) /\ is_sint32(r - v) /\ is_sint32(x_15) /\
      is_sint32(x_16).
  (* Pre-condition *)
  Have: x_13 < x_18.
  (* Pre-condition *)
  Have: (r + (x_17 * x_17) + x_3) < x_18.
  (* Pre-condition *)
  Have: v <= x_13.
  (* Pre-condition *)
  Have: (x_16 % 2) = 1.
  (* Invariant *)
  Have: (x_15 % 2) = 0.
  (* Invariant *)
  Have: x_6 = (1 + x_7 + x_9).
  (* Invariant *)
  Have: v < x_13.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (x_6 + x_4) = (2 + x + x_7 + x_12 + x_9).
  (* Invariant *)
  Have: x_3 = (v + (x_12 / 4)).
  (* Invariant *)
  Have: ((x_10 / 2) + x_3) = x_11.
  (* Invariant *)
  Have: x_3 = x_11.
  (* Invariant *)
  Have: v <= x_3.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (2 + x + x_6 + x_4) = (x_7 + x_9 + x_2).
}
Prove: ((x_19 * x_19) / 4) = ((x_19 / 2) + x_3).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (47789)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 24):
Let x = 1 + v.
Let x_1 = (x * x) / 4.
Let x_2 = x / 2.
Let x_3 = 2 + v.
Let x_4 = x_3 * x_3.
Let x_5 = 2 * v.
Let x_6 = 4 * x_1.
Let x_7 = 1 + (2 * R).
Let x_8 = x_7 * x_7.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = 4 * x_2.
Let x_13 = v + x_2.
Let x_14 = v - 1.
Let x_15 = v + x_2 + ((x_14 * x_14) / 4).
Let x_16 = v * v.
Let x_17 = r + x_1.
Let x_18 = -v.
Let x_19 = r + x_1 - v - x_2.
Let x_20 = v + x_10 + x_2 - r - x_1.
Let x_21 = R - 1.
Let x_22 = v + x_10 + x_2.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_3) /\
      is_sint32(x_7) /\ is_sint32(r - v) /\ is_sint32(x_19) /\
      is_sint32(x_20).
  (* Pre-condition *)
  Have: x_17 < x_22.
  (* Pre-condition *)
  Have: (r + (x_21 * x_21) + x_1) < x_22.
  (* Pre-condition *)
  Have: x_13 <= x_17.
  (* Pre-condition *)
  Have: (x_20 % 2) = 1.
  (* Invariant *)
  Have: (x_19 % 2) = 0.
  (* Invariant *)
  Have: x_8 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: x_13 < x_17.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (2 + x_5 + x_9 + x_16 + x_11 + x_12) = (x_8 + x_6).
  (* Invariant *)
  Have: x_1 = (v + x_2 + (x_16 / 4)).
  (* Invariant *)
  Have: x_15 = ((x_14 / 2) + x_1).
  (* Invariant *)
  Have: x_1 = x_15.
  (* Invariant *)
  Have: x_13 <= x_1.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_3 % 2) = 1.
  (* Invariant *)
  Have: (2 + x_5 + x_8 + x_6) = (x_9 + x_11 + x_12 + x_4).
  (* Invariant *)
  Have: x_1 = (x_2 + (x_4 / 4)).
}
Prove: x_2 = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (48151)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 25):
Let x = 1 + v.
Let x_1 = 2 + v.
Let x_2 = x_1 * x_1.
Let x_3 = x * x.
Let x_4 = x_3 / 4.
Let x_5 = 2 * v.
Let x_6 = 4 * x_4.
Let x_7 = 1 + (2 * R).
Let x_8 = x_7 * x_7.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = v - 1.
Let x_13 = v + ((x_12 * x_12) / 4).
Let x_14 = v * v.
Let x_15 = r + x_4.
Let x_16 = -v.
Let x_17 = r + x_4 - v.
Let x_18 = v + x_10 - r - x_4.
Let x_19 = R - 1.
Let x_20 = v + x_10.
Assume {
  Type: is_sint32(R) /\ is_sint32(r) /\ is_sint32(v) /\ is_sint32(x_1) /\
      is_sint32(x_7) /\ is_sint32(r - v) /\ is_sint32(x_17) /\
      is_sint32(x_18).
  (* Pre-condition *)
  Have: x_15 < x_20.
  (* Pre-condition *)
  Have: (r + (x_19 * x_19) + x_4) < x_20.
  (* Pre-condition *)
  Have: v <= x_15.
  (* Pre-condition *)
  Have: (x_18 % 2) = 1.
  (* Invariant *)
  Have: (x_17 % 2) = 0.
  (* Invariant *)
  Have: x_8 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: v < x_15.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (x_8 + x_6) = (2 + x_5 + x_9 + x_14 + x_11).
  (* Invariant *)
  Have: x_4 = (v + (x_14 / 4)).
  (* Invariant *)
  Have: ((x_12 / 2) + x_4) = x_13.
  (* Invariant *)
  Have: x_4 = x_13.
  (* Invariant *)
  Have: v <= x_4.
  (* Invariant *)
  Have: (r % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 < r.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (2 + x_5 + x_8 + x_6) = (x_9 + x_11 + x_2).
  (* Invariant *)
  Have: (x_2 / 4) = x_4.
  (* Invariant *)
  Have: (x / 2) = 0.
}
Prove: (-3) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (40700)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (9ms) (140)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 29):
Let x = 1 + v.
Let x_1 = x * x.
Let x_2 = 2 + v.
Let x_3 = x_2 * x_2.
Let x_4 = x_1 / 4.
Let x_5 = 2 * v.
Let x_6 = 4 * x_4.
Let x_7 = 1 + (2 * R).
Let x_8 = x_7 * x_7.
Let x_9 = 4 * R.
Let x_10 = R * R.
Let x_11 = 4 * x_10.
Let x_12 = A + x_4.
Let x_13 = v + x_10.
Let x_14 = -A.
Let x_15 = -x_4.
Let x_16 = v + x_10 - A - x_4.
Let x_17 = v - 1.
Let x_18 = v + ((x_17 * x_17) / 4).
Let x_19 = v * v.
Let x_20 = x_10 - A.
Let x_21 = R - 1.
Let x_22 = x_10 - A - x_4.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(v) /\ is_sint32(x_2) /\
      is_sint32(x_7) /\ is_sint32(x_20) /\ is_sint32(x_22) /\
      is_sint32(x_16).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_21 * x_21) < A.
  (* Pre-condition *)
  Have: A <= x_10.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: (x_20 % 2) = 0.
  (* Invariant *)
  Have: x_8 = (1 + x_9 + x_11).
  (* Invariant *)
  Have: A < x_10.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (x_8 + x_6) = (2 + x_5 + x_9 + x_19 + x_11).
  (* Invariant *)
  Have: x_4 = (v + (x_19 / 4)).
  (* Invariant *)
  Have: ((x_17 / 2) + x_4) = x_18.
  (* Invariant *)
  Have: x_4 = x_18.
  (* Invariant *)
  Have: v <= x_4.
  (* Invariant *)
  Have: (x_16 % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: x_12 <= x_13.
  (* Invariant *)
  Have: x_12 < x_13.
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (2 + x_5 + x_8 + x_6) = (x_9 + x_11 + x_3).
  (* Invariant *)
  Have: (x_3 / 4) = x_4.
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_1.
}
Prove: (x_22 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (49284)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 29):
Let x = 1 + (2 * R).
Let x_1 = R * R.
Let x_2 = R - 1.
Let x_3 = x_1 - A.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_2 * x_2) < A.
  (* Pre-condition *)
  Have: A <= x_1.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: (x * x) = (1 + (4 * R) + (4 * x_1)).
}
Prove: (x_3 % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 34):
Let x = -A.
Let x_1 = 1 + v.
Let x_2 = x_1 * x_1.
Let x_3 = x_2 / 4.
Let x_4 = -x_3.
Let x_5 = R * R.
Let x_6 = x_5 - A - x_3.
Let x_7 = 2 + v.
Let x_8 = x_7 * x_7.
Let x_9 = 2 * v.
Let x_10 = 4 * x_3.
Let x_11 = 1 + (2 * R).
Let x_12 = x_11 * x_11.
Let x_13 = 4 * R.
Let x_14 = 4 * x_5.
Let x_15 = A + x_3.
Let x_16 = v + x_5.
Let x_17 = v + x_5 - A - x_3.
Let x_18 = v - 1.
Let x_19 = v + ((x_18 * x_18) / 4).
Let x_20 = v * v.
Let x_21 = x_5 - A.
Let x_22 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(v) /\ is_sint32(x_7) /\
      is_sint32(x_11) /\ is_sint32(x_21) /\ is_sint32(x_6) /\
      is_sint32(x_17).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_22 * x_22) < A.
  (* Pre-condition *)
  Have: A <= x_5.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: (x_21 % 2) = 0.
  (* Invariant *)
  Have: x_12 = (1 + x_13 + x_14).
  (* Invariant *)
  Have: A < x_5.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (x_12 + x_10) = (2 + x_9 + x_13 + x_20 + x_14).
  (* Invariant *)
  Have: x_3 = (v + (x_20 / 4)).
  (* Invariant *)
  Have: ((x_18 / 2) + x_3) = x_19.
  (* Invariant *)
  Have: x_3 = x_19.
  (* Invariant *)
  Have: v <= x_3.
  (* Invariant *)
  Have: (x_17 % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: x_15 <= x_16.
  (* Invariant *)
  Have: x_15 < x_16.
  (* Invariant *)
  Have: (x_7 % 2) = 1.
  (* Invariant *)
  Have: (2 + x_9 + x_12 + x_10) = (x_13 + x_14 + x_8).
  (* Invariant *)
  Have: (x_8 / 4) = x_3.
  (* Invariant *)
  Have: (x_1 / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_2.
  (* Invariant *)
  Have: (x_6 % 2) = 0.
}
Prove: x_15 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (49443)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/31_0002/31_merged.c, line 36):
Let x = 1 + v.
Let x_1 = x * x.
Let x_2 = x_1 / 4.
Let x_3 = A + x_2.
Let x_4 = R * R.
Let x_5 = -A.
Let x_6 = -x_2.
Let x_7 = x_4 - A - x_2.
Let x_8 = 2 + v.
Let x_9 = x_8 * x_8.
Let x_10 = 2 * v.
Let x_11 = 4 * x_2.
Let x_12 = 1 + (2 * R).
Let x_13 = x_12 * x_12.
Let x_14 = 4 * R.
Let x_15 = 4 * x_4.
Let x_16 = v + x_4.
Let x_17 = v + x_4 - A - x_2.
Let x_18 = v - 1.
Let x_19 = v + ((x_18 * x_18) / 4).
Let x_20 = v * v.
Let x_21 = x_4 - A.
Let x_22 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(v) /\ is_sint32(x_8) /\
      is_sint32(x_12) /\ is_sint32(x_21) /\ is_sint32(x_7) /\
      is_sint32(x_17).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_22 * x_22) < A.
  (* Pre-condition *)
  Have: A <= x_4.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: (x_21 % 2) = 0.
  (* Invariant *)
  Have: x_13 = (1 + x_14 + x_15).
  (* Invariant *)
  Have: A < x_4.
  (* Invariant *)
  Have: (v % 2) = 1.
  (* Invariant *)
  Have: (x_13 + x_11) = (2 + x_10 + x_14 + x_20 + x_15).
  (* Invariant *)
  Have: x_2 = (v + (x_20 / 4)).
  (* Invariant *)
  Have: ((x_18 / 2) + x_2) = x_19.
  (* Invariant *)
  Have: x_2 = x_19.
  (* Invariant *)
  Have: v <= x_2.
  (* Invariant *)
  Have: (x_17 % 2) = 0.
  (* Invariant *)
  Have: 0 < v.
  (* Invariant *)
  Have: x_3 <= x_16.
  (* Invariant *)
  Have: x_3 < x_16.
  (* Invariant *)
  Have: (x_8 % 2) = 1.
  (* Invariant *)
  Have: (2 + x_10 + x_13 + x_11) = (x_14 + x_15 + x_9).
  (* Invariant *)
  Have: (x_9 / 4) = x_2.
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: (-3) <= x_1.
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: x_3 <= x_4.
}
Prove: x_3 < x_4.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (42067)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (10ms) (175)

------------------------------------------------------------

Goal Establishment of Invariant (file out/31_0002/31_merged.c, line 36):
Let x = 1 + (2 * R).
Let x_1 = R * R.
Let x_2 = x_1 - A.
Let x_3 = R - 1.
Assume {
  Type: is_sint32(A) /\ is_sint32(R) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < A.
  (* Pre-condition *)
  Have: (x_3 * x_3) < A.
  (* Pre-condition *)
  Have: A <= x_1.
  (* Pre-condition *)
  Have: (A % 2) = 1.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (x * x) = (1 + (4 * R) + (4 * x_1)).
}
Prove: A < x_1.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/31_0002/31_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Loop assigns (file out/31_0002/31_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/31_0002/31_merged.c:7: Warning: 
  No 'assigns' specification for function 'hoo31'.
  Callers assumptions might be imprecise.
