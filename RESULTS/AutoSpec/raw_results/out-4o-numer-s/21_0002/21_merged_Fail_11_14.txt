[kernel] Parsing out/21_0002/21_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 14 goals scheduled
[wp] [Timeout] typed_hoo21_loop_invariant_2_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_hoo21_loop_invariant_6_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_hoo21_assert (Qed 3ms) (Z3)
[wp] Proved goals:   11 / 14
  Qed:               9
  Alt-Ergo 2.5.4:    2 (5ms-5ms)
  Timeout:           3
------------------------------------------------------------
  Function hoo21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 17):
Let x_1 = v_1 + x.
Let x_2 = 2 * Y.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_3) /\ is_sint32(x_2 - v_1).
  (* Residual *)
  When: v < 0.
  (* Pre-condition *)
  Have: v_1 < x_2.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: v_1 <= Y.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (v_1 + y) <= x_2.
  (* Invariant *)
  Have: x_1 <= (1 + x_2).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (v + (2 * (x * y))) <= (v_1 + (2 * y) + (2 * (Y * x))).
  (* Then *)
  Have: x_1 <= x_2.
}
Prove: y <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (32299)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 18):
Let x_1 = 2 * Y.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(1 + y) /\
      is_sint32(x_1 - X).
  (* Residual *)
  When: 0 <= v.
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= X.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (X + v + (2 * (x * y))) <= (x_1 + (2 * y) + (2 * (Y * x))).
  (* Then *)
  Have: x <= X.
}
Prove: y < X.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 20):
Let x_1 = 2 * Y.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(1 + y) /\
      is_sint32(x_1 - X).
  (* Residual *)
  When: 0 <= v.
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= X.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (X + v + (2 * (x * y))) <= (x_1 + (2 * y) + (2 * (Y * x))).
  (* Then *)
  Have: x <= X.
  (* Invariant *)
  Have: y < X.
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (32585)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0002/21_merged.c, line 22):
Let x_1 = 1 + x.
Let x_2 = 2 * Y.
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(v_1) /\
      is_sint32(v_2) /\ is_sint32(v_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(x_1) /\
      is_sint32(x_2 - X).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y_2 <= x.
  (* Invariant *)
  Have: y_2 <= X.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (X + v_3 + (2 * (x * y_2))) <= (x_2 + (2 * y_2) + (2 * (Y * x))).
  (* Then *)
  Have: x <= X.
  If v_3 < 0
  Then { Have: (v_3 = v_1) /\ (y_2 = y). Have: (v_1 + x_2) = v. }
  Else {
    Have: (v_3 = v_2) /\ (y_2 = y_1).
    Have: (v_2 + x_2) = (v + (2 * X)).
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: y <= X.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: (X + v + (2 * (y * x_1))) <= (x_2 + (2 * y) + (2 * (Y * x_1))).
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0002/21_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Assertion (file out/21_0002/21_merged.c, line 39):
Let x_1 = X + v + (2 * (x * y)).
Let x_2 = 2 * Y.
Let x_3 = x_2 + (2 * y) + (2 * (Y * x)).
Assume {
  Type: is_sint32(X) /\ is_sint32(Y) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(x_2 - X).
  (* Pre-condition *)
  Have: 0 < X.
  (* Pre-condition *)
  Have: 0 < Y.
  (* Pre-condition *)
  Have: Y <= X.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= X.
  (* Invariant *)
  Have: x <= (1 + X).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Else *)
  Have: X < x.
}
Prove: x_3 = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/21_0002/21_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0002/21_merged.c:6: Warning: 
  No 'assigns' specification for function 'hoo21'.
  Callers assumptions might be imprecise.
