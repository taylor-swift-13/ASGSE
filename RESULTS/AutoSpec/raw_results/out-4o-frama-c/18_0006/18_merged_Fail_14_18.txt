[kernel] Parsing out/18_0006/18_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_moo18_assert (Qed 3ms) (Z3)
[wp] [Timeout] typed_moo18_assert_2 (Qed 4ms) (Z3)
[wp] [Timeout] typed_moo18_assert_3 (Qed 5ms) (Z3)
[wp] [Timeout] typed_moo18_assert_4 (Qed 6ms) (Z3)
[wp] Proved goals:   14 / 18
  Qed:              10
  Alt-Ergo 2.5.4:    4 (18ms-107ms-348ms)
  Timeout:           4
------------------------------------------------------------
  Function moo18
------------------------------------------------------------

Goal Assertion (file out/18_0006/18_merged.c, line 31):
Assume {
  Type: is_sint32(a1_0) /\ is_sint32(b1_0) /\ is_sint32(c1_0).
  (* Call 'order_3' *)
  Have: (i <= i_1) /\ (i_1 <= i_2) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(i_2) /\ ((a1_0 = 3) \/ (b1_0 = 3) \/ (c1_0 = 3)) /\
      ((a1_0 = 4) \/ (b1_0 = 4) \/ (c1_0 = 4)) /\
      ((a1_0 = 5) \/ (b1_0 = 5) \/ (c1_0 = 5)) /\
      ((i = a1_0) \/ (i = b1_0) \/ (i = c1_0)) /\
      ((i = a1_0) \/ (i_1 = a1_0) \/ (i_2 = a1_0)) /\
      ((i = b1_0) \/ (i_1 = b1_0) \/ (i_2 = b1_0)) /\
      ((i = c1_0) \/ (i_1 = c1_0) \/ (i_2 = c1_0)) /\
      ((i_1 = a1_0) \/ (i_1 = b1_0) \/ (i_1 = c1_0)) /\
      ((i_2 = a1_0) \/ (i_2 = b1_0) \/ (i_2 = c1_0)).
}
Prove: (a1_0 = 3) /\ (b1_0 = 4) /\ (c1_0 = 5).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/18_0006/18_merged.c, line 35):
Assume {
  Type: is_sint32(a2_0) /\ is_sint32(b2_0) /\ is_sint32(c2_0).
  (* Call 'order_3' *)
  Have: (i <= i_1) /\ (i_1 <= i_2) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(i_2) /\ ((i = 3) \/ (i = 4) \/ (i = 5)) /\
      ((i = 3) \/ (i_1 = 3) \/ (i_2 = 3)) /\
      ((i = 4) \/ (i_1 = 4) \/ (i_2 = 4)) /\
      ((i = 5) \/ (i_1 = 5) \/ (i_2 = 5)) /\
      ((i_1 = 3) \/ (i_1 = 4) \/ (i_1 = 5)) /\
      ((i_2 = 3) \/ (i_2 = 4) \/ (i_2 = 5)).
  (* Call 'order_3' *)
  Have: (i_3 <= i_4) /\ (i_4 <= i_5) /\ is_sint32(i_3) /\ is_sint32(i_4) /\
      is_sint32(i_5) /\ ((a2_0 = 2) \/ (b2_0 = 2) \/ (c2_0 = 2)) /\
      ((i_3 = a2_0) \/ (i_3 = b2_0) \/ (i_3 = c2_0)) /\
      ((i_3 = a2_0) \/ (i_4 = a2_0) \/ (i_5 = a2_0)) /\
      ((i_3 = b2_0) \/ (i_4 = b2_0) \/ (i_5 = b2_0)) /\
      ((i_3 = c2_0) \/ (i_4 = c2_0) \/ (i_5 = c2_0)) /\
      ((i_4 = a2_0) \/ (i_4 = b2_0) \/ (i_4 = c2_0)) /\
      ((i_5 = a2_0) \/ (i_5 = b2_0) \/ (i_5 = c2_0)).
}
Prove: (a2_0 = 2) /\ (b2_0 = 2) /\ (c2_0 = 2).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/18_0006/18_merged.c, line 39):
Assume {
  Type: is_sint32(a3_0) /\ is_sint32(b3_0) /\ is_sint32(c3_0).
  (* Call 'order_3' *)
  Have: (i <= i_1) /\ (i_1 <= i_2) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(i_2) /\ ((i = 3) \/ (i = 4) \/ (i = 5)) /\
      ((i = 3) \/ (i_1 = 3) \/ (i_2 = 3)) /\
      ((i = 4) \/ (i_1 = 4) \/ (i_2 = 4)) /\
      ((i = 5) \/ (i_1 = 5) \/ (i_2 = 5)) /\
      ((i_1 = 3) \/ (i_1 = 4) \/ (i_1 = 5)) /\
      ((i_2 = 3) \/ (i_2 = 4) \/ (i_2 = 5)).
  (* Call 'order_3' *)
  Have: (i_3 <= i_4) /\ (i_4 <= i_5) /\ is_sint32(i_3) /\ is_sint32(i_4) /\
      is_sint32(i_5) /\ ((a3_0 = 3) \/ (b3_0 = 3) \/ (c3_0 = 3)) /\
      ((a3_0 = 4) \/ (b3_0 = 4) \/ (c3_0 = 4)) /\
      ((i_3 = a3_0) \/ (i_3 = b3_0) \/ (i_3 = c3_0)) /\
      ((i_3 = a3_0) \/ (i_4 = a3_0) \/ (i_5 = a3_0)) /\
      ((i_3 = b3_0) \/ (i_4 = b3_0) \/ (i_5 = b3_0)) /\
      ((i_3 = c3_0) \/ (i_4 = c3_0) \/ (i_5 = c3_0)) /\
      ((i_4 = a3_0) \/ (i_4 = b3_0) \/ (i_4 = c3_0)) /\
      ((i_5 = a3_0) \/ (i_5 = b3_0) \/ (i_5 = c3_0)).
}
Prove: (a3_0 = 3) /\ (b3_0 = 4) /\ (c3_0 = 4).
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/18_0006/18_merged.c, line 43):
Assume {
  Type: is_sint32(a4_0) /\ is_sint32(b4_0) /\ is_sint32(c4_0).
  (* Call 'order_3' *)
  Have: (i <= i_1) /\ (i_1 <= i_2) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(i_2) /\ ((i = 3) \/ (i = 4) \/ (i = 5)) /\
      ((i = 3) \/ (i_1 = 3) \/ (i_2 = 3)) /\
      ((i = 4) \/ (i_1 = 4) \/ (i_2 = 4)) /\
      ((i = 5) \/ (i_1 = 5) \/ (i_2 = 5)) /\
      ((i_1 = 3) \/ (i_1 = 4) \/ (i_1 = 5)) /\
      ((i_2 = 3) \/ (i_2 = 4) \/ (i_2 = 5)).
  (* Call 'order_3' *)
  Have: (i_3 <= i_4) /\ (i_4 <= i_5) /\ is_sint32(i_3) /\ is_sint32(i_4) /\
      is_sint32(i_5) /\ ((i_3 = 3) \/ (i_3 = 4)) /\
      ((i_4 = 3) \/ (i_4 = 4)) /\ ((i_5 = 3) \/ (i_5 = 4)) /\
      ((i_3 = 3) \/ (i_4 = 3) \/ (i_5 = 3)) /\
      ((i_3 = 4) \/ (i_4 = 4) \/ (i_5 = 4)).
  (* Call 'order_3' *)
  Have: (i_6 <= i_7) /\ (i_7 <= i_8) /\ is_sint32(i_6) /\ is_sint32(i_7) /\
      is_sint32(i_8) /\ ((a4_0 = 4) \/ (b4_0 = 4) \/ (c4_0 = 4)) /\
      ((a4_0 = 5) \/ (b4_0 = 5) \/ (c4_0 = 5)) /\
      ((i_6 = a4_0) \/ (i_6 = b4_0) \/ (i_6 = c4_0)) /\
      ((i_6 = a4_0) \/ (i_7 = a4_0) \/ (i_8 = a4_0)) /\
      ((i_6 = b4_0) \/ (i_7 = b4_0) \/ (i_8 = b4_0)) /\
      ((i_6 = c4_0) \/ (i_7 = c4_0) \/ (i_8 = c4_0)) /\
      ((i_7 = a4_0) \/ (i_7 = b4_0) \/ (i_7 = c4_0)) /\
      ((i_8 = a4_0) \/ (i_8 = b4_0) \/ (i_8 = c4_0)).
}
Prove: (a4_0 = 4) /\ (b4_0 = 4) /\ (c4_0 = 5).
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0006/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0006/18_merged.c, line 30)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0006/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0006/18_merged.c, line 34)
:
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0006/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0006/18_merged.c, line 38)
:
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0006/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0006/18_merged.c, line 42)
:
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
------------------------------------------------------------
  Function order_3
------------------------------------------------------------

Goal Post-condition (file out/18_0006/18_merged.c, line 3) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Let x_9 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(x_9) /\
      is_sint32(Mint_2[b]) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(Mint_4[a]) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: (x_9 = x_6) \/ (x_9 = x_7) \/ (x_9 = x_8).
Prover Z3 4.8.12 returns Valid (Qed:31ms) (50ms) (231685)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (29ms) (481)

------------------------------------------------------------

Goal Post-condition (file out/18_0006/18_merged.c, line 4) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_0[c]) /\
      is_sint32(Mint_2[b]) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(Mint_4[a]) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: (x_4 = x_6) \/ (x_4 = x_7) \/ (x_4 = x_8).
Prover Z3 4.8.12 returns Valid (Qed:31ms) (30ms) (138624)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (32ms) (378)

------------------------------------------------------------

Goal Post-condition (file out/18_0006/18_merged.c, line 5) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_0[c]) /\
      is_sint32(Mint_2[b]) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(Mint_4[a]) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: (x_5 = x_6) \/ (x_5 = x_7) \/ (x_5 = x_8).
Prover Z3 4.8.12 returns Valid (Qed:36ms) (40ms) (162538)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (18ms) (313)

------------------------------------------------------------

Goal Post-condition (file out/18_0006/18_merged.c, line 6) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_1[b].
Let x_5 = Mint_1[a].
Let x_6 = Mint_0[a].
Let x_7 = Mint_0[b].
Let x_8 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_1[c]) /\
      is_sint32(Mint_2[b]) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(Mint_4[a]) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  If x_4 < x_5
  Then { Have: Mint_1[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_1. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_0.
  }
  Else { Have: Mint_3 = Mint_0. }
}
Prove: exists i_2,i_1,i : Z. (i_2 <= i_1) /\ (i_1 <= i) /\ is_sint32(i_2) /\
    is_sint32(i_1) /\ is_sint32(i) /\
    ((x_6 = i_2) \/ (x_6 = i_1) \/ (x_6 = i)) /\
    ((x_6 = i_2) \/ (x_7 = i_2) \/ (x_8 = i_2)) /\
    ((x_6 = i_1) \/ (x_7 = i_1) \/ (x_8 = i_1)) /\
    ((x_6 = i) \/ (x_7 = i) \/ (x_8 = i)) /\
    ((x_7 = i_2) \/ (x_7 = i_1) \/ (x_7 = i)) /\
    ((x_8 = i_2) \/ (x_8 = i_1) \/ (x_8 = i)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (348ms) (2035)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (1/6):
Effect at line 12
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (2/6):
Effect at line 13
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (3/6):
Effect at line 17
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (4/6):
Effect at line 18
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (5/6):
Effect at line 22
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Assigns (file out/18_0006/18_merged.c, line 7) in 'order_3' (6/6):
Effect at line 23
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/18_0006/18_merged.c:27: Warning: 
  No 'assigns' specification for function 'moo18'.
  Callers assumptions might be imprecise.
