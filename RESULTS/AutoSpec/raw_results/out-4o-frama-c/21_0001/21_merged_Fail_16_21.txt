[kernel] Parsing out/21_0001/21_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 21 goals scheduled
[wp] [Timeout] typed_gcd_ensures (Qed 15ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_3 (Qed 14ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_4 (Qed 17ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_5 (Qed 19ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_6 (Qed 15ms) (Z3)
[wp] Proved goals:   16 / 21
  Qed:              14
  Alt-Ergo 2.5.4:    2 (5ms-6ms)
  Timeout:           5
------------------------------------------------------------
  Function doo2
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 3) in 'gcd'' in 'doo2' at initialization of 'c' (file out/21_0001/21_merged.c, line 32)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 4) in 'gcd'' in 'doo2' at initialization of 'c' (file out/21_0001/21_merged.c, line 32)
:
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------
------------------------------------------------------------
  Function gcd
------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 5) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      Have: (ta_tmp_0=false).
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
           ((gcd_0 % i) = 0))))) /\
          (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
           (i <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) -> ((0 < i) ->
           ((gcd_0 % i) = 0))))) /\
          (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) -> ((0 < i) ->
           (i <= gcd_0))))).
    }
  }
}
Prove: ((a % gcd_0) = 0) /\ ((b % gcd_0) = 0).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 6) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Residual *)
  When: a <= b.
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    Let x = b - a.
    (* Call 'gcd' *)
    Have: ((a % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
        (forall i : Z. (((a % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
         ((gcd_0 % i) = 0))))) /\
        (forall i : Z. (((a % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
         (i <= gcd_0))))).
  }
}
Prove: 0 < gcd_0.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (32474)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (17)

------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 7) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      Have: (ta_tmp_0=false).
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
           ((gcd_0 % i) = 0))))) /\
          (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
           (i <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) -> ((0 < i) ->
           ((gcd_0 % i) = 0))))) /\
          (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) -> ((0 < i) ->
           (i <= gcd_0))))).
    }
  }
}
Prove: ((a % gcd_0) = 0) /\ ((b % gcd_0) = 0) /\ (0 < gcd_0).
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 8) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      Have: (ta_tmp_0=false).
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
  }
}
Prove: i <= gcd_0.
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 9) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      Have: (ta_tmp_0=false).
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
  }
}
Prove: i <= gcd_0.
Prover Z3 4.8.12 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/21_0001/21_merged.c, line 10) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      Have: (ta_tmp_0=false).
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
  }
}
Prove: (gcd_0 % i) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Assigns nothing in 'gcd':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (1/8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (2/8):
Effect at line 16
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (3/8):
Effect at line 19
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (4/8):
Effect at line 22
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (5/8):
Call Result at line 25
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (6/8):
Effect at line 25
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (7/8):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (8/8):
Effect at line 26
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 3) in 'gcd'' in 'gcd' at call 'gcd' (file out/21_0001/21_merged.c, line 25)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 4) in 'gcd'' in 'gcd' at call 'gcd' (file out/21_0001/21_merged.c, line 25)
:
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 3) in 'gcd'' in 'gcd' at call 'gcd' (file out/21_0001/21_merged.c, line 26)
:
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/21_0001/21_merged.c, line 4) in 'gcd'' in 'gcd' at call 'gcd' (file out/21_0001/21_merged.c, line 26)
:
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  (* Else *)
  Have: b != a.
  (* Else *)
  Have: a <= b.
}
Prove: a < b.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29976)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (22)

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0001/21_merged.c:29: Warning: 
  No 'assigns' specification for function 'doo2'.
  Callers assumptions might be imprecise.
