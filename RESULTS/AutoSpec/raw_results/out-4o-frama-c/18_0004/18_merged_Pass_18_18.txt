[kernel] Parsing out/18_0004/18_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              14
  Alt-Ergo 2.5.4:    4 (13ms-20ms-32ms)
------------------------------------------------------------
  Function moo18
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 31)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 31)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 43)
:
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 43)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
------------------------------------------------------------
  Function order_3
------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 4) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: ((x_5 = i) \/ (x_4 = i) \/ (Mint_0[c] = i)) <->
    ((x_6 = i) \/ (x_7 = i) \/ (x_8 = i)).
Prover Z3 4.8.12 returns Valid (Qed:34ms) (50ms) (230194)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (32ms) (563)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 5) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: (x_5 + x_4 + Mint_0[c]) = (x_6 + x_7 + x_8).
Prover Z3 4.8.12 returns Valid (Qed:38ms) (60ms) (291798)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:38ms) (13ms) (189)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 6) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_1[b].
Let x_5 = Mint_1[a].
Let x_6 = Mint_0[a].
Let x_7 = Mint_0[b].
Let x_8 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_1[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_1. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_0.
  }
  Else { Have: Mint_3 = Mint_0. }
}
Prove: (x_6 <= x_7) /\ (x_7 <= x_8).
Prover Z3 4.8.12 returns Valid (Qed:38ms) (20ms) (106947)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:38ms) (15ms) (255)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 7) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_1[b].
Let x_5 = Mint_1[a].
Let x_6 = Mint_0[a].
Let x_7 = Mint_0[b].
Let x_8 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_1[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_1. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_0.
  }
  Else { Have: Mint_3 = Mint_0. }
}
Prove: (x_6 <= x_7) /\ (x_7 <= x_8).
Prover Z3 4.8.12 returns Valid (Qed:41ms) (20ms) (106947)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (19ms) (255)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (1/6):
Effect at line 13
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (2/6):
Effect at line 14
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (3/6):
Effect at line 18
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (4/6):
Effect at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (5/6):
Effect at line 23
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (6/6):
Effect at line 24
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/18_0004/18_merged.c:28: Warning: 
  No 'assigns' specification for function 'moo18'.
  Callers assumptions might be imprecise.
