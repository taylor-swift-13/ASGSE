[kernel] Parsing out/18_0004/18_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] Proved goals:   22 / 22
  Qed:              14
  Alt-Ergo 2.5.4:    5 (13ms-138ms-599ms)
  Z3 4.8.12:         3 (370ms-540ms-630ms)
------------------------------------------------------------
  Function moo18
------------------------------------------------------------

Goal Assertion (file out/18_0004/18_merged.c, line 32):
Assume {
  Type: is_sint32(b1_0) /\ is_sint32(c1_0) /\ is_sint32(12 - b1_0 - c1_0).
  (* Call 'order_3' *)
  Have: (b1_0 <= c1_0) /\ (12 <= (c1_0 + (2 * b1_0))) /\
      (forall i : Z.
       ((i = b1_0) \/ (i = c1_0) \/ ((b1_0 + c1_0 + i) = 12)) <->
       ((i = 3) \/ (i = 4) \/ (i = 5))).
}
Prove: (b1_0 = 4) /\ (c1_0 = 5) /\ ((b1_0 + c1_0) = 9).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (370ms) (596055)

------------------------------------------------------------

Goal Assertion (file out/18_0004/18_merged.c, line 36):
Assume {
  Type: is_sint32(b2_0) /\ is_sint32(c2_0) /\ is_sint32(6 - b2_0 - c2_0).
  (* Call 'order_3' *)
  Have: (b2_0 <= c2_0) /\ (6 <= (c2_0 + (2 * b2_0))) /\
      (forall i : Z.
       ((i = b2_0) \/ (i = c2_0) \/ ((b2_0 + c2_0 + i) = 6)) <-> (i = 2)).
}
Prove: (b2_0 = 2) /\ (c2_0 = 2) /\ ((b2_0 + c2_0) = 4).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (599ms) (16583)

------------------------------------------------------------

Goal Assertion (file out/18_0004/18_merged.c, line 40):
Assume {
  Type: is_sint32(b3_0) /\ is_sint32(c3_0) /\ is_sint32(11 - b3_0 - c3_0).
  (* Call 'order_3' *)
  Have: (b3_0 <= c3_0) /\ (11 <= (c3_0 + (2 * b3_0))) /\
      (forall i : Z.
       ((i = b3_0) \/ (i = c3_0) \/ ((b3_0 + c3_0 + i) = 11)) <->
       ((i = 3) \/ (i = 4))).
}
Prove: (b3_0 = 4) /\ (c3_0 = 4) /\ ((b3_0 + c3_0) = 8).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (630ms) (1508018)

------------------------------------------------------------

Goal Assertion (file out/18_0004/18_merged.c, line 44):
Assume {
  Type: is_sint32(b4_0) /\ is_sint32(c4_0) /\ is_sint32(13 - b4_0 - c4_0).
  (* Call 'order_3' *)
  Have: (b4_0 <= c4_0) /\ (13 <= (c4_0 + (2 * b4_0))) /\
      (forall i : Z.
       ((i = b4_0) \/ (i = c4_0) \/ ((b4_0 + c4_0 + i) = 13)) <->
       ((i = 4) \/ (i = 5))).
}
Prove: (b4_0 = 4) /\ (c4_0 = 5) /\ ((b4_0 + c4_0) = 9).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (620ms) (1468614)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 31)
:
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 31)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 2) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 43)
:
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/18_0004/18_merged.c, line 3) in 'order_3'' in 'moo18' at call 'order_3' (file out/18_0004/18_merged.c, line 43)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
------------------------------------------------------------
  Function order_3
------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 4) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: ((x_5 = i) \/ (x_4 = i) \/ (Mint_0[c] = i)) <->
    ((x_6 = i) \/ (x_7 = i) \/ (x_8 = i)).
Prover Z3 4.8.12 returns Valid (Qed:34ms) (60ms) (230194)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (39ms) (563)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 5) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_0[b].
Let x_5 = Mint_0[a].
Let x_6 = Mint_1[a].
Let x_7 = Mint_1[b].
Let x_8 = Mint_1[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_0[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_0. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_1.
  }
  Else { Have: Mint_3 = Mint_1. }
}
Prove: (x_5 + x_4 + Mint_0[c]) = (x_6 + x_7 + x_8).
Prover Z3 4.8.12 returns Valid (Qed:34ms) (60ms) (291798)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (13ms) (189)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 6) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_1[b].
Let x_5 = Mint_1[a].
Let x_6 = Mint_0[a].
Let x_7 = Mint_0[b].
Let x_8 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_1[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_1. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_0.
  }
  Else { Have: Mint_3 = Mint_0. }
}
Prove: (x_6 <= x_7) /\ (x_7 <= x_8).
Prover Z3 4.8.12 returns Valid (Qed:43ms) (30ms) (106947)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:43ms) (21ms) (255)

------------------------------------------------------------

Goal Post-condition (file out/18_0004/18_merged.c, line 7) in 'order_3':
Let x = Mint_3[c].
Let x_1 = Mint_3[b].
Let x_2 = Mint_5[c].
Let x_3 = Mint_5[a].
Let x_4 = Mint_1[b].
Let x_5 = Mint_1[a].
Let x_6 = Mint_0[a].
Let x_7 = Mint_0[b].
Let x_8 = Mint_0[c].
Assume {
  Type: is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(Mint_2[b]) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(Mint_4[a]) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\
      (region(c.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a, 1) /\ valid_rw(Malloc_0, b, 1) /\
      valid_rw(Malloc_0, c, 1).
  (* Pre-condition *)
  Have: (b != a) /\ (c != a) /\ (c != b).
  If x_4 < x_5
  Then { Have: Mint_1[a <- x_4][b <- x_5] = Mint_5. }
  Else { Have: Mint_5 = Mint_1. }
  If x_2 < x_3
  Then {
    Have: Mint_5 = Mint_4.
    Have: Mint_4[a <- Mint_4[c]][c <- Mint_4[a]] = Mint_3.
  }
  Else { Have: Mint_5 = Mint_3. }
  If x < x_1
  Then {
    Have: Mint_3 = Mint_2.
    Have: Mint_2[b <- Mint_2[c]][c <- Mint_2[b]] = Mint_0.
  }
  Else { Have: Mint_3 = Mint_0. }
}
Prove: (x_6 <= x_7) /\ (x_7 <= x_8).
Prover Z3 4.8.12 returns Valid (Qed:31ms) (30ms) (106947)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (19ms) (255)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (1/6):
Effect at line 13
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (2/6):
Effect at line 14
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (3/6):
Effect at line 18
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (4/6):
Effect at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (5/6):
Effect at line 23
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns (file out/18_0004/18_merged.c, line 8) in 'order_3' (6/6):
Effect at line 24
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/18_0004/18_merged.c:28: Warning: 
  No 'assigns' specification for function 'moo18'.
  Callers assumptions might be imprecise.
