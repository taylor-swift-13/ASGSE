[kernel] Parsing out/14_0002/14_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/14_0002/14_merged.c:26: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/14_0002/14_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_6_established (Qed 0.83ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_12_established (Qed 1ms) (Z3)
[wp] Proved goals:   30 / 32
  Qed:              25
  Alt-Ergo 2.5.4:    4 (5ms-13ms-25ms)
  Z3 4.8.12:         1 (470ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 9):
Let x_1 = x + y_1 - y.
Let x_2 = 2 * y_1.
Let x_3 = x + y_1.
Let x_4 = 2 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(2 + x) /\ is_sint32(x_4) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_3) /\ (x_3 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: ((y_1 = 0) -> (x_3 != (4 + y))).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: forall i : Z. (x + (2 * i)) <= y.
  (* Invariant *)
  Have: ((y = 0) -> (x != 4)).
  (* Invariant *)
  Have: y <= 2.
  (* Invariant *)
  Have: y <= (2 + x_2).
  (* Invariant *)
  Have: (y % 2) = (y_1 % 2).
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: (2 * y) <= (2 + x + x_2).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((y = (-2)) -> (x != 2)).
}
Prove: y <= 0.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (54633)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (25ms) (326)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 12):
Let x_1 = x + y - y_1.
Let x_2 = 2 * y.
Let x_3 = y % 2.
Let x_4 = x + y.
Let x_5 = 2 + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(2 + x) /\ is_sint32(x_5) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y_1 <= x_4) /\ (x_4 <= x_5).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x_4 != (4 + y_1))).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: x <= y_1.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: forall i : Z. (x + (2 * i)) <= y_1.
  (* Invariant *)
  Have: ((y_1 = 0) -> (x != 4)).
  (* Invariant *)
  Have: y_1 <= 2.
  (* Invariant *)
  Have: y_1 <= (2 + x_2).
  (* Invariant *)
  Have: x_3 = (y_1 % 2).
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: (2 * y_1) <= (2 + x + x_2).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((y_1 = (-2)) -> (x != 2)).
  (* Invariant *)
  Have: y_1 <= 0.
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (37654)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (15ms) (378)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x != 4)).
  (* Invariant *)
  Have: (-2) <= y.
}
Prove: x <= y.
Prover Z3 4.8.12 returns Timeout (Qed:0.83ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.83ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 14):
Let x_1 = x + y - y_1.
Let x_2 = 2 * y.
Let x_3 = x + y.
Let x_4 = 2 + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(2 + x) /\ is_sint32(x_4) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y_1 <= x_3) /\ (x_3 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x_3 != (4 + y_1))).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: x <= y_1.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: forall i : Z. (x + (2 * i)) <= y_1.
  (* Invariant *)
  Have: ((y_1 = 0) -> (x != 4)).
  (* Invariant *)
  Have: y_1 <= 2.
  (* Invariant *)
  Have: y_1 <= (2 + x_2).
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: (2 * y_1) <= (2 + x + x_2).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((y_1 = (-2)) -> (x != 2)).
  (* Invariant *)
  Have: y_1 <= 0.
  (* Invariant *)
  Have: (y % 2) = 0.
}
Prove: x <= 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34142)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 18):
Let x_1 = x + y_1.
Let x_2 = 2 + y.
Let x_3 = -y.
Let x_4 = x + y_1 - y.
Let x_5 = x % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(2 + y_1) /\ is_sint32(x_4) /\ is_sint32(2 + x + y_1 - y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x != 4)).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: forall i : Z. (x + (2 * i)) <= y.
  (* Invariant *)
  Have: ((y_1 = 0) -> (x_1 != (4 + y))).
  (* Invariant *)
  Have: y_1 <= 2.
  (* Invariant *)
  Have: y_1 <= (2 + (2 * y)).
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((y_1 = (-2)) -> (x_1 != x_2)).
  (* Invariant *)
  Have: y_1 <= 0.
  (* Invariant *)
  Have: (y % 2) = 0.
}
Prove: x_5 = 0.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (37689)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 19):
Let x_1 = x + y_1.
Let x_2 = 2 + y.
Let x_3 = -y.
Let x_4 = x + y_1 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(2 + y_1) /\ is_sint32(x_4) /\ is_sint32(2 + x + y_1 - y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x != 4)).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: forall i_1 : Z. (x + (2 * i_1)) <= y.
  (* Invariant *)
  Have: ((y_1 = 0) -> (x_1 != (4 + y))).
  (* Invariant *)
  Have: y_1 <= 2.
  (* Invariant *)
  Have: y_1 <= (2 + (2 * y)).
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((y_1 = (-2)) -> (x_1 != x_2)).
  (* Invariant *)
  Have: y_1 <= 0.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (x % 2) = 0.
}
Prove: i <= 0.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (470ms) (531779)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 19):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: ((y = 0) -> (x != 4)).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (-2) <= x.
}
Prove: (x + (2 * i)) <= y.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0002/14_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0002/14_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/14_0002/14_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/14_0002/14_merged.c, line 23) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/14_0002/14_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/14_0002/14_merged.c:26: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
