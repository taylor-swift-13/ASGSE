[kernel] Parsing out/61_0002/61_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/61_0002/61_merged.c:32: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/61_0002/61_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 45 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_9_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_12_preserved (Qed 14ms) (Z3)
[wp] Proved goals:   43 / 45
  Qed:              38
  Alt-Ergo 2.5.4:    5
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(1 + c).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
  (* Invariant *)
  Have: forall i : Z. ((i <= c) -> ((0 <= i) -> ((i = c) \/ (i < n)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i < n))).
  (* Invariant *)
  Have: c < n.
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: (-1) <= c.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (32368)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 15):
Let x = 1 + c.
Let x_1 = 2 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
  (* Invariant *)
  Have: forall i : Z. ((i <= c) -> ((0 <= i) -> ((i = c) \/ (i < n)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i < n))).
  (* Invariant *)
  Have: c < n.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (-1) <= c.
  (* Invariant *)
  Have: ((x = n) -> ((x_1 <= n) -> false)).
}
Prove: (x = n) \/ (x_1 <= n).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (32757)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (4ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(1 + c).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: c != (-1).
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i <= c))).
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: c = 0.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 19):
Assume {
  Type: is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: forall i : Z. ((i <= 0) -> ((0 <= i) -> ((i = 0) \/ (i < n)))).
  (* Invariant *)
  Have: 0 < n.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: ((n = 1) -> ((2 <= n) -> false)).
  (* Invariant *)
  Have: (n = 1) \/ (2 <= n).
  (* Invariant *)
  Have: ((n != 1) -> (2 <= n)).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 20):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (i <= c) /\ (0 <= i).
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 != 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= c_4) -> ((0 <= i_1) ->
      ((i_1 = c_4) \/ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 < n))).
  (* Invariant *)
  Have: c_4 < n.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: ((n = c) -> (0 < c)).
  (* Invariant *)
  Have: ((n = c) -> ((c < n) -> false)).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c = 1) \/ (n != c).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
}
Prove: (i = c) \/ (i < n).
Prover Z3 4.8.12 returns Valid (Qed:40ms) (10ms) (36309)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (5ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 21):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: n != c_4.
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 != 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= c_4) -> ((0 <= i_1) ->
      ((i_1 = c_4) \/ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 < n))).
  (* Invariant *)
  Have: c_4 < n.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: ((n = c) -> (0 < c)).
  (* Invariant *)
  Have: ((n = c) -> ((c < n) -> false)).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c = 1) \/ (n != c).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= c) -> ((0 <= i_1) ->
      ((i_1 = c) \/ (i_1 < n)))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (36731)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (5ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 24):
Let x = 1 + c.
Let x_1 = 2 + c.
Assume {
  Type: is_sint32(c) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: n != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: n != c.
  (* Invariant *)
  Have: (c = 0) \/ (c != 1).
  (* Invariant *)
  Have: forall i : Z. ((i <= c) -> ((0 <= i) -> ((i = c) \/ (i < n)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i < n))).
  (* Invariant *)
  Have: c < n.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (-1) <= c.
  (* Invariant *)
  Have: ((x = n) -> ((x_1 <= n) -> false)).
  (* Invariant *)
  Have: (x = n) \/ (x_1 <= n).
  (* Invariant *)
  Have: (c = 0) \/ (x != n).
  (* Invariant *)
  Have: ((x != n) -> (x_1 <= n)).
  (* Invariant *)
  Have: (c = (-1)) \/ (c != 0).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((x = i) \/ (i < n)))).
  (* Invariant *)
  Have: forall i : Z. ((i <= c) -> ((0 <= i) -> (i < n))).
}
Prove: x_1 <= n.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (34060)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (3ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0002/61_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0002/61_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0002/61_merged.c, line 29) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0002/61_merged.c, line 29) (2/3):
Call Result at line 31
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/61_0002/61_merged.c, line 29) (3/3):
Call Result at line 32
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/61_0002/61_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/61_0002/61_merged.c:32: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
