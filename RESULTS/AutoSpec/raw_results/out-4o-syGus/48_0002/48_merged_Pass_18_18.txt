[kernel] Parsing out/48_0002/48_merged.c (with preprocessing)
[kernel:typing:no-proto] out/48_0002/48_merged.c:20: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/48_0002/48_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              12
  Alt-Ergo 2.5.4:    6 (0.90ms-4ms-5ms)
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: (n = c) \/ (c < n).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34287)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (n = c) \/ (c < n).
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (33878)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (n != c) /\ (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c < n.
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (33991)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (3ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c < n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i < n))).
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (34928)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (0.90ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c) -> (i_1 < n))))).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34997)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i < n))).
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (34483)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/48_0002/48_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/48_0002/48_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/48_0002/48_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/48_0002/48_merged.c, line 17) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/48_0002/48_merged.c, line 17) (2/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/48_0002/48_merged.c, line 17) (3/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/48_0002/48_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/48_0002/48_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
