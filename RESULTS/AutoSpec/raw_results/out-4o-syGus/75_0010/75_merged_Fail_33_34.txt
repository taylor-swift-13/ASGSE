[kernel] Parsing out/75_0010/75_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/75_0010/75_merged.c:28: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/75_0010/75_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 16ms) (Z3)
[wp] Proved goals:   33 / 34
  Qed:              29
  Alt-Ergo 2.5.4:    4 (5ms-7ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 10):
Let x = 36 * y.
Let x_1 = c + x.
Let x_2 = 1 + c.
Let x_3 = 1 + c + x.
Assume {
  Type: is_sint32(c) /\ is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Residual *)
  When: c <= 35.
  (* Pre-condition *)
  Have: 127 <= y.
  (* Invariant *)
  Have: c <= 36.
  (* Invariant *)
  Have: (x_1 % 36) = c.
  (* Invariant *)
  Have: 0 <= c.
  (* Invariant *)
  Have: (c = 0) \/ (0 < c).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (i <= c))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c) -> (0 < c))).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_3 % 36) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 13):
Let x = 1 + z.
Let x_1 = x % 36.
Let x_2 = 36 * y.
Let x_3 = 35 + x_2.
Let x_4 = x_2 + x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_2) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1) /\ is_sint32(x_4).
  (* Residual *)
  When: x_1 <= 36.
  (* Pre-condition *)
  Have: 127 <= y.
  (* Invariant *)
  Have: x_1 <= 37.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 % 36)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x_1 = 1) \/ (2 <= x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) -> (i < x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) -> (2 <= x_1))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_2 + x_1) = x.
  (* Invariant *)
  Have: z <= x_3.
  (* Invariant *)
  Have: ((x_1 = 36) -> (x_3 = z)).
}
Prove: x_2 <= z.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34945)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 14):
Let x = 36 * y.
Let x_1 = 1 + z.
Let x_2 = x_1 % 36.
Let x_3 = 35 + x.
Let x_4 = x + x_2 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1) /\
      is_sint32(x_4).
  (* Residual *)
  When: x_2 <= 36.
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: 127 <= y.
  (* Invariant *)
  Have: x_2 <= 37.
  (* Invariant *)
  Have: x_2 = (1 + (x_4 % 36)).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (x_2 = 1) \/ (2 <= x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_2) -> (i_1 < x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_2) -> (2 <= x_2))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x + x_2) = x_1.
  (* Invariant *)
  Have: z <= x_3.
  (* Invariant *)
  Have: ((x_2 = 36) -> (x_3 = z)).
  (* Invariant *)
  Have: x <= z.
}
Prove: (i + x) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (35360)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 15):
Let x = z % 36.
Let x_1 = 36 * y.
Let x_2 = 36 + x_1.
Let x_3 = c_1 + x_1.
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(tmp_0) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: 127 <= y.
  (* Invariant *)
  Have: c_1 <= 36.
  (* Invariant *)
  Have: (x_3 % 36) = c_1.
  (* Invariant *)
  Have: 0 <= c_1.
  (* Invariant *)
  Have: (c_1 = 0) \/ (0 < c_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_1) -> (i_1 <= c_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_1) -> (0 < c_1))).
  (* Invariant *)
  Have: ((36 <= c_1) -> (c_1 = 36)).
  (* Then *)
  Have: tmp_0 != 0.
  If c_1 <= 35
  Then {
    Let x_4 = 1 + z_1.
    Let x_5 = x_4 % 36.
    Have: (x_5 = (1 + c)) /\ (x_5 = (1 + c_1)) /\ ((x_1 + x_5) = x_4).
    Have: x_4 = z.
  }
  Else { Have: x_2 = z. }
  (* Invariant *)
  Have: z <= x_2.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 36).
  (* Invariant *)
  Have: ((x = 36) -> (x_2 = z)).
  (* Invariant *)
  Have: (x = 0) \/ (x_1 < z).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> ((i_1 + x_1) <= z))).
}
Prove: (i + x_1) <= z.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (61961)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (7ms) (75)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 17):
Let x = 1 + z.
Let x_1 = x % 36.
Let x_2 = 36 * y.
Let x_3 = 35 + x_2.
Let x_4 = x_2 + x_1 - 1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_2) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1) /\ is_sint32(x_4).
  (* Residual *)
  When: x_1 <= 36.
  (* Pre-condition *)
  Have: 127 <= y.
  (* Invariant *)
  Have: x_1 <= 37.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 % 36)).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x_1 = 1) \/ (2 <= x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) -> (i < x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) -> (2 <= x_1))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_2 + x_1) = x.
  (* Invariant *)
  Have: z <= x_3.
  (* Invariant *)
  Have: ((x_1 = 36) -> (x_3 = z)).
  (* Invariant *)
  Have: x_2 <= z.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_1) -> ((i + x_2) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> ((i + x_2) <= x))).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (35343)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (6ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/75_0010/75_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/75_0010/75_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/75_0010/75_merged.c, line 25) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/75_0010/75_merged.c, line 25) (2/2):
Call Result at line 28
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/75_0010/75_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/75_0010/75_merged.c:28: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
