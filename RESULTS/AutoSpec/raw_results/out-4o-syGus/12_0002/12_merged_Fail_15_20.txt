[kernel] Parsing out/12_0002/12_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/12_0002/12_merged.c:25: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0002/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 4ms) (Z3)
[wp] Proved goals:   15 / 20
  Qed:              10
  Alt-Ergo 2.5.4:    5
  Timeout:           5
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 13):
Let x_2 = 10 + (10 * (x / 10)).
Let x_3 = 10 * y_1.
Let x_4 = 10 + x_3.
Let x_5 = 10 + (10 * (y_1 / 10)).
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(10 + y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (10 + (10 * x)).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= y.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 14):
Let x_2 = 10 * y_1.
Let x_3 = 10 + (10 * (x / 10)).
Let x_4 = 10 + x_2.
Let x_5 = 10 * (y_1 / 10).
Let x_6 = 10 + x_5.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(10 + y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_6.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (10 + (10 * x)).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: y_1 <= y.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_2.
}
Prove: y <= x_5.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: y <= (10 + (10 * (y / 10))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (30271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 15):
Let x_2 = 10 * (y / 10).
Let x_3 = 10 * y.
Let x_4 = 10 + (10 * (x_1 / 10)).
Let x_5 = 10 + x_3.
Let x_6 = 10 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(10 + x) /\ is_sint32(10 + y_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: y_1 <= x_6.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x <= (10 + (10 * x_1)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: y <= y_1.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_3.
  (* Invariant *)
  Have: y_1 <= x_2.
}
Prove: x <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
}
Prove: x <= (10 + (10 * y)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30197)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (23)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 16):
Let x_2 = 10 * y.
Let x_3 = 10 * (y / 10).
Let x_4 = 10 + (10 * (x_1 / 10)).
Let x_5 = 10 * x_1.
Let x_6 = 10 + x_2.
Let x_7 = 10 + x_3.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(10 + x) /\ is_sint32(10 + y_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= x_7.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: y_1 <= x_6.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x <= (10 + x_5).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: y <= y_1.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= x_3.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: x <= x_5.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 17):
Let x_2 = 10 * x_1.
Let x_3 = 10 * y.
Let x_4 = 10 * (y / 10).
Let x_5 = 10 * (x_1 / 10).
Let x_6 = 10 + x_5.
Let x_7 = 10 + x_3.
Let x_8 = 10 + x_4.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(10 + x) /\ is_sint32(10 + y_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: x <= (10 + x_2).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: y <= y_1.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_3.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: x <= x_5.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 17):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * y)).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x <= (10 + (10 * (x / 10))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (31210)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (116)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 18):
Let x_2 = 10 * (x / 10).
Let x_3 = 10 * x.
Let x_4 = 10 * y.
Let x_5 = 10 * (y / 10).
Let x_6 = 10 + x_2.
Let x_7 = 10 + x_4.
Let x_8 = 10 + x_5.
Let x_9 = 10 + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(10 + x_1) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_1 <= (10 + x_3).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: y <= y_1.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: y <= x_9.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33751)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 19):
Let x_2 = 10 + y_1.
Let x_3 = 10 * (x / 10).
Let x_4 = 10 * x.
Let x_5 = 10 * y.
Let x_6 = 10 * (y / 10).
Let x_7 = 10 + x_3.
Let x_8 = 10 + x_5.
Let x_9 = 10 + x_6.
Let x_10 = 10 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_10) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= x_9.
  (* Invariant *)
  Have: x <= x_8.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: y_1 <= x_9.
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: x_1 <= (10 + x_4).
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: y <= y_1.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: y_1 <= x_6.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: y <= x_2.
}
Prove: x <= x_10.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33855)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0002/12_merged.c, line 22) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0002/12_merged.c, line 22) (2/2):
Call Result at line 25
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0002/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0002/12_merged.c:25: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
