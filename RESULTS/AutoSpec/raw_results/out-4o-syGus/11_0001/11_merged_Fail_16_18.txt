[kernel] Parsing out/11_0001/11_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/11_0001/11_merged.c:19: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/11_0001/11_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] Proved goals:   16 / 18
  Qed:              10
  Alt-Ergo 2.5.4:    3 (3ms-21ms-52ms)
  Z3 4.8.12:         3 (20ms-23ms-30ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 8):
Let x_2 = 20 + (10 * (x / 10)).
Let x_3 = 10 * (y_1 / 10).
Let x_4 = 20 + x_3.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(10 + y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (y % 10) = (y_1 % 10).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((y - y_1) % 10) = 0.
  (* Invariant *)
  Have: ((x_1 - x) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= (10 + x_3).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 8):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
}
Prove: y <= (20 + (10 * (y / 10))).
Prover Z3 4.8.12 returns Valid (Qed:0.64ms) (20ms) (30162)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.64ms) (3ms) (62)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 9):
Let x_2 = 10 * (y_1 / 10).
Let x_3 = 20 + (10 * (x / 10)).
Let x_4 = y_1 % 10.
Let x_5 = 20 + x_2.
Let x_6 = 10 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (y % 10) = x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((y - y_1) % 10) = 0.
  (* Invariant *)
  Have: ((x_1 - x) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= (10 + x_2).
}
Prove: (x_6 % 10) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (65165)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 10):
Let x_2 = 10 + y_1.
Let x_3 = y % 10.
Let x_4 = 10 * (y / 10).
Let x_5 = 10 * (x_1 / 10).
Let x_6 = 20 + x_5.
Let x_7 = 20 + x_4.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(10 + x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= x_7.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: (y_1 % 10) = x_3.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: (x % 10) = (x_1 % 10).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((y_1 - y) % 10) = 0.
  (* Invariant *)
  Have: ((x - x_1) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= (10 + x_4).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
}
Prove: x <= (10 + x_5).
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 10):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= (20 + (10 * (y / 10))).
}
Prove: x <= (20 + (10 * (x / 10))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30669)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (9ms) (105)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 11):
Let x_2 = 10 * (x_1 / 10).
Let x_3 = 10 + y_1.
Let x_4 = y % 10.
Let x_5 = 10 * (y / 10).
Let x_6 = x_1 % 10.
Let x_7 = 20 + x_2.
Let x_8 = 20 + x_5.
Let x_9 = 10 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_9) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: (y_1 % 10) = x_4.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: (x % 10) = x_6.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((y_1 - y) % 10) = 0.
  (* Invariant *)
  Have: ((x - x_1) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= (10 + x_5).
  (* Invariant *)
  Have: (x_3 % 10) = x_4.
  (* Invariant *)
  Have: x <= (10 + x_2).
}
Prove: (x_9 % 10) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (88123)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (52ms) (761)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 14):
Let x_2 = 10 + x_1.
Let x_3 = x % 10.
Let x_4 = 10 * (x / 10).
Let x_5 = 10 + y.
Let x_6 = y_1 % 10.
Let x_7 = 10 * (y_1 / 10).
Let x_8 = -y_1.
Let x_9 = 20 + x_4.
Let x_10 = 20 + x_7.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= x_10.
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: y <= x_10.
  (* Invariant *)
  Have: (y % 10) = x_6.
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: (x_1 % 10) = x_3.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((y - y_1) % 10) = 0.
  (* Invariant *)
  Have: ((x_1 - x) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= (10 + x_7).
  (* Invariant *)
  Have: (x_5 % 10) = x_6.
  (* Invariant *)
  Have: x_1 <= (10 + x_4).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
  (* Invariant *)
  Have: (-10) <= y.
  (* Invariant *)
  Have: (-10) <= x_1.
}
Prove: ((10 + y - y_1) % 10) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (30ms) (62471)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0001/11_merged.c, line 15):
Let x_2 = -y.
Let x_3 = 10 + x.
Let x_4 = x_1 % 10.
Let x_5 = 10 * (x_1 / 10).
Let x_6 = 10 + y_1.
Let x_7 = y % 10.
Let x_8 = 10 * (y / 10).
Let x_9 = -x_1.
Let x_10 = 20 + x_5.
Let x_11 = 20 + x_8.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_3) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= x_11.
  (* Invariant *)
  Have: x_1 <= x_10.
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: (y_1 % 10) = x_7.
  (* Invariant *)
  Have: x <= x_10.
  (* Invariant *)
  Have: (x % 10) = x_4.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((y_1 - y) % 10) = 0.
  (* Invariant *)
  Have: ((x - x_1) % 10) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= (10 + x_8).
  (* Invariant *)
  Have: (x_6 % 10) = x_7.
  (* Invariant *)
  Have: x <= (10 + x_5).
  (* Invariant *)
  Have: (x_3 % 10) = x_4.
  (* Invariant *)
  Have: (-10) <= y_1.
  (* Invariant *)
  Have: (-10) <= x.
  (* Invariant *)
  Have: ((10 + y_1 - y) % 10) = 0.
}
Prove: ((10 + x - x_1) % 10) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (103991)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0001/11_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/11_0001/11_merged.c, line 16) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/11_0001/11_merged.c, line 16) (2/2):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/11_0001/11_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/11_0001/11_merged.c:19: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
