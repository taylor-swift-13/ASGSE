[kernel] Parsing out/10_0003/10_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/10_0003/10_merged.c:24: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/10_0003/10_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_established (Qed 0.98ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_8_established (Qed 1ms) (Z3)
[wp] Proved goals:   24 / 28
  Qed:              16
  Alt-Ergo 2.5.4:    5 (5ms-14ms-42ms)
  Z3 4.8.12:         3 (10ms)
  Timeout:           4
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 8):
Let x_1 = x + y_1 - y.
Let x_2 = 2 * (x_1 / 2).
Let x_3 = 2 * y_1.
Let x_4 = 2 + (2 * (y_1 / 2)).
Let x_5 = x + y_1.
Let x_6 = 2 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_5) /\ (x_5 <= x_6).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_5 <= (2 + y + x_2).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x_3).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (2 * y) <= (2 + x + x_3).
  (* Invariant *)
  Have: x <= (2 + x_2).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= x_3.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 9):
Let x_1 = 2 * y_1.
Let x_2 = x + y_1 - y.
Let x_3 = 2 * (x_2 / 2).
Let x_4 = 2 * (y_1 / 2).
Let x_5 = 2 + x_4.
Let x_6 = x + y_1.
Let x_7 = 2 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_7) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (y <= x_6) /\ (x_6 <= x_7).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_6 <= (2 + y + x_3).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x_1).
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (2 * y) <= (2 + x + x_1).
  (* Invariant *)
  Have: x <= (2 + x_3).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: y <= x_4.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 9):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
}
Prove: y <= (2 + (2 * (y / 2))).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (30271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 10):
Let x_1 = 2 * (y_1 / 2).
Let x_2 = 2 * y_1.
Let x_3 = x + y_1 - y.
Let x_4 = 2 * (x_3 / 2).
Let x_5 = 2 + x_1.
Let x_6 = x + y_1.
Let x_7 = 2 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_7) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (y <= x_6) /\ (x_6 <= x_7).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_5.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_6 <= (2 + y + x_4).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x_2).
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (2 * y) <= (2 + x + x_2).
  (* Invariant *)
  Have: x <= (2 + x_4).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: (x_7 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (48974)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 11):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + (2 * (y / 2))).
}
Prove: (y % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.98ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 12):
Let x_1 = 2 + y.
Let x_2 = 2 * (y_1 / 2).
Let x_3 = 2 * y_1.
Let x_4 = x + y_1 - y.
Let x_5 = 2 * (x_4 / 2).
Let x_6 = 2 * y.
Let x_7 = 2 + x_2.
Let x_8 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(2 + x) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (y <= x_8) /\ (x_8 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_8 <= (2 + y + x_5).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x_3).
  (* Invariant *)
  Have: y <= x_7.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: x_6 <= (2 + x + x_3).
  (* Invariant *)
  Have: x <= (2 + x_5).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
}
Prove: x_6 <= (x + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (38880)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (42ms) (568)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 13):
Let x_1 = 2 * y_1.
Let x_2 = 2 * y.
Let x_3 = 2 + y_1.
Let x_4 = 2 * (y / 2).
Let x_5 = x + y - y_1.
Let x_6 = 2 * (x_5 / 2).
Let x_7 = 2 + x_4.
Let x_8 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(2 + x) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (y_1 <= x_8) /\ (x_8 <= x_3).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_7.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_8 <= (2 + y_1 + x_6).
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: y_1 <= (2 + x_2).
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= (2 + x + x_2).
  (* Invariant *)
  Have: x <= (2 + x_6).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= (x + x_2).
}
Prove: x <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (39169)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + (2 * (y / 2))).
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (-2) <= x.
}
Prove: x <= (2 + (2 * (x / 2))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (31387)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (11ms) (149)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 15):
Let x_1 = x + y.
Let x_2 = 2 * (x / 2).
Let x_3 = 2 + y.
Let x_4 = 2 * (y_1 / 2).
Let x_5 = 2 * y_1.
Let x_6 = -y_1.
Let x_7 = x + y - y_1.
Let x_8 = 2 + x_4.
Let x_9 = 2 + x + y - y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= (2 + x_2).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x_5).
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_1 <= (2 + y_1 + x_2).
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: y <= (x + y_1).
  (* Invariant *)
  Have: x_1 <= (y_1 + x_2).
}
Prove: (x_9 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (45373)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + (2 * (y / 2))).
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= (2 + (2 * (x / 2))).
}
Prove: (x % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 18):
Let x_2 = 2 + x_1.
Let x_3 = 2 * (x / 2).
Let x_4 = 2 * x.
Let x_5 = -x.
Let x_6 = 2 + x_1 + y - x.
Let x_7 = x_1 + y.
Let x_8 = 2 * (y / 2).
Let x_9 = 2 + x_3.
Let x_10 = x_1 + y - x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_10) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + x_8).
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: x_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_7 <= (2 + x + x_8).
  (* Invariant *)
  Have: (x_10 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= (2 + x_4).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_1 <= (x + y).
  (* Invariant *)
  Have: x_7 <= (x + x_8).
  (* Invariant *)
  Have: (x_6 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
}
Prove: x <= (2 + x_1 + y).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34157)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 19):
Let x_1 = -y.
Let x_2 = 2 + x + y_1 - y.
Let x_3 = x + y_1.
Let x_4 = 2 * (x / 2).
Let x_5 = 2 + y_1.
Let x_6 = 2 * (y / 2).
Let x_7 = 2 * y.
Let x_8 = x + y_1 - y.
Let x_9 = 2 + x_6.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_5) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_9.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= (2 + x_4).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: y_1 <= (2 + x_7).
  (* Invariant *)
  Have: y_1 <= x_9.
  (* Invariant *)
  Have: (y_1 % 2) = 0.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_3 <= (2 + y + x_4).
  (* Invariant *)
  Have: (x_8 % 2) = 0.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_7.
  (* Invariant *)
  Have: y_1 <= x_6.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: y_1 <= (x + y).
  (* Invariant *)
  Have: x_3 <= (y + x_4).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (-2) <= y_1.
}
Prove: y <= (2 + x + y_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34265)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0003/10_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0003/10_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Loop assigns (file out/10_0003/10_merged.c, line 21) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/10_0003/10_merged.c, line 21) (2/2):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/10_0003/10_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/10_0003/10_merged.c:24: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
