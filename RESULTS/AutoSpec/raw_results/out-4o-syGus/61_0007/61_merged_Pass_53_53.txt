[kernel] Parsing out/61_0007/61_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/61_0007/61_merged.c:36: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/61_0007/61_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 53 goals scheduled
[wp] Proved goals:   53 / 53
  Qed:              48
  Alt-Ergo 2.5.4:    5 (5ms-5ms-7ms)
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (c_4 = 0) \/ (0 < c_4).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (((c_4 % n) = 0) -> ((c_4 = 0) \/ (n = c_4))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 != (-1))).
  (* Invariant *)
  Have: ((n = c_4) -> (forall i : Z. ((0 <= i) -> ((i < n) -> (n = c_4))))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: (c = 0) \/ (0 < c).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35649)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (c_4 = 0) \/ (0 < c_4).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (((c_4 % n) = 0) -> ((c_4 = 0) \/ (n = c_4))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 != (-1))).
  (* Invariant *)
  Have: ((n = c_4) -> (forall i : Z. ((0 <= i) -> ((i < n) -> (n = c_4))))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (c = 0) \/ (0 < c).
}
Prove: (0 <= c) /\ (c <= n).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (36158)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (101)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (c_4 = 0) \/ (0 < c_4).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (((c_4 % n) = 0) -> ((c_4 = 0) \/ (n = c_4))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 != (-1))).
  (* Invariant *)
  Have: ((n = c_4) -> (forall i : Z. ((0 <= i) -> ((i < n) -> (n = c_4))))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (c = 0) \/ (0 < c).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
}
Prove: (n = c) \/ (c < n).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (35389)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (c % n) = 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (c_4 = 0) \/ (0 < c_4).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (((c_4 % n) = 0) -> ((c_4 = 0) \/ (n = c_4))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < c_4) -> (i < n))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 != (-1))).
  (* Invariant *)
  Have: ((n = c_4) -> (forall i : Z. ((0 <= i) -> ((i < n) -> (n = c_4))))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (c = 0) \/ (0 < c).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
}
Prove: (c = 0) \/ (n = c).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (36176)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (7ms) (87)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 19):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (c_4 = 0) \/ (0 < c_4).
  (* Invariant *)
  Have: (0 <= c_4) /\ (c_4 <= n).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (((c_4 % n) = 0) -> ((c_4 = 0) \/ (n = c_4))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c_4) -> (i_1 < n))).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 != (-1))).
  (* Invariant *)
  Have: ((n = c_4) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (n = c_4))))).
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (c = 0) \/ (0 < c).
  (* Invariant *)
  Have: (0 <= c) /\ (c <= n).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (((c % n) = 0) -> ((c = 0) \/ (n = c))).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (36214)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0007/61_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0007/61_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0007/61_merged.c, line 33) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0007/61_merged.c, line 33) (2/3):
Call Result at line 35
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/61_0007/61_merged.c, line 33) (3/3):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/61_0007/61_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/61_0007/61_merged.c:36: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
