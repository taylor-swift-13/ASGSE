[kernel] Parsing out/10_0001/10_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/10_0001/10_merged.c:26: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/10_0001/10_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_established (Qed 0.73ms) (Z3)
[wp] Proved goals:   29 / 32
  Qed:              20
  Alt-Ergo 2.5.4:    6 (4ms-17ms-67ms)
  Z3 4.8.12:         3 (10ms)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 8):
Let x_1 = x + y_1 - y.
Let x_2 = x_1 % 2.
Let x_3 = x % 2.
Let x_4 = 2 * y_1.
Let x_5 = 2 * y.
Let x_6 = 2 * (x_1 / 2).
Let x_7 = y_1 % 2.
Let x_8 = y % 2.
Let x_9 = 2 + y.
Let x_10 = 2 + (2 * (y_1 / 2)).
Let x_11 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_9) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_11) /\ (x_11 <= x_9).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_10.
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_11 <= (2 + y + x_6).
  (* Invariant *)
  Have: y <= (2 + x_4).
  (* Invariant *)
  Have: y <= x_10.
  (* Invariant *)
  Have: x_4 <= x_9.
  (* Invariant *)
  Have: x_8 = x_3.
  (* Invariant *)
  Have: x_7 = x_8.
  (* Invariant *)
  Have: x_5 <= (2 + x + x_4).
  (* Invariant *)
  Have: x <= (2 + x_6).
  (* Invariant *)
  Have: (x + x_4) <= (2 + x_5).
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= x_4.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 10):
Let x_1 = 2 * y_1.
Let x_2 = x + y_1 - y.
Let x_3 = x_2 % 2.
Let x_4 = x % 2.
Let x_5 = 2 * y.
Let x_6 = 2 * (x_2 / 2).
Let x_7 = y_1 % 2.
Let x_8 = y % 2.
Let x_9 = 2 + y.
Let x_10 = 2 * (y_1 / 2).
Let x_11 = 2 + x_10.
Let x_12 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_9) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (y <= x_12) /\ (x_12 <= x_9).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_12 <= (2 + y + x_6).
  (* Invariant *)
  Have: y <= (2 + x_1).
  (* Invariant *)
  Have: y <= x_11.
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: x_8 = x_4.
  (* Invariant *)
  Have: x_7 = x_8.
  (* Invariant *)
  Have: x_5 <= (2 + x + x_1).
  (* Invariant *)
  Have: x <= (2 + x_6).
  (* Invariant *)
  Have: (x + x_1) <= (2 + x_5).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: y <= x_10.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 10):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
}
Prove: y <= (2 + (2 * (y / 2))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 11):
Let x_1 = 2 * (y / 2).
Let x_2 = 2 * y.
Let x_3 = x + y - y_1.
Let x_4 = x_3 % 2.
Let x_5 = x % 2.
Let x_6 = 2 * y_1.
Let x_7 = 2 * (x_3 / 2).
Let x_8 = y_1 % 2.
Let x_9 = y % 2.
Let x_10 = 2 + y_1.
Let x_11 = 2 + x_1.
Let x_12 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_10) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (y_1 <= x_12) /\ (x_12 <= x_10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_11.
  (* Invariant *)
  Have: x_4 = x_9.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_12 <= (2 + y_1 + x_7).
  (* Invariant *)
  Have: y_1 <= (2 + x_2).
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: x_2 <= x_10.
  (* Invariant *)
  Have: x_8 = x_5.
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: x_6 <= (2 + x + x_2).
  (* Invariant *)
  Have: x <= (2 + x_7).
  (* Invariant *)
  Have: (x + x_2) <= (2 + x_6).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= x_1.
}
Prove: x_2 <= (4 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (33893)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 12):
Let x_1 = 2 * y_1.
Let x_2 = 2 * (y_1 / 2).
Let x_3 = x + y_1 - y.
Let x_4 = x_3 % 2.
Let x_5 = x % 2.
Let x_6 = 2 * y.
Let x_7 = 2 * (x_3 / 2).
Let x_8 = y_1 % 2.
Let x_9 = y % 2.
Let x_10 = 2 + y.
Let x_11 = 2 + x_2.
Let x_12 = x + y_1.
Let x_13 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_13) /\ is_sint32(x_10) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (y <= x_12) /\ (x_12 <= x_10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: x_4 = x_8.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_12 <= (2 + y + x_7).
  (* Invariant *)
  Have: y <= (2 + x_1).
  (* Invariant *)
  Have: y <= x_11.
  (* Invariant *)
  Have: x_1 <= x_10.
  (* Invariant *)
  Have: x_9 = x_5.
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: x_6 <= (2 + x + x_1).
  (* Invariant *)
  Have: x <= (2 + x_7).
  (* Invariant *)
  Have: (x + x_1) <= (2 + x_6).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: x_1 <= (4 + y).
}
Prove: (x_10 % 2) = (x_13 % 2).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (58299)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 12):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + (2 * (y / 2))).
}
Prove: (y % 2) = (x % 2).
Prover Z3 4.8.12 returns Timeout (Qed:0.73ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.73ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 13):
Let x_1 = 2 + y.
Let x_2 = x_1 % 2.
Let x_3 = 2 + x.
Let x_4 = 2 * y_1.
Let x_5 = 2 * (y_1 / 2).
Let x_6 = x + y_1 - y.
Let x_7 = x_6 % 2.
Let x_8 = x % 2.
Let x_9 = 2 * y.
Let x_10 = 2 * (x_6 / 2).
Let x_11 = y_1 % 2.
Let x_12 = y % 2.
Let x_13 = 2 + x_5.
Let x_14 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (y <= x_14) /\ (x_14 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_13.
  (* Invariant *)
  Have: x_7 = x_11.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_14 <= (2 + y + x_10).
  (* Invariant *)
  Have: y <= (2 + x_4).
  (* Invariant *)
  Have: y <= x_13.
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: x_12 = x_8.
  (* Invariant *)
  Have: x_11 = x_12.
  (* Invariant *)
  Have: x_9 <= (2 + x + x_4).
  (* Invariant *)
  Have: x <= (2 + x_10).
  (* Invariant *)
  Have: (x + x_4) <= (2 + x_9).
  (* Invariant *)
  Have: x_7 = x_8.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_4 <= (4 + y).
  (* Invariant *)
  Have: x_2 = (x_3 % 2).
}
Prove: x_2 = x_11.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (44305)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (67ms) (779)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 14):
Let x_1 = 2 + y.
Let x_2 = x_1 % 2.
Let x_3 = y_1 % 2.
Let x_4 = 2 + x.
Let x_5 = 2 * y_1.
Let x_6 = 2 * (y_1 / 2).
Let x_7 = x + y_1 - y.
Let x_8 = x_7 % 2.
Let x_9 = x % 2.
Let x_10 = x + x_5.
Let x_11 = 2 * y.
Let x_12 = 2 * (x_7 / 2).
Let x_13 = y % 2.
Let x_14 = 2 + x_6.
Let x_15 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_4) /\ is_sint32(x_1) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: (y <= x_15) /\ (x_15 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: (-2) <= y_1.
  (* Invariant *)
  Have: y_1 <= x_14.
  (* Invariant *)
  Have: x_8 = x_3.
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_15 <= (2 + y + x_12).
  (* Invariant *)
  Have: y <= (2 + x_5).
  (* Invariant *)
  Have: y <= x_14.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_13 = x_9.
  (* Invariant *)
  Have: x_3 = x_13.
  (* Invariant *)
  Have: x_11 <= (2 + x + x_5).
  (* Invariant *)
  Have: x <= (2 + x_12).
  (* Invariant *)
  Have: x_10 <= (2 + x_11).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: x_5 <= (4 + y).
  (* Invariant *)
  Have: x_2 = (x_4 % 2).
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: x_11 <= x_10.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (41149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 16):
Let x_1 = 2 * y_1.
Let x_2 = 2 * y.
Let x_3 = x + x_2.
Let x_4 = 2 + y_1.
Let x_5 = x_4 % 2.
Let x_6 = y % 2.
Let x_7 = 2 + x.
Let x_8 = 2 * (y / 2).
Let x_9 = x + y - y_1.
Let x_10 = x_9 % 2.
Let x_11 = x % 2.
Let x_12 = 2 * (x_9 / 2).
Let x_13 = y_1 % 2.
Let x_14 = 2 + x_8.
Let x_15 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (y_1 <= x_15) /\ (x_15 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_14.
  (* Invariant *)
  Have: x_10 = x_6.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_15 <= (2 + y_1 + x_12).
  (* Invariant *)
  Have: y_1 <= (2 + x_2).
  (* Invariant *)
  Have: y_1 <= x_14.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_13 = x_11.
  (* Invariant *)
  Have: x_6 = x_13.
  (* Invariant *)
  Have: x_1 <= (2 + x + x_2).
  (* Invariant *)
  Have: x <= (2 + x_12).
  (* Invariant *)
  Have: x_3 <= (2 + x_1).
  (* Invariant *)
  Have: x_10 = x_11.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_2.
  (* Invariant *)
  Have: y_1 <= x_8.
  (* Invariant *)
  Have: x_2 <= (4 + y_1).
  (* Invariant *)
  Have: x_5 = (x_7 % 2).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: x_1 <= x_3.
}
Prove: x <= x_12.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (41217)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 16):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 2).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= (2 + (2 * (y / 2))).
  (* Invariant *)
  Have: (y % 2) = (x % 2).
  (* Invariant *)
  Have: (-2) <= x.
}
Prove: x <= (2 + (2 * (x / 2))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (32029)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (13ms) (189)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 17):
Let x_1 = x + y - y_1.
Let x_2 = 2 * (x_1 / 2).
Let x_3 = 2 * y_1.
Let x_4 = 2 * y.
Let x_5 = x + x_4.
Let x_6 = 2 + y_1.
Let x_7 = x_6 % 2.
Let x_8 = y % 2.
Let x_9 = 2 + x.
Let x_10 = 2 * (y / 2).
Let x_11 = x_1 % 2.
Let x_12 = x % 2.
Let x_13 = y_1 % 2.
Let x_14 = 2 + x_10.
Let x_15 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_9) /\ is_sint32(x_6) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y_1 <= x_15) /\ (x_15 <= x_6).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_14.
  (* Invariant *)
  Have: x_11 = x_8.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_15 <= (2 + y_1 + x_2).
  (* Invariant *)
  Have: y_1 <= (2 + x_4).
  (* Invariant *)
  Have: y_1 <= x_14.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_13 = x_12.
  (* Invariant *)
  Have: x_8 = x_13.
  (* Invariant *)
  Have: x_3 <= (2 + x + x_4).
  (* Invariant *)
  Have: x <= (2 + x_2).
  (* Invariant *)
  Have: x_5 <= (2 + x_3).
  (* Invariant *)
  Have: x_11 = x_12.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Invariant *)
  Have: y_1 <= x_10.
  (* Invariant *)
  Have: x_4 <= (4 + y_1).
  (* Invariant *)
  Have: x_7 = (x_9 % 2).
  (* Invariant *)
  Have: x_7 = x_8.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: x_5 <= (4 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34999)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 18):
Let x_1 = 2 * y.
Let x_2 = x + x_1.
Let x_3 = 2 * y_1.
Let x_4 = x + y - y_1.
Let x_5 = 2 * (x_4 / 2).
Let x_6 = 2 + y_1.
Let x_7 = x_6 % 2.
Let x_8 = y % 2.
Let x_9 = 2 + x.
Let x_10 = x_9 % 2.
Let x_11 = 2 * (y / 2).
Let x_12 = x_4 % 2.
Let x_13 = x % 2.
Let x_14 = y_1 % 2.
Let x_15 = 2 + x_11.
Let x_16 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_9) /\ is_sint32(x_6) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (y_1 <= x_16) /\ (x_16 <= x_6).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: (-2) <= y.
  (* Invariant *)
  Have: y <= x_15.
  (* Invariant *)
  Have: x_12 = x_8.
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_16 <= (2 + y_1 + x_5).
  (* Invariant *)
  Have: y_1 <= (2 + x_1).
  (* Invariant *)
  Have: y_1 <= x_15.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_14 = x_13.
  (* Invariant *)
  Have: x_8 = x_14.
  (* Invariant *)
  Have: x_3 <= (2 + x + x_1).
  (* Invariant *)
  Have: x <= (2 + x_5).
  (* Invariant *)
  Have: x_2 <= (2 + x_3).
  (* Invariant *)
  Have: x_12 = x_13.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: x_1 <= (4 + y_1).
  (* Invariant *)
  Have: x_7 = x_10.
  (* Invariant *)
  Have: x_7 = x_8.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x_2 <= (4 + x_3).
}
Prove: x_12 = x_10.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (41306)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Loop assigns (file out/10_0001/10_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/10_0001/10_merged.c, line 23) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/10_0001/10_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/10_0001/10_merged.c:26: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
