[kernel] Parsing out/10_0001/10_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/10_0001/10_merged.c:20: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/10_0001/10_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   19 / 20
  Qed:              15
  Alt-Ergo 2.5.4:    3 (4ms-13ms-28ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 8):
Let x_1 = x + y - y_1.
Let x_2 = 2 * y.
Let x_3 = 2 * y_1.
Let x_4 = 2 + y_1.
Let x_5 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y_1 <= x_5) /\ (x_5 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (y_1 % 2) = (y % 2).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_2).
  (* Invariant *)
  Have: (x + x_2) <= (2 + x_3).
  (* Invariant *)
  Have: (x_1 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_2 <= (4 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32269)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 9):
Let x_1 = 2 * y_1.
Let x_2 = x + y_1 - y.
Let x_3 = 2 * y.
Let x_4 = y_1 % 2.
Let x_5 = 2 + y.
Let x_6 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (y <= x_6) /\ (x_6 <= x_5).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_4 = (y % 2).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_1).
  (* Invariant *)
  Have: (x + x_1) <= (2 + x_3).
  (* Invariant *)
  Have: (x_2 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_1 <= (4 + y).
}
Prove: (x_5 % 2) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (50ms) (124478)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (28ms) (479)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 10):
Let x_1 = 2 + y.
Let x_2 = y_1 % 2.
Let x_3 = 2 * y_1.
Let x_4 = x + y_1 - y.
Let x_5 = x + x_3.
Let x_6 = 2 * y.
Let x_7 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(2 + x) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: (y <= x_7) /\ (x_7 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 2).
  (* Invariant *)
  Have: y <= (2 + x + y_1).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x_2 = (y % 2).
  (* Invariant *)
  Have: x_6 <= (2 + x + x_3).
  (* Invariant *)
  Have: x_5 <= (2 + x_6).
  (* Invariant *)
  Have: (x_4 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_3 <= (4 + y).
  (* Invariant *)
  Have: (x_1 % 2) = x_2.
}
Prove: x_6 <= x_5.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 11):
Let x_1 = 2 * y_1.
Let x_2 = 2 * y.
Let x_3 = x + x_2.
Let x_4 = 2 + y_1.
Let x_5 = y % 2.
Let x_6 = x + y - y_1.
Let x_7 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(2 + x) /\ is_sint32(x_4) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (y_1 <= x_7) /\ (x_7 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_5 = (y_1 % 2).
  (* Invariant *)
  Have: x_1 <= (2 + x + x_2).
  (* Invariant *)
  Have: x_3 <= (2 + x_1).
  (* Invariant *)
  Have: (x_6 % 2) = (x % 2).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 <= (4 + y_1).
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: x_1 <= x_3.
}
Prove: x_3 <= (4 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33008)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 12):
Let x_1 = 2 * y.
Let x_2 = x + x_1.
Let x_3 = 2 * y_1.
Let x_4 = 2 + y_1.
Let x_5 = y % 2.
Let x_6 = x + y - y_1.
Let x_7 = x_6 % 2.
Let x_8 = x + y.
Let x_9 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_9) /\ is_sint32(x_4) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (y_1 <= x_8) /\ (x_8 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 2).
  (* Invariant *)
  Have: y_1 <= (2 + x + y).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_5 = (y_1 % 2).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_1).
  (* Invariant *)
  Have: x_2 <= (2 + x_3).
  (* Invariant *)
  Have: x_7 = (x % 2).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_1 <= (4 + y_1).
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_2 <= (4 + x_3).
}
Prove: x_7 = (x_9 % 2).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (51722)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/10_0001/10_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/10_0001/10_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Loop assigns (file out/10_0001/10_merged.c, line 17) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/10_0001/10_merged.c, line 17) (2/2):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/10_0001/10_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/10_0001/10_merged.c:20: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
