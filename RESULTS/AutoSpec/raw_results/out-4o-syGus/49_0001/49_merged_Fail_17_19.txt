[kernel] Parsing out/49_0001/49_merged.c (with preprocessing)
[kernel:typing:no-proto] out/49_0001/49_merged.c:21: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/49_0001/49_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   17 / 19
  Qed:              13
  Alt-Ergo 2.5.4:    4
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (c_4 = 1) \/ (n != c_4).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (0 < c_4)).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (forall i : Z. (0 <= i) /\ (i < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: (n = c) \/ (c < n).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34763)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (c_4 = 1) \/ (n != c_4).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (0 < c_4)).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (forall i : Z. (0 <= i) /\ (i < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (n = c) \/ (c < n).
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (34342)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < c.
  (* Invariant *)
  Have: (c_2 = c) \/ (c_2 < c).
  (* Invariant *)
  Have: c_2 <= c.
  (* Invariant *)
  Have: (c_2 = 1) \/ (c_2 != c).
  (* Invariant *)
  Have: (c_2 != c) \/ ((c_2 = c) /\ (0 < c_2)).
  (* Invariant *)
  Have: (c_2 != c) \/ ((c_2 = c) /\ (forall i : Z. (0 <= i) /\ (i < c_2))).
  (* Invariant *)
  Have: 0 <= c_2.
  (* Then *)
  Have: tmp_0_0 != 0.
  If c_2 != c
  Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
}
Prove: c = 1.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: (c_1 = 1) \/ (c_1 <= 0).
  (* Invariant *)
  Have: c_1 <= 1.
  (* Invariant *)
  Have: (c_1 != 1) \/ ((c_1 = 1) /\ (0 < c_1)).
  (* Invariant *)
  Have: (c_1 != 1) \/
      ((c_1 = 1) /\ (forall i_1 : Z. (0 <= i_1) /\ (i_1 < c_1))).
  (* Invariant *)
  Have: 0 <= c_1.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then { Have: c_1 = c. If c != 1 Then { Have: c = 0. } }
  Else { Have: c_1 = 1. }
}
Prove: (i <= 0) /\ (0 <= i).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 15):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (c_4 = 1) \/ (n != c_4).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (0 < c_4)).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (forall i : Z. (0 <= i) /\ (i < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c < n.
}
Prove: 0 <= c.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (c_4 = 1) \/ (n != c_4).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (0 < c_4)).
  (* Invariant *)
  Have: (n != c_4) \/ ((n = c_4) /\ (forall i : Z. (0 <= i) /\ (i < c_4))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: (c = 1) \/ (n != c).
  (* Invariant *)
  Have: (n != c) \/ ((n = c) /\ (0 < c)).
  (* Invariant *)
  Have: (n != c) \/ ((n = c) /\ (forall i : Z. (0 <= i) /\ (i < c))).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (34897)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (4ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/49_0001/49_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/49_0001/49_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/49_0001/49_merged.c, line 18) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/49_0001/49_merged.c, line 18) (2/3):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/49_0001/49_merged.c, line 18) (3/3):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/49_0001/49_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/49_0001/49_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
