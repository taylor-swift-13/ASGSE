[kernel] Parsing out/84_0003/84_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 15 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_4_preserved (Qed 2ms) (Z3)
[wp] Proved goals:   14 / 15
  Qed:              13
  Alt-Ergo 2.5.4:    1
  Timeout:           1
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 6):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 9):
Let x_1 = x + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + y) /\ is_sint32(x_1).
  (* Invariant *)
  Have: x <= 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-50) <= x_1.
  (* Then *)
  Have: x < 0.
}
Prove: (x + (2 * y)) < 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/84_0003/84_merged.c, line 12):
Let x_1 = x + (2 * y).
Let x_2 = x + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x <= 0.
  (* Invariant *)
  Have: x_2 <= 0.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-50) <= x_2.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 < 0.
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: (-51) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30715)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/84_0003/84_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Loop assigns (file out/84_0003/84_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/84_0003/84_merged.c:1: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
