[kernel] Parsing out/12_0003/12_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/12_0003/12_merged.c:29: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0003/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_6_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_preserved (Qed 5ms) (Z3)
[wp] Proved goals:   25 / 28
  Qed:              16
  Alt-Ergo 2.5.4:    7 (4ms-37ms-149ms)
  Z3 4.8.12:         2 (10ms-20ms)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 14):
Let x_1 = x + y_1 - y.
Let x_2 = 10 * y_1.
Let x_3 = 10 + x_2.
Let x_4 = x + y_1.
Let x_5 = 10 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_4) /\ (x_4 <= x_5).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + y + (9 * y_1)).
  (* Invariant *)
  Have: y <= (1 + x + y_1).
  (* Invariant *)
  Have: x_4 <= (10 + y + (10 * (x_1 / 10))).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y_1 % 10) = (y % 10).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (10 * y) <= (10 + (9 * x) + x_2).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= x_2.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 15):
Let x_1 = 10 * y_1.
Let x_2 = x + y_1 - y.
Let x_3 = 10 + x_1.
Let x_4 = x + y_1.
Let x_5 = 10 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (y <= x_4) /\ (x_4 <= x_5).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + y + (9 * y_1)).
  (* Invariant *)
  Have: y <= (1 + x + y_1).
  (* Invariant *)
  Have: x_4 <= (10 + y + (10 * (x_2 / 10))).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = (y_1 % 10).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (10 * y) <= (10 + (9 * x) + x_1).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_2 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: y <= (10 * (x_5 / 10)).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (40330)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: y <= (10 + (10 * (y / 10))).
Prover Z3 4.8.12 returns Valid (Qed:0.74ms) (10ms) (30271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.74ms) (7ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 16):
Let x_1 = 10 + y.
Let x_2 = 10 * y_1.
Let x_3 = x + y_1 - y.
Let x_4 = 10 + x_2.
Let x_5 = y_1 % 10.
Let x_6 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (y <= x_6) /\ (x_6 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + y + (9 * y_1)).
  (* Invariant *)
  Have: y <= (1 + x + y_1).
  (* Invariant *)
  Have: x_6 <= (10 + y + (10 * (x_3 / 10))).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x_5 = (y % 10).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (10 * y) <= (10 + (9 * x) + x_2).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_3 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: y <= (10 * (x_1 / 10)).
}
Prove: (x_1 % 10) = x_5.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (76ms) (865)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 18):
Let x_1 = 10 + y.
Let x_2 = y_1 % 10.
Let x_3 = 10 * y_1.
Let x_4 = x + y.
Let x_5 = -y_1.
Let x_6 = x + y - y_1.
Let x_7 = 11 * y_1.
Let x_8 = 10 + x_3.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(10 + x + y - y_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= x_8.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x_2 = (y % 10).
  (* Invariant *)
  Have: x_4 <= (10 + x_7).
  (* Invariant *)
  Have: y <= (10 + y_1 + (9 * x)).
  (* Invariant *)
  Have: x_4 <= (10 + y_1 + (10 * (x_6 / 10))).
  (* Invariant *)
  Have: (x_6 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= (10 * (x_1 / 10)).
  (* Invariant *)
  Have: (x_1 % 10) = x_2.
}
Prove: x_4 <= x_7.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 18):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
}
Prove: x <= (10 + (10 * y)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30197)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (23)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 19):
Let x_1 = x + y.
Let x_2 = 11 * y_1.
Let x_3 = 10 + y.
Let x_4 = y_1 % 10.
Let x_5 = 10 * y_1.
Let x_6 = -y_1.
Let x_7 = x + y - y_1.
Let x_8 = 9 * x.
Let x_9 = 10 + x_5.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(10 + x + y - y_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= x_9.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = x_4.
  (* Invariant *)
  Have: x_1 <= (10 + x_2).
  (* Invariant *)
  Have: y <= (10 + y_1 + x_8).
  (* Invariant *)
  Have: x_1 <= (10 + y_1 + (10 * (x_7 / 10))).
  (* Invariant *)
  Have: (x_7 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: y <= (10 * (x_3 / 10)).
  (* Invariant *)
  Have: (x_3 % 10) = x_4.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: y <= (y_1 + x_8).
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 20):
Let x_1 = 9 * x.
Let x_2 = x + y.
Let x_3 = 11 * y_1.
Let x_4 = 10 + y.
Let x_5 = y_1 % 10.
Let x_6 = 10 * y_1.
Let x_7 = -y_1.
Let x_8 = x + y - y_1.
Let x_9 = 10 + x_6.
Let x_10 = 10 + x + y - y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_8) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= x_9.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = x_5.
  (* Invariant *)
  Have: x_2 <= (10 + x_3).
  (* Invariant *)
  Have: y <= (10 + y_1 + x_1).
  (* Invariant *)
  Have: x_2 <= (10 + y_1 + (10 * (x_8 / 10))).
  (* Invariant *)
  Have: (x_8 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_6.
  (* Invariant *)
  Have: y <= (10 * (x_4 / 10)).
  (* Invariant *)
  Have: (x_4 % 10) = x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: y <= (y_1 + x_1).
}
Prove: x_2 <= (y_1 + (10 * (x_10 / 10))).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (42737)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 20):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * y)).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x <= (10 + (10 * (x / 10))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (31210)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (10ms) (116)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 21):
Let x_1 = x + y.
Let x_2 = -y_1.
Let x_3 = 10 + x + y - y_1.
Let x_4 = 9 * x.
Let x_5 = 11 * y_1.
Let x_6 = 10 + y.
Let x_7 = y_1 % 10.
Let x_8 = 10 * y_1.
Let x_9 = x + y - y_1.
Let x_10 = x % 10.
Let x_11 = 10 + x_8.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_6) /\ is_sint32(x_9) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= y_1.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= x_11.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= x_11.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = x_7.
  (* Invariant *)
  Have: x_1 <= (10 + x_5).
  (* Invariant *)
  Have: y <= (10 + y_1 + x_4).
  (* Invariant *)
  Have: x_1 <= (10 + y_1 + (10 * (x_9 / 10))).
  (* Invariant *)
  Have: (x_9 % 10) = x_10.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= x_8.
  (* Invariant *)
  Have: y <= (10 * (x_6 / 10)).
  (* Invariant *)
  Have: (x_6 % 10) = x_7.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: y <= (y_1 + x_4).
  (* Invariant *)
  Have: x_1 <= (y_1 + (10 * (x_3 / 10))).
}
Prove: (x_3 % 10) = x_10.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (149ms) (1423)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 22):
Let x_2 = 10 + x_1.
Let x_3 = x % 10.
Let x_4 = 10 * x.
Let x_5 = 10 * y.
Let x_6 = -x.
Let x_7 = 10 + x_1 + y - x.
Let x_8 = y % 10.
Let x_9 = x_1 + y.
Let x_10 = 9 * y.
Let x_11 = 10 + x_5.
Let x_12 = x_1 + y - x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_12) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= x_11.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: x_1 <= (10 + x + x_10).
  (* Invariant *)
  Have: x_9 <= (10 + x + (10 * (x_12 / 10))).
  (* Invariant *)
  Have: (x_12 % 10) = x_8.
  (* Invariant *)
  Have: x_1 <= x_11.
  (* Invariant *)
  Have: x_1 <= (10 + x_4).
  (* Invariant *)
  Have: x_1 <= (10 + (10 * (x_1 / 10))).
  (* Invariant *)
  Have: x_3 = (x_1 % 10).
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_1 <= (x + x_10).
  (* Invariant *)
  Have: x_9 <= (x + (10 * (x_7 / 10))).
  (* Invariant *)
  Have: (x_7 % 10) = x_8.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (10 * (x_2 / 10)).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
}
Prove: x <= (10 + x_1 + y).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (35329)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 23):
Let x_1 = -y.
Let x_2 = 10 + x + y_1 - y.
Let x_3 = x % 10.
Let x_4 = x + y_1.
Let x_5 = 9 * x.
Let x_6 = 11 * y.
Let x_7 = 10 + y_1.
Let x_8 = y % 10.
Let x_9 = 10 * y.
Let x_10 = x + y_1 - y.
Let x_11 = 10 + x_9.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_7) /\ is_sint32(x_10) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= x_11.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y_1 <= x_11.
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: (y_1 % 10) = x_8.
  (* Invariant *)
  Have: x_4 <= (10 + x_6).
  (* Invariant *)
  Have: y_1 <= (10 + y + x_5).
  (* Invariant *)
  Have: x_4 <= (10 + y + (10 * (x_10 / 10))).
  (* Invariant *)
  Have: (x_10 % 10) = x_3.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= x_9.
  (* Invariant *)
  Have: y_1 <= (10 * (x_7 / 10)).
  (* Invariant *)
  Have: (x_7 % 10) = x_8.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: y_1 <= (y + x_5).
  (* Invariant *)
  Have: x_4 <= (y + (10 * (x_2 / 10))).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
  (* Invariant *)
  Have: (-10) <= y_1.
}
Prove: y <= (10 + x + y_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (35469)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0003/12_merged.c, line 26) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0003/12_merged.c, line 26) (2/2):
Call Result at line 29
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0003/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0003/12_merged.c:29: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
