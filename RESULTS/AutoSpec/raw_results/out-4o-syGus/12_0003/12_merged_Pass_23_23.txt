[kernel] Parsing out/12_0003/12_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/12_0003/12_merged.c:26: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0003/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 23 goals scheduled
[wp] Proved goals:   23 / 23
  Qed:              14
  Alt-Ergo 2.5.4:    7 (2ms-25ms-88ms)
  Z3 4.8.12:         2 (20ms)
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 14):
Let x_1 = x + y_1 - y.
Let x_2 = x + y_1.
Let x_3 = 10 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_2) /\ (x_2 <= x_3).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x_2 <= (10 + y + (10 * (x_1 / 10))).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = (y_1 % 10).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y <= (10 * (x_3 / 10)).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (38676)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
}
Prove: y <= (10 + (10 * (y / 10))).
Prover Z3 4.8.12 returns Valid (Qed:0.54ms) (20ms) (30162)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.54ms) (7ms) (62)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 15):
Let x_1 = 10 + y.
Let x_2 = x + y_1 - y.
Let x_3 = y_1 % 10.
Let x_4 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (y <= x_4) /\ (x_4 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x_4 <= (10 + y + (10 * (x_2 / 10))).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x_3 = (y % 10).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_2 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= (10 * (x_1 / 10)).
}
Prove: (x_1 % 10) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (130ms) (401258)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (59ms) (744)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 17):
Let x_1 = 10 + y.
Let x_2 = y_1 % 10.
Let x_3 = x + y.
Let x_4 = -y_1.
Let x_5 = x + y - y_1.
Let x_6 = 10 + x + y - y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = x_2.
  (* Invariant *)
  Have: x_3 <= (10 + y_1 + (10 * (x_5 / 10))).
  (* Invariant *)
  Have: (x_5 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= (10 * (x_1 / 10)).
  (* Invariant *)
  Have: (x_1 % 10) = x_2.
}
Prove: x_3 <= (y_1 + (10 * (x_6 / 10))).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (40923)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 17):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
}
Prove: x <= (10 + (10 * (x / 10))).
Prover Z3 4.8.12 returns Valid (Qed:0.98ms) (10ms) (30669)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.98ms) (9ms) (105)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 18):
Let x_1 = x + y.
Let x_2 = -y_1.
Let x_3 = 10 + x + y - y_1.
Let x_4 = 10 + y.
Let x_5 = y_1 % 10.
Let x_6 = x + y - y_1.
Let x_7 = x % 10.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = x_5.
  (* Invariant *)
  Have: x_1 <= (10 + y_1 + (10 * (x_6 / 10))).
  (* Invariant *)
  Have: (x_6 % 10) = x_7.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y <= (10 * (x_4 / 10)).
  (* Invariant *)
  Have: (x_4 % 10) = x_5.
  (* Invariant *)
  Have: x_1 <= (y_1 + (10 * (x_3 / 10))).
}
Prove: (x_3 % 10) = x_7.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (88ms) (1087)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 19):
Let x_2 = 10 + x_1.
Let x_3 = x % 10.
Let x_4 = -x.
Let x_5 = 10 + x_1 + y - x.
Let x_6 = y % 10.
Let x_7 = x_1 + y.
Let x_8 = x_1 + y - x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: x_7 <= (10 + x + (10 * (x_8 / 10))).
  (* Invariant *)
  Have: (x_8 % 10) = x_6.
  (* Invariant *)
  Have: x_1 <= (10 + (10 * (x_1 / 10))).
  (* Invariant *)
  Have: x_3 = (x_1 % 10).
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_7 <= (x + (10 * (x_5 / 10))).
  (* Invariant *)
  Have: (x_5 % 10) = x_6.
  (* Invariant *)
  Have: x_1 <= (10 * (x_2 / 10)).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
}
Prove: x <= (10 + x_1 + y).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33985)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (4ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 20):
Let x_1 = -y.
Let x_2 = 10 + x + y_1 - y.
Let x_3 = x % 10.
Let x_4 = x + y_1.
Let x_5 = 10 + y_1.
Let x_6 = y % 10.
Let x_7 = x + y_1 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_5) /\ is_sint32(x_7) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: y_1 <= (10 + (10 * (y_1 / 10))).
  (* Invariant *)
  Have: (y_1 % 10) = x_6.
  (* Invariant *)
  Have: x_4 <= (10 + y + (10 * (x_7 / 10))).
  (* Invariant *)
  Have: (x_7 % 10) = x_3.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y_1 <= (10 * (x_5 / 10)).
  (* Invariant *)
  Have: (x_5 % 10) = x_6.
  (* Invariant *)
  Have: x_4 <= (y + (10 * (x_2 / 10))).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
  (* Invariant *)
  Have: (-10) <= y_1.
}
Prove: y <= (10 + x + y_1).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34095)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/12_0003/12_merged.c, line 32):
Let x_1 = x + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y <= (10 + (10 * (y / 10))).
  (* Invariant *)
  Have: (y % 10) = 0.
  (* Invariant *)
  Have: x_1 <= (10 + (10 * (x_1 / 10))).
  (* Invariant *)
  Have: x <= (10 + (10 * (x / 10))).
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= x.
}
Prove: x != 20.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30501)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (2ms) (16)

------------------------------------------------------------

Goal Loop assigns (file out/12_0003/12_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0003/12_merged.c, line 23) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0003/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0003/12_merged.c:26: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
