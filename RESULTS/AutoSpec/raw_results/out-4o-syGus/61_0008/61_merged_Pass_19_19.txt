[kernel] Parsing out/61_0008/61_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/61_0008/61_merged.c:19: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/61_0008/61_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] Proved goals:   19 / 19
  Qed:              14
  Alt-Ergo 2.5.4:    5 (3ms-82ms-244ms)
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (exists i_1 : Z. (c_4 <= i_1) /\ (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34783)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 11):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (exists i_1 : Z. (c_4 <= i_1) /\ (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (34866)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (exists i_1 : Z. (c_4 <= i_1) /\ (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: 0 <= c.
}
Prove: exists i_1 : Z. (c <= i_1) /\ (i_1 < n).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (244ms) (3564)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 12):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: n != 0.
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: exists i : Z. (0 <= i) /\ (i < n).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.71ms) (151ms) (1856)

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 14):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (exists i_1 : Z. (c_4 <= i_1) /\ (i_1 < n))).
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: c <= n.
  (* Invariant *)
  Have: (n != c) \/ (0 < c).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
  (* Invariant *)
  Have: ((n != c) -> (exists i_1 : Z. (c <= i_1) /\ (i_1 < n))).
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (34050)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (3ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/61_0008/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/61_0008/61_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0008/61_merged.c, line 16) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/61_0008/61_merged.c, line 16) (2/3):
Call Result at line 18
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/61_0008/61_merged.c, line 16) (3/3):
Call Result at line 19
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/61_0008/61_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/61_0008/61_merged.c:19: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
