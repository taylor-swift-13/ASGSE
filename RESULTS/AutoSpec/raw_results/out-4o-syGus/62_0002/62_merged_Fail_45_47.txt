[kernel] Parsing out/62_0002/62_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/62_0002/62_merged.c:33: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/62_0002/62_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 47 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 20ms) (Z3)
[wp] Proved goals:   45 / 47
  Qed:              37
  Alt-Ergo 2.5.4:    8
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 8):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: 0 < c.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35001)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (96)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 9):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
}
Prove: (c = 0) \/ (c = 1) \/ (n = c).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 10):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
}
Prove: (n = c) \/ (c < n).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (34791)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 12):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
}
Prove: (c < n) \/ ((c = 1) /\ (n = c)).
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 13):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c < n) \/ ((c = 1) /\ (n = c)).
}
Prove: (c = 1) \/ (c < n).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34450)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 16):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: n != c.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1).
  (* Invariant *)
  Have: c < n.
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34890)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (44)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 19):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: n != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: exists i : Z. (0 <= i) /\ (i < n).
Prover Alt-Ergo 2.5.4 returns Valid (104ms) (1859)

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 21):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Goal *)
  When: (0 <= i) /\ (i < c).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c < n) \/ ((c = 1) /\ (n = c)).
  (* Invariant *)
  Have: (c = 1) \/ (c < n).
  (* Invariant *)
  Have: (n != c) \/ (0 < c).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
  (* Invariant *)
  Have: ((n != c) -> ((0 <= c) /\ (c <= n))).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (34974)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 24):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: ((0 < c) -> (c <= n)).
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c < n) \/ ((c = 1) /\ (n = c)).
  (* Invariant *)
  Have: (c = 1) \/ (c < n).
  (* Invariant *)
  Have: (n != c) \/ (0 < c).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
  (* Invariant *)
  Have: ((n != c) -> ((0 <= c) /\ (c <= n))).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < c) -> (c <= n))).
  (* Invariant *)
  Have: ((n = c) -> (0 < c)).
}
Prove: c <= n.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (19318)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 28):
Assume {
  Type: is_sint32(c) /\ is_sint32(c_1) /\ is_sint32(c_2) /\ is_sint32(c_3) /\
      is_sint32(c_4) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: (c_4 = 0) \/ (c_4 = 1) \/ (n = c_4).
  (* Invariant *)
  Have: (n = c_4) \/ (c_4 < n).
  (* Invariant *)
  Have: (c_4 < n) \/ ((c_4 = 1) /\ (n = c_4)).
  (* Invariant *)
  Have: (c_4 = 1) \/ (c_4 < n).
  (* Invariant *)
  Have: (n != c_4) \/ (0 < c_4).
  (* Invariant *)
  Have: ((n != c_4) -> (c_4 < n)).
  (* Invariant *)
  Have: ((n = c_4) -> (0 < c_4)).
  (* Invariant *)
  Have: c_4 <= n.
  (* Invariant *)
  Have: 0 <= c_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  If tmp_0 != 0
  Then {
    Have: c_4 = c_2.
    If n != c_2
    Then { Have: c_2 = c_1. Have: (1 + c_1) = c. }
    Else { Have: c_2 = c. }
  }
  Else {
    Have: c_4 = c_3.
    If n = c_3
    Then { Have: c = 1. }
    Else { Have: c_3 = c. }
  }
  (* Invariant *)
  Have: (c = 0) \/ (c = 1) \/ (n = c).
  (* Invariant *)
  Have: (n = c) \/ (c < n).
  (* Invariant *)
  Have: (c < n) \/ ((c = 1) /\ (n = c)).
  (* Invariant *)
  Have: (c = 1) \/ (c < n).
  (* Invariant *)
  Have: (n != c) \/ (0 < c).
  (* Invariant *)
  Have: ((n != c) -> (0 <= c)).
  (* Invariant *)
  Have: ((n != c) -> (c < n)).
  (* Invariant *)
  Have: ((n = c) -> (0 < c)).
  (* Invariant *)
  Have: c <= n.
}
Prove: 0 <= c.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34915)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/62_0002/62_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/62_0002/62_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/62_0002/62_merged.c, line 30) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/62_0002/62_merged.c, line 30) (2/3):
Call Result at line 32
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/62_0002/62_merged.c, line 30) (3/3):
Call Result at line 33
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/62_0002/62_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/62_0002/62_merged.c:33: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
