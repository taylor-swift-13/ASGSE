[kernel] Parsing out/130_0004/130_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 31 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_established (Qed 0.98ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_14_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_15_preserved (Qed 9ms) (Z3)
[wp] Proved goals:   24 / 31
  Qed:              21
  Alt-Ergo 2.5.4:    3
  Timeout:           7
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 9):
Assume { Type: is_sint32(x2_0) /\ is_sint32(x3_0). }
Prove: (0 <= x2_0) /\ (0 <= x3_0).
Prover Z3 4.8.12 returns Timeout (Qed:0.98ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 11):
Let x = x2_1 + x3_1.
Assume {
  Type: is_sint32(x1_0) /\ is_sint32(x2_0) /\ is_sint32(x2_1) /\
      is_sint32(x3_0) /\ is_sint32(x3_1) /\ is_sint32(x1_0 - 1) /\
      is_sint32(x2_0 - 1) /\ is_sint32(x3_0 - 1).
  (* Goal *)
  When: 2 <= x1_0.
  (* Invariant *)
  Have: (0 <= x2_1) /\ (0 <= x3_1).
  (* Invariant *)
  Have: 0 < x3_1.
  (* Invariant *)
  Have: 0 < x2_1.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
  (* Invariant *)
  Have: 0 <= x1_0.
  (* Invariant *)
  Have: 0 <= (x1_0 + x2_0 + x3_0).
  (* Invariant *)
  Have: x1_0 <= (1 + x2_0 + x3_0).
  (* Then *)
  Have: 0 < x1_0.
}
Prove: 2 <= x3_0.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 11):
Assume {
  Type: is_sint32(x2_0) /\ is_sint32(x3_0).
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
}
Prove: 0 < x3_0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 12):
Let x = x2_1 + x3_1.
Assume {
  Type: is_sint32(x1_0) /\ is_sint32(x2_0) /\ is_sint32(x2_1) /\
      is_sint32(x3_0) /\ is_sint32(x3_1) /\ is_sint32(x1_0 - 1) /\
      is_sint32(x2_0 - 1) /\ is_sint32(x3_0 - 1).
  (* Goal *)
  When: 2 <= x1_0.
  (* Invariant *)
  Have: (0 <= x2_1) /\ (0 <= x3_1).
  (* Invariant *)
  Have: 0 < x3_1.
  (* Invariant *)
  Have: 0 < x2_1.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
  (* Invariant *)
  Have: 0 <= x1_0.
  (* Invariant *)
  Have: 0 <= (x1_0 + x2_0 + x3_0).
  (* Invariant *)
  Have: x1_0 <= (1 + x2_0 + x3_0).
  (* Then *)
  Have: 0 < x1_0.
  (* Invariant *)
  Have: 2 <= x3_0.
}
Prove: 2 <= x2_0.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 12):
Assume {
  Type: is_sint32(x2_0) /\ is_sint32(x3_0).
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
}
Prove: 0 < x2_0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 21):
Let x = x1_0 + x2_0 + x3_0.
Let x_1 = x2_1 + x3_1.
Assume {
  Type: is_sint32(x1_0) /\ is_sint32(x2_0) /\ is_sint32(x2_1) /\
      is_sint32(x3_0) /\ is_sint32(x3_1) /\ is_sint32(x1_0 - 1) /\
      is_sint32(x2_0 - 1) /\ is_sint32(x3_0 - 1).
  (* Invariant *)
  Have: (0 <= x2_1) /\ (0 <= x3_1).
  (* Invariant *)
  Have: 0 < x3_1.
  (* Invariant *)
  Have: 0 < x2_1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
  (* Invariant *)
  Have: 0 <= x1_0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x1_0 <= (1 + x2_0 + x3_0).
  (* Then *)
  Have: 0 < x1_0.
  (* Invariant *)
  Have: ((2 <= x1_0) -> (2 <= x3_0)).
  (* Invariant *)
  Have: ((2 <= x1_0) -> (2 <= x2_0)).
}
Prove: 3 <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (32677)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 21):
Assume {
  Type: is_sint32(x2_0) /\ is_sint32(x3_0).
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
}
Prove: (-1) <= (x2_0 + x3_0).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (29739)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 22):
Let x = x1_0 + x2_0 + x3_0.
Let x_1 = x2_1 + x3_1.
Assume {
  Type: is_sint32(x1_0) /\ is_sint32(x2_0) /\ is_sint32(x2_1) /\
      is_sint32(x3_0) /\ is_sint32(x3_1) /\ is_sint32(x1_0 - 1) /\
      is_sint32(x2_0 - 1) /\ is_sint32(x3_0 - 1).
  (* Goal *)
  When: (2 <= x2_0) /\ (2 <= x3_0).
  (* Invariant *)
  Have: (0 <= x2_1) /\ (0 <= x3_1).
  (* Invariant *)
  Have: 0 < x3_1.
  (* Invariant *)
  Have: 0 < x2_1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
  (* Invariant *)
  Have: 0 <= x1_0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x1_0 <= (1 + x2_0 + x3_0).
  (* Then *)
  Have: 0 < x1_0.
  (* Invariant *)
  Have: 3 <= x.
}
Prove: x1_0 <= (x2_0 + x3_0).
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 22):
Let x = x2_0 + x3_0.
Assume {
  Type: is_sint32(x2_0) /\ is_sint32(x3_0).
  (* Goal *)
  When: (0 < x2_0) /\ (0 < x3_0).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 0 <= x.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29632)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (14)

------------------------------------------------------------

Goal Preservation of Invariant (file out/130_0004/130_merged.c, line 23):
Let x = x1_0 + x2_0 + x3_0.
Let x_1 = x2_1 + x3_1.
Assume {
  Type: is_sint32(x1_0) /\ is_sint32(x2_0) /\ is_sint32(x2_1) /\
      is_sint32(x3_0) /\ is_sint32(x3_1) /\ is_sint32(x1_0 - 1) /\
      is_sint32(x2_0 - 1) /\ is_sint32(x3_0 - 1).
  (* Goal *)
  When: (x2_0 <= 1) \/ (x3_0 <= 1).
  (* Invariant *)
  Have: (0 <= x2_1) /\ (0 <= x3_1).
  (* Invariant *)
  Have: 0 < x3_1.
  (* Invariant *)
  Have: 0 < x2_1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (0 <= x2_0) /\ (0 <= x3_0).
  (* Invariant *)
  Have: 0 < x3_0.
  (* Invariant *)
  Have: 0 < x2_0.
  (* Invariant *)
  Have: 0 <= x1_0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x1_0 <= (1 + x2_0 + x3_0).
  (* Then *)
  Have: 0 < x1_0.
  (* Invariant *)
  Have: ((2 <= x1_0) -> (2 <= x3_0)).
  (* Invariant *)
  Have: ((2 <= x1_0) -> (2 <= x2_0)).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: ((2 <= x2_0) -> ((2 <= x3_0) -> (x1_0 <= (x2_0 + x3_0)))).
}
Prove: x1_0 = 2.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/130_0004/130_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/130_0004/130_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/130_0004/130_merged.c:2: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
