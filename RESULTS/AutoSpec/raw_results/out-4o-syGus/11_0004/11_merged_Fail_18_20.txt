[kernel] Parsing out/11_0004/11_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/11_0004/11_merged.c:20: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/11_0004/11_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_4_preserved (Qed 4ms) (Z3)
[wp] Proved goals:   18 / 20
  Qed:              13
  Alt-Ergo 2.5.4:    3 (5ms-10ms)
  Z3 4.8.12:         2 (20ms-50ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 8):
Let x_1 = x + y_1 - y.
Let x_2 = 10 * (x_1 / 10).
Let x_3 = y_1 % 10.
Let x_4 = x + y_1.
Let x_5 = 10 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (y <= x_4) /\ (x_4 <= x_5).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y <= (1 + x + y_1).
  (* Invariant *)
  Have: x_4 <= (10 + y + x_2).
  (* Invariant *)
  Have: x_3 = (y % 10).
  (* Invariant *)
  Have: (10 * y) <= (10 + (9 * x) + (10 * y_1)).
  (* Invariant *)
  Have: x <= (10 + x_2).
  (* Invariant *)
  Have: (x_1 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_5 % 10) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (50ms) (125320)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 10):
Let x_1 = 10 + y.
Let x_2 = y_1 % 10.
Let x_3 = x + y_1 - y.
Let x_4 = 10 * (x_3 / 10).
Let x_5 = 10 * y.
Let x_6 = 9 * x.
Let x_7 = 10 * y_1.
Let x_8 = x + y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(10 + x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (y <= x_8) /\ (x_8 <= x_1).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: y <= (1 + x + y_1).
  (* Invariant *)
  Have: x_8 <= (10 + y + x_4).
  (* Invariant *)
  Have: x_2 = (y % 10).
  (* Invariant *)
  Have: x_5 <= (10 + x_6 + x_7).
  (* Invariant *)
  Have: x <= (10 + x_4).
  (* Invariant *)
  Have: (x_3 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 % 10) = x_2.
}
Prove: x_5 <= (x_6 + x_7).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 11):
Let x_1 = 10 * y_1.
Let x_2 = 9 * x.
Let x_3 = 10 * y.
Let x_4 = 10 + y_1.
Let x_5 = y % 10.
Let x_6 = x + y - y_1.
Let x_7 = 10 * (x_6 / 10).
Let x_8 = x + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(10 + x) /\ is_sint32(x_4) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: (y_1 <= x_8) /\ (x_8 <= x_4).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: y_1 <= (1 + x + y).
  (* Invariant *)
  Have: x_8 <= (10 + y_1 + x_7).
  (* Invariant *)
  Have: x_5 = (y_1 % 10).
  (* Invariant *)
  Have: x_1 <= (10 + x_2 + x_3).
  (* Invariant *)
  Have: x <= (10 + x_7).
  (* Invariant *)
  Have: (x_6 % 10) = (x % 10).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 10) = x_5.
  (* Invariant *)
  Have: x_1 <= (x_2 + x_3).
}
Prove: x <= x_7.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 11):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x <= (10 + (10 * (x / 10))).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (10ms) (64)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 13):
Let x_1 = x + y.
Let x_2 = 10 * (x / 10).
Let x_3 = 9 * x.
Let x_4 = 10 + y.
Let x_5 = y_1 % 10.
Let x_6 = -y_1.
Let x_7 = x + y - y_1.
Let x_8 = x % 10.
Let x_9 = 10 + x + y - y_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y_1) /\ is_sint32(y) /\
      is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y_1) /\ (y_1 <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + x_2).
  (* Invariant *)
  Have: (y % 10) = x_5.
  (* Invariant *)
  Have: y <= (10 + y_1 + x_3).
  (* Invariant *)
  Have: x_1 <= (10 + y_1 + x_2).
  (* Invariant *)
  Have: (x_7 % 10) = x_8.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y_1 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 10) = x_5.
  (* Invariant *)
  Have: y <= (y_1 + x_3).
  (* Invariant *)
  Have: x_1 <= (y_1 + x_2).
}
Prove: (x_9 % 10) = x_8.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (53713)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 15):
Let x_2 = 10 + x_1.
Let x_3 = x % 10.
Let x_4 = 10 * (x / 10).
Let x_5 = 10 * x.
Let x_6 = -x.
Let x_7 = 10 + x_1 + y - x.
Let x_8 = y % 10.
Let x_9 = 10 + x_4.
Let x_10 = x_1 + y - x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_10) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: (x_10 % 10) = x_8.
  (* Invariant *)
  Have: x_1 <= (10 + x_5).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: (x_1 % 10) = x_3.
  (* Invariant *)
  Have: x <= (x_1 + y).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_7 % 10) = x_8.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
}
Prove: x <= (10 + x_1 + y).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33353)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/11_0004/11_merged.c, line 16):
Let x_1 = -y.
Let x_2 = 10 + x + y_1 - y.
Let x_3 = x % 10.
Let x_4 = x + y_1.
Let x_5 = 10 * (x / 10).
Let x_6 = 9 * x.
Let x_7 = 10 + y_1.
Let x_8 = y % 10.
Let x_9 = x + y_1 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_7) /\ is_sint32(x_9) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (10 + x_5).
  (* Invariant *)
  Have: (y_1 % 10) = x_8.
  (* Invariant *)
  Have: y_1 <= (10 + y + x_6).
  (* Invariant *)
  Have: x_4 <= (10 + y + x_5).
  (* Invariant *)
  Have: (x_9 % 10) = x_3.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: y <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_7 % 10) = x_8.
  (* Invariant *)
  Have: y_1 <= (y + x_6).
  (* Invariant *)
  Have: x_4 <= (y + x_5).
  (* Invariant *)
  Have: (x_2 % 10) = x_3.
  (* Invariant *)
  Have: (-10) <= y_1.
}
Prove: y <= (10 + x + y_1).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (33499)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/11_0004/11_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Loop assigns (file out/11_0004/11_merged.c, line 17) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/11_0004/11_merged.c, line 17) (2/2):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/11_0004/11_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/11_0004/11_merged.c:20: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
