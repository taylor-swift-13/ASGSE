[kernel] Parsing out/017_0009/017_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo017_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_3_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_10_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_14_established (Qed 2ms) (Z3)
[wp] Proved goals:   26 / 30
  Qed:              22
  Alt-Ergo 2.5.4:    3 (0.90ms-4ms-6ms)
  Z3 4.8.12:         1 (380ms)
  Timeout:           4
------------------------------------------------------------
  Function foo017
------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 10):
Let x = (i_1 * (i_1 - 1)) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: x <= k_1.
  (* Invariant *)
  Have: x < k_1.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: x < k.
  (* Else *)
  Have: i_1 <= j.
}
Prove: ((i * (1 + i)) / 2) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 11):
Let x = (i_1 * (i_1 - 1)) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: x <= k_1.
  (* Invariant *)
  Have: x < k_1.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: x < k.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k))).
}
Prove: ((i * (i - 1)) / 2) < k.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 22):
Let x = (i * (i - 1)) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + j) /\
      is_sint32(i + k - j).
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: x <= k_1.
  (* Invariant *)
  Have: x < k_1.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: x < k.
  (* Then *)
  Have: j < i.
}
Prove: (2 * j) < (i + k).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34320)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 25):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: i < n.
}
Prove: i <= k.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 28):
Let x = -k_1.
Let x_1 = j + k - k_1.
Let x_2 = (x_1 * (j + k - 1 - k_1)) / 2.
Let x_3 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (j_1 + k_1) <= x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_3) ->
      (((i * (1 + i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_3) ->
      (((i * (i - 1)) / 2) < k_2))).
  (* Invariant *)
  Have: 0 < k_2.
  (* Invariant *)
  Have: k_1 < x_3.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: x_3 < (k_1 + n).
  (* Invariant *)
  Have: x_3 <= (k_1 + k_2).
  (* Invariant *)
  Have: x_2 <= k_2.
  (* Invariant *)
  Have: x_2 < k_2.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: x_3 <= (2 * k_1).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_2 <= k_1.
  (* Invariant *)
  Have: x_2 < k_1.
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j < k.
  (* Invariant *)
  Have: (-1) <= j.
}
Prove: x_2 <= k.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (35188)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (0.90ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 28):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: i <= k.
}
Prove: ((i * (i - 1)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (380ms) (616018)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0009/017_merged.c, line 29):
Let x = -k_1.
Let x_1 = j + k - k_1.
Let x_2 = (x_1 * (j + k - 1 - k_1)) / 2.
Let x_3 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (j_1 + k_1) <= x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_3) ->
      (((i * (1 + i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_3) ->
      (((i * (i - 1)) / 2) < k_2))).
  (* Invariant *)
  Have: 0 < k_2.
  (* Invariant *)
  Have: k_1 < x_3.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Then *)
  Have: x_3 < (k_1 + n).
  (* Invariant *)
  Have: x_3 <= (k_1 + k_2).
  (* Invariant *)
  Have: x_2 <= k_2.
  (* Invariant *)
  Have: x_2 < k_2.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: x_3 <= (2 * k_1).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_2 <= k_1.
  (* Invariant *)
  Have: x_2 < k_1.
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j < k.
  (* Invariant *)
  Have: (-1) <= j.
  (* Invariant *)
  Have: x_2 <= k.
}
Prove: x_2 < k.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0009/017_merged.c, line 29):
Let x = (i * (i - 1)) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x <= k.
}
Prove: x < k.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/017_0009/017_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/017_0009/017_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/017_0009/017_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo017'.
  Callers assumptions might be imprecise.
