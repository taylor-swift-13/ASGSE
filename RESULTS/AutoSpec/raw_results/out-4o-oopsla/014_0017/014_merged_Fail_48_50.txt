[kernel] Parsing out/014_0017/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0017/014_merged.c:39: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0017/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 50 goals scheduled
[wp] [Timeout] typed_foo014_loop_invariant_2_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_6_preserved (Qed 10ms) (Z3)
[wp] Proved goals:   48 / 50
  Qed:              42
  Alt-Ergo 2.5.4:    6 (7ms-9ms-13ms)
  Timeout:           2
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 12):
Let x = a + m.
Let a_1 = IAbs.abs(a).
Let x_1 = 1 + m.
Let x_2 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_2).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Then *)
  Have: j <= m.
}
Prove: j < x.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 13):
Let x = a + m.
Let a_1 = IAbs.abs(a).
Let x_1 = 1 + m.
Let x_2 = a + j.
Let x_3 = 1 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_2).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: j < x.
}
Prove: a <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (32383)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (7ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 16):
Let a_1 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(1 + a) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_1).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Then *)
  Have: j <= m.
}
Prove: x_1 < m.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 17):
Let x = a + j.
Let x_1 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_2 = 1 + m.
Let x_3 = a_3 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: (a <= j) /\ (0 <= x).
  (* Invariant *)
  Have: x <= m.
}
Prove: (a <= m) /\ (0 <= x_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (9ms) (70)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 18):
Let x = a + m.
Let x_1 = a + j.
Let a_4 = IAbs.abs(a_3).
Let x_2 = 1 + m.
Let x_3 = a_3 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (a <= j) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a <= m) /\ (0 <= x)))).
}
Prove: (a <= m) /\ (0 <= x).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (36483)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (8ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 19):
Let x = a + m.
Let x_1 = a + j.
Let a_4 = IAbs.abs(a_3).
Let x_2 = 1 + m.
Let x_3 = a_3 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (a <= j) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
}
Prove: IAbs.abs(a) <= j.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (36129)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (9ms) (144)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 20):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let x_1 = a + j.
Let a_5 = IAbs.abs(a_3).
Let x_2 = 1 + m.
Let x_3 = a_3 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (a <= j) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: a_4 <= j.
}
Prove: (j + a_4) <= m.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (36950)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (13ms) (139)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 26):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let x_1 = a + j.
Let a_5 = IAbs.abs(a_3).
Let x_2 = 1 + m.
Let x_3 = a_3 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (a <= j) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: a_4 <= j.
  (* Invariant *)
  Have: (j + a_4) <= m.
}
Prove: (a <= m) /\ (0 <= x).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (36993)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (8ms) (83)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0017/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0017/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Loop assigns (file out/014_0017/014_merged.c, line 35) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0017/014_merged.c, line 35) (2/2):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0017/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0017/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
