[kernel] Parsing out/044_0013/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 67 goals scheduled
[wp] Proved goals:   67 / 67
  Qed:              56
  Alt-Ergo 2.5.4:   10
  Z3 4.8.12:         1 (10ms)
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 18):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 2 * i.
Let x_2 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 1 + i.
Let x_5 = (if (flag_0 = 1) then 1 else 2) + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_4) /\ is_sint32(x) /\ is_sint32(x_5).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_2)).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (((-1) <= k) -> (x <= x_2)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_1) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x / 2) = i)).
  (* Then *)
  Have: i <= k.
}
Prove: (x_4 * (if (flag_0 = 1) then 1 else 2)) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (10341)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (4ms) (187)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 19):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_3 = 2 * i.
Let x_4 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_6 = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_5)).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_6).
  (* Invariant *)
  Have: (((-1) <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_5))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x_3)).
  (* Invariant *)
  Have: (x_2 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_3 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ (if (flag_0 = 1) then (0 < x_1) else (2 <= x_1)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 / 2) = i)).
  (* Then *)
  Have: i <= k.
}
Prove: x_1 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (35888)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (16ms) (378)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 19):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: 0 <= k.
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
}
Prove: 0 <= (n * (1 + k)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (30177)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 20):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 1 + i.
Let x_4 = 2 * i.
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_3) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (-1) <= k.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_2)).
  (* Invariant *)
  Have: ((0 <= k) -> (x <= x_2)).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: ((k < 0) -> (x = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_4) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_4)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x / 2) = i)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x = 0))).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((x_3 * (if (flag_0 = 1) then 1 else 2)) = x_1)).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_2)).
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34805)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (191)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 20):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (-1) <= k.
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= (n * (1 + k)))).
}
Prove: 0 <= (n * (2 + k)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (30851)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 22):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 1 + i.
Let x_5 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_4) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_2)).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_3)).
  (* Invariant *)
  Have: ((0 <= k) -> (x <= x_3)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x <= x_2)).
  (* Invariant *)
  Have: ((k < 0) -> (x = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_5) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_5)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x / 2) = i)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x = 0))).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((x_4 * (if (flag_0 = 1) then 1 else 2)) = x_1)).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x_1 <= x_2)).
  (* Invariant *)
  Have: ((k < 0) -> (x_1 = 0)).
}
Prove: if (flag_0 = 1) then (x_1 = x_4) else (x_1 = (2 + x_5)).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (40582)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (8ms) (188)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 23):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 1 + i.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = (if (flag_0 = 1) then x_1 else x_3) - x.
Let x_5 = (2 + k) * x_4.
Let x_6 = (1 + k) * x_4.
Let x_7 = 1 + x.
Let x_8 = 1 + x_2.
Let x_9 = (if (flag_0 = 1) then 1 else 2) + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_4) /\
      ((flag_0 = 1) \/ is_sint32(x_3)).
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_5)).
  (* Invariant *)
  Have: (0 % x_4) = 0.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = (-1)))
         else ((flag_0 != 1) \/ (i = (-1)))) /\
      (if (flag_0 = 1) then (x_9 = x_1) else (x_9 = x_3)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_6)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x <= i) else (x <= x_8).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (if (flag_0 = 1) then (x = i) else (x = x_8))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (if (flag_0 = 1) then (x_7 = i) else (x = x_2))).
  (* Invariant *)
  Have: ((0 <= k) -> (x <= x_6)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x <= x_5)).
  (* Invariant *)
  Have: ((k < 0) -> (x = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_2) = x.
  (* Invariant *)
  Have: (x % x_4) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((x = i) /\ (if (flag_0 = 1) then (x = i) else (x = x_8)))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x = x_2) /\ (if (flag_0 = 1) then (x_7 = i) else (x = x_2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_4) <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x / 2) = i)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x = 0))).
  (* Invariant *)
  Have: (i * x_4) = x.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((if (flag_0 = 1) then x_1 else x_3) = (x_1 * x_4))).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i < x_6) else (x_3 <= x_6))).
  (* Invariant *)
  Have: (((-1) <= k) -> (if (flag_0 = 1) then (i < x_5) else (x_3 <= x_5))).
  (* Invariant *)
  Have: ((k < 0) -> (i = (-1))).
}
Prove: ((if (flag_0 = 1) then x_1 else x_3) % x_4) = 0.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (51395)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 24):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = i * (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then x else x_2) - x_3.
Let x_5 = (2 + k) * x_4.
Let x_6 = (1 + k) * x_4.
Let x_7 = x * x_4.
Let x_8 = 1 + x_3.
Let x_9 = 1 + x_1.
Let x_10 = (if (flag_0 = 1) then 1 else 2) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_5)).
  (* Invariant *)
  Have: (0 % x_4) = 0.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = (-1)))
         else ((flag_0 != 1) \/ (i = (-1)))) /\
      (if (flag_0 = 1) then (x_10 = x) else (x_10 = x_2)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_6)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_3 <= i) else (x_3 <= x_9).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (if (flag_0 = 1) then (x_3 = i) else (x_3 = x_9))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (if (flag_0 = 1) then (x_8 = i) else (x_3 = x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_3 <= x_6)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x_3 <= x_5)).
  (* Invariant *)
  Have: ((k < 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_1) = x_3.
  (* Invariant *)
  Have: (x_3 % x_4) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((x_3 = i) /\ (if (flag_0 = 1) then (x_3 = i) else (x_3 = x_9)))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_3 = x_1) /\ (if (flag_0 = 1) then (x_8 = i) else (x_3 = x_1)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = x_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_4) <= x_3))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x_3).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 / 2) = i)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x_3 = 0))).
  (* Invariant *)
  Have: (i * x_4) = x_3.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((if (flag_0 = 1) then x else x_2) = x_7)).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i < x_6) else (x_2 <= x_6))).
  (* Invariant *)
  Have: (((-1) <= k) -> (if (flag_0 = 1) then (i < x_5) else (x_2 <= x_5))).
  (* Invariant *)
  Have: ((k < 0) -> (i = (-1))).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) % x_4) = 0.
}
Prove: if (flag_0 = 1) then (x_7 <= x) else (x_7 <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (44250)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (18ms) (316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 30):
Let x = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 1 + x.
Let x_2 = 2 * i_1.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i_1.
Let x_5 = 2 + x_2.
Let x_6 = (if (flag_0 = 1) then x_4 else x_5) - x.
Let x_7 = x_4 * x_6.
Let x_8 = (2 + k) * x_6.
Let x_9 = (1 + k) * x_6.
Let x_10 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_11 = i * x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x_4) /\ is_sint32(x) /\ is_sint32(x_6) /\
      ((flag_0 = 1) \/ is_sint32(x_5)).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_4).
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_8)).
  (* Invariant *)
  Have: (0 % x_6) = 0.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = (-1)))
         else ((flag_0 != 1) \/ (i_1 = (-1)))) /\
      (if (flag_0 = 1) then (x_10 = x_4) else (x_10 = x_5)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_9)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x <= i_1) else (x <= x_3).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (if (flag_0 = 1) then (x = i_1) else (x = x_3))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (if (flag_0 = 1) then (x_1 = i_1) else (x = x_2))).
  (* Invariant *)
  Have: ((0 <= k) -> (x <= x_9)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x <= x_8)).
  (* Invariant *)
  Have: ((k < 0) -> (x = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i_1 else x_2) = x.
  (* Invariant *)
  Have: (x % x_6) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((x = i_1) /\ (if (flag_0 = 1) then (x = i_1) else (x = x_3)))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i_1)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x = x_2) /\ (if (flag_0 = 1) then (x_1 = i_1) else (x = x_2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((i_2 * x_6) <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x / 2) = i_1)).
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = 0) /\ (x = 0))).
  (* Invariant *)
  Have: (i_1 * x_6) = x.
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((if (flag_0 = 1) then x_4 else x_5) = x_7)).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i_1 < x_9) else (x_5 <= x_9))).
  (* Invariant *)
  Have: (((-1) <= k) ->
      (if (flag_0 = 1) then (i_1 < x_8) else (x_5 <= x_8))).
  (* Invariant *)
  Have: ((k < 0) -> (i_1 = (-1))).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_4 else x_5) % x_6) = 0.
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_7 <= x_4) else (x_7 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then (x = i_1) else (x = x_3)) /\
       ((flag_0 = 1) \/ (i_1 = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_1 = i_1) else (x = x_2)) /\
       ((flag_0 != 1) \/ (i_1 = (-1))))).
}
Prove: if (flag_0 = 1) then (x_11 <= x_4) else (x_11 <= x_5).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (23ms) (522)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 36):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 1 + k.
Let x_3 = 1 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Goal *)
  When: flag_0 != 1.
  (* Invariant *)
  Have: ((0 <= k) -> ((-1) <= k)).
  (* Invariant *)
  Have: (((-1) <= k) -> ((-2) <= k)).
  (* Invariant *)
  Have: (((-1) <= k) -> (i <= (2 + k))).
  (* Invariant *)
  Have: ((k < 0) -> (i = 0)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((0 <= k) -> (i <= x_2)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: (((-1) <= k) -> (i <= x_2)).
  (* Invariant *)
  Have: ((k < 0) -> (i = (-1))).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: (x_1 / 2) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34320)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (11ms) (175)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 40):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = i * (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then x else x_2) - x_3.
Let x_5 = 1 + x_3.
Let x_6 = 1 + x_1.
Let x_7 = x * x_4.
Let x_8 = (2 + k) * x_4.
Let x_9 = (1 + k) * x_4.
Let x_10 = (if (flag_0 = 1) then 1 else 2) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4) /\ ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Invariant *)
  Have: (((-1) <= k) -> (0 <= x_8)).
  (* Invariant *)
  Have: (0 % x_4) = 0.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = (-1)))
         else ((flag_0 != 1) \/ (i = (-1)))) /\
      (if (flag_0 = 1) then (x_10 = x) else (x_10 = x_2)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_9)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_3 <= i) else (x_3 <= x_6).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (if (flag_0 = 1) then (x_3 = i) else (x_3 = x_6))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (if (flag_0 = 1) then (x_5 = i) else (x_3 = x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_3 <= x_9)).
  (* Invariant *)
  Have: (((-1) <= k) -> (x_3 <= x_8)).
  (* Invariant *)
  Have: ((k < 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_1) = x_3.
  (* Invariant *)
  Have: (x_3 % x_4) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((x_3 = i) /\ (if (flag_0 = 1) then (x_3 = i) else (x_3 = x_6)))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_3 = x_1) /\ (if (flag_0 = 1) then (x_5 = i) else (x_3 = x_1)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = x_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_4) <= x_3))).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= x_3).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 / 2) = i)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x_3 = 0))).
  (* Invariant *)
  Have: (i * x_4) = x_3.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((if (flag_0 = 1) then x else x_2) = x_7)).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i < x_9) else (x_2 <= x_9))).
  (* Invariant *)
  Have: (((-1) <= k) -> (if (flag_0 = 1) then (i < x_8) else (x_2 <= x_8))).
  (* Invariant *)
  Have: ((k < 0) -> (i = (-1))).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) % x_4) = 0.
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_7 <= x) else (x_7 <= x_2).
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then (x_3 = i) else (x_3 = x_6)) /\
       ((flag_0 = 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_5 = i) else (x_3 = x_1)) /\
       ((flag_0 != 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = i_1 * x_4 in ((0 <= i_1) -> ((i_1 <= x) ->
      (if (flag_0 = 1) then (x_11 <= x) else (x_11 <= x_2)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then x else x_2) / 2) = x)).
}
Prove: (if (flag_0 = 1) then x else x_2) = x_7.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (12035)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (9ms) (336)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0013/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0013/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0013/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0013/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
