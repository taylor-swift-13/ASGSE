[kernel] Parsing out/042_0002/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0002/042_merged.c:41: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0002/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 46 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_4_established (Qed 2ms) (Z3)
[wp] Proved goals:   45 / 46
  Qed:              37
  Alt-Ergo 2.5.4:    8 (3ms-8ms-17ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 16):
Let x_1 = x + y.
Let x_2 = x_1 % 2.
Let x_3 = a % 2.
Let x_4 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4) /\ is_sint32(2 + x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_2 != 1.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_4).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x < y)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x < y)).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: x_2 = x_3.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x < y) \/ (y <= (3 + x)).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (33037)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 17):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_6).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x < y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x < y)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ (x_6 = x_2). Have: (1 + x_2) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= (1 + x_1)).
}
Prove: x_4 = ((x_1 + y_1) % 2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (17ms) (261)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 18):
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 19):
Let x_3 = x_1 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_6).
  (* Invariant *)
  Have: IAbs.abs(x_1 - y_1) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_1 < y_1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_1 < y_1)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_6 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = ((x + y) % 2).
}
Prove: IAbs.abs(x - y) <= (2 + x_1 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (41281)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (16ms) (337)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 20):
Let x_3 = x_2 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = 1 + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_7) /\ is_sint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_2 <= (1 + y_1)) \/ (y_1 <= x_7).
  (* Invariant *)
  Have: IAbs.abs(x_2 - y_1) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_2 <= y_1)).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_2 < y_1)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_2 < y_1)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: x_4 = x_6.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_7 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_7 = x_1). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + x_2 + y_1).
}
Prove: 2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (35954)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 25):
Let x_1 = 1 + x + y.
Let x_2 = x_1 % 2.
Let x_3 = x + y - 1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let x_6 = -y.
Let x_7 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x - 1) /\ is_sint32(1 + x) /\ is_sint32(x_3).
  (* Residual *)
  When: x_4 != 1.
  (* Invariant *)
  Have: (0 < y) /\ (2 <= x).
  (* Invariant *)
  Have: (y <= x) \/ (x <= (2 + y)).
  (* Invariant *)
  Have: IAbs.abs(x - 1 - y) <= (2 + a).
  (* Invariant *)
  Have: 3 <= x_5.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x <= (1 + y))).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y < x)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x <= y)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (x <= y) \/ (y <= (2 + x)).
  (* Invariant *)
  Have: x_2 = x_4.
  (* Invariant *)
  Have: IAbs.abs(1 + x - y) <= x_1.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_4 = 0)).
}
Prove: x_4 = 0.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (37669)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (9ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 29):
Let x_1 = -a.
Let x_2 = 2 * x.
Let x_3 = 2 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x) /\
      is_sint32(2 + x) /\ is_sint32(a - x).
  (* Goal *)
  When: (a % 2) = 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (x < a).
  (* Invariant *)
  Have: (x_2 <= (1 + a)) \/ (a <= (1 + x_2)).
  (* Invariant *)
  Have: IAbs.abs(x_2 - a) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (a_1 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: a <= (3 + x_2).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: IAbs.abs(2 + x_2 - a) <= x_3.
  (* Invariant *)
  Have: 0 <= a.
}
Prove: a <= (2 + x_2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (33487)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 30):
Let x_1 = 2 + x + y.
Let x_2 = x_1 % 2.
Let x_3 = x + y.
Let x_4 = -y.
Let x_5 = x_3 % 2.
Let x_6 = 3 + x.
Let x_7 = a % 2.
Let x_8 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_8) /\ is_sint32(2 + x) /\
      is_sint32(x_3).
  (* Residual *)
  When: x_5 != 1.
  (* Goal *)
  When: x_5 != 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_8).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x < y)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x < y)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x_5 = x_7.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x < y) \/ (y <= x_6).
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: IAbs.abs(2 + x - y) <= x_1.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: flag_0 != 1.
}
Prove: x_6 <= y.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (37994)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (8ms) (70)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 32):
Let x_1 = x + y - 1.
Let x_2 = x_1 % 2.
Let x_3 = 2 + x.
Let x_4 = 1 + x.
Let x_5 = 1 + x + y.
Let x_6 = x_5 % 2.
Let x_7 = x + y.
Let x_8 = -y.
Let x_9 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x - 1) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_2 != 1.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (0 < y) /\ (2 <= x).
  (* Invariant *)
  Have: (y <= x) \/ (x <= (2 + y)).
  (* Invariant *)
  Have: IAbs.abs(x - 1 - y) <= (2 + a).
  (* Invariant *)
  Have: 3 <= x_7.
  (* Invariant *)
  Have: ((x_9 = 1) -> (x <= (1 + y))).
  (* Invariant *)
  Have: ((x_9 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (y < x)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x <= y)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: x_2 = x_9.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (x <= y) \/ (y <= x_3).
  (* Invariant *)
  Have: x_6 = x_2.
  (* Invariant *)
  Have: IAbs.abs(1 + x - y) <= x_5.
  (* Invariant *)
  Have: 0 < x_7.
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = 0)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (y <= x_4)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 <= y)).
}
Prove: x_2 = 0.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (38321)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (3ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Loop assigns (file out/042_0002/042_merged.c, line 37) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0002/042_merged.c, line 37) (2/2):
Call Result at line 41
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0002/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0002/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
