[kernel] Parsing out/042_0002/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0002/042_merged.c:38: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0002/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 41 goals scheduled
[wp] [Timeout] typed_foo042_assert (Qed 9ms) (Z3)
[wp] Proved goals:   40 / 41
  Qed:              28
  Alt-Ergo 2.5.4:   11 (3ms-8ms-22ms)
  Z3 4.8.12:         1 (10ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 15):
Let x_5 = (1 + x_4 + y_4) % 2.
Let x_6 = x_4 + y_4.
Let x_7 = x_6 % 2.
Let x_8 = a_1 % 2.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_7 = x_8)).
  (* Invariant *)
  Have: IAbs.abs(x_4 - y_4) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = x_8)).
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_5 else x_7) = x_8.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:52ms) (10ms) (48219)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:52ms) (5ms) (150)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 16):
Let x_5 = (1 + x_4 + y_4) % 2.
Let x_6 = x_4 + y_4.
Let x_7 = x_6 % 2.
Let x_8 = a_1 % 2.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_7 = x_8)).
  (* Invariant *)
  Have: IAbs.abs(x_4 - y_4) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = x_8)).
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_5 else x_7) = x_8.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
}
Prove: (x <= (1 + y)) \/ (y <= (1 + x)).
Prover Z3 4.8.12 returns Valid (Qed:54ms) (10ms) (39386)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:54ms) (6ms) (44)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 17):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_6).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ (x_6 = x_2). Have: (1 + x_2) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= (1 + x_1)).
}
Prove: x_4 = ((x_1 + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (70ms) (252706)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (19ms) (261)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 18):
Let x_5 = a % 2.
Let x_6 = (1 + x_4 + y_4) % 2.
Let x_7 = x_4 + y_4.
Let x_8 = x_7 % 2.
Let x_9 = a_1 % 2.
Let x_10 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_10.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: IAbs.abs(x_4 - y_4) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_7.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_6 = x_9)).
  (* Invariant *)
  Have: ((x_9 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_8) = x_9.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (((x + y) % 2) = x_5)).
}
Prove: IAbs.abs(x - y) <= (2 + a).
Prover Z3 4.8.12 returns Valid (Qed:35ms) (10ms) (53456)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 19):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: IAbs.abs(x_4 - y_4) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: ((x_10 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_5 % 2) = x_6)).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
}
Prove: 2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:37ms) (10ms) (40204)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (3ms) (59)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 22):
Let x_2 = x_1 + y_1.
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_3).
  (* Goal *)
  When: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= x_6) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= (x + y).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: (x = x_1) /\ (x_6 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_6 = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= (1 + x_1)).
  (* Invariant *)
  Have: IAbs.abs(x_1 - y_1) <= (3 + x + y).
  (* Invariant *)
  Have: 2 <= x_2.
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (38499)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (6ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 23):
Let x_2 = x_1 + y_1.
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= x_6) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= (x + y).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: (x = x_1) /\ (x_6 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_6 = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= (1 + x_1)).
  (* Invariant *)
  Have: IAbs.abs(x_1 - y_1) <= (3 + x + y).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: (((x_2 % 2) = 0) -> ((x_4 = 0) \/ (x_4 = 1))).
}
Prove: x_4 = ((1 + x_1 + y_1) % 2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (22ms) (282)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 24):
Let x_1 = 1 + x + y.
Let x_2 = x_1 % 2.
Let x_3 = x + y - 1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let x_6 = -y.
Let x_7 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x - 1) /\ is_sint32(1 + x) /\ is_sint32(x_3).
  (* Residual *)
  When: x_4 != 1.
  (* Invariant *)
  Have: (0 < y) /\ (2 <= x).
  (* Invariant *)
  Have: (y <= x) \/ (x <= (2 + y)).
  (* Invariant *)
  Have: IAbs.abs(x - 1 - y) <= (2 + a).
  (* Invariant *)
  Have: 3 <= x_5.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x <= (1 + y))).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y < x)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (x <= y) \/ (y <= (2 + x)).
  (* Invariant *)
  Have: x_2 = x_4.
  (* Invariant *)
  Have: IAbs.abs(1 + x - y) <= x_1.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_4 = 0)).
}
Prove: x_4 = 0.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (37443)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 25):
Let x_1 = 1 + x + y.
Let x_2 = x + y - 1.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Let a_1 = IAbs.abs(x - y).
Let x_5 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x - 1) /\ is_sint32(y - 1) /\ is_sint32(x_2).
  (* Residual *)
  When: x_3 != 1.
  (* Invariant *)
  Have: (2 <= x) /\ (2 <= y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 4 <= x_4.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_3 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: a_1 <= x_1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: (((x_4 % 2) = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: (x_1 % 2) = x_3.
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (37638)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (6ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 26):
Let x = 2 + a.
Let x_1 = (-2) * y.
Let x_2 = 2 * y.
Let x_3 = 2 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(tmp_0) /\ is_sint32(y) /\
      is_sint32(1 + y) /\ is_sint32(x_3) /\ is_sint32(a - 1 - y).
  (* Goal *)
  When: (a % 2) = 1.
  (* Invariant *)
  Have: (0 < y) /\ (x_3 <= a).
  (* Invariant *)
  Have: (x_2 <= a) \/ (a <= (2 + x_2)).
  (* Invariant *)
  Have: IAbs.abs(a - 1 - x_2) <= (2 + a_1).
  (* Invariant *)
  Have: 3 <= a.
  (* Invariant *)
  Have: a <= (1 + x_2).
  (* Invariant *)
  Have: (a_1 % 2) = 1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: a <= (4 + x_2).
  (* Invariant *)
  Have: IAbs.abs(a - 3 - x_2) <= x.
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: a <= (3 + x_2).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (33275)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 27):
Let x_1 = 2 + a.
Let x_2 = -a.
Let x_3 = 2 * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x) /\
      is_sint32(2 + x) /\ is_sint32(a - x).
  (* Residual *)
  When: flag_0 != 0.
  (* Goal *)
  When: (a % 2) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (x < a).
  (* Invariant *)
  Have: (x_3 <= (1 + a)) \/ (a <= (1 + x_3)).
  (* Invariant *)
  Have: IAbs.abs(x_3 - a) <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: (a_1 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: a <= (3 + x_3).
  (* Invariant *)
  Have: IAbs.abs(2 + x_3 - a) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
}
Prove: a <= (2 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (33487)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (4ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 29):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let x_5 = x_1 + y_1.
Let x_6 = x_5 % 2.
Let x_7 = a % 2.
Let x_8 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_8).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ (x_8 = x_2). Have: (1 + x_2) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= (1 + x_1)).
  (* Invariant *)
  Have: x_4 = x_6.
  (* Invariant *)
  Have: IAbs.abs(x_1 - y_1) <= (2 + x + y).
  (* Invariant *)
  Have: 2 <= x_5.
  (* Invariant *)
  Have: ((x_6 = 0) -> ((x_4 = 0) \/ (x_4 = 1))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_4 = 0) \/ (x_4 = 1))).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_1 <= x_1)).
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (39351)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (7ms) (80)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0002/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0002/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Assertion (file out/042_0002/042_merged.c, line 55):
Let x_1 = (1 + x + y) % 2.
Let x_2 = x + y.
Let x_3 = x_2 % 2.
Let x_4 = a_2 % 2.
Let x_5 = a_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y).
  If flag_0 != 0
  Then { Have: a_3 = 0. }
  Else { Have: a_3 = 1. }
  (* Invariant *)
  Have: (-2) <= a_3.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_3 = x_4)).
  (* Invariant *)
  Have: IAbs.abs(x - y) <= (2 + a_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_4)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_1 else x_3) = x_4.
  If flag_0 != 0
  Then { Have: a_2 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_2 = a. }
}
Prove: (a % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/042_0002/042_merged.c, line 34) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0002/042_merged.c, line 34) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0002/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0002/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
