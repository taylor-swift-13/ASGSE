[kernel] Parsing out/014_0023/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0023/014_merged.c:70: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0023/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 112 goals scheduled
[wp] Proved goals:  112 / 112
  Qed:              96
  Alt-Ergo 2.5.4:   16 (2ms-6ms-13ms)
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 16):
Let a_4 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
}
Prove: (a <= m) \/ (j <= (a + m)).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (33698)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 17):
Let x = a + m.
Let x_1 = 1 + m.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: a <= m.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (j < x) \/ (a <= x_1).
}
Prove: (j < x) \/ (a <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (32213)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 19):
Let x = a + m.
Let a_4 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
}
Prove: (0 <= x) \/ (j <= x).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34181)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 25):
Let x = a + m.
Let a_4 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
}
Prove: (0 <= a) \/ (0 <= x).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (33887)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 26):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = 1 + m.
Let a_1 = IAbs.abs(a).
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: a <= m.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (j < x) \/ (a <= x_2).
  (* Invariant *)
  Have: (j < x) \/ (a <= x_1).
  (* Invariant *)
  Have: (0 < x) \/ (j < x).
  (* Invariant *)
  Have: (0 < a) \/ (0 < x).
}
Prove: (a <= x_1) \/ (a <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (32569)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 27):
Let x = a + m.
Let a_4 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
}
Prove: (a <= m) \/ (0 <= x).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (34187)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 28):
Let x = a + m.
Let a_4 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
  (* Invariant *)
  Have: (a <= m) \/ (0 <= x).
}
Prove: IAbs.abs(a) <= m.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (37205)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (9ms) (129)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 30):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
  (* Invariant *)
  Have: (a <= m) \/ (0 <= x).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
}
Prove: (a_4 <= j) \/ (j <= x).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (35836)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (13ms) (132)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 32):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= (a + j)) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
  (* Invariant *)
  Have: (a <= m) \/ (0 <= x).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x).
}
Prove: (a <= m) \/ (a_4 <= j).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (34831)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 33):
Let x = a - 1.
Let a_1 = IAbs.abs(x).
Let x_1 = 1 + m.
Let x_2 = a + m.
Let x_3 = 1 + j.
Let a_2 = IAbs.abs(a).
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a + j).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: a <= m.
  (* Invariant *)
  Have: a_2 <= m.
  (* Invariant *)
  Have: a_2 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (j < x_2) \/ (a <= x_1).
  (* Invariant *)
  Have: (j < x_2) \/ (a <= x_3).
  (* Invariant *)
  Have: (0 < x_2) \/ (j < x_2).
  (* Invariant *)
  Have: (0 < a) \/ (0 < x_2).
  (* Invariant *)
  Have: (a <= x_3) \/ (a <= x_1).
  (* Invariant *)
  Have: (0 < x_2) \/ (a <= x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_1 <= m))).
  (* Invariant *)
  Have: (j < x_2) \/ (a_1 <= j).
  (* Invariant *)
  Have: (a_1 <= j) \/ (a <= x_1).
}
Prove: (a_1 <= j) \/ (a <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (33469)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 35):
Let a_4 = IAbs.abs(a).
Let x = a + j.
Let x_1 = a + m.
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x_1).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x_1).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x_1).
  (* Invariant *)
  Have: (0 <= x_1) \/ (j <= x_1).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x_1).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
  (* Invariant *)
  Have: (a <= m) \/ (0 <= x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x_1).
  (* Invariant *)
  Have: (a <= m) \/ (a_4 <= j).
  (* Invariant *)
  Have: (a <= j) \/ (a_4 <= j).
  (* Invariant *)
  Have: (a_4 <= j) \/ (0 <= x).
}
Prove: (a_4 <= j) \/ (0 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (35095)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (2ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 41):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: (a <= j) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= x) \/ (j <= x).
  (* Invariant *)
  Have: (0 <= a) \/ (0 <= x).
  (* Invariant *)
  Have: (a <= j) \/ (a <= m).
  (* Invariant *)
  Have: (a <= m) \/ (0 <= x).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x).
  (* Invariant *)
  Have: (a <= m) \/ (a_4 <= j).
  (* Invariant *)
  Have: (a <= j) \/ (a_4 <= j).
  (* Invariant *)
  Have: (a_4 <= j) \/ (0 <= x).
  (* Invariant *)
  Have: 0 <= (a + j).
}
Prove: 0 <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (34954)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 43):
Let x = a + m.
Let x_1 = a - 1.
Let a_1 = IAbs.abs(x_1).
Let x_2 = 1 + j.
Let x_3 = 1 + m.
Let a_2 = IAbs.abs(a).
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: a <= m.
  (* Invariant *)
  Have: a_2 <= m.
  (* Invariant *)
  Have: a_2 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (j < x) \/ (a <= x_3).
  (* Invariant *)
  Have: (j < x) \/ (a <= x_2).
  (* Invariant *)
  Have: (a <= x_2) \/ (a <= x_3).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_1 <= m))).
  (* Invariant *)
  Have: (j < x) \/ (a_1 <= j).
  (* Invariant *)
  Have: (a_1 <= j) \/ (a <= x_3).
  (* Invariant *)
  Have: (a_1 <= j) \/ (a <= x_2).
  (* Invariant *)
  Have: 0 < x.
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (33231)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 47):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 48):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 49):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 51):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 53):
Let x = a + m.
Let a_4 = IAbs.abs(a).
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a <= m) \/ (j <= x).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x).
  (* Invariant *)
  Have: (a <= m) \/ (a_4 <= j).
  (* Invariant *)
  Have: 0 <= (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a <= j.
}
Prove: a <= m.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (34896)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (3ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 55):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 57):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 58):
Let x = a + m.
Let a_4 = IAbs.abs(a).
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 <= m))).
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x).
  (* Invariant *)
  Have: 0 <= (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: a <= m.
}
Prove: a_4 <= m.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (35950)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (4ms) (129)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 59):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let a_5 = IAbs.abs(a_3).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: 0 < (a_3 + j).
  (* Invariant *)
  Have: 0 <= (a_3 + m).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: (0 < j) /\ (j <= (1 + m)).
  (* Invariant *)
  Have: a_3 <= m.
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: (a_4 <= j) \/ (j <= x).
  (* Invariant *)
  Have: 0 <= (a + j).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: a <= m.
  (* Invariant *)
  Have: a_4 <= m.
}
Prove: a_4 <= j.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (35451)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (11ms) (135)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 60):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 61):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 63):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0023/014_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0023/014_merged.c, line 65):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0023/014_merged.c, line 66) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0023/014_merged.c, line 66) (2/2):
Call Result at line 70
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0023/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0023/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
