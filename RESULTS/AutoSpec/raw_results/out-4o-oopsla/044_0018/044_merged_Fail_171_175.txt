[kernel] Parsing out/044_0018/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 175 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_2_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_2_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_14_preserved (Qed 17ms) (Z3)
[wp] Proved goals:  171 / 175
  Qed:             158
  Alt-Ergo 2.5.4:   10 (4ms-58ms-454ms)
  Z3 4.8.12:         3 (10ms-17ms-20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 18):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 2 * i.
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then 1 else 2) + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_4).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i_3 <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_1)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: i <= (x / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_1)).
}
Prove: x_4 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (39500)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (9ms) (265)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 18):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
}
Prove: 0 <= (n * (1 + k)).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 19):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i_3 <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_4)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: i <= (x / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_4)).
  (* Invariant *)
  Have: x_1 <= x_3.
}
Prove: x_1 < x_3.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 19):
Let x = n * (1 + k).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: 0 <= x.
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 25):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(1 + i) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i_3 <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_4)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: i <= (x / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_4)).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: x_1 < x_3.
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (39956)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (8ms) (321)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 29):
Let x = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + i_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_5)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: i_1 <= (x / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_5)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (64986)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (12ms) (292)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 30):
Let x = 1 + i.
Let x_1 = i * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (if (flag_0 = 1) then 1 else 2) + x_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_1) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: i <= (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_2))).
}
Prove: (0 <= x_2) /\ (i_1 <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (42872)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (11ms) (315)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 31):
Let x = 1 + i_1.
Let x_1 = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (if (flag_0 = 1) then 1 else 2) + x_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = i_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_1) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: i_1 <= (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 < x_4.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((0 <= x_2) /\ (i_4 <= x_3)))).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 32):
Let x = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + i_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i_1)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_5)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: i_1 <= (x / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_5)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_2) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_2) ->
      ((0 <= x_1) /\ (i_4 <= x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (47607)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (32ms) (1672)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 33):
Let x = 1 + i.
Let x_1 = i * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (if (flag_0 = 1) then 1 else 2) + x_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i_3 <= x_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_1))).
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x_1) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: i <= (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((0 <= x_2) /\ (i_3 <= x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_2))).
}
Prove: exists i_3 : Z. ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x_2) /\
    (0 <= i_3) /\ (i_3 <= k).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (45576)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 33):
Let x = n * (1 + k).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (n = 1)).
}
Prove: exists i : Z. ((n * i) = 0) /\ (0 <= i) /\ (i <= k).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (454ms) (22047)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 58):
Let x = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 2 * i.
Let x_2 = 1 + i.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_1 + (if (flag_0 = 1) then 1 else 2).
Let x_6 = x - (if (flag_0 = 1) then 1 else 2).
Let x_7 = i + (if (flag_0 = 1) then 1 else 2).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_9 = (if (flag_0 = 1) then 1 else 2) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x <= x_9.
  (* Invariant *)
  Have: x < x_9.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = x_7)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (x
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: (x
           = ((if (flag_0 = 1) then 1 else 2)
              + (i_3 * (if (flag_0 = 1) then 1 else 2)))) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_5)).
  (* Invariant *)
  Have: x = x_8.
  (* Invariant *)
  Have: x <= x_8.
  (* Invariant *)
  Have: (x_6 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: i <= (x_6 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x) else (2 <= x).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x = x_5)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_2) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_2) ->
      ((0 <= x) /\ (i_4 <= x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_2) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= k).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = (2 + x_1))).
}
Prove: (x_2 * (if (flag_0 = 1) then 1 else 2)) = x.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (12595)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (14ms) (483)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 61):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_2 + (if (flag_0 = 1) then 1 else 2).
Let x_6 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_7 = i + (if (flag_0 = 1) then 1 else 2).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_9 = (if (flag_0 = 1) then 1 else 2) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: x_1 < x_9.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_7)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: (x_1
           = ((if (flag_0 = 1) then 1 else 2)
              + (i_2 * (if (flag_0 = 1) then 1 else 2)))) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 = x_8.
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (x_6 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: i <= (x_6 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((0 <= x_1) /\ (i_4 <= x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: (x_1 = (i_3 * (if (flag_0 = 1) then 1 else 2))) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
}
Prove: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (51905)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 61):
Let x = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i) /\ (i <= k).
}
Prove: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (31123)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (180)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 63):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_2 + (if (flag_0 = 1) then 1 else 2).
Let x_6 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_7 = i + (if (flag_0 = 1) then 1 else 2).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_9 = (if (flag_0 = 1) then 1 else 2) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: x_1 < x_9.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_7)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: (x_1
           = ((if (flag_0 = 1) then 1 else 2)
              + (i_2 * (if (flag_0 = 1) then 1 else 2)))) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 = x_8.
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (x_6 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: i <= (x_6 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((0 <= x_1) /\ (i_4 <= x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: (x_1 = (i_3 * (if (flag_0 = 1) then 1 else 2))) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: i < x_1.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (48164)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (23ms) (670)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 64):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_2 + (if (flag_0 = 1) then 1 else 2).
Let x_6 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_7 = i + (if (flag_0 = 1) then 1 else 2).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_9 = (if (flag_0 = 1) then 1 else 2) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i_1) /\
      (i_1 <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (flag_0 != 1)).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: x_1 < x_9.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_7)).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: (x_1
           = ((if (flag_0 = 1) then 1 else 2)
              + (i_2 * (if (flag_0 = 1) then 1 else 2)))) /\ (0 <= i_2) /\
      (i_2 <= k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 = x_8.
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (x_6 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: i <= (x_6 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((0 <= x_1) /\ (i_4 <= x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: (x_1 = (i_3 * (if (flag_0 = 1) then 1 else 2))) /\ (0 <= i_3) /\
      (i_3 <= k).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i < x_1.
}
Prove: i < (x_1 / (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (51531)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 64):
Let x = (1 + k) * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: ((i * (if (flag_0 = 1) then 1 else 2)) = 0) /\ (0 <= i) /\ (i <= k).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (31403)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (9ms) (236)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0018/044_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0018/044_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0018/044_merged.c, line 105):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0018/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
