[kernel] Parsing out/034_0011/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 73 goals scheduled
[wp] [Timeout] typed_foo034_loop_invariant_11_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   72 / 73
  Qed:              64
  Alt-Ergo 2.5.4:    8 (4ms-8ms-18ms)
  Timeout:           1
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 12):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(1 + x).
  (* Residual *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (((i % 2) = 1) -> (x_2 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Then *)
  Have: i < n.
}
Prove: (x < (n / 2)) \/ (i <= (2 + x_1)).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34632)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 17):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 2 + x_1.
Let x_3 = 1 + x_1.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(1 + x).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (((i % 2) = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (x < (n / 2)) \/ (i <= x_2).
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34642)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 21):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Residual *)
  When: (x_3 % 2) != 0.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (((i % 2) = 1) -> (x_2 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Then *)
  Have: i < n.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 23):
Let x = i_1 / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = 1 + i_1.
Let x_4 = 1 + x.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_4).
  (* Residual *)
  When: (x_3 % 2) = 0.
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: x_1 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (((i_1 % 2) = 1) -> (x_2 = i_1)).
  (* Invariant *)
  Have: x <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= (2 + x_1).
}
Prove: (i / 2) <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (38203)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (16ms) (334)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 24):
Let x = i_1 / 2.
Let x_1 = 1 + x.
Let x_2 = 2 * x.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: x_2 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (((i_1 % 2) = 1) -> (x_3 = i_1)).
  (* Invariant *)
  Have: x <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= (2 + x_2).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_1)))).
}
Prove: i <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (35807)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 26):
Let x = 1 + i.
Let x_1 = i / 2.
Let x_2 = 1 + x_1.
Let x_3 = 2 * x_1.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Residual *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (((i % 2) = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: i <= (2 + x_3).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x)))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (38453)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (18ms) (237)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 34):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (((i % 2) = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Then *)
  Have: i < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_4)). }
  Else { Have: x_2 = x_4. }
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: i < x_3.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_1 != 1.
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (37279)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 40):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_1 % 2.
Let x_4 = 2 * x_2.
Let x_5 = x / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (((x % 2) = 1) -> (x_7 = x)).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Then *)
  Have: x < n.
  If x_3 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_5)). }
  Else { Have: x_2 = x_5. }
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: x_3 != 1.
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: i <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (37781)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 41):
Let x = 1 + i_1.
Let x_1 = x / 2.
Let x_2 = x % 2.
Let x_3 = 2 * x_1.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: i_1 <= x_6.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (((i_1 % 2) = 1) -> (x_6 = i_1)).
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_2 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_4)). }
  Else { Have: x_1 = x_4. }
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: i_1 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_2 != 1.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
}
Prove: (i / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (42213)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0011/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0011/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0011/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0011/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
