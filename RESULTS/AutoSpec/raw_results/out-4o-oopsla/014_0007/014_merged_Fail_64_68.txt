[kernel] Parsing out/014_0007/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0007/014_merged.c:48: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0007/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 68 goals scheduled
[wp] [Timeout] typed_foo014_loop_invariant_3_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_5_preserved (Qed 19ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_9_preserved (Qed 21ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_10_preserved (Qed 21ms) (Z3)
[wp] Proved goals:   64 / 68
  Qed:              56
  Alt-Ergo 2.5.4:    3
  Z3 4.8.12:         5 (20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 13):
Let a_1 = IAbs.abs(a).
Let x = a % 2.
Let x_1 = a + j.
Let x_2 = 1 + m.
Let x_3 = a + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((j - 1) % 2) = x.
  (* Invariant *)
  Have: (j % 2) = (1 + x).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_1 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
}
Prove: j < x_3.
Prover Z3 4.8.12 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 14):
Let x = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_1 = a_3 % 2.
Let x_2 = a_3 + j.
Let x_3 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_1.
  (* Invariant *)
  Have: (j % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 <= i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_4 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x.
}
Prove: (a <= m) /\ (0 <= x).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (42627)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (9ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 15):
Let x = a + m.
Let a_1 = IAbs.abs(a).
Let x_1 = a % 2.
Let x_2 = a + j.
Let x_3 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(1 + a) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_1.
  (* Invariant *)
  Have: (j % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_1 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (a < m) /\ ((-1) <= x).
}
Prove: x_2 < m.
Prover Z3 4.8.12 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 16):
Let x = a + m.
Let x_1 = 1 + m.
Let a_1 = IAbs.abs(a).
Let x_2 = a % 2.
Let x_3 = a + j.
Let x_4 = 1 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_2.
  (* Invariant *)
  Have: (j % 2) = (1 + x_2).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_1 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: j < x.
  (* Invariant *)
  Have: (0 < x) /\ (a <= x_1).
}
Prove: a <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (36845)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 19):
Let x = a + j.
Let x_1 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_2 = j % 2.
Let x_3 = a_3 % 2.
Let x_4 = a_3 + j.
Let x_5 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_3.
  (* Invariant *)
  Have: x_2 = (1 + x_3).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 <= i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_4 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_1).
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: x_2 = (a % 2).
Prover Z3 4.8.12 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 20):
Let x = j % 2.
Let x_1 = a % 2.
Let x_2 = a + j.
Let x_3 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_4 = a_3 % 2.
Let x_5 = a_3 + j.
Let x_6 = 1 + m.
Let x_7 = 1 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_6).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_4.
  (* Invariant *)
  Have: x = (1 + x_4).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 <= i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_4 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_2 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: x = x_1.
}
Prove: (x_7 % 2) = (1 + x_1).
Prover Z3 4.8.12 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 21):
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 <= i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) -> (a_4 < i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
}
Prove: (a <= i) /\ (0 <= (a + i)).
Prover Z3 4.8.12 returns Valid (Qed:36ms) (20ms) (43876)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 22):
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 <= i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) -> (a_4 < i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
}
Prove: (a < i) /\ (0 <= (a + i)).
Prover Z3 4.8.12 returns Valid (Qed:38ms) (20ms) (44717)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:38ms) (34ms) (423)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 23):
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 <= i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) -> (a_4 < i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ (0 <= (a + i_1))))).
}
Prove: (a < i) /\ (0 < (a + i)).
Prover Z3 4.8.12 returns Valid (Qed:44ms) (20ms) (45575)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 25):
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 <= i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) -> (a_4 < i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ (0 < (a + i_1))))).
}
Prove: IAbs.abs(a) < i.
Prover Z3 4.8.12 returns Valid (Qed:44ms) (20ms) (46929)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 27):
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_4 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 <= i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 <= (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) -> (a_4 < i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a_3 < i_1) /\ (0 < (a_3 + i_1))))).
  (* Invariant *)
  Have: a_4 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ (0 < (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) -> (IAbs.abs(a) < i_1))).
}
Prove: (a < i) /\ (0 < (a + i)).
Prover Z3 4.8.12 returns Valid (Qed:67ms) (20ms) (47110)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 29):
Let a_4 = IAbs.abs(a).
Let x = 1 + j.
Let x_1 = a % 2.
Let x_2 = j % 2.
Let x_3 = a + j.
Let x_4 = a + m.
Let a_5 = IAbs.abs(a_3).
Let x_5 = a_3 % 2.
Let x_6 = a_3 + j.
Let x_7 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_7).
  (* Invariant *)
  Have: j <= (1 + a_3 + m).
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= (a_3 + m)).
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: ((j - 1) % 2) = x_5.
  (* Invariant *)
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 <= i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 <= (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> (a_5 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) ->
      ((a_3 < i) /\ (0 < (a_3 + i))))).
  (* Invariant *)
  Have: a_5 < j.
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_2 = x_1.
  (* Invariant *)
  Have: (x % 2) = (1 + x_1).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x) ->
      ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x) -> ((a < i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> (a_4 < i))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a < i) /\ (0 < (a + i))))).
}
Prove: a_4 <= j.
Prover Z3 4.8.12 returns Valid (Qed:44ms) (20ms) (47733)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0007/014_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0007/014_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0007/014_merged.c, line 44) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0007/014_merged.c, line 44) (2/2):
Call Result at line 48
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0007/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0007/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
