[kernel] Parsing out/042_0011/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0011/042_merged.c:30: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0011/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] [Timeout] typed_foo042_assert (Qed 7ms) (Z3)
[wp] Proved goals:   24 / 25
  Qed:              18
  Alt-Ergo 2.5.4:    6 (4ms-8ms-18ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 15):
Let x_5 = a_1 % 2.
Let x_6 = x_4 + y_4.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_4 <= x_4) \/ (x_4 <= y_4).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_4 + y_4) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_4 <= y_4)) \/ ((flag_0 != 0) /\ (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
}
Prove: (y <= x) \/ (x <= y).
Prover Z3 4.8.12 returns Valid (Qed:45ms) (37165)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:45ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 16):
Let x_5 = a_1 % 2.
Let x_6 = x_4 + y_4.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_4 <= x_4) \/ (x_4 <= y_4).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_4 + y_4) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_4 <= y_4)) \/ ((flag_0 != 0) /\ (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (y <= x) \/ (x <= y).
}
Prove: 2 <= (x + y).
Prover Z3 4.8.12 returns Valid (Qed:50ms) (10ms) (40036)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:50ms) (5ms) (96)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 19):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_4 <= x_4) \/ (x_4 <= y_4).
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_8 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_4 + y_4) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_4 <= y_4)) \/ ((flag_0 != 0) /\ (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (y <= x) \/ (x <= y).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a))) \/
      (((flag_0 = 0) -> ((1 + x + y) = a))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:32ms) (10ms) (40567)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (8ms) (123)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 20):
Let x_3 = a % 2.
Let x_4 = 1 + x.
Let x_5 = a_1 % 2.
Let x_6 = x_2 + y_2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(x_4).
  (* Residual *)
  When: x_3 != 1.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_2 <= x_2) \/ (x_2 <= y_2).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_2 + y_2) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_2).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_2 <= y_2))) /\
      (((flag_0 != 0) -> (y_2 <= x_2))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_2 <= y_2)) \/ ((flag_0 != 0) /\ (y_2 <= x_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (y_2 = y).
    Have: (x_1 + y) = a.
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (x_2 = x) /\ (y_2 = y_1).
    Have: (1 + x + y_1) = a.
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: (x < y) \/ (y <= x_4).
  (* Invariant *)
  Have: 0 < (x + y).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((1 + x + y) = a))) \/
      (((flag_0 = 0) -> ((2 + x + y) = a))).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (((flag_0 = 0) -> (x_3 = 0))).
  (* Invariant *)
  Have: (0 < y) /\ (0 <= x).
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (37545)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (18ms) (355)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 23):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_4 <= x_4) \/ (x_4 <= y_4).
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_8 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_4 + y_4) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_4 <= y_4)) \/ ((flag_0 != 0) /\ (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (y <= x) \/ (x <= y).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a))) \/
      (((flag_0 = 0) -> ((1 + x + y) = a))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (39963)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (6ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 24):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (y_4 <= x_4) \/ (x_4 <= y_4).
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_8 = a_1))) \/
      (((flag_0 = 0) -> ((1 + x_4 + y_4) = a_1))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x_4 <= y_4)) \/ ((flag_0 != 0) /\ (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (y <= x) \/ (x <= y).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_6 = a))) \/
      (((flag_0 = 0) -> ((1 + x + y) = a))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= a.
}
Prove: (((flag_0 = 0) -> (x <= y))) /\ (((flag_0 != 0) -> (y <= x))).
Prover Z3 4.8.12 returns Valid (Qed:32ms) (10ms) (40990)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (4ms) (106)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0011/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0011/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Assertion (file out/042_0011/042_merged.c, line 47):
Let x_1 = a_2 % 2.
Let x_2 = x + y.
Let x_3 = a_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y).
  If flag_0 != 0
  Then { Have: a_3 = 0. }
  Else { Have: a_3 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_3 = 2))) \/ (((flag_0 = 0) -> (a_3 = 3))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_3 = 0))) \/ (((flag_0 != 0) -> (x_3 = 1))).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: 0 <= a_3.
  (* Invariant *)
  Have: (y <= x) \/ (x <= y).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_2 = a_2))) \/
      (((flag_0 = 0) -> ((1 + x + y) = a_2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_1 = 0))) \/ (((flag_0 != 0) -> (x_1 = 1))).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x <= y))) /\ (((flag_0 != 0) -> (y <= x))).
  (* Invariant *)
  Have: ((flag_0 = 0) /\ (x <= y)) \/ ((flag_0 != 0) /\ (y <= x)).
  If flag_0 != 0
  Then { Have: a_2 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_2 = a. }
}
Prove: (a % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/042_0011/042_merged.c, line 26) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0011/042_merged.c, line 26) (2/2):
Call Result at line 30
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0011/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0011/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
