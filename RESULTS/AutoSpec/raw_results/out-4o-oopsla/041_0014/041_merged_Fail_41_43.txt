[kernel] Parsing out/041_0014/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0014/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0014/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0014/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 43 goals scheduled
[wp] [Timeout] typed_foo041_loop_invariant_8_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_foo041_loop_invariant_13_established (Qed 4ms) (Z3)
[wp] Proved goals:   41 / 43
  Qed:              35
  Alt-Ergo 2.5.4:    5 (6ms-6ms-8ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 21):
Let x = 2 + j_1 + n.
Let x_1 = 1 + j_1.
Let x_2 = (n * (1 + n)) / 2.
Let x_3 = 2 + j_1.
Let x_4 = -j_1.
Let x_5 = j - 1 - j_1.
Let x_6 = ((j - 2 - j_1) * x_5) / 2.
Let x_7 = j - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_7) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: x_6 <= j_1.
  (* Invariant *)
  Have: ((x_7 * x_5) / 2) = j_1.
  (* Invariant *)
  Have: (0 <= j_1) /\ (j_1 < j).
  (* Invariant *)
  Have: ((x_3 <= j) -> (j <= (1 + (2 * j_1)))).
  (* Invariant *)
  Have: ((x_3 <= j) -> (0 < j_1)).
  (* Invariant *)
  Have: ((x_3 <= j) -> (x_6 = j_1)).
  (* Invariant *)
  Have: ((x = j) -> (x_2 = j_1)).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((2 + j_1 + i) <= j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: (x_1 = j) \/ (0 < j_1).
  (* Invariant *)
  Have: ((x_1 = j) -> (j_1 = 0)).
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Then *)
  Have: j <= (1 + j_1 + n).
}
Prove: ((x_7 * (1 + j - j_1)) / 2) = j.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (72722)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 23):
Let x = 1 + i.
Let x_1 = (i * x) / 2.
Let x_2 = 2 + i.
Let x_3 = x * x_2.
Let x_4 = x_3 / 2.
Let x_5 = 1 + n.
Let x_6 = (n * x_5) / 2.
Let x_7 = (i * (i - 1)) / 2.
Let x_8 = 1 + i + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_6 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i + x_7) < x_4.
  (* Invariant *)
  Have: x_4 = x_8.
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_4).
  (* Invariant *)
  Have: ((0 < i) -> ((2 * i) < x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_2 <= x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_4 = (1 + i + x_7))).
  (* Invariant *)
  Have: ((x_5 = i) -> (x_4 = (1 + i + x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (i_1 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (1 + i_1)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i = 0) \/ (x_2 <= x_4).
  (* Invariant *)
  Have: ((i = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_4))).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 <= x_4.
}
Prove: ((-1) <= i) /\ ((-1) <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (38697)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (8ms) (93)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 25):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = x * x_1.
Let x_3 = (i * x) / 2.
Let x_4 = x_2 / 2.
Let x_5 = 1 + n.
Let x_6 = (n * x_5) / 2.
Let x_7 = (i * (i - 1)) / 2.
Let x_8 = 1 + i + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1 - i).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_6 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i + x_7) < x_4.
  (* Invariant *)
  Have: x_4 = x_8.
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: i < x_4.
  (* Invariant *)
  Have: ((0 < i) -> ((2 * i) < x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_1 <= x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_4 = (1 + i + x_7))).
  (* Invariant *)
  Have: ((x_5 = i) -> (x_4 = (1 + i + x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (i_1 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (1 + i_1)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: ((i = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_4))).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
}
Prove: 2 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (38671)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 26):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = x * x_1.
Let x_3 = (i * x) / 2.
Let x_4 = x_2 / 2.
Let x_5 = 1 + n.
Let x_6 = (n * x_5) / 2.
Let x_7 = (i * (i - 1)) / 2.
Let x_8 = 1 + i + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1 - i).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_6 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i + x_7) < x_4.
  (* Invariant *)
  Have: x_4 = x_8.
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: i < x_4.
  (* Invariant *)
  Have: ((0 < i) -> ((2 * i) < x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_1 <= x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_4 = (1 + i + x_7))).
  (* Invariant *)
  Have: ((x_5 = i) -> (x_4 = (1 + i + x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (i_1 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (1 + i_1)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: ((i = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_4))).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: 2 <= x_2.
}
Prove: x_4 = x_3.
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 29):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Let x_6 = (i_1 * x) / 2.
Let x_7 = (i_1 * (i_1 - 1)) / 2.
Let x_8 = 1 + i_1 + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1 - i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i_1 + x_7) < x_3.
  (* Invariant *)
  Have: x_3 = x_8.
  (* Invariant *)
  Have: x_3 <= x_8.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_3 = (1 + i_1 + x_7))).
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_3 = (1 + i_1 + x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_3))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_3))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: ((n = i_1) -> (x_3 = x_5)).
}
Prove: ((i * (i - 1)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (40372)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (6ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 30):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Let x_6 = (i_1 * x) / 2.
Let x_7 = (i_1 * (i_1 - 1)) / 2.
Let x_8 = 1 + i_1 + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i_1 + x_7) < x_3.
  (* Invariant *)
  Have: x_3 = x_8.
  (* Invariant *)
  Have: x_3 <= x_8.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_3 = (1 + i_1 + x_7))).
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_3 = (1 + i_1 + x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_3))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_3))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: ((n = i_1) -> (x_3 = x_5)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (41379)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (7ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 31):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Residual *)
  When: flag_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (((n * (1 + n)) / 2) = 0)).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 37):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Let x_6 = (i_1 * x) / 2.
Let x_7 = (i_1 * (i_1 - 1)) / 2.
Let x_8 = 1 + i_1 + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (i_1 + x_7) < x_3.
  (* Invariant *)
  Have: x_3 = x_8.
  (* Invariant *)
  Have: x_3 <= x_8.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_3 = (1 + i_1 + x_7))).
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_3 = (1 + i_1 + x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_3))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_3))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x_3 = x_6.
  (* Invariant *)
  Have: ((n = i_1) -> (x_3 = x_5)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: ((i_1 = (-1)) -> (x_3 = 0)).
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (40734)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (6ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Loop assigns (file out/041_0014/041_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0014/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0014/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
