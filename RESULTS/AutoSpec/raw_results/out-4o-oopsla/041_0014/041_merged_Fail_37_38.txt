[kernel] Parsing out/041_0014/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0014/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0014/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0014/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 38 goals scheduled
[wp] [Timeout] typed_foo041_assert (Qed 16ms) (Z3)
[wp] Proved goals:   37 / 38
  Qed:              31
  Alt-Ergo 2.5.4:    3 (4ms-5ms)
  Z3 4.8.12:         3 (30ms-80ms)
  Timeout:           1
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 21):
Let x = 1 + j_1.
Let x_1 = 2 + j_1.
Let x_2 = -j_1.
Let x_3 = j - j_1.
Let x_4 = j - 1 - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (((j - 2 - j_1) * x_4) / 2) <= j_1.
  (* Invariant *)
  Have: ((x_3 * x_4) / 2) = j_1.
  (* Invariant *)
  Have: (0 <= j_1) /\ (j_1 < j).
  (* Invariant *)
  Have: ((x_1 <= j) -> (j <= (1 + (2 * j_1)))).
  (* Invariant *)
  Have: ((x_1 <= j) -> (0 < j_1)).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((2 + j_1 + i) <= j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: (x = j) \/ (0 < j_1).
  (* Invariant *)
  Have: ((x = j) -> (j_1 = 0)).
  (* Invariant *)
  Have: j <= (2 + j_1 + n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Then *)
  Have: j <= (1 + j_1 + n).
}
Prove: ((x_3 * (1 + j - j_1)) / 2) = j.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (30ms) (68146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 23):
Let x = 1 + i.
Let x_1 = (i * x) / 2.
Let x_2 = 2 + i.
Let x_3 = x * x_2.
Let x_4 = x_3 / 2.
Let x_5 = 1 + i + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i + ((i * (i - 1)) / 2)) < x_4.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_4).
  (* Invariant *)
  Have: ((0 < i) -> ((2 * i) < x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_2 <= x_4)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (i_1 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (1 + i_1)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i = 0) \/ (x_2 <= x_4).
  (* Invariant *)
  Have: ((i = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_4))).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 <= x_4.
}
Prove: ((-1) <= i) /\ ((-1) <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (37386)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (4ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 25):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = x * x_1.
Let x_3 = (i * x) / 2.
Let x_4 = x_2 / 2.
Let x_5 = 1 + i + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1 - i).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i + ((i * (i - 1)) / 2)) < x_4.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: i < x_4.
  (* Invariant *)
  Have: ((0 < i) -> ((2 * i) < x_4)).
  (* Invariant *)
  Have: ((0 < i) -> (x_1 <= x_4)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (i_1 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i + ((i_1 * (1 + i_1)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: ((i = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_4))).
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
}
Prove: 2 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (37360)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (4ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 27):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = (i_1 * x) / 2.
Let x_4 = x_2 / 2.
Let x_5 = 1 + i_1 + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_4 - 1 - i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 + ((i_1 * (i_1 - 1)) / 2)) < x_4.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_4).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_4)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_4)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_4))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: i_1 <= (1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_4))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
}
Prove: ((i * (i - 1)) / 2) <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (60ms) (166725)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 28):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = (i_1 * x) / 2.
Let x_5 = 1 + i_1 + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 + ((i_1 * (i_1 - 1)) / 2)) < x_3.
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_3))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i_1 <= (1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_3))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (80ms) (240450)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 34):
Let x = 1 + i_1.
Let x_1 = 2 + i_1.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = (i_1 * x) / 2.
Let x_5 = 1 + i_1 + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 + ((i_1 * (i_1 - 1)) / 2)) < x_3.
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: ((0 < i_1) -> ((2 * i_1) < x_3)).
  (* Invariant *)
  Have: ((0 < i_1) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (i_2 - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_1 + ((i_2 * (1 + i_2)) / 2)) < x_3))).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i_1 <= (1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 + i_2) < x_3))).
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: ((-1) <= i_1) /\ ((-1) <= x_2).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: ((i_1 = (-1)) -> (x_3 = 0)).
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (38976)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0014/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0014/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/041_0014/041_merged.c, line 45):
Let x = i * (1 + i).
Let x_1 = x / 2.
Let x_2 = i + k + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((i * (i - 1)) / 2) <= x_1.
  (* Invariant *)
  Have: (0 <= i) /\ ((-1) <= x).
  (* Invariant *)
  Have: ((0 < i) -> (i <= x_1)).
  (* Invariant *)
  Have: ((0 < i) -> (2 <= x)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: (i = 0) \/ (2 <= x).
  (* Invariant *)
  Have: ((i = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_1))).
  (* Else *)
  Have: n < i.
}
Prove: (2 * n) < x_2.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/041_0014/041_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0014/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0014/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
