[kernel] Parsing out/044_0009/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 69 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_10_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   68 / 69
  Qed:              60
  Alt-Ergo 2.5.4:    8 (5ms-39ms-155ms)
  Timeout:           1
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 18):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = (2 * i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((flag_0 = 1) -> ((0 <= i_3) -> ((i_3 < i) ->
      (x = i_3)))).
  (* Invariant *)
  Have: ((i_2 <= i) -> ((0 <= i_2) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i <= (1 + k)) -> (x = i))).
  (* Then *)
  Have: i <= k.
}
Prove: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (60764)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (13ms) (480)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 19):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = (2 * i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((flag_0 = 1) -> ((0 <= i_3) -> ((i_3 < i) ->
      (x = i_3)))).
  (* Invariant *)
  Have: ((i_2 <= i) -> ((0 <= i_2) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i <= (1 + k)) -> (x = i))).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (40246)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (21ms) (590)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 20):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + j.
Let x_3 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = (2 * x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_2 : Z. ((flag_0 = 1) -> ((0 <= i_2) ->
      (((2 + i_2) <= x_1) -> (i_2 = j)))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: (x_3 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_2))).
  (* Then *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38046)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (7ms) (123)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 26):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + j.
Let x_4 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_4).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_2)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((flag_0 = 1) -> ((0 <= i_3) ->
      (((2 + i_3) <= x_1) -> (i_3 = j)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: (x_4 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_3))).
  (* Then *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (30ms) (88258)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (8ms) (135)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 27):
Let x = 1 + j.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (i_3 = j))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= j) -> (j = i_2))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j <= k.
}
Prove: x = i.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 28):
Let x = 1 + j.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (i_1 = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (i_3 = j))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= j) -> (j = i_2))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) -> (x = i_3))).
}
Prove: x = i.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (155ms) (2802)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 29):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + j.
Let x_4 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_2 : Z. ((flag_0 = 1) -> ((0 <= i_2) ->
      (((2 + i_2) <= x_1) -> (i_2 = j)))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: (x_4 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_3))).
  (* Then *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((flag_0 = 1) -> ((0 <= i_2) -> ((i_2 < x_1) ->
      (x = i_2)))).
}
Prove: exists i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
    ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x))).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (43667)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (93ms) (2451)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 29):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: (0 % n) = 0.
  (* Invariant *)
  Have: (0 / n) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (n = 1)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (n = 2)).
}
Prove: exists i : Z. ((i <= 0) -> ((0 <= i) -> ((n * i) = 0))).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (32207)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (189)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 41):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 2 * x_1.
Let x_4 = 1 + j.
Let x_5 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_4)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((flag_0 = 1) -> ((0 <= i_3) ->
      (((2 + i_3) <= x_1) -> (i_3 = j)))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_4))).
  (* Then *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((flag_0 = 1) -> ((0 <= i_3) -> ((i_3 < x_1) ->
      (x = i_3)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j <= x_1)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_2 = x)).
}
Prove: x_2 = x.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (11449)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0009/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0009/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0009/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0009/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
