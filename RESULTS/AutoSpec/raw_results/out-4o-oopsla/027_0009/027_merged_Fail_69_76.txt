[kernel] Parsing out/027_0009/027_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 76 goals scheduled
[wp] [Timeout] typed_foo027_loop_invariant_established (Qed 0.54ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_3_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_11_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_11_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_12_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_20_established (Qed 4ms) (Z3)
[wp] Proved goals:   69 / 76
  Qed:              59
  Alt-Ergo 2.5.4:    7 (0.60ms-47ms-314ms)
  Z3 4.8.12:         3 (180ms-243ms-340ms)
  Timeout:           7
------------------------------------------------------------
  Function foo027
------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 11):
Assume { Type: is_sint32(l) /\ is_sint32(n). (* Pre-condition *) Have: 0 < l.
}
Prove: 0 < n.
Prover Z3 4.8.12 returns Timeout (Qed:0.54ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.54ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 12):
Assume {
  Type: is_sint32(i) /\ is_sint32(l) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
}
Prove: i <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 13):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(1 + k).
  (* Goal *)
  When: (l <= i_3) /\ (i_3 < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
}
Prove: (2 + k) <= i.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 13):
Assume {
  Type: is_sint32(i) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (l <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i <= n.
}
Prove: 2 <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.92ms) (4ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 15):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(1 + k).
  (* Goal *)
  When: (l <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_2) /\ (i_2 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Else *)
  Have: n <= i_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> ((2 + k) <= i_1))).
}
Prove: 0 < i.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (39543)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (0.60ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 15):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (l <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (2 <= n))).
}
Prove: 0 < i.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30732)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 17):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(1 + k).
  (* Goal *)
  When: (i_3 < i) /\ (l <= i_3).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> ((2 + k) <= i))).
}
Prove: l < i.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (39555)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (3ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 17):
Assume {
  Type: is_sint32(i) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (i_1 < i) /\ (l <= i_1).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (2 <= n))).
}
Prove: l < i.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30764)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (3ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 21):
Let x = 1 + k.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i < i_1) /\ (l <= i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_2) /\ (i_2 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Else *)
  Have: n <= i_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> ((2 + k) <= i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
}
Prove: (0 < i) /\ (i <= x).
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 21):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (i < i_1) /\ (l <= i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i_1) -> ((l <= i_2) -> (l < i_1))).
}
Prove: (0 < i) /\ (i <= 1).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 22):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i_3) /\ (i_3 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> ((2 + k) <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> (l < i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= x)))).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 23):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i_3) /\ (i_3 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> ((2 + k) <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> (l < i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> false)).
}
Prove: l < i.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (180ms) (293527)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 24):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i_3) /\ (i_3 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> ((2 + k) <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> (l < i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> false)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l < i))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (210ms) (261650)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 26):
Let x = 1 + k.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= k)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      ((l <= i_2) /\ (i_2 < n)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Else *)
  Have: n <= i_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> ((2 + k) <= i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) ->
      ((0 < i_4) /\ (i_4 <= x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> false)).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l <= x))).
}
Prove: k = i.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (340ms) (384290)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 27):
Let x = 1 + k.
Let x_1 = 2 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i_3) /\ (l <= i_4) /\ (i_4 < n) /\ (i_3 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_2) -> ((l <= i_5) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_2) -> ((l <= i_5) ->
      ((0 < i_5) /\ (i_5 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_1) -> ((l <= i_5) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_1) -> ((l <= i_5) ->
      ((0 < i_5) /\ (i_5 <= k)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> ((1 + i_5) = k))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) ->
      (forall i_6 : Z. ((l <= i_6) -> ((i_6 < n) -> (0 < i_5)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i) -> ((l <= i_5) -> (x_1 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i) -> ((l <= i_5) -> (l < i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i) -> ((l <= i_5) ->
      ((0 < i_5) /\ (i_5 <= x)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> false)).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (l < i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (l <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (i_5 = k))).
}
Prove: x_1 <= i.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (314ms) (4588)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 30):
Assume {
  Type: is_sint32(i) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (i_1 <= 0) /\ (0 <= i_1).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((l <= i_2) -> (l < i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((l <= i_2) ->
      ((0 < i_2) /\ (i_2 <= 1)))).
}
Prove: l <= n.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 46):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (2 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_2) -> ((l <= i_3) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_2) -> ((l <= i_3) ->
      ((0 < i_3) /\ (i_3 <= 1)))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) ->
      ((0 < i_3) /\ (i_3 <= k)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) ->
      ((l <= i_1) /\ (i_1 < n)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> ((1 + i_3) = k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) ->
      (forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (0 < i_3)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38556)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (2ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/027_0009/027_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/027_0009/027_merged.c, line 54):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/027_0009/027_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo027'.
  Callers assumptions might be imprecise.
