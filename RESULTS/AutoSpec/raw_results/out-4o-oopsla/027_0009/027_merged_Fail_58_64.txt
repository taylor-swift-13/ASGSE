[kernel] Parsing out/027_0009/027_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 64 goals scheduled
[wp] [Timeout] typed_foo027_loop_invariant_9_preserved (Qed 10ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_8_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_11_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_12_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_15_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_26_established (Qed 7ms) (Z3)
[wp] Proved goals:   58 / 64
  Qed:              53
  Alt-Ergo 2.5.4:    5
  Timeout:           6
------------------------------------------------------------
  Function foo027
------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 12):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(1 + k).
  (* Goal *)
  When: (l <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Else *)
  Have: n <= i_1.
}
Prove: 0 < i.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35671)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 12):
Assume {
  Type: is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (l <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
}
Prove: 0 < i.
Prover Z3 4.8.12 returns Valid (Qed:0.62ms) (10ms) (29732)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.62ms) (4ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 14):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(1 + k).
  (* Goal *)
  When: (i_1 < i) /\ (l <= i_1).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
}
Prove: l < i.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (35685)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 14):
Assume {
  Type: is_sint32(l).
  (* Goal *)
  When: (i_1 < i) /\ (l <= i_1).
  (* Pre-condition *)
  Have: 0 < l.
}
Prove: l < i.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29596)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 18):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(1 + k).
  (* Goal *)
  When: (0 < i_1) /\ (i_1 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> (l < i))).
}
Prove: l < i.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 19):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 < i_1) /\ (i_1 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i) -> ((l <= i_4) -> (l < i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l < i))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 21):
Let x = 1 + k.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((l <= i_4) -> (l < i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_3) -> ((l <= i_4) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l < i_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) -> ((1 + i_4) = k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 < k) ->
      (forall i_5 : Z. ((l <= i_5) -> ((i_5 < n) -> (0 < i_4)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Else *)
  Have: n <= i_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_1) -> ((l <= i_4) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l < i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 < i_4) -> ((i_4 <= k) -> (l <= x))).
}
Prove: k = i.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 22):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 < i_1) /\ (l <= i_2) /\ (i_2 < n) /\ (i_1 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_3) -> ((l <= i_5) -> (l < i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i_4) -> ((l <= i_5) -> (l < i_4))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> (l < i_4))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) -> ((1 + i_5) = k))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 < k) ->
      (forall i_6 : Z. ((l <= i_6) -> ((i_6 < n) -> (0 < i_5)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 < i) -> ((l <= i_5) -> (l < i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (l < i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (l <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 < i_5) -> ((i_5 <= k) -> (i_5 = k))).
}
Prove: (2 + k) <= i.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 25):
Assume {
  Type: is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (i <= 0) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i_1) -> ((l <= i_2) -> (l < i_1))).
}
Prove: 0 < n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 40):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l < i_1))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_2) -> ((l <= i_3) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l < i_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> ((1 + i_3) = k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) ->
      (forall i_4 : Z. ((l <= i_4) -> ((i_4 < n) -> (0 < i_3)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (35309)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (15)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 42):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < i.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < i_1) -> (i < i_1))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < i_2) -> (i < i_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (i < i_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (i <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> ((1 + i_3) = k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < k) -> (k <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) ->
      (forall i_4 : Z. ((i <= i_4) -> ((i_4 < n) -> (0 < i_3)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
}
Prove: i <= n.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0009/027_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0009/027_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/027_0009/027_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/027_0009/027_merged.c, line 48):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/027_0009/027_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo027'.
  Callers assumptions might be imprecise.
