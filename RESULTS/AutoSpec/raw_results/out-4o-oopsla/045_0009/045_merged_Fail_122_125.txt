[kernel] Parsing out/045_0009/045_merged.c (with preprocessing)
[kernel:typing:no-proto] out/045_0009/045_merged.c:34: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0009/045_merged.c:108: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0009/045_merged.c:66: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/045_0009/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0009/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0009/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 125 goals scheduled
[wp] [Timeout] typed_foo045_loop_invariant_24_established (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_27_established (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_29_established (Qed 10ms) (Z3)
[wp] Proved goals:  122 / 125
  Qed:             106
  Alt-Ergo 2.5.4:   14 (4ms-26ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           3
------------------------------------------------------------
  Function foo045
------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 19):
Let x_1 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(1 + j) /\ is_sint32(1 + x) /\
      is_sint32(j - x) /\ is_sint32(j - 1 - (2 * x)) /\ is_sint32(j - 1 - x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x) < j.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x < j.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x = (-1)) \/ ((-1) <= x).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (31636)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (4ms) (16)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 26):
Let x_1 = 1 + x.
Let x_2 = j + (if (flag_0 = 0) then 0 else x_1).
Let x_3 = -(if (flag_0 = 0) then 0 else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(j - (if (flag_0 = 0) then 0 else x)) /\
      is_sint32(1 + j + x - (if (flag_0 = 0) then 0 else x)) /\
      is_sint32(1 + j + x + (if (flag_0 = 0) then 0 else x_1)
        - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (if (flag_0 = 0) then (0 <= x_2) else (x <= x_2))).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: if (flag_0 = 0)
       then ((-1) <= (j + x + (if (flag_0 = 0) then 0 else x_1)))
       else ((-1) <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (32324)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (6ms) (44)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 69):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let x_5 = 1 + x + y.
Let x_6 = x_5 % 2.
Let x_7 = 1 + y.
Let x_8 = x + y - y_2.
Let x_9 = 2 * y_2.
Let x_10 = 1 + x_9.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0_0) /\
      is_sint32(tmp_1_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(y_1) /\ is_sint32(y) /\ is_sint32(y_2) /\
      is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_8) /\
      is_sint32(j - (if (flag_0 = 0) then 0 else x_2)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_2 <= j)).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_2 <= j).
  (* Invariant *)
  Have: x_9 <= x_3.
  (* Invariant *)
  Have: (x_3 = x_9) \/ (x_10 = x_3).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: y_2 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 <= x_9)).
  (* Invariant *)
  Have: (if (x_6 = 1) then 1 else 0) = x_4.
  (* Invariant *)
  Have: x_4 = (y_2 % 2).
  (* Invariant *)
  Have: (-1) <= y_2.
  (* Invariant *)
  Have: x_3 <= x_10.
  (* Invariant *)
  Have: (x_8 % 2) = x_6.
  (* Invariant *)
  Have: x_6 = x_4.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_3) -> (x_3 = i))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x_3) ->
      ((i / 2) <= y_2)))).
  (* Invariant *)
  Have: forall i : Z. let x_11 = i % 2 in ((0 <= i) -> ((i <= y_2) ->
      ((x_11 = 0) \/ (x_11 = 1)))).
  (* Invariant *)
  Have: forall i : Z. let x_11 = i % 2 in ((0 <= i) -> (((y_2 + i) <= x_3) ->
      ((x_11 = 0) \/ (x_11 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_2) -> (x_4 != (i % 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((y_2 + i) < x_3) -> (x_6 = (i % 2)))).
  (* Invariant *)
  Have: ((x + y - x_9) % 2) = 0.
  (* Invariant *)
  Have: ((x_4 = 0) -> (x <= y)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: y <= (1 + x).
  (* Invariant *)
  Have: x_4 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: x_6 = (x % 2).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x_3) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. let x_11 = i % 2 in ((0 <= i) -> ((i <= y) ->
      ((x_11 = 0) \/ (x_11 = 1)))).
  (* Invariant *)
  Have: forall i : Z. let x_11 = i % 2 in ((0 <= i) -> ((i <= x) ->
      ((x_11 = 0) \/ (x_11 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_4 != (i % 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) -> (x_6 = (i % 2)))).
  (* Invariant *)
  Have: ((x - y) % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ (x_7 = x).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0_0 != 0.
  If x_6 = 1
  Then { Have: (1 + x) = x_1. }
  Else { Have: x = x_1. }
  If x_4 = 0
  Then { Have: x_7 = y_1. }
  Else { Have: y = y_1. }
}
Prove: x_3 = (x_1 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:120ms) (20ms) (54496)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 69):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(w - 1) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ ((1 + y) = x).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
}
Prove: (1 + x + y) = w.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (39ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 72):
Let x_2 = x + y.
Let x_3 = 1 + x + y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ ((1 + y) = x).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
}
Prove: ((x_2 % 2) = 0) \/ ((x_3 % 2) = 1).
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 73):
Let x_1 = 2 * y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(1 + z) /\
      is_sint32(z - y) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Goal *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: (x_1 = z) \/ ((1 + x_1) = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
}
Prove: z <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (33949)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (10ms) (115)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 74):
Let x_2 = x + y.
Let x_3 = x_2 % 2.
Let x_4 = 1 + x + y.
Let x_5 = x_4 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ ((1 + y) = x).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x <= y)).
}
Prove: (if (x_5 = 1) then 1 else 0) = x_3.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (50ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (40ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 76):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z % 2.
Let x_4 = 2 * y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(z - y) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_4 <= z.
  (* Invariant *)
  Have: (x_4 = z) \/ ((1 + x_4) = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (z <= x_4)).
  (* Invariant *)
  Have: (if (x_2 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: x_4 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (33286)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (50ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 78):
Let x_2 = 2 * x.
Let x_3 = w % 2.
Let x_4 = w - 1.
Let x_5 = x_4 % 2.
Let x_6 = 1 + x_2.
Let x_7 = w - 1 - x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_7) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: w <= x_6.
  (* Invariant *)
  Have: (x_2 = w) \/ (x_6 = w).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 1) \/ (x_5 = 0).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_2 < w)).
  (* Invariant *)
  Have: (if (x_3 = 1) then 1 else 0) = x_5.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: w <= (2 + x_2).
}
Prove: (x_7 % 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (37621)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (13ms) (253)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (47ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (57ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 80):
Let x_1 = z % 2.
Let x_2 = 2 * y.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_3) /\
      is_sint32(z - y) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_2 <= z.
  (* Invariant *)
  Have: (x_2 = z) \/ (x_5 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_1 = 0) -> (z <= x_2)).
  (* Invariant *)
  Have: (if (x_4 = 1) then 1 else 0) = x_1.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_1 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: z <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (35605)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (4ms) (71)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (44ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 82):
Let x_1 = 2 * y.
Let x_2 = 1 + x_1.
Let x_3 = z % 2.
Let x_4 = 1 + z.
Let x_5 = x_4 % 2.
Let x_6 = z - y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_4) /\
      is_sint32(x_6) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: (x_1 = z) \/ (x_2 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (z <= x_1)).
  (* Invariant *)
  Have: (if (x_5 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: z <= x_2.
}
Prove: (x_6 % 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (40223)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (23ms) (407)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 84):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = 1 + y.
Let x_5 = x + y.
Let x_6 = x_5 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ (x_4 = x).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x <= y)).
  (* Invariant *)
  Have: (if (x_3 = 1) then 1 else 0) = x_6.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: y <= (1 + x).
  (* Invariant *)
  Have: x_6 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x_3 = (x % 2).
}
Prove: x_3 = x_6.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (40152)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (7ms) (70)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (40ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (41ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (48ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 88):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z % 2.
Let x_4 = z - y.
Let x_5 = 2 * y.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Goal *)
  When: (0 <= i) /\ (i <= z).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_5 <= z.
  (* Invariant *)
  Have: (x_5 = z) \/ (x_6 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (z <= x_5)).
  (* Invariant *)
  Have: (if (x_2 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: z <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = x_2.
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: z = i.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (37179)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (23ms) (295)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (52ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 89):
Let x_2 = w - 1.
Let x_3 = x_2 % 2.
Let x_4 = w % 2.
Let x_5 = 2 * x.
Let x_6 = w - 1 - x.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_6) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i < w).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: w <= x_7.
  (* Invariant *)
  Have: (x_5 = w) \/ (x_7 = w).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_3 = 0).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_5 < w)).
  (* Invariant *)
  Have: (if (x_4 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: w <= (2 + x_5).
  (* Invariant *)
  Have: (x_6 % 2) = x_3.
  (* Invariant *)
  Have: x_5 <= w.
  (* Invariant *)
  Have: (x % 2) = x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < w) -> ((1 + i_1) = w))).
}
Prove: (x + (i / 2)) < w.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (38765)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (25ms) (374)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (54ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 90):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z % 2.
Let x_4 = z - y.
Let x_5 = 2 * y.
Let x_6 = 1 + x_5.
Let x_7 = i % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_5 <= z.
  (* Invariant *)
  Have: (x_5 = z) \/ (x_6 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (z <= x_5)).
  (* Invariant *)
  Have: (if (x_2 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: z <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = x_2.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= z) -> (i_1 = z))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= z) ->
      ((i_1 / 2) <= y)))).
}
Prove: (x_7 = 0) \/ (x_7 = 1).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (39425)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (24ms) (352)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (51ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 91):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z % 2.
Let x_4 = z - y.
Let x_5 = 2 * y.
Let x_6 = 1 + x_5.
Let x_7 = i % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Goal *)
  When: (0 <= i) /\ ((i + y) <= z).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_5 <= z.
  (* Invariant *)
  Have: (x_5 = z) \/ (x_6 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (z <= x_5)).
  (* Invariant *)
  Have: (if (x_2 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: z <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = x_2.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= z) -> (i_1 = z))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= z) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_8 = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= y) ->
      ((x_8 = 0) \/ (x_8 = 1)))).
}
Prove: (x_7 = 0) \/ (x_7 = 1).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (40192)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (51ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 92):
Let x_2 = x + y.
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Let x_5 = x_2 % 2.
Let x_6 = 1 + y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_1)).
  (* Goal *)
  When: (0 <= i) /\ (i < y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 <= j)).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_1 <= j).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (y = x) \/ (x_6 = x).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x <= y)).
  (* Invariant *)
  Have: (if (x_4 = 1) then 1 else 0) = x_5.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: y <= (1 + x).
  (* Invariant *)
  Have: x_5 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x_4 = (x % 2).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_2) -> (x_2 = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x_2) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= y) ->
      ((x_7 = 0) \/ (x_7 = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= x) ->
      ((x_7 = 0) \/ (x_7 = 1)))).
}
Prove: x_5 != (i % 2).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (40836)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (26ms) (353)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (56ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 93):
Let x_1 = z % 2.
Let x_2 = 1 + z.
Let x_3 = x_2 % 2.
Let x_4 = z - y.
Let x_5 = 2 * y.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Goal *)
  When: (0 <= i) /\ ((i + y) < z).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_5 <= z.
  (* Invariant *)
  Have: (x_5 = z) \/ (x_6 = z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= z.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_1 = 0) -> (z <= x_5)).
  (* Invariant *)
  Have: (if (x_3 = 1) then 1 else 0) = x_1.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: x_1 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: z <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = x_3.
  (* Invariant *)
  Have: x_3 = x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= z) -> (i_1 = z))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= z) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= y) ->
      ((x_7 = 0) \/ (x_7 = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 % 2 in ((0 <= i_1) ->
      (((y + i_1) <= z) -> ((x_7 = 0) \/ (x_7 = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 % 2) != x_1))).
}
Prove: x_3 = (i % 2).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (41877)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (12ms) (379)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (62ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 96):
Let x_1 = w % 2.
Let x_2 = w - 1.
Let x_3 = x_2 % 2.
Let x_4 = w - 1 - y.
Let x_5 = 2 * y.
Let x_6 = 2 + x_5.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_1_0) /\
      is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Invariant *)
  Have: x_5 < w.
  (* Invariant *)
  Have: (x_7 = w) \/ (x_6 = w).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y < w.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_3 = 0).
  (* Invariant *)
  Have: ((x_3 = 0) -> (w <= x_7)).
  (* Invariant *)
  Have: (if (x_1 = 1) then 1 else 0) = x_3.
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: w <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = x_1.
  (* Invariant *)
  Have: x_3 = x_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < w) -> ((1 + i) = w))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < w) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. let x_8 = i % 2 in ((0 <= i) -> ((i <= y) ->
      ((x_8 = 0) \/ (x_8 = 1)))).
  (* Invariant *)
  Have: forall i : Z. let x_8 = i % 2 in ((0 <= i) -> (((y + i) < w) ->
      ((x_8 = 0) \/ (x_8 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_3 != (i % 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + y + i) <= w) -> ((i % 2) = x_1))).
}
Prove: ((w - 1 - x_5) % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (42073)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (23ms) (391)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (76ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (56ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (61ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0009/045_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (54ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0009/045_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 29) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 29) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 61) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 61) (2/3):
Call Result at line 66
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 61) (3/3):
Call Result at line 108
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 105) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0009/045_merged.c, line 105) (2/2):
Call Result at line 108
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/045_0009/045_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0009/045_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0009/045_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0009/045_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo045'.
  Callers assumptions might be imprecise.
