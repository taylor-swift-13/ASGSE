[kernel] Parsing out/024_0014/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/024_0014/024_merged.c:7: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 56 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_2_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_14_established (Qed 2ms) (Z3)
[wp] Proved goals:   54 / 56
  Qed:              46
  Alt-Ergo 2.5.4:    8
  Timeout:           2
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 12):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(1 + j).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: (2 + j) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 14):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35177)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 17):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= j))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: i <= k.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35694)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 18):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= j))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 <= j) -> (i_2 <= k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36400)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 22):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i <= i_1) /\ (i_2 < n) /\ (i_1 <= j) /\ (j < i_2).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i) -> ((0 <= i_4) -> ((i <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 <= x))).
}
Prove: j < k.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38031)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (20)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 23):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i <= i_2) /\ (0 <= i) /\ (i_2 <= i_1) /\ (i_1 < n).
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_2 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 <= x))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_3 < k) -> ((i_4 <= j) ->
      ((j < i_3) -> (j < k))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39025)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 23):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n).
  (* Goal *)
  When: (i <= i_2) /\ (0 <= i) /\ (i_2 <= i_1) /\ (i_1 < n).
  (* Then *)
  Have: i_2 < n.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30124)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 24):
Assume {
  Type: is_sint32(j) /\ is_sint32(n).
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((j <= i) -> ((i < n) ->
      ((i_1 <= j) -> (i_1 <= i))))).
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 35):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35063)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 39):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (35165)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (18)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0014/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0014/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0014/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0014/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0014/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
