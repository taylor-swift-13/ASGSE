[kernel] Parsing out/017_0006/017_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 50 goals scheduled
[wp] [Timeout] typed_foo017_loop_invariant_2_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_4_preserved (Qed 15ms) (Z3)
[wp] Proved goals:   48 / 50
  Qed:              37
  Alt-Ergo 2.5.4:    9 (3ms-15ms-21ms)
  Z3 4.8.12:         2 (30ms-490ms)
  Timeout:           2
------------------------------------------------------------
  Function foo017
------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 10):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (((i_1 * (1 + i_1)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i <= j.
}
Prove: i < k.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 11):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
}
Prove: ((i * (i - 1)) / 2) < k.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (490ms) (1353971)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 12):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k))).
}
Prove: ((i * (1 + i)) / 2) < k.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 13):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k))).
}
Prove: ((i * (1 + i)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (65863)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (21ms) (263)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 14):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= k))).
}
Prove: ((i * (1 + i)) / 2) < k.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (65790)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (12ms) (265)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 15):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (0 <= i_2) /\ (i_2 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
}
Prove: ((i * (1 + i)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (44891)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (19ms) (235)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 16):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (0 <= i_2) /\ (i_2 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= k)))))).
}
Prove: ((i * (1 + i)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (46132)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (20ms) (237)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 17):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= k)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= k))))).
}
Prove: ((i * (1 + i)) / 2) < k.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (47261)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (18ms) (235)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 19):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x_2).
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (((i_1 * (1 + i_1)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (i_1 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (1 + i_1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (((i_1 * (1 + i_1)) / 2) <= k)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= k))))).
}
Prove: ((i * x_2) / 2) < k.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (46107)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (20ms) (258)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 33):
Let x = -k.
Let x_1 = j + k_1 - k.
Let x_2 = j + k_1 - 1 - k.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = j + k_1.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k_1) /\ is_sint32(k) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (j_1 + k) <= x_4.
  (* Invariant *)
  Have: x_4 <= (k + k_2).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k + i) < x_4) ->
      (((i * (i - 1)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k + i) < x_4) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k + i) < x_4) ->
      (((i * (1 + i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k + i) < x_4) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k + i) < x_4) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (((i * (1 + i)) / 2) <= k_2)))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k + i_1) < x_4) -> (((i_1 * (1 + i_1)) / 2) <= k_2))))).
  (* Invariant *)
  Have: k < x_4.
  (* Invariant *)
  Have: x_3 < k_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((j + k_1 - 2 - k) * x_2) / 2) < k_2.
  (* Then *)
  Have: x_4 < (k + n).
  (* Invariant *)
  Have: k <= k_1.
  (* Invariant *)
  Have: x_4 <= (2 * k).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k + i_1) < x_4) -> (((i_1 * (1 + i_1)) / 2) <= k))))).
  (* Invariant *)
  Have: x_3 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: k < k_1.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (39942)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (3ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 34):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + j) /\
      is_sint32(i_1 + k - j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1) /\ (0 <= i_2) /\ (i_2 < i).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k_1))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k))))).
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < i_1.
  (* Invariant *)
  Have: j <= k.
}
Prove: (j + ((i * (1 + i)) / 2)) <= (i_1 + k).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (30ms) (68670)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 34):
Let x = i_1 - 1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1) /\ (0 <= i_2) /\ (i_2 < i).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= k)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= k))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: ((i_1 * x) / 2) < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) < k.
  (* Then *)
  Have: i_1 < n.
}
Prove: ((i * (1 + i)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (38856)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (15ms) (204)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 35):
Let x = j + k.
Let x_1 = -k_1.
Let x_2 = j + k - k_1.
Let x_3 = j + k - 1 - k_1.
Let x_4 = (x_2 * x_3) / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (j_1 + k_1) <= x.
  (* Invariant *)
  Have: x <= (k_1 + k_2).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x) ->
      (((i * (i - 1)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) ->
      (((i * (1 + i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (((i * (1 + i)) / 2) <= k_2)))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (((i_1 * (1 + i_1)) / 2) <= k_2))))).
  (* Invariant *)
  Have: k_1 < x.
  (* Invariant *)
  Have: x_4 < k_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((j + k - 2 - k_1) * x_3) / 2) < k_2.
  (* Then *)
  Have: x < (k_1 + n).
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: x <= (2 * k_1).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (((i_1 * (1 + i_1)) / 2) <= k_1))))).
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (((i_1 * (1 + i_1)) / 2) <= k))))).
}
Prove: x_4 < k.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (11ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/017_0006/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/017_0006/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/017_0006/017_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo017'.
  Callers assumptions might be imprecise.
