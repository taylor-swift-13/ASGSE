[kernel] Parsing out/017_0006/017_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 56 goals scheduled
[wp] [Timeout] typed_foo017_loop_invariant_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_18_preserved (Qed 16ms) (Z3)
[wp] Proved goals:   54 / 56
  Qed:              45
  Alt-Ergo 2.5.4:    9 (16ms-28ms)
  Timeout:           2
------------------------------------------------------------
  Function foo017
------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 9):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Let x_2 = 1 + x_1.
Let x_3 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (((i_1 * (1 + i_1)) / 2) <= x_2)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= x_2))))).
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i - 2) * x) / 2) <= x_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i <= j.
}
Prove: ((i * x_3) / 2) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 12):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Let x_2 = 1 + i.
Let x_3 = (i * x_2) / 2.
Let x_4 = 1 + x_3.
Let x_5 = 1 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
       (((i_1 * (1 + i_1)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i - 2) * x) / 2) <= x_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_3 = x_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (((i_2 * (1 + i_2)) / 2) <= x_4))))).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i <= j.
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (53927)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (19ms) (274)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 13):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = i_1 - 1.
Let x_3 = (i_1 * x_2) / 2.
Let x_4 = 1 + x_1.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_2) / 2) <= x_3.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_3.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_4))))).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
}
Prove: ((i * (i - 1)) / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (46153)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (25ms) (360)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 14):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = i_1 - 1.
Let x_3 = (i_1 * x_2) / 2.
Let x_4 = 1 + x_1.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Goal *)
  When: (0 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_2) / 2) <= x_3.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_3.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_4))))).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_1))).
}
Prove: ((i * (1 + i)) / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (47238)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (28ms) (374)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 15):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = i_1 - 1.
Let x_3 = (i_1 * x_2) / 2.
Let x_4 = 1 + x_1.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_2) / 2) <= x_3.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_3.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_4))))).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
}
Prove: ((i * (1 + i)) / 2) <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (47971)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (23ms) (347)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 16):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = 1 + x_1.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_3) / 2) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_2))))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
}
Prove: ((i * (1 + i)) / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (48980)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (20ms) (351)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 17):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = 1 + x_1.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (0 <= i_2) /\ (i_2 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_3) / 2) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= x_2))))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (i_3 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
}
Prove: ((i * (1 + i)) / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (47287)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (25ms) (316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 18):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = 1 + x_1.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (0 <= i_2) /\ (i_2 < i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_3) / 2) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= x_2))))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (i_3 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= x_2)))))).
}
Prove: ((i * (1 + i)) / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (48760)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (24ms) (316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 19):
Let x = 1 + i_1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = 1 + x_1.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_4))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_5)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_5))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((i_1 - 2) * x_3) / 2) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_2))))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
       (((i_2 * (1 + i_2)) / 2) <= x_2)))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((0 <= i_2) ->
      ((i_2 < i_3) -> (((i_3 * (1 + i_3)) / 2) <= x_2))))).
}
Prove: ((i * (1 + i)) / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (50133)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (24ms) (314)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 33):
Let x = -k_1.
Let x_1 = j + k - k_1.
Let x_2 = j + k - 1 - k_1.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(n) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (1 + x_3) = k_1.
  (* Invariant *)
  Have: (j_1 + k_1) <= x_4.
  (* Invariant *)
  Have: x_4 <= (1 + k_1 + x_3).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_4) ->
      (((i * (i - 1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((k_1 + i) < x_4) ->
      (((i * (1 + i)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_4) ->
      (((i * (1 + i)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_4) ->
      (((i * (1 + i)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_4) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
       (((i * (1 + i)) / 2) <= k_1)))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x_4) -> (((i_1 * (1 + i_1)) / 2) <= k_1))))).
  (* Invariant *)
  Have: k_1 < x_4.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (((j + k - 2 - k_1) * x_2) / 2) <= x_3.
  (* Then *)
  Have: x_4 < (k_1 + n).
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: x_4 <= (2 * k_1).
  (* Invariant *)
  Have: x_3 < k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: k_1 < k.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 37):
Let x = i_1 - 1.
Let x_1 = (i_1 * x) / 2.
Let x_2 = 1 + x_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1) /\ (0 <= i_2) /\ (i_2 < i).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (i_3 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
       (((i_3 * (1 + i_3)) / 2) <= x_2)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (((i_4 * (1 + i_4)) / 2) <= x_2))))).
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (((i_1 - 2) * x) / 2) <= x_1.
  (* Then *)
  Have: i_1 < n.
}
Prove: ((i * (1 + i)) / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (39681)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (16ms) (209)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0006/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0006/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/017_0006/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/017_0006/017_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/017_0006/017_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo017'.
  Callers assumptions might be imprecise.
