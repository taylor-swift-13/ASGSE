[kernel] Parsing out/042_0004/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0004/042_merged.c:26: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0004/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 17 goals scheduled
[wp] [Timeout] typed_foo042_assert (Qed 6ms) (Z3)
[wp] Proved goals:   16 / 17
  Qed:              12
  Alt-Ergo 2.5.4:    4 (4ms-18ms-55ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 15):
Let x_5 = a_1 % 2.
Let x_6 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_5.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:41ms) (10ms) (44880)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (7ms) (129)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 16):
Let x_3 = a_1 % 2.
Let x_4 = a_2 % 2.
Let x_5 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(1 + x).
  (* Residual *)
  When: x_5 != 1.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_4.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_2).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_2 + y_2) % 2) else ((x_2 + y_2) % 2))
          = x_3.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (y_2 = y).
    Have: (x_1 + y) = a.
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (x_2 = x) /\ (y_2 = y_1).
    Have: (1 + x + y_1) = a.
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: (0 < y) /\ (0 <= x).
}
Prove: x_5 = 0.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (40514)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (4ms) (101)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 17):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_6.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
}
Prove: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_5.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (55ms) (781)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 20):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_6.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_5.
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (44522)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (5ms) (77)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0004/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0004/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Assertion (file out/042_0004/042_merged.c, line 43):
Let x_1 = a_2 % 2.
Let x_2 = a_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y).
  If flag_0 != 0
  Then { Have: a_3 = 0. }
  Else { Have: a_3 = 1. }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_2.
  (* Invariant *)
  Have: 0 <= a_3.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_1.
  (* Invariant *)
  Have: 0 <= a_2.
  If flag_0 != 0
  Then { Have: a_2 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_2 = a. }
}
Prove: (a % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/042_0004/042_merged.c, line 22) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0004/042_merged.c, line 22) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0004/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0004/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
