[kernel] Parsing out/04_0002/04_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] [Timeout] typed_foo04_assert (Qed 2ms) (Z3)
[wp] Proved goals:   15 / 16
  Qed:               7
  Alt-Ergo 2.5.4:    4
  Z3 4.8.12:         4 (10ms-20ms-40ms)
  Timeout:           1
------------------------------------------------------------
  Function foo04
------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 8):
Let x_1 = y * (y - 1).
Let x_2 = x_1 / 2.
Let x_3 = 1 + y.
Let x_4 = (y * x_3) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_3) /\
      is_sint32(x + y).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (50 + x) <= x_2.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: (-99) <= x_1.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_2.
  (* Then *)
  Have: x < 0.
}
Prove: (50 + x + y) <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (57275)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 8):
Assume { Type: is_sint32(y). }
Prove: (-1) <= (y * (y - 1)).
Prover Z3 4.8.12 returns Valid (10ms) (29638)
Prover Alt-Ergo 2.5.4 returns Valid (5ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 10):
Let x_1 = 1 + y.
Let x_2 = (y * x_1) / 2.
Let x_3 = y * (y - 1).
Let x_4 = x_3 / 2.
Let x_5 = y_1 * (y_1 - 1).
Let x_6 = x + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_6).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: (-99) <= x_3.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_4.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: (50 + x + y) <= x_2.
}
Prove: x_6 < ((x_1 * (2 + y)) / 2).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (35769)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 10):
Assume { Type: is_sint32(y). (* Invariant *) Have: (-1) <= (y * (y - 1)). }
Prove: (-99) <= (y * (1 + y)).
Prover Z3 4.8.12 returns Valid (20ms) (30073)
Prover Alt-Ergo 2.5.4 returns Valid (2ms) (25)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 11):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y * x_2.
Let x_4 = x_3 / 2.
Let x_5 = y * (y - 1).
Let x_6 = x_5 / 2.
Let x_7 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_7.
  (* Invariant *)
  Have: (50 + x) <= x_6.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_6.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_1 < ((x_2 * (2 + y)) / 2).
}
Prove: (-99) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (40ms) (136684)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 13):
Let x_1 = 1 + y.
Let x_2 = y * x_1.
Let x_3 = x + y.
Let x_4 = x_2 / 2.
Let x_5 = y * (y - 1).
Let x_6 = x_5 / 2.
Let x_7 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_7.
  (* Invariant *)
  Have: (50 + x) <= x_6.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_6.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_3 < ((x_1 * (2 + y)) / 2).
  (* Invariant *)
  Have: (-99) <= x_2.
}
Prove: x_3 < (x_1 * x_1).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (66079)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 13):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: (-49) <= (y * y).
Prover Alt-Ergo 2.5.4 returns Valid (4ms) (10)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0002/04_merged.c, line 14):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y * x_2.
Let x_4 = x_3 / 2.
Let x_5 = y * (y - 1).
Let x_6 = x_5 / 2.
Let x_7 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_7.
  (* Invariant *)
  Have: (50 + x) <= x_6.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_6.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_1 < ((x_2 * (2 + y)) / 2).
  (* Invariant *)
  Have: (-99) <= x_3.
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
}
Prove: x_1 < x_4.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32761)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0002/04_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/04_0002/04_merged.c, line 22):
Let x_1 = y * (y - 1).
Let x_2 = x_1 / 2.
Let x_3 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_3.
  (* Invariant *)
  Have: (50 + x) <= x_2.
  (* Invariant *)
  Have: x < ((y * (1 + y)) / 2).
  (* Invariant *)
  Have: (-99) <= x_1.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < x_2.
  (* Else *)
  Have: 0 <= x.
}
Prove: 0 < y.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/04_0002/04_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/04_0002/04_merged.c:2: Warning: 
  No 'assigns' specification for function 'foo04'.
  Callers assumptions might be imprecise.
