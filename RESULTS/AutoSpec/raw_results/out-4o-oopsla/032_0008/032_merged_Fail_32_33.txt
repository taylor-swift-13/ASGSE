[kernel] Parsing out/032_0008/032_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 33 goals scheduled
[wp] [Timeout] typed_foo032_loop_invariant_5_preserved (Qed 21ms) (Z3)
[wp] Proved goals:   32 / 33
  Qed:              21
  Alt-Ergo 2.5.4:    9 (4ms-17ms-42ms)
  Z3 4.8.12:         2 (200ms-600ms)
  Timeout:           1
------------------------------------------------------------
  Function foo032
------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 8):
Let x = n % 2.
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(n) /\ is_sint32(x_1).
  (* Residual *)
  When: b_1 != 0.
  (* Invariant *)
  Have: j <= (i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((1 + i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) ->
      (if ((i_1 % 2) = 0) then (b_1 = b) else (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b_1 = b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 0)))).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: ((x = 1) -> ((i + (x_1 / 2)) = j)).
  (* Invariant *)
  Have: ((x = 1) -> (b_1 != b)).
  (* Invariant *)
  Have: ((x = 0) -> (b_1 = b)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: if (x = 0) then (b != 0) else (b = 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
}
Prove: j <= (1 + i + n).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (35598)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (4ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 10):
Let x = n % 2.
Let x_1 = 1 + n.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1).
  (* Goal *)
  When: ((i_1 % 2) = 1) /\ (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((1 + i + (i_2 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) ->
      (if ((i_2 % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x = 1) -> ((i + (x_1 / 2)) = j_2)).
  (* Invariant *)
  Have: ((x = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
}
Prove: (if (b = 0) then 1 else 0) != b_1.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (200ms) (844763)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 10):
Assume { (* Goal *) When: ((i % 2) = 1) /\ (i <= 0) /\ (0 <= i). }
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (19477)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (67)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 11):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: ((i_1 % 2) = 1) /\ (0 <= i_1) /\ (i_1 <= n).
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      (b_1 != b)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((1 + i + (i_2 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) ->
      (if ((i_2 % 2) = 0) then (b_1 = b) else (b_1 != b)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b_1 = b)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((b_1 != 0) <-> (b = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b_1 != b)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b_1 = b)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b != 0) else (b = 0)) <-> (b_1 != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b_1 != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((if (b_1 = 0) then 1 else 0) != b)))).
}
Prove: (1 + i + (i_1 / 2)) = j.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (600ms) (563645)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 12):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: j_2 <= (i_1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((1 + i_1 + (i_2 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) ->
      (if ((i_2 % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i_1 <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i_1 + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i_1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      ((1 + i_1 + (i_2 / 2)) = j)))).
}
Prove: if ((i % 2) = 0) then ((if (b = 0) then 1 else 0) = b_1)
       else ((if (b = 0) then 1 else 0) != b_1).
Prover Z3 4.8.12 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 13):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: ((i_1 % 2) = 1) /\ (0 <= i_1) /\ (i_1 <= n).
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((1 + i + (i_2 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) ->
      (if ((i_2 % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      ((1 + i + (i_2 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) ->
      (if ((i_2 % 2) = 0) then ((if (b = 0) then 1 else 0) = b_1)
       else ((if (b = 0) then 1 else 0) != b_1)))).
}
Prove: (if (b = 0) then 1 else 0) = b_1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (44595)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (42ms) (861)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 14):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= n).
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((1 + i + (i_2 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) ->
      (if ((i_2 % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      ((1 + i + (i_2 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) ->
      (if ((i_2 % 2) = 0) then ((if (b = 0) then 1 else 0) = b_1)
       else ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      ((if (b = 0) then 1 else 0) = b_1)))).
}
Prove: (b = 0) <-> (b_1 = 0).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (43879)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (17ms) (261)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 15):
Let x = 1 + n.
Let x_1 = n % 2.
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Invariant *)
  Have: j <= (i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b != 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((1 + i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) ->
      (if ((i_1 % 2) = 0) then (b = 0) else (b != 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b != 0)))).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b != 0)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: !(if (x_1 = 0) then (b != 0) else (b = 0)).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (b != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (if ((i_1 % 2) = 0) then (b = 1) else (b != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b = 0)))).
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (38870)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (5ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 17):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((1 + i + (i_1 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) ->
      (if ((i_1 % 2) = 0) then (b_1 = b) else (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b_1 = b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((b_1 != 0) <-> (b = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b_1 != b)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b_1 = b)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b != 0) else (b = 0)) <-> (b_1 != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b_1 != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((if (b_1 = 0) then 1 else 0) != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((1 + i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (if ((i_1 % 2) = 0) then ((if (b_1 = 0) then 1 else 0) = b)
       else ((if (b_1 = 0) then 1 else 0) != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((if (b_1 = 0) then 1 else 0) = b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((b_1 = 0) <-> (b = 0))))).
  (* Invariant *)
  Have: i <= j.
}
Prove: (i + ((2 + n) / 2)) = j.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (30ms) (45837)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (29ms) (604)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 18):
Let x = 1 + n.
Let x_1 = (2 + n) / 2.
Let x_2 = n % 2.
Let x_3 = j_2 + x_1.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(j - x_1).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: x_3 <= (j + n).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < n) ->
      (x_3 = (1 + j + (i / 2)))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) ->
      (if ((i % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = (j + (x / 2)))).
  (* Invariant *)
  Have: ((x_2 = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_2 = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= n) ->
      (x_1 = (1 + (i / 2)))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) ->
      (if ((i % 2) = 0) then ((if (b = 0) then 1 else 0) = b_1)
       else ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= n) ->
      ((if (b = 0) then 1 else 0) = b_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= n) ->
      ((b = 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: (-3) <= n.
}
Prove: (if (b = 0) then 1 else 0) != b_1.
Prover Z3 4.8.12 returns Valid (Qed:33ms) (10ms) (41272)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:33ms) (12ms) (228)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 19):
Let x = 1 + n.
Let x_1 = n % 2.
Assume {
  Type: is_sint32(b_1) /\ is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b != b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((1 + i + (i_1 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) ->
      (if ((i_1 % 2) = 0) then (b = b_1) else (b != b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((b != 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b != b_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (b = b_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_1 = 0) then (b_1 != 0) else (b_1 = 0)) <-> (b != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((1 + i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (if ((i_1 % 2) = 0) then ((if (b = 0) then 1 else 0) = b_1)
       else ((if (b = 0) then 1 else 0) != b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((if (b = 0) then 1 else 0) = b_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((b = 0) <-> (b_1 = 0))))).
  (* Invariant *)
  Have: i <= j.
}
Prove: (if (b = 0) then 1 else 0) = b_1.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (43240)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (17ms) (249)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 22):
Let x = 1 + n.
Let x_1 = x % 2.
Let x_2 = n % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_2 <= (i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((1 + i + (i_1 / 2)) = j_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) ->
      (if ((i_1 % 2) = 0) then (b_1 = b) else (b_1 != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b_1 = b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      ((b_1 != 0) <-> (b = 0))))).
  (* Invariant *)
  Have: i <= j_2.
  (* Invariant *)
  Have: ((x_2 = 1) -> ((i + (x / 2)) = j_2)).
  (* Invariant *)
  Have: ((x_2 = 1) -> (b_1 != b)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (b_1 = b)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: (if (x_2 = 0) then (b != 0) else (b = 0)) <-> (b_1 != 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b_1 != 0
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: j <= (1 + i + n).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((if (b_1 = 0) then 1 else 0) != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((1 + i + (i_1 / 2)) = j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (if ((i_1 % 2) = 0) then ((if (b_1 = 0) then 1 else 0) = b)
       else ((if (b_1 = 0) then 1 else 0) != b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((if (b_1 = 0) then 1 else 0) = b)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= n) ->
      ((b_1 = 0) <-> (b = 0))))).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((i + ((2 + n) / 2)) = j)).
  (* Invariant *)
  Have: ((x_1 = 1) -> ((if (b_1 = 0) then 1 else 0) != b)).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((if (b_1 = 0) then 1 else 0) = b)).
}
Prove: (if (x_1 = 0) then (b != 0) else (b = 0)) <-> (b_1 = 0).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (45746)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (23ms) (535)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0008/032_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0008/032_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/032_0008/032_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/032_0008/032_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo032'.
  Callers assumptions might be imprecise.
