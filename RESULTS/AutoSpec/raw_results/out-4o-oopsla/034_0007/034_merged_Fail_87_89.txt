[kernel] Parsing out/034_0007/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 89 goals scheduled
[wp] [Timeout] typed_foo034_loop_invariant_10_established (Qed 0.59ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_13_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   87 / 89
  Qed:              77
  Alt-Ergo 2.5.4:   10
  Timeout:           2
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 11):
Let x = i % 2.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i.
Let x_5 = 1 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_5).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x + x_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x = x_1.
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: (x_4 / 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34790)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (17ms) (258)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 13):
Let x = i / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 % 2.
Let x_3 = i % 2.
Let x_4 = 2 * x.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_3 + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 = x.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_2 = 0
  Then { Have: (1 + x) = y. }
  Else { Have: x = y. }
  (* Invariant *)
  Have: (x = y) \/ ((x_1 / 2) = y).
}
Prove: i < ((2 * y) + x_2).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (35564)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (18ms) (248)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 20):
Assume { Type: is_sint32(n). }
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.59ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.59ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 23):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = i / 2.
Let x_3 = i % 2.
Let x_4 = 2 * x_2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_3 + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_1 = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: (x_2 = y) \/ ((x / 2) = y).
  (* Invariant *)
  Have: i < ((2 * y) + x_1).
}
Prove: x_1 = y.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 24):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = i / 2.
Let x_3 = i % 2.
Let x_4 = 2 * x_2.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_3 + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_2.
  (* Invariant *)
  Have: i < (3 * x_1).
}
Prove: (2 * x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 25):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * x_1.
Let x_3 = i / 2.
Let x_4 = i % 2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_4 + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i < (3 * x_1).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 <= x) ->
      (x_2 <= x)))).
}
Prove: (x_2 = i) \/ (x = x_2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36413)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (12ms) (377)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 26):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * x_1.
Let x_3 = i / 2.
Let x_4 = i % 2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_4 + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i < (3 * x_1).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 <= x) ->
      (x_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((x_2 = i) \/ (x = x_2))))).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (37152)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 27):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * x_1.
Let x_3 = i / 2.
Let x_4 = i % 2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_4 + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i < (3 * x_1).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 <= x) ->
      (x_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 <= x) ->
      ((x_2 = i) \/ (x = x_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i) -> ((0 <= i_2) ->
      (x_2 <= x)))).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (38033)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 28):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * x_1.
Let x_3 = i / 2.
Let x_4 = i % 2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_4 + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i < (3 * x_1).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (x_2 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((x_2 = i) \/ (x = x_2))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (x_2 <= x)))).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (37054)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 33):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * x_1.
Let x_3 = i / 2.
Let x_4 = i % 2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_1 != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_4 + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i < (3 * x_1).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((x_2 = i) \/ (x = x_2))))).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_2 = i)).
}
Prove: x_1 = (x / 2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36451)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (8ms) (261)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 36):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = i / 2.
Let x_5 = i % 2.
Let x_6 = 2 * x_4.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_4) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Residual *)
  When: x_1 != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (x_5 + x_6).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_5 = x_4.
  (* Invariant *)
  Have: x_6 <= i.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: (x_6 = i) \/ (x_7 = i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_2 = x_4.
  (* Invariant *)
  Have: i < (x_1 + x_3).
  (* Invariant *)
  Have: x_1 = x_2.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((x_3 = i) \/ (x = x_3))))).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = i)).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (34164)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (4ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 41):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_1 % 2.
Let x_4 = 2 * x_2.
Let x_5 = x / 2.
Let x_6 = x % 2.
Let x_7 = 2 * x_5.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Residual *)
  When: x_3 != 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= (x_6 + x_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x_6 = x_5.
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: (x_7 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  Have: x_2 = x_5.
  (* Invariant *)
  Have: x < (x_3 + x_4).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x_1) ->
      ((x_4 = x) \/ (x_1 = x_4))))).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = x)).
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: (x_4 = x) \/ (x_1 = x_4).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36015)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (19ms) (439)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0007/034_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0007/034_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0007/034_merged.c, line 55):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0007/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
