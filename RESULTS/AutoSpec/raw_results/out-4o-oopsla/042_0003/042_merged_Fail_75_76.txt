[kernel] Parsing out/042_0003/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0003/042_merged.c:56: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0003/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 76 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_12_preserved (Qed 23ms) (Z3)
[wp] Proved goals:   75 / 76
  Qed:              63
  Alt-Ergo 2.5.4:   10 (0.80ms-12ms-38ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 15):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let a_1 = IAbs.abs(x - y).
Let x_5 = a % 2.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (Ig.min(x, y) <= a) \/ (a_1 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_6).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ (x_6 = x_2). Have: (1 + x_2) = x_1. }
}
Prove: x_4 = ((x_1 + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (40ms) (111397)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (38ms) (527)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 16):
Let x_3 = a % 2.
Let x_4 = x_2 + y_2.
Let a_3 = IAbs.abs(x_2 - y_2).
Let x_5 = (1 + x_2 + y_2) % 2.
Let x_6 = x_4 % 2.
Let x_7 = a_1 % 2.
Let x_8 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(1 + x).
  (* Residual *)
  When: x_3 != 1.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (0 < a_2) \/ (0 <= a_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_8 = 1) else (x_8 = 0).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_8 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_8.
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_8 = 1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_6 = x_7)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_2, y_2) <= a_1) \/ (a_3 <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_6 = x_7)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = x_7)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_5 = x_7) else (x_6 = x_7).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_6 = x_7) /\ (y_2 <= x_2))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y_2 <= x_2)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_5 = x_7) /\ (x_2 <= y_2))).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_2 <= y_2)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_2 <= x_2)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_2).
  (* Invariant *)
  Have: (x_2 <= (1 + y_2)) \/ (y_2 <= (1 + x_2)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_5 else x_6) = x_7.
  (* Invariant *)
  Have: a_3 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (y_2 = y).
    Have: (x_1 + y) = a.
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (x_2 = x) /\ (y_2 = y_1).
    Have: (1 + x + y_1) = a.
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (((1 + x + y) % 2) = x_3)).
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Valid (Qed:36ms) (10ms) (46910)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (10ms) (140)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 17):
Let x_5 = a % 2.
Let x_6 = x_4 + y_4.
Let a_3 = IAbs.abs(x_4 - y_4).
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_6 % 2.
Let x_9 = a_1 % 2.
Let x_10 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (0 < a_2) \/ (0 <= a_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_10 = 1) else (x_10 = 0).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_10 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_10.
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (Ig.min(x_4, y_4) <= a_1) \/ (a_3 <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_8 = x_9)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_9)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_7 = x_9) else (x_8 = x_9).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_8 = x_9) /\ (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_7 = x_9) /\ (x_4 <= y_4))).
  (* Invariant *)
  Have: ((x_9 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_8) = x_9.
  (* Invariant *)
  Have: a_3 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_6.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (((x + y) % 2) = x_5)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
}
Prove: (Ig.min(x, y) <= a) \/ (IAbs.abs(x - y) <= a).
Prover Z3 4.8.12 returns Valid (Qed:48ms) (20ms) (55332)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 18):
Let x_5 = Ig.min(x, y).
Let x_6 = a % 2.
Let x_7 = x + y.
Let x_8 = x_4 + y_4.
Let a_3 = IAbs.abs(x_4 - y_4).
Let x_9 = (1 + x_4 + y_4) % 2.
Let x_10 = x_8 % 2.
Let x_11 = a_1 % 2.
Let x_12 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: (0 < a_2) \/ (0 <= a_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_12 = 1) else (x_12 = 0).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_12 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_12.
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_12 = 1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = x_11)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (Ig.min(x_4, y_4) <= a_1) \/ (a_3 <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_10 = x_11)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_11)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_9 = x_11) else (x_10 = x_11).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_10 = x_11) /\ (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_9 = x_11) /\ (x_4 <= y_4))).
  (* Invariant *)
  Have: ((x_11 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_11 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_10) = x_11.
  (* Invariant *)
  Have: a_3 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_8.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_7 % 2) = x_6)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 <= a) \/ (IAbs.abs(x - y) <= a).
}
Prove: (x_5 <= a) \/ (2 <= x_7).
Prover Z3 4.8.12 returns Valid (Qed:47ms) (20ms) (53186)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:47ms) (8ms) (162)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 20):
Let x_2 = Ig.min(x, y_1).
Let x_3 = 1 + (2 * y).
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = y_3 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(y) /\
      is_sint32(x_6) /\ is_sint32((2 * y_3) - 1).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (Ig.min(y, x_6) <= a) \/ (IAbs.abs(y_3 - 1 - y) <= a).
  (* Invariant *)
  Have: y < y_3.
  (* Invariant *)
  Have: y_3 <= (1 + y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: (-2) <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: ((1 + y_2) = y_1) /\ ((2 + x) = y_1) /\ ((2 + y) = y_1). }
  Else { Let x_7 = 1 + x_1. Have: (y = x_1) /\ (x_7 = x) /\ (x_7 = y_1). }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_2 <= x_3) \/ (IAbs.abs(x - y_1) <= x_3).
  (* Invariant *)
  Have: (2 <= (x + y_1)) \/ (x_2 <= x_3).
}
Prove: x_4 = ((1 + x + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (30ms) (82454)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (21ms) (326)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 21):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = x_6 % 2.
Let x_8 = Ig.min(x, y).
Let a_3 = IAbs.abs(x - y).
Let x_9 = x_4 + y_4.
Let a_4 = IAbs.abs(x_4 - y_4).
Let x_10 = (1 + x_4 + y_4) % 2.
Let x_11 = x_9 % 2.
Let x_12 = a_1 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: (0 < a_2) \/ (0 <= a_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_13 = 1) else (x_13 = 0).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_13 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = x_12)).
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: (Ig.min(x_4, y_4) <= a_1) \/ (a_4 <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_11 = x_12)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = x_12)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_10 = x_12) else (x_11 = x_12).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_11 = x_12) /\ (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_10 = x_12) /\ (x_4 <= y_4))).
  (* Invariant *)
  Have: ((x_12 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_12 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_10 else x_11) = x_12.
  (* Invariant *)
  Have: a_4 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_9.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_7 = x_5)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (x_8 <= a) \/ (a_3 <= a).
  (* Invariant *)
  Have: (x_8 <= a) \/ (2 <= x_6).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_7 = x_5)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (((1 + x + y) % 2) = x_5)).
}
Prove: (a_3 <= a) \/ (2 <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:46ms) (20ms) (54877)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:46ms) (10ms) (171)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 25):
Let x_1 = x + y.
Let x_2 = -y.
Let a_1 = IAbs.abs(2 + x - y).
Let x_3 = 2 + x.
Let x_4 = Ig.min(y, x_3).
Let a_2 = IAbs.abs(x - y).
Let x_5 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_5) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (Ig.min(x, y) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_5).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((2 + x + y) % 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (x_4 <= x_1) \/ (a_1 <= x_1).
  (* Invariant *)
  Have: (0 <= x_1) \/ (x_4 <= x_1).
  (* Invariant *)
  Have: (0 <= x_1) \/ (a_1 <= x_1).
}
Prove: y <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (34242)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (0.80ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 26):
Let x = 2 * y.
Let x_1 = y - 2.
Let x_2 = y_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(x_1) /\ is_sint32(y - 1) /\ is_sint32(x_2) /\
      is_sint32((2 * y_1) - 1).
  (* Residual *)
  When: ((x - 3) % 2) = 1.
  (* Invariant *)
  Have: (Ig.min(x_1, x_2) <= a) \/ (IAbs.abs(1 + y_1 - y) <= a).
  (* Invariant *)
  Have: y <= (1 + y_1).
  (* Invariant *)
  Have: y_1 < y.
  (* Invariant *)
  Have: 3 <= y.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: (-2) <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (2 <= y) \/ ((3 + Ig.min(y, x_1)) <= x).
  (* Invariant *)
  Have: ((x - 1) % 2) = 1.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (22ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 31):
Let x_1 = 2 * x.
Let x_2 = 2 + x_1.
Let x_3 = -a.
Let a_2 = IAbs.abs(2 + x_1 - a).
Let x_4 = 2 + x.
Let x_5 = a - x.
Let x_6 = Ig.min(x_4, x_5).
Let a_3 = IAbs.abs(x_1 - a).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Residual *)
  When: flag_0 != 0.
  (* Goal *)
  When: (a % 2) = 0.
  (* Invariant *)
  Have: (a_3 <= a_1) \/ (Ig.min(x, x_5) <= a_1).
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: (0 < x) /\ (x < a).
  (* Invariant *)
  Have: (x_1 <= (1 + a)) \/ (a <= (1 + x_1)).
  (* Invariant *)
  Have: (a_1 % 2) = 0.
  (* Invariant *)
  Have: a_3 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((2 + a) % 2) = 0.
  (* Invariant *)
  Have: (x_6 <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (x_6 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (a <= x_2)).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (34820)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 33):
Let x_5 = a % 2.
Let x_6 = (1 + x + y) % 2.
Let x_7 = x + y.
Let x_8 = x_7 % 2.
Let a_3 = IAbs.abs(x - y).
Let x_9 = Ig.min(x, y).
Let x_10 = x_4 + y_4.
Let a_4 = IAbs.abs(x_4 - y_4).
Let x_11 = (1 + x_4 + y_4) % 2.
Let x_12 = x_10 % 2.
Let x_13 = a_1 % 2.
Let x_14 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1).
  (* Invariant *)
  Have: (0 < a_2) \/ (0 <= a_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_14 = 1) else (x_14 = 0).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_14 = 0)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_14.
  (* Invariant *)
  Have: (-2) <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_14 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_14 = 1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_13)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: (Ig.min(x_4, y_4) <= a_1) \/ (a_4 <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_12 = x_13)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = x_13)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_11 = x_13) else (x_12 = x_13).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_12 = x_13) /\ (y_4 <= x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_11 = x_13) /\ (x_4 <= y_4))).
  (* Invariant *)
  Have: ((x_13 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_13 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (x_4 <= (1 + y_4)) \/ (y_4 <= (1 + x_4)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_11 else x_12) = x_13.
  (* Invariant *)
  Have: a_4 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= x_10.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_5)).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (x_9 <= a) \/ (a_3 <= a).
  (* Invariant *)
  Have: (x_9 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_8 = x_5)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_6 = x_5)).
  (* Invariant *)
  Have: (a_3 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_6 = x_5) else (x_8 = x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_8 = x_5) /\ (y <= x))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_6 = x_5) /\ (x <= y))).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:52ms) (20ms) (57204)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:52ms) (15ms) (215)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 34):
Let x_3 = x_2 + y_1.
Let x_4 = x_3 % 2.
Let a_1 = IAbs.abs(x - y).
Let x_5 = x + y.
Let x_6 = Ig.min(x, y).
Let a_2 = IAbs.abs(x_2 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_2, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_2 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_2 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_1). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (a_1 <= x_3).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a_1 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
}
Prove: (x <= (1 + y)) \/ (y <= (1 + x)).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (37779)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (4ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (17ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 38):
Let x_3 = x_1 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let a_1 = IAbs.abs(x - y).
Let x_6 = Ig.min(x, y).
Let a_2 = IAbs.abs(x_1 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_1, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (a_1 <= x_3).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a_1 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
}
Prove: a_1 <= (2 + x_1 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (43470)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 39):
Let a_1 = IAbs.abs(x - y).
Let x_3 = x_2 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let x_6 = Ig.min(x, y).
Let a_2 = IAbs.abs(x_2 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_2, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_2 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_2 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_1). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (a_1 <= x_3).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a_1 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: a_1 <= (2 + x_2 + y_1).
}
Prove: 2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (37824)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (6ms) (52)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/042_0003/042_merged.c, line 52) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0003/042_merged.c, line 52) (2/2):
Call Result at line 56
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0003/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0003/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
