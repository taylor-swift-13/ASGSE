[kernel] Parsing out/042_0003/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0003/042_merged.c:58: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0003/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 80 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_8_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo042_loop_invariant_11_preserved (Qed 7ms) (Z3)
[wp] Proved goals:   78 / 80
  Qed:              69
  Alt-Ergo 2.5.4:    8 (3ms-11ms-33ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 15):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let a_1 = IAbs.abs(x - y).
Let x_5 = a % 2.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (Ig.min(x, y) <= a) \/ (a_1 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_6).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ (x_6 = x_2). Have: (1 + x_2) = x_1. }
}
Prove: x_4 = ((x_1 + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (60ms) (274401)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (26ms) (391)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 16):
Let x_1 = x + y - 1.
Let x_2 = x_1 % 2.
Let a_1 = IAbs.abs(x - 1 - y).
Let x_3 = a % 2.
Let x_4 = 1 + y.
Let x_5 = x - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_5) /\ is_sint32(1 + x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_2 != 1.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (Ig.min(y, x_5) <= a) \/ (a_1 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= x_4)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y < x)).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= x_4)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y < x)).
  (* Invariant *)
  Have: (0 < y) /\ (2 <= x).
  (* Invariant *)
  Have: (y <= x) \/ (x <= (2 + y)).
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 3 <= (x + y).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((1 + x + y) % 2) = x_2.
}
Prove: x_2 = 0.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (37669)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (3ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 17):
Let x_3 = x_1 + y_1.
Let x_4 = x_3 % 2.
Let a_1 = IAbs.abs(x_1 - y_1).
Let x_5 = a % 2.
Let x_6 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (Ig.min(x_1, y_1) <= a) \/ (a_1 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_6).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_6 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_6 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: x_4 = ((x + y) % 2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
}
Prove: (Ig.min(x, y) <= x_3) \/ (IAbs.abs(x - y) <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (42254)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (33ms) (621)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 18):
Let x_3 = Ig.min(x, y).
Let x_4 = x_1 + y_1.
Let x_5 = x_4 % 2.
Let x_6 = x + y.
Let a_1 = IAbs.abs(x_1 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_4).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_1, y_1) <= a) \/ (a_1 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_5 = x_7.
  (* Invariant *)
  Have: a_1 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: x_5 = (x_6 % 2).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (x_3 <= x_4) \/ (IAbs.abs(x - y) <= x_4).
}
Prove: (x_3 <= x_4) \/ (2 <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (41672)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (7ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 21):
Let x_3 = Ig.min(x, y).
Let x_4 = x_1 + y_1.
Let x_5 = x + y.
Let a_1 = IAbs.abs(x - y).
Let x_6 = x_4 % 2.
Let a_2 = IAbs.abs(x_1 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_4).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_1, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: x_6 = (x_5 % 2).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_3 <= x_4) \/ (a_1 <= x_4).
  (* Invariant *)
  Have: (x_3 <= x_4) \/ (2 <= x_5).
}
Prove: (a_1 <= x_4) \/ (2 <= x_5).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (41705)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (7ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 22):
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 25):
Let x_1 = x - 1.
Let x_2 = 1 + x.
Let x_3 = 2 * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3 - 2).
  (* Invariant *)
  Have: (Ig.min(y, x_1) <= a) \/ (IAbs.abs(x - 1 - y) <= a).
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: y < x.
  (* Invariant *)
  Have: 2 <= x.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: (-2) <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (0 < x) \/ ((2 + Ig.min(x_1, x_2)) <= x_3).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 33):
Let x_1 = 2 * x.
Let x_2 = 2 + x_1.
Let x_3 = -a.
Let a_2 = IAbs.abs(2 + x_1 - a).
Let x_4 = 2 + x.
Let x_5 = a - x.
Let x_6 = Ig.min(x_4, x_5).
Let a_3 = IAbs.abs(x_1 - a).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Goal *)
  When: (a % 2) = 0.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (a_3 <= a_1) \/ (Ig.min(x, x_5) <= a_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= a)).
  (* Invariant *)
  Have: a <= x_1.
  (* Invariant *)
  Have: (0 < x) /\ (x < a).
  (* Invariant *)
  Have: (x_1 <= (1 + a)) \/ (a <= (1 + x_1)).
  (* Invariant *)
  Have: (a_1 % 2) = 0.
  (* Invariant *)
  Have: a_3 <= (2 + a_1).
  (* Invariant *)
  Have: 2 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_6 <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (x_6 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((2 + a) % 2) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 <= a)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (a <= x_2)).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (34872)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 36):
Let x_1 = 2 + x.
Let x_2 = x + y.
Let x_3 = -y.
Let a_1 = IAbs.abs(2 + x - y).
Let x_4 = Ig.min(y, x_1).
Let a_2 = IAbs.abs(x - y).
Let x_5 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_5) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (Ig.min(x, y) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= y)).
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= x_5).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: (x_4 <= x_2) \/ (a_1 <= x_2).
  (* Invariant *)
  Have: (0 <= x_2) \/ (x_4 <= x_2).
  (* Invariant *)
  Have: (0 <= x_2) \/ (a_1 <= x_2).
  (* Invariant *)
  Have: ((2 + x + y) % 2) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= y)).
  (* Invariant *)
  Have: y <= x_1.
}
Prove: y <= (3 + x).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (35107)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 40):
Let x_3 = x_1 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let a_1 = IAbs.abs(x - y).
Let x_6 = Ig.min(x, y).
Let a_2 = IAbs.abs(x_1 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_1, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_1 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_1 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_2). Have: (1 + x_2) = x. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (a_1 <= x_3).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a_1 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
}
Prove: a_1 <= (2 + x_1 + y_1).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (43686)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 41):
Let a_1 = IAbs.abs(x - y).
Let x_3 = x_2 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Let x_6 = Ig.min(x, y).
Let a_2 = IAbs.abs(x_2 - y_1).
Let x_7 = a % 2.
Let x_8 = 1 + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(x_8) /\ is_sint32(x_3).
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (Ig.min(x_2, y_1) <= a) \/ (a_2 <= a).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 <= y_1)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_2 <= y_1)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_2 <= (1 + y_1)) \/ (y_1 <= x_8).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: a_2 <= (2 + a).
  (* Invariant *)
  Have: 2 <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_8 = x. Have: (1 + y_1) = y. }
  Else { Have: (y_1 = y) /\ (x_8 = x_1). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (a_1 <= x_3).
  (* Invariant *)
  Have: (x_6 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a_1 <= x_3) \/ (2 <= x_5).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (y <= x)).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x <= (1 + y)) \/ (y <= (1 + x)).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: a_1 <= (2 + x_2 + y_1).
}
Prove: 2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (38040)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (6ms) (52)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 49):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0003/042_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0003/042_merged.c, line 53):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0003/042_merged.c, line 54) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0003/042_merged.c, line 54) (2/2):
Call Result at line 58
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0003/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0003/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
