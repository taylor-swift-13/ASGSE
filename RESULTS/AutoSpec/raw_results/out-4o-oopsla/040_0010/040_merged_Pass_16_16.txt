[kernel] Parsing out/040_0010/040_merged.c (with preprocessing)
[kernel:typing:no-proto] out/040_0010/040_merged.c:27: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/040_0010/040_merged.c:37: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/040_0010/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/040_0010/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/040_0010/040_merged.c:37: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 16 goals scheduled
[wp] Proved goals:   16 / 16
  Qed:              11
  Alt-Ergo 2.5.4:    5 (5ms-18ms-23ms)
------------------------------------------------------------
  Function foo040
------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 17):
Let x = 2 + i.
Let x_1 = i / 2.
Let x_2 = (1 + i) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x_1 + x_2).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= (x_1 + x_2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If (x % 2) = 0
  Then { Have: (3 + x_1 + x_2) = j. }
  Else { Have: (2 + x_1 + x_2) = j. }
}
Prove: (1 + (x / 2) + ((3 + i) / 2)) = j.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (37009)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (20ms) (343)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 18):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = (3 + i) / 2.
Let x_3 = x_1 + x_2.
Let x_4 = 1 + x_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Goal *)
  When: (x % 2) != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: (1 + (i / 2) + ((1 + i) / 2)) = x_3.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 % 2) != 0.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (37627)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (21ms) (314)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 20):
Let x = 2 + i.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = (3 + i) / 2.
Let x_4 = 1 + x_2 + x_3.
Let x_5 = i / 2.
Let x_6 = (1 + i) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(1 + x_5 + x_6) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= (x_5 + x_6).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_1 = 0
  Then {
    Let x_7 = x_2 + x_3.
    Have: (x_7 = (1 + j)) /\ ((2 + x_5 + x_6) = x_7).
  }
  Else { Have: (1 + x_5 + x_6) = x_7. }
  (* Invariant *)
  Have: ((x_1 != 0) -> ((x_4 % 2) != 0)).
}
Prove: 0 <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (33725)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (53)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 22):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = (3 + i) / 2.
Let x_3 = 1 + x_1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = x_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_3).
  (* Goal *)
  When: (x % 2) != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: (1 + (i / 2) + ((1 + i) / 2)) = x_5.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_4 != 0.
  (* Invariant *)
  Have: (-2) <= i.
}
Prove: x_4 = 1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (37656)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (23ms) (335)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0010/040_merged.c, line 23):
Let x = 2 + i.
Let x_1 = x / 2.
Let x_2 = (3 + i) / 2.
Let x_3 = 1 + x_1 + x_2.
Let x_4 = x_1 + x_2.
Let x_5 = i / 2.
Let x_6 = (1 + i) / 2.
Let x_7 = 1 + x_5 + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_3).
  (* Residual *)
  When: (x % 2) != 0.
  (* Goal *)
  When: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= (x_5 + x_6).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_7 = x_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_3 % 2) = 1.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38126)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (21ms) (325)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0010/040_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Loop assigns (file out/040_0010/040_merged.c, line 24) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/040_0010/040_merged.c, line 24) (2/2):
Call Result at line 27
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/040_0010/040_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0010/040_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0010/040_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo040'.
  Callers assumptions might be imprecise.
