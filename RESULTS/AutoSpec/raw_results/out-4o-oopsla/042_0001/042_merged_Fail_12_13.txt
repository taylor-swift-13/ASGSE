[kernel] Parsing out/042_0001/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0001/042_merged.c:24: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0001/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 13 goals scheduled
[wp] [Timeout] typed_foo042_assert (Qed 7ms) (Z3)
[wp] Proved goals:   12 / 13
  Qed:               7
  Alt-Ergo 2.5.4:    5 (4ms-16ms-52ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0001/042_merged.c, line 15):
Let x_3 = a_1 % 2.
Let x_4 = a_2 % 2.
Let x_5 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_4.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_2 + y_2) % 2) else ((x_2 + y_2) % 2))
          = x_3.
  (* Invariant *)
  Have: 0 < y_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((x_3 = 0) -> (y_2 <= x_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (x_2 = x_1) /\ (y_2 = y). Have: (x_1 + y) = a. }
  Else { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + x + y_1) = a. }
}
Prove: (x_5 = 0) \/ (x_5 = 1).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (39608)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (86)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0001/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0001/042_merged.c, line 16):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_6.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_6 = 0) -> (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
}
Prove: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:40ms) (140ms) (393866)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (52ms) (827)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0001/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0001/042_merged.c, line 17):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_6.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_6 = 0) -> (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_5.
}
Prove: 0 < y.
Prover Z3 4.8.12 returns Valid (Qed:39ms) (10ms) (43774)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:39ms) (10ms) (115)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0001/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0001/042_merged.c, line 18):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x_4 + y_4) % 2) else ((x_4 + y_4) % 2))
          = x_6.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_6 = 0) -> (y_4 <= x_4)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_5.
  (* Invariant *)
  Have: 0 < y.
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Valid (Qed:44ms) (20ms) (47929)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:44ms) (8ms) (119)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0001/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0001/042_merged.c, line 19):
Let x_1 = x + y.
Let x_2 = 2 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: y <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((2 + x + y) % 2) = 0.
}
Prove: y <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (31707)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (4ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0001/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Assertion (file out/042_0001/042_merged.c, line 41):
Let x_1 = a_2 % 2.
Let x_2 = a_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y).
  If flag_0 != 0
  Then { Have: a_3 = 0. }
  Else { Have: a_3 = 1. }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then ((1 + x + y) % 2) else ((x + y) % 2)) = x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x_1 = 0) -> (y <= x)).
  If flag_0 != 0
  Then { Have: a_2 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_2 = a. }
}
Prove: (a % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/042_0001/042_merged.c, line 20) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0001/042_merged.c, line 20) (2/2):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0001/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0001/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
