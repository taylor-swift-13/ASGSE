[kernel] Parsing out/024_0009/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 49 goals scheduled
[wp] Proved goals:   49 / 49
  Qed:              42
  Alt-Ergo 2.5.4:    7
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 9):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_1 < n) /\ (i <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> ((i_4 < j_1) ->
      ((i_3 <= k) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_2 <= i_4) -> ((i_4 < i_3) ->
      ((i_4 < j_2) -> ((i_3 <= k_1) -> (i_4 <= i_3)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((i_2 <= i_5) -> ((i_5 <= i_4) ->
      ((i_4 <= i_3) -> ((i_3 < n) -> ((i_4 <= j_2) -> (i_2 <= i_3)))))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((i_4 <= i_2) -> ((i_2 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 <= i_3) -> ((i_3 < n) -> (i_2 <= i_3)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((i_2 <= i_5) -> ((i_5 <= i_4) ->
      ((i_4 <= i_3) -> ((i_3 < n) -> ((i_4 <= j) -> (i_2 <= i_3)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 < i_4) -> ((0 <= i_4) -> ((i_4 < i_3) ->
      ((i_4 < j) -> ((i_3 <= k_2) -> (i_4 <= i_3)))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38390)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 10):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Goal *)
  When: (i_2 <= i_3) /\ (i_3 <= i_1) /\ (i_1 < n) /\ (i < i_2) /\
      (i_3 <= j) /\ ((-1) <= i).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_4) -> ((i_5 < j_1) ->
      ((i_4 <= k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i <= i_5) -> ((i_5 < i_4) ->
      ((i_5 < j_2) -> ((i_4 <= k_1) -> (i_5 <= i_4)))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((i <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i <= i_6) -> ((i_6 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 < n) -> ((i_5 <= j_2) -> (i <= i_4)))))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_5 <= i) -> ((i <= i_6) ->
      ((i_6 <= i_5) -> ((i_5 <= i_4) -> ((i_4 < n) -> (i <= i_4)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i <= i_6) -> ((i_6 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 < n) -> ((i_5 <= j) -> (i <= i_4)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i < i_5) -> ((0 <= i_5) -> ((i_5 < i_4) ->
      ((i_5 < j) -> ((i_4 <= k_2) -> (i_5 <= i_4)))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_5 <= i) -> ((i < i_4) -> ((0 <= i_5) ->
      ((i_4 < j) -> (i_5 <= i_4))))).
}
Prove: i < i_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (39605)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 22):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_2 < j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i <= i_2) -> ((i_2 < i_1) ->
      ((i_2 < j_2) -> ((i_1 <= k_2) -> (i_2 <= i_1)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_2 <= i) -> ((i <= i_3) ->
      ((i_3 <= i_2) -> ((i_2 <= i_1) -> ((i_1 < n) -> (i <= i_1)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (37615)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (4ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 25):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_2) /\ (i_2 <= i_3) /\ (i_3 <= i_1) /\
      (i_1 < n) /\ (i_3 <= x).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_4) -> ((i_5 < j_1) ->
      ((i_4 <= k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i <= i_5) -> ((i_5 < i_4) ->
      ((i_5 < j_2) -> ((i_4 <= k_2) -> (i_5 <= i_4)))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((i <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i <= i_6) -> ((i_6 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 < n) -> ((i_5 <= j_2) -> (i <= i_4)))))).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_5 <= i) -> ((i <= i_6) ->
      ((i_6 <= i_5) -> ((i_5 <= i_4) -> ((i_4 < n) -> (i <= i_4)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i <= i_6) -> ((i_6 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 < n) -> ((i_5 <= j) -> (i <= i_4)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i <= x.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38632)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 25):
Assume {
  Type: is_sint32(i) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i_2 <= i) /\ (i <= i_3) /\ (i_3 <= i_2) /\
      (i_2 <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_4) -> ((i_5 < j) ->
      ((i_4 <= k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i <= i_5) -> ((i_5 < i_4) ->
      ((i_5 < j_1) -> ((i_4 <= k_1) -> (i_5 <= i_4)))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((i <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i <= i_6) -> ((i_6 <= i_5) ->
      ((i_5 <= i_4) -> ((i_4 < n) -> ((i_5 <= j_1) -> (i <= i_4)))))).
  (* Then *)
  Have: i < n.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (34334)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (26)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 38):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_2 < j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i <= i_2) -> ((i_2 < i_1) ->
      ((i_2 < j_2) -> ((i_1 <= k_2) -> (i_2 <= i_1)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_2 <= i) -> ((i <= i_3) ->
      ((i_3 <= i_2) -> ((i_2 <= i_1) -> ((i_1 < n) -> (i <= i_1)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (37617)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 40):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_2 < j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i <= i_2) -> ((i_2 < i_1) ->
      ((i_2 < j_2) -> ((i_1 <= k_2) -> (i_2 <= i_1)))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_2 <= i) -> ((i <= i_3) ->
      ((i_3 <= i_2) -> ((i_2 <= i_1) -> ((i_1 < n) -> (i <= i_1)))))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i <= i_3) -> ((i_3 <= i_2) ->
      ((i_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j) -> (i <= i_1)))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (37719)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (18)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0009/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0009/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0009/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0009/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0009/024_merged.c, line 46):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0009/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
