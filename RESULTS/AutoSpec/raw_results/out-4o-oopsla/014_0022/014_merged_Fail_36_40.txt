[kernel] Parsing out/014_0022/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0022/014_merged.c:34: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0022/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_foo014_loop_invariant_2_preserved (Qed 12ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_3_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_6_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_9_preserved (Qed 23ms) (Z3)
[wp] Proved goals:   36 / 40
  Qed:              31
  Alt-Ergo 2.5.4:    3 (1ms-7ms-11ms)
  Z3 4.8.12:         2 (10ms)
  Timeout:           4
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 12):
Let x = a + m.
Let x_1 = a + j.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = 1 + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i : Z. let x_4 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_4 = 0) -> (i <= x))) /\ (((x_4 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a = (-1). }
  Else { Have: a = 1. }
}
Prove: (x_3 % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 13):
Let x = 1 + j.
Let x_1 = a + m.
Let x_2 = a + j.
Let a_1 = IAbs.abs(a).
Let x_3 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(1 + a) /\ is_sint32(x).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i : Z. let x_4 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_4 = 0) -> (i <= x_1))) /\ (((x_4 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_3.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_1).
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: ((a = (-1)) -> ((x % 2) = 1)).
}
Prove: x_2 < m.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 14):
Let x = 1 + j.
Let x_1 = a + m.
Let x_2 = a + j.
Let a_1 = IAbs.abs(a).
Let x_3 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i : Z. let x_4 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_4 = 0) -> (i <= x_1))) /\ (((x_4 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_3.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_1).
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: ((a = 1) -> ((x % 2) = 1)).
}
Prove: a <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (33992)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (1ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 15):
Let x = 1 + j.
Let x_1 = a_3 + m.
Let x_2 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_3 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_1 : Z. let x_4 = i_1 % 2 in ((0 < i_1) -> ((i_1 < j) ->
      ((((x_4 = 0) -> (i_1 <= x_1))) /\ (((x_4 = 1) -> ((a_3 + i_1) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_3.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_1).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x % 2) = 1)).
  (* Invariant *)
  Have: (a + j) <= m.
  (* Invariant *)
  Have: a <= j.
}
Prove: (a <= m) /\ (0 <= (a + m)).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37597)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (7ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 16):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a_3 + m.
Let x_3 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_4 = 1 + m.
Let x_5 = i % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_4).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_1 : Z. let x_6 = i_1 % 2 in ((0 < i_1) -> ((i_1 < j) ->
      ((((x_6 = 0) -> (i_1 <= x_2))) /\ (((x_6 = 1) -> ((a_3 + i_1) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_4.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_2).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: (a + j) <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= j) ->
      ((a <= m) /\ (0 <= x)))).
}
Prove: (((x_5 = 0) -> (i <= x))) /\ (((x_5 = 1) -> ((a + i) <= m))).
Prover Z3 4.8.12 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 17):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a_3 + m.
Let x_3 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_4 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_4).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_5 = 0) -> (i <= x_2))) /\ (((x_5 = 1) -> ((a_3 + i) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_4.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_2).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: (a + j) <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i <= j) ->
      ((((x_5 = 0) -> (i <= x))) /\ (((x_5 = 1) -> ((a + i) <= m)))))).
}
Prove: IAbs.abs(a) <= m.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (39688)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 18):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a_3 + m.
Let x_3 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_4 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_4).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_5 = 0) -> (i <= x_2))) /\ (((x_5 = 1) -> ((a_3 + i) <= m)))))).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_4.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_2).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: (a + j) <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i <= j) ->
      ((((x_5 = 0) -> (i <= x))) /\ (((x_5 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
}
Prove: a_4 <= j.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (39545)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 19):
Let a_4 = IAbs.abs(a).
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a_3 + m.
Let x_3 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_4 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_4).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_5 = 0) -> (i <= x_2))) /\ (((x_5 = 1) -> ((a_3 + i) <= m)))))).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_4.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_2).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: (a + j) <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = i % 2 in ((0 < i) -> ((i <= j) ->
      ((((x_5 = 0) -> (i <= x))) /\ (((x_5 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 <= j.
}
Prove: (j + a_4) <= m.
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 22):
Let x = a + j.
Let a_4 = IAbs.abs(a).
Let x_1 = a + m.
Let x_2 = 1 + j.
Let x_3 = a_3 + m.
Let x_4 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_5 = 1 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i : Z. let x_6 = i % 2 in ((0 < i) -> ((i < j) ->
      ((((x_6 = 0) -> (i <= x_3))) /\ (((x_6 = 1) -> ((a_3 + i) <= m)))))).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_3).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: ((a = 0) -> ((x_2 % 2) = 1)).
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= j) -> ((a <= m) /\ (0 <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. let x_6 = i % 2 in ((0 < i) -> ((i <= j) ->
      ((((x_6 = 0) -> (i <= x_1))) /\ (((x_6 = 1) -> ((a + i) <= m)))))).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 <= j.
  (* Invariant *)
  Have: (j + a_4) <= m.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: (a <= m) /\ (0 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (40032)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (11ms) (94)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Loop assigns (file out/014_0022/014_merged.c, line 30) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0022/014_merged.c, line 30) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0022/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0022/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
