[kernel] Parsing out/014_0022/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0022/014_merged.c:41: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0022/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 54 goals scheduled
[wp] [Timeout] typed_foo014_loop_invariant_3_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_2_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_5_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_12_preserved (Qed 33ms) (Z3)
[wp] Proved goals:   50 / 54
  Qed:              40
  Alt-Ergo 2.5.4:    9 (7ms-35ms-147ms)
  Z3 4.8.12:         1 (450ms)
  Timeout:           4
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 12):
Let x = a + m.
Let x_1 = a + j.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = 1 + a + m.
Let x_4 = 1 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_4) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_2 = i) \/ ((x_2 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_1 = x_2).
  (* Invariant *)
  Have: (x_4 = j) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_5 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_5 = 0) -> (i_2 <= x))) /\ (((x_5 = 1) -> ((a + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a < i_2) /\ (0 < (a + i_2))))).
  (* Invariant *)
  Have: ((a + i_1) = x_2) \/ ((x_3 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Then *)
  Have: j <= m.
}
Prove: x_1 < m.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 13):
Let x = a + m.
Let x_1 = a + j.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = 1 + a + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_2 = i) \/ ((x_2 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_1 = x_2).
  (* Invariant *)
  Have: ((1 + a) = j) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_4 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_4 = 0) -> (i_2 <= x))) /\ (((x_4 = 1) -> ((a + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a < i_2) /\ (0 < (a + i_2))))).
  (* Invariant *)
  Have: ((a + i_1) = x_2) \/ ((x_3 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Then *)
  Have: j <= m.
}
Prove: j < x.
Prover Z3 4.8.12 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 15):
Let x = a + j.
Let x_1 = a + m.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = 1 + a + m.
Let x_4 = 1 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_4) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_2 = i) \/ ((x_2 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (x = 1) \/ (x = x_2).
  (* Invariant *)
  Have: (x_4 = j) \/ (x = 1).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_5 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_5 = 0) -> (i_2 <= x_1))) /\ (((x_5 = 1) -> ((a + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a < i_2) /\ (0 < (a + i_2))))).
  (* Invariant *)
  Have: ((a + i_1) = x_2) \/ ((x_3 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_1).
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x < m.
}
Prove: (x = (-1)) \/ ((1 + a + j) = m).
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 16):
Let x = a + j.
Let x_1 = a_3 + m.
Let x_2 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_3 = 1 + m.
Let x_4 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_3 = i) \/ ((x_3 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (x_2 = 1) \/ (x_2 = x_3).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_5 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_5 = 0) -> (i_2 <= x_1))) /\ (((x_5 = 1) -> ((a_3 + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a_3 < i_2) /\ (0 < (a_3 + i_2))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x_3) \/ ((x_4 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_3.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_1).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: j <= (a + m).
  (* Invariant *)
  Have: (x = 0) \/ (x = m).
}
Prove: (j = a) \/ (x = 0).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (450ms) (350688)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 19):
Let x = 1 + j.
Let x_1 = a + j.
Let x_2 = a + m.
Let a_1 = IAbs.abs(a).
Let x_3 = 1 + m.
Let x_4 = 1 + a + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_3 = i) \/ ((x_3 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_1 = x_3).
  (* Invariant *)
  Have: ((1 + a) = j) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((a = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_5 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_5 = 0) -> (i_2 <= x_2))) /\ (((x_5 = 1) -> ((a + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a < i_2) /\ (0 < (a + i_2))))).
  (* Invariant *)
  Have: ((a + i_1) = x_3) \/ ((x_4 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: a_1 < j.
  (* Invariant *)
  Have: (j + a_1) <= x_3.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x_2).
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: j < x_2.
  (* Invariant *)
  Have: (x = a) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((a = 1) -> ((x % 2) = 1)).
}
Prove: a <= x.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (36743)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (7ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 20):
Let x = 1 + j.
Let x_1 = a + j.
Let x_2 = a + m.
Let x_3 = a_3 + m.
Let x_4 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_5 = 1 + m.
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_5 = i_1) \/ ((x_5 = i_1) /\ (0 < i_1) /\ (i_1 <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_4 = x_5).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_3))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_2) = x_5) \/ ((x_6 = i_2) /\ (0 < i_2) /\ (i_2 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_3).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_1 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
}
Prove: (a <= m) /\ (0 <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (40430)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (17ms) (148)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 21):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a + j.
Let x_3 = a_3 + m.
Let x_4 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_5 = 1 + m.
Let x_6 = 1 + a_3 + m.
Let x_7 = i % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_5 = i_1) \/ ((x_5 = i_1) /\ (0 < i_1) /\ (i_1 <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_4 = x_5).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_8 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_8 = 0) -> (i_3 <= x_3))) /\ (((x_8 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_2) = x_5) \/ ((x_6 = i_2) /\ (0 < i_2) /\ (i_2 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_3).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_2 <= m.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_2 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x)))).
}
Prove: (((x_7 = 0) -> (i <= x))) /\ (((x_7 = 1) -> ((a + i) <= m))).
Prover Z3 4.8.12 returns Valid (Qed:33ms) (20ms) (42283)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:33ms) (13ms) (155)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 22):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a + j.
Let x_3 = a_3 + m.
Let x_4 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_5 = 1 + m.
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_5 = i_1) \/ ((x_5 = i_1) /\ (0 < i_1) /\ (i_1 <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_4 = x_5).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_3))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_2) = x_5) \/ ((x_6 = i_2) /\ (0 < i_2) /\ (i_2 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_3).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_2 <= m.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_2 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 <= j) ->
      ((((x_7 = 0) -> (i_3 <= x))) /\ (((x_7 = 1) -> ((a + i_3) <= m)))))).
}
Prove: (a < i) /\ (0 < (a + i)).
Prover Z3 4.8.12 returns Timeout (Qed:33ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:33ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 23):
Let x = a + m.
Let x_1 = 1 + j.
Let x_2 = a + j.
Let x_3 = a_3 + m.
Let x_4 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_5 = 1 + m.
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_5 = i) \/ ((x_5 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_5).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_4 = x_5).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_2 : Z. let x_7 = i_2 % 2 in ((0 < i_2) -> ((i_2 < j) ->
      ((((x_7 = 0) -> (i_2 <= x_3))) /\ (((x_7 = 1) -> ((a_3 + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < j) ->
      ((a_3 < i_2) /\ (0 < (a_3 + i_2))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x_5) \/ ((x_6 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x_5.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_3).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_2 <= m.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_2 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= j) ->
      ((a <= m) /\ (0 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_7 = i_2 % 2 in ((0 < i_2) -> ((i_2 <= j) ->
      ((((x_7 = 0) -> (i_2 <= x))) /\ (((x_7 = 1) -> ((a + i_2) <= m)))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= j) ->
      ((a < i_2) /\ (0 < (a + i_2))))).
}
Prove: exists i_2 : Z. ((a + i_2) = x_5) \/
    (((1 + a + m) = i_2) /\ (0 < i_2) /\ (i_2 <= x_1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (40ms) (511)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 23):
Let x = 1 + m.
Assume { Type: is_sint32(m). (* Pre-condition *) Have: 0 < m. }
Prove: exists i : Z. (x = i) \/ ((x = i) /\ (0 < i) /\ (i <= 1)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (147ms) (2014)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 24):
Let x = 1 + m.
Let x_1 = 1 + j.
Let x_2 = a + m.
Let x_3 = a + j.
Let x_4 = a_3 + m.
Let x_5 = a_3 + j.
Let a_4 = IAbs.abs(a_3).
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x = i) \/ ((x = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_5 = x).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_4))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x) \/ ((x_6 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 < j.
  (* Invariant *)
  Have: (j + a_4) <= x.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_4).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_3 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 <= j) ->
      ((((x_7 = 0) -> (i_3 <= x_2))) /\ (((x_7 = 1) -> ((a + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a < i_3) /\ (0 < (a + i_3))))).
  (* Invariant *)
  Have: ((a + i_2) = x) \/
      (((1 + a + m) = i_2) /\ (0 < i_2) /\ (i_2 <= x_1)).
}
Prove: IAbs.abs(a) <= m.
Prover Z3 4.8.12 returns Valid (Qed:32ms) (20ms) (44387)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (39ms) (380)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 25):
Let a_4 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = 1 + j.
Let x_2 = a + m.
Let x_3 = a + j.
Let x_4 = a_3 + m.
Let x_5 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x = i) \/ ((x = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_5 = x).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_4))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x) \/ ((x_6 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_4).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_3 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 <= j) ->
      ((((x_7 = 0) -> (i_3 <= x_2))) /\ (((x_7 = 1) -> ((a + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a < i_3) /\ (0 < (a + i_3))))).
  (* Invariant *)
  Have: ((a + i_2) = x) \/
      (((1 + a + m) = i_2) /\ (0 < i_2) /\ (i_2 <= x_1)).
  (* Invariant *)
  Have: a_4 <= m.
}
Prove: a_4 <= j.
Prover Z3 4.8.12 returns Valid (Qed:38ms) (20ms) (43918)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:38ms) (28ms) (390)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 26):
Let a_4 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = 1 + j.
Let x_2 = a + m.
Let x_3 = a + j.
Let x_4 = a_3 + m.
Let x_5 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x = i) \/ ((x = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_5 = x).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_4))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x) \/ ((x_6 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_4).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x_3 <= m.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = m).
  (* Invariant *)
  Have: (j = a) \/ (x_3 = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_1 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 <= j) ->
      ((((x_7 = 0) -> (i_3 <= x_2))) /\ (((x_7 = 1) -> ((a + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a < i_3) /\ (0 < (a + i_3))))).
  (* Invariant *)
  Have: ((a + i_2) = x) \/
      (((1 + a + m) = i_2) /\ (0 < i_2) /\ (i_2 <= x_1)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 <= j.
}
Prove: (j + a_4) <= m.
Prover Z3 4.8.12 returns Valid (Qed:38ms) (10ms) (44442)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:38ms) (17ms) (123)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (25ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 29):
Let x = a + j.
Let a_4 = IAbs.abs(a).
Let x_1 = 1 + m.
Let x_2 = 1 + j.
Let x_3 = a + m.
Let x_4 = a_3 + m.
Let x_5 = a_3 + j.
Let a_5 = IAbs.abs(a_3).
Let x_6 = 1 + a_3 + m.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < m.
  (* Invariant *)
  Have: (x_1 = i) \/ ((x_1 = i) /\ (0 < i) /\ (i <= 1)).
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_1).
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_5 = x_1).
  (* Invariant *)
  Have: ((1 + a_3) = j) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((a_3 = 0) -> ((j % 2) = 1)).
  (* Invariant *)
  Have: a_3 < j.
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 < j) ->
      ((((x_7 = 0) -> (i_3 <= x_4))) /\ (((x_7 = 1) -> ((a_3 + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < j) ->
      ((a_3 < i_3) /\ (0 < (a_3 + i_3))))).
  (* Invariant *)
  Have: ((a_3 + i_1) = x_1) \/ ((x_6 = i_1) /\ (0 < i_1) /\ (i_1 <= j)).
  (* Invariant *)
  Have: a_5 <= m.
  (* Invariant *)
  Have: a_5 < j.
  (* Invariant *)
  Have: (j + a_5) <= x_1.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: (a_3 <= m) /\ (0 <= x_4).
  (* Then *)
  Have: j <= m.
  If tmp_0 != 0
  Then { Have: a_3 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_3 = a_2. Have: (1 + a) = a_2. }
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (x = 0) \/ (x = m).
  (* Invariant *)
  Have: (j = a) \/ (x = 0).
  (* Invariant *)
  Have: ((a = 0) -> ((x_2 % 2) = 1)).
  (* Invariant *)
  Have: a <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a <= m) /\ (0 <= x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_7 = i_3 % 2 in ((0 < i_3) -> ((i_3 <= j) ->
      ((((x_7 = 0) -> (i_3 <= x_3))) /\ (((x_7 = 1) -> ((a + i_3) <= m)))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= j) ->
      ((a < i_3) /\ (0 < (a + i_3))))).
  (* Invariant *)
  Have: ((a + i_2) = x_1) \/
      (((1 + a + m) = i_2) /\ (0 < i_2) /\ (i_2 <= x_2)).
  (* Invariant *)
  Have: a_4 <= m.
  (* Invariant *)
  Have: a_4 <= j.
  (* Invariant *)
  Have: (j + a_4) <= m.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: (a <= m) /\ (0 <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (44779)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:29ms) (11ms) (164)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0022/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0022/014_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0022/014_merged.c, line 37) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0022/014_merged.c, line 37) (2/2):
Call Result at line 41
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0022/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0022/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
