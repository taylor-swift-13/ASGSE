[kernel] Parsing out/013_0006/013_merged.c (with preprocessing)
[kernel:typing:no-proto] out/013_0006/013_merged.c:45: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/013_0006/013_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 66 goals scheduled
[wp] Proved goals:   66 / 66
  Qed:              56
  Alt-Ergo 2.5.4:   10
------------------------------------------------------------
  Function foo013
------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 10):
Let x = 2 * k.
Let x_1 = 2 + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(4 + j).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_1 = j) \/ ((3 + x) <= j).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: ((2 + j) = x) \/ (x <= (1 + j)).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (31427)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 11):
Let x = 2 * k.
Let x_1 = 2 + x.
Let x_2 = 4 + x.
Assume {
  Type: is_sint32(k) /\ is_sint32(tmp_0) /\ is_sint32(1 + k) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_2 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (39514)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (138)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 13):
Let x = 2 + j.
Let x_1 = 2 * k.
Let x_2 = 2 + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(4 + j).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_2 = j) \/ ((3 + x_1) <= j).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x = x_1) \/ (x_1 <= (1 + j)).
}
Prove: ((-2) <= j) \/ (x_1 <= x).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (31657)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 14):
Let x = 2 * k.
Let x_1 = 2 + j.
Let x_2 = 2 + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(4 + j).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_2 = j) \/ ((3 + x) <= j).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = x) \/ (x <= (1 + j)).
  (* Invariant *)
  Have: ((-2) <= j) \/ (x <= x_1).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (31649)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (7ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 15):
Let x = 2 * k.
Let x_1 = 2 + x.
Let x_2 = 2 * k_2.
Let x_3 = 2 + x_2.
Let x_4 = j_3 % 4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(j_3) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: (x_3 = j_3) \/ ((3 + x_2) <= j_3).
  (* Invariant *)
  Have: x_3 <= j_3.
  (* Invariant *)
  Have: 0 <= j_3.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((k_2 = 0) -> (x_4 = 2))).
  (* Invariant *)
  Have: 2 <= j_3.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_3 = j_3)).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_4 = 2).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (x_3 = j_3).
  (* Invariant *)
  Have: (j_3 % 2) = 0.
  (* Invariant *)
  Have: 0 <= k_2.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (j_3 = j_1) /\ (k_2 = k). Have: (4 + j_1) = j. }
  Else {
    Have: (j_3 = j_2) /\ (k_2 = k_1).
    Have: (2 + j_2) = j.
    Have: (1 + k_1) = k.
  }
  (* Invariant *)
  Have: (x_1 = j) \/ ((3 + x) <= j).
  (* Invariant *)
  Have: (flag_0 != 0) \/ ((j % 2) = 0).
  (* Invariant *)
  Have: x_1 <= j.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36649)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 18):
Let x = 2 * k.
Let x_1 = 2 + j.
Let x_2 = 2 + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(4 + j).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_2 = j) \/ ((3 + x) <= j).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = x) \/ (x <= (1 + j)).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (-4) <= j.
}
Prove: (-3) <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (31771)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 20):
Let x = 4 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (j = 2) \/ (3 <= j).
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-4) <= j.
  (* Invariant *)
  Have: (-3) <= j.
  (* Invariant *)
  Have: (-2) <= j.
}
Prove: (x % 4) = 2.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (30ms) (53292)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (12ms) (186)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 21):
Let x = 4 + j.
Let x_1 = 2 * k.
Let x_2 = 2 + j.
Let x_3 = 2 + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_3 = j) \/ ((3 + x_1) <= j).
  (* Invariant *)
  Have: x_3 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x_1) \/ (x_1 <= (1 + j)).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (-4) <= j.
  (* Invariant *)
  Have: (-3) <= j.
  (* Invariant *)
  Have: ((k = 0) -> ((x % 4) = 2)).
}
Prove: (-2) <= j.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (32234)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 24):
Let x = 4 + j.
Let x_1 = x % 4.
Let x_2 = 2 * k.
Let x_3 = 2 + j.
Let x_4 = 2 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_4 = j) \/ ((3 + x_2) <= j).
  (* Invariant *)
  Have: x_4 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = x_2) \/ (x_2 <= (1 + j)).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (-4) <= j.
  (* Invariant *)
  Have: (-3) <= j.
  (* Invariant *)
  Have: ((k = 0) -> (x_1 = 2)).
  (* Invariant *)
  Have: (-2) <= j.
}
Prove: x_1 = 2.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (46240)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (15ms) (219)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 25):
Let x = 4 + j.
Let x_1 = 2 * k.
Let x_2 = 2 + j.
Let x_3 = 2 + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_3 = j) \/ ((3 + x_1) <= j).
  (* Invariant *)
  Have: x_3 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 2 <= j.
  (* Invariant *)
  Have: (j % 4) = 2.
  (* Invariant *)
  Have: (j % 2) = 0.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = x_1) \/ (x_1 <= (1 + j)).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (-4) <= j.
  (* Invariant *)
  Have: (-3) <= j.
  (* Invariant *)
  Have: (-2) <= j.
  (* Invariant *)
  Have: (x % 4) = 2.
}
Prove: (x % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (40985)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (17ms) (265)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/013_0006/013_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/013_0006/013_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/013_0006/013_merged.c, line 42) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/013_0006/013_merged.c, line 42) (2/2):
Call Result at line 45
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/013_0006/013_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/013_0006/013_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo013'.
  Callers assumptions might be imprecise.
