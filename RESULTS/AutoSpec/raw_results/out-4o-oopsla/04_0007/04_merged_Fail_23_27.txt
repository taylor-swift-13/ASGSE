[kernel] Parsing out/04_0007/04_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 27 goals scheduled
[wp] [Timeout] typed_foo04_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_2_established (Qed 0.66ms) (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_8_established (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_9_established (Qed 0.79ms) (Z3)
[wp] Proved goals:   23 / 27
  Qed:              15
  Alt-Ergo 2.5.4:    7 (4ms-26ms-55ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo04
------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 8):
Let x_1 = x + y.
Let x_2 = (y * (49 + y)) / 2.
Let x_3 = 50 + y.
Let x_4 = 50 + x.
Let x_5 = y_1 * (49 + y_1).
Let x_6 = 1 + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_6) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: x_4 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_3) / 2).
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_1.
}
Prove: (50 + x + y) <= ((x_6 * x_3) / 2).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (38716)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (28ms) (513)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 8):
Assume { Type: is_sint32(y). }
Prove: (-1) <= (y * (49 + y)).
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 9):
Let x_1 = 50 + x + y.
Let x_2 = 1 + y.
Let x_3 = 50 + y.
Let x_4 = x + y.
Let x_5 = (y * (49 + y)) / 2.
Let x_6 = 50 + x.
Let x_7 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_4).
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_7.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: x_6 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_3) / 2).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_4 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_4.
  (* Invariant *)
  Have: x_1 <= ((x_2 * x_3) / 2).
}
Prove: x_1 <= (x_2 * (x_4 / x_2)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (40137)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (32ms) (568)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 9):
Assume { Type: is_sint32(y). (* Invariant *) Have: (-1) <= (y * (49 + y)). }
Prove: 0 <= (y * ((-50) / y)).
Prover Z3 4.8.12 returns Timeout (Qed:0.66ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.66ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 10):
Let x_1 = 50 + x + y.
Let x_2 = 1 + y.
Let x_3 = x + y.
Let x_4 = 50 + y.
Let x_5 = (y * (49 + y)) / 2.
Let x_6 = 50 + x.
Let x_7 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_7.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: x_6 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_4) / 2).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_3 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_3.
  (* Invariant *)
  Have: x_1 <= ((x_2 * x_4) / 2).
  (* Invariant *)
  Have: x_1 <= (x_2 * (x_3 / x_2)).
}
Prove: x_3 < ((x_2 * (51 + y)) / 2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (50ms) (689)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 10):
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-1) <= (y * (49 + y)).
  (* Invariant *)
  Have: 0 <= (y * ((-50) / y)).
}
Prove: (-99) <= (y * (50 + y)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.74ms) (6ms) (41)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 11):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = 50 + x + y.
Let x_4 = 50 + y.
Let x_5 = (x_2 * x_4) / 2.
Let x_6 = (y * (49 + y)) / 2.
Let x_7 = 50 + x.
Let x_8 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= x_8.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_8.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: x_7 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_4) / 2).
  (* Invariant *)
  Have: x < x_6.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_1.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 <= (x_2 * (x_1 / x_2)).
  (* Invariant *)
  Have: x_1 < ((x_2 * (51 + y)) / 2).
}
Prove: x_1 < x_5.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (33947)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 12):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = 50 + y.
Let x_4 = (x_2 * x_3) / 2.
Let x_5 = 50 + x + y.
Let x_6 = (y * (49 + y)) / 2.
Let x_7 = 50 + x.
Let x_8 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= x_8.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_8.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: x_7 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_3) / 2).
  (* Invariant *)
  Have: x < x_6.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_1.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: x_5 <= (x_2 * (x_1 / x_2)).
  (* Invariant *)
  Have: x_1 < ((x_2 * (51 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_4.
}
Prove: x_1 < 0.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (42556)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (55ms) (690)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 15):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = 50 + y.
Let x_4 = (x_2 * x_3) / 2.
Let x_5 = 50 + x + y.
Let x_6 = (y * (49 + y)) / 2.
Let x_7 = 50 + x.
Let x_8 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= x_8.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_8.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: x_7 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_3) / 2).
  (* Invariant *)
  Have: x < x_6.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_1.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: x_5 <= (x_2 * (x_1 / x_2)).
  (* Invariant *)
  Have: x_1 < ((x_2 * (51 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: x_1 < 0.
}
Prove: (x + (2 * y)) < 0.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (43110)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 15):
Let x = y * (49 + y).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= (y * ((-50) / y)).
  (* Invariant *)
  Have: (-99) <= (y * (50 + y)).
  (* Invariant *)
  Have: (-99) <= x.
}
Prove: y <= 50.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 16):
Let x = y * (49 + y).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= (y * ((-50) / y)).
  (* Invariant *)
  Have: (-99) <= (y * (50 + y)).
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: y <= 50.
}
Prove: 0 < y.
Prover Z3 4.8.12 returns Timeout (Qed:0.79ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.79ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0007/04_merged.c, line 20):
Let x_1 = x + y.
Let x_2 = x + (2 * y).
Let x_3 = 1 + y.
Let x_4 = 50 + y.
Let x_5 = (x_3 * x_4) / 2.
Let x_6 = 50 + x + y.
Let x_7 = (y * (49 + y)) / 2.
Let x_8 = 50 + x.
Let x_9 = y_1 * (49 + y_1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_3) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= x_9.
  (* Invariant *)
  Have: 0 <= (y_1 * ((-50) / y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (50 + y_1)).
  (* Invariant *)
  Have: (-99) <= x_9.
  (* Invariant *)
  Have: y_1 <= 50.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: x_8 <= (y * (x / y)).
  (* Invariant *)
  Have: x < ((y * x_4) / 2).
  (* Invariant *)
  Have: x < x_7.
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x_1 <= 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (-49) <= x_1.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: x_6 <= (x_3 * (x_1 / x_3)).
  (* Invariant *)
  Have: x_1 < ((x_3 * (51 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_5.
  (* Invariant *)
  Have: x_1 < 0.
  (* Invariant *)
  Have: x_2 < 0.
  (* Invariant *)
  Have: (-50) <= x_1.
}
Prove: (-50) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34504)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (4ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0007/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/04_0007/04_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/04_0007/04_merged.c:2: Warning: 
  No 'assigns' specification for function 'foo04'.
  Callers assumptions might be imprecise.
