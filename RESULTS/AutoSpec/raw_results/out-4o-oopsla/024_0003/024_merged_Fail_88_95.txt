[kernel] Parsing out/024_0003/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 95 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_established (Qed 0.60ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_2_established (Qed 0.85ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_3_established (Qed 0.76ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_4_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_4_established (Qed 0.96ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_36_preserved (Qed 16ms) (Z3)
[wp] Proved goals:   88 / 95
  Qed:              62
  Alt-Ergo 2.5.4:   26
  Timeout:           7
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 8):
Assume { Type: is_sint32(k) /\ is_sint32(n). }
Prove: k <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.60ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.60ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
}
Prove: j <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.85ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.85ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 10):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Timeout (Qed:0.76ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.76ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 11):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < k_1) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((i <= i_3) ->
      ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) -> (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
}
Prove: i < j.
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 11):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.96ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.96ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 12):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 13):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> ((j_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> ((j_2 <= i_3) ->
      ((i_3 < k_2) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < k_1) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < k_1) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_2) ->
      ((i_2 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) -> ((i_3 < n) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_2) ->
      ((i_2 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) -> ((i_3 < k_1) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: i_2 <= k_1.
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_2) ->
      ((i_2 <= i_4) -> ((i_4 < n) -> ((i_4 <= i_3) -> ((i_3 < n) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_1 <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      ((i_1 <= i_4) -> ((i_4 < n) -> ((i_4 <= i_3) -> ((i_3 < n) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_1 < j.
}
Prove: i < j.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (12ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 14):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (i < j) /\ (j <= i_1) /\ (i_1 < n) /\ (i_2 < i).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (52209)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (11ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 14):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:0.99ms) (10ms) (30874)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.99ms) (5ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 15):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (i < j) /\ (j <= i_1) /\ (i_1 < k) /\ (i_2 < i).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (52211)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (11ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 15):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (31667)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 16):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < k).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 < i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (53072)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (10ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 16):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < k) -> (i_3 <= i_2))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32534)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 17):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_1 < n) /\ (i <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 < i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (53941)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (8ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 18):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_4 < j) /\ (j <= i_1) /\ (i_1 < n) /\ (i <= i_2) /\
      (i_2 < i_4).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < k_2) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_2 <= i_5) -> ((i_5 < k_2) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < i_3) -> ((i_3 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_1 <= i_5) -> ((i_5 < k_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < k_1) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_2) ->
      ((i_2 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_2) -> ((0 <= i_5) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 < i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_6 <= i_2) -> ((i_2 < i_5) -> ((0 <= i_6) ->
      ((i_5 < j) -> (i_6 <= i_5))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (55124)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (12ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 19):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_4 < j) /\ (j <= i_1) /\ (i_1 < n) /\ (i <= i_2) /\
      (i_2 < i_4).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < k_2) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_2 <= i_5) -> ((i_5 < k_2) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < i_3) -> ((i_3 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_1 <= i_5) -> ((i_5 < k_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < k_1) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_2) ->
      ((i_2 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_2) -> ((0 <= i_5) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 < i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_6 <= i_2) -> ((i_2 < i_5) -> ((0 <= i_6) ->
      ((i_5 < j) -> (i_6 <= i_5))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (55124)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (12ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 20):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < k) -> (i_2 <= i_1))))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (32220)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 21):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < k) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < n))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32842)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 22):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 < i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_5 <= i_2) -> ((i_2 < i_4) -> ((0 <= i_5) ->
      ((i_4 < j) -> (i_5 <= i_4))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (54810)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (10ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 22):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < k) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (33158)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 23):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i).
  (* Goal *)
  When: (j <= i_2) /\ (i_2 < k).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> ((j_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> ((j_2 <= i_3) ->
      ((i_3 < k_2) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_1 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_1 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < k_1) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < k_1) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((i_1 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      ((i_1 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) -> ((i_3 < n) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      ((i_1 <= i_4) -> ((i_4 < j_1) -> ((j_1 <= i_3) -> ((i_3 < k_1) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      ((i_1 <= i_4) -> ((i_4 < n) -> ((i_4 <= i_3) -> ((i_3 < n) ->
      (i_5 <= i_3))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_5,i_4,i_3 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((i <= i_4) ->
      ((i_4 < n) -> ((i_4 <= i_3) -> ((i_3 < n) -> (i_5 <= i_3))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i_3 < j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i < i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < k) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < k) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i) -> ((i < i_3) -> ((0 <= i_4) ->
      ((i_3 < j) -> (i_4 <= i_3))))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (54393)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (8ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 23):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (j <= i) /\ (i < k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < k) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < n))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (32882)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 24):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 < i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_5 <= i_2) -> ((i_2 < i_4) -> ((0 <= i_5) ->
      ((i_4 < j) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < j) \/ (k <= i_4).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (55310)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (9ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 24):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j) /\ (j <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < k) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < k) -> (i_2 < n))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33846)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 25):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_1 < n) /\ (i <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> ((j_2 <= i_4) ->
      ((i_4 < k_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k_2) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) -> ((i_4 < k_1) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_3) ->
      ((i_3 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < n) -> ((i_5 <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 < i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_5 <= i_2) -> ((i_2 < i_4) -> ((0 <= i_5) ->
      ((i_4 < j) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < j) \/ (k <= i_4).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (55312)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (11ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 26):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_4 < j) /\ (j <= i_1) /\ (i_1 < k) /\ (i <= i_2) /\
      (i_2 < i_4).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_2) -> ((j_2 <= i_5) ->
      ((i_5 < k_2) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_2) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_2 <= i_5) -> ((i_5 < k_2) -> (i_5 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < k_1) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < i_3) -> ((i_3 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_3 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((j_1 <= i_5) -> ((i_5 < k_1) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < j_1) -> ((j_1 <= i_5) -> ((i_5 < k_1) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_3 <= k_1.
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_3) ->
      ((i_3 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < n) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> (i_5 < n))).
  (* Invariant *)
  Have: forall i_7,i_6,i_5 : Z. ((0 <= i_7) -> ((i_7 < i_2) ->
      ((i_2 <= i_6) -> ((i_6 < n) -> ((i_6 <= i_5) -> ((i_5 < n) ->
      (i_7 <= i_5))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_2) -> ((0 <= i_5) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_2 < i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((0 <= i_6) -> ((i_6 < j) -> ((j <= i_5) ->
      ((i_5 < k) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_6,i_5 : Z. ((i_6 <= i_2) -> ((i_2 < i_5) -> ((0 <= i_6) ->
      ((i_5 < j) -> (i_6 <= i_5))))).
  (* Invariant *)
  Have: forall i_5 : Z. (i_5 < j) \/ (k <= i_5).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (55626)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (11ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 27):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j) -> ((j <= i) ->
      ((i < n) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j) -> ((j <= i) ->
      ((i < k) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (i < n))).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33184)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (7ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 40):
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j_2) -> ((j_2 <= i) ->
      ((i < n) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j_2) -> ((j_2 <= i) ->
      ((i < k_1) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_2) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((j_2 <= i) -> ((i < k_1) -> (i < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= j_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((j <= i_1) -> ((i_1 < j_1) -> ((j_1 <= i) ->
      ((i < n) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((j <= i_1) -> ((i_1 < j_1) -> ((j_1 <= i) ->
      ((i < k) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j_1) -> ((j_1 <= i) ->
      ((i < k) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j) -> ((j <= i) ->
      ((i < n) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_2,i_1,i : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < j_1) -> ((j_1 <= i) -> ((i < n) -> (i_2 <= i))))))).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < j_1) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_1) -> (i < n))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < j_1) -> ((j_1 <= i) ->
      ((i < n) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i : Z. ((j_1 <= i) -> ((i < k) -> (i < n))).
  (* Invariant *)
  Have: forall i_2,i_1,i : Z. ((0 <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < j_1) -> ((j_1 <= i) -> ((i < k) -> (i_2 <= i))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (44651)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (50)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 46):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < i_2) /\ (i_2 <= i_3) /\ (i_3 < n) /\ (i_3 <= i_1) /\
      (i_1 < n).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j_1) -> ((j_1 <= i_4) ->
      ((i_4 < k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_1) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < k_1) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((i_2 <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) -> ((i_4 < n) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < j) -> ((j <= i_4) ->
      ((i_4 < n) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j <= i_4) -> ((i_4 < k) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      ((i_2 <= i_5) -> ((i_5 < j) -> ((j <= i_4) -> ((i_4 < k) ->
      (i_6 <= i_4))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: i_2 <= k.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (45746)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (9ms) (63)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 59):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(k_3) /\ is_sint32(n) /\ is_sint32(1 + k).
  (* Invariant *)
  Have: k_3 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_3.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < k_3) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_3) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_3.
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < k_2) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_2.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((i <= i_3) ->
      ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) -> (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: (2 + k) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 61):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(k_3) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_3 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_3.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < k_3) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_3) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_3.
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < k_2) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_2.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((i <= i_3) ->
      ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) -> (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (2 + k) <= n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (51791)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (9ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 64):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(k_3) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_3 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_3.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < k_3) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_3) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_3.
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < k_2) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_2.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((i <= i_3) ->
      ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) -> (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (2 + k) <= n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (51893)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (11ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 66):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> ((j_2 <= i_2) ->
      ((i_2 < k_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < j_1) -> ((j_1 <= i_2) -> ((i_2 < k_1) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      ((i_1 <= i_3) -> ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) ->
      (i_4 <= i_2))))))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((i <= i_3) ->
      ((i_3 < n) -> ((i_3 <= i_2) -> ((i_2 < n) -> (i_4 <= i_2))))))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (50542)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (9ms) (76)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0003/024_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0003/024_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0003/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0003/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0003/024_merged.c, line 70):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0003/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
