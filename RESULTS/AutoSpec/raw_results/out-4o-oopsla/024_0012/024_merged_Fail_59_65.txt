[kernel] Parsing out/024_0012/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 65 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_established (Qed 0.56ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_6_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] Proved goals:   59 / 65
  Qed:              47
  Alt-Ergo 2.5.4:   12 (0.70ms-5ms-7ms)
  Timeout:           6
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 8):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n).
  (* Goal *)
  When: (j <= i_2) /\ (i_2 < k).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 8):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (j <= i) /\ (i < k).
}
Prove: i < n.
Prover Z3 4.8.12 returns Timeout (Qed:0.56ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.56ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (i_1 < n))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 10):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < j) \/ (k <= i_3).
}
Prove: i <= j.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (7ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 11):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < j) \/ (k <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 <= j))).
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39160)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 12):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < j) \/ (k <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 < j))).
}
Prove: i <= j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39812)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 13):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < j) \/ (k <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 <= j))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 < j))).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 13):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 14):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
  (* Invariant *)
  Have: 0 <= k.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 26):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (38359)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 28):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: i <= k.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (38876)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (4ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 29):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (39582)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 30):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (40332)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (6ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 31):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
}
Prove: i <= k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (40318)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 32):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (40332)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 33):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
}
Prove: i <= k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (40318)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 46):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (38361)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 49):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (38463)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (0.70ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0012/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
