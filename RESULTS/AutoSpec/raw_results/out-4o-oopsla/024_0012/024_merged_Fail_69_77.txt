[kernel] Parsing out/024_0012/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 77 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_2_established (Qed 0.83ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_3_preserved (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_3_established (Qed 0.98ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_27_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   69 / 77
  Qed:              59
  Alt-Ergo 2.5.4:   10 (3ms-11ms)
  Timeout:           8
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 8):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
}
Prove: k <= j.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 8):
Assume { Type: is_sint32(k) /\ is_sint32(n). }
Prove: k <= n.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
}
Prove: j <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.83ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.83ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 10):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 10):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Timeout (Qed:0.98ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 11):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 12):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: j <= k.
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39353)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (9ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 12):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 13):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i).
  (* Goal *)
  When: (j <= i_2) /\ (i_2 < k).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i < j.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (39663)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 13):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (j <= i) /\ (i < k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30596)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (7ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 14):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (i_1 < n))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (31182)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 15):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 < j.
}
Prove: i <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (39750)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (11ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 16):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 <= j))).
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (40374)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 17):
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (i_3 < j))).
}
Prove: i <= j.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (41026)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (10ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 18):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31458)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 50):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + k).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: (2 + k) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 52):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (2 + k) <= n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (39813)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 55):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_2 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k_2) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_2.
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (2 + k) <= n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39915)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (3ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0012/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0012/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0012/024_merged.c, line 61):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0012/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
