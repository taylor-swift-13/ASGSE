[kernel] Parsing out/034_0003/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 105 goals scheduled
[wp] [Timeout] typed_foo034_loop_invariant_19_established (Qed 0.55ms) (Z3)
[wp] Proved goals:  104 / 105
  Qed:              93
  Alt-Ergo 2.5.4:    9 (4ms-14ms-31ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 11):
Let x = 1 + i.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = i % 2.
Let x_4 = 1 + x_2.
Let x_5 = x / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_1 <= (n / 2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_2 = i) <-> (x_3 = 0).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (((i - 1) / 2) = x_1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_1) = y. }
  Else { Have: x_1 = y. }
}
Prove: (x_5 = y) \/ (x_5 = (1 + y)).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (40789)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (31ms) (513)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 12):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_2 <= (n / 2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_3 = i) <-> (x_4 = 0).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x_2)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: (x_1 = y) \/ (x_1 = (1 + y)).
}
Prove: y <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (35135)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 17):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Let x_6 = 2 * y.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_2 <= (n / 2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_3 = i) <-> (x_4 = 0).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x_2)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: (x_1 = y) \/ (x_1 = (1 + y)).
  (* Invariant *)
  Have: y <= x_1.
}
Prove: (x_6 = i) \/ (x = x_6).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (38173)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (31ms) (515)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 21):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + i.
Let x_3 = x_2 / 2.
Let x_4 = i % 2.
Let x_5 = 1 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x <= (n / 2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_1 = i) <-> (x_4 = 0).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_1 = i)).
  (* Invariant *)
  Have: x_1 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (x_3 = (1 + x)) \/ (x_3 = x).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_2 = x_1).
}
Prove: x_1 = i.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (33165)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 23):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * y.
Let x_3 = x / 2.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = i_1 % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_4 <= (n / 2).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (x_5 = i_1) <-> (x_6 = 0).
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i_1 - 1) / 2) = x_4)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (1 + x_4) = y. }
  Else { Have: x_4 = y. }
  (* Invariant *)
  Have: (x_3 = y) \/ (x_3 = (1 + y)).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_2 = i_1) \/ (x = x_2).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_2 = i_1)).
}
Prove: (i / 2) <= y.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (39998)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 25):
Let x = i / 2.
Let x_1 = 1 + x.
Let x_2 = 2 * x.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i.
Let x_5 = x_4 / 2.
Let x_6 = i % 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x <= (n / 2).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_2 = i) <-> (x_6 = 0).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (x_5 = x_1) \/ (x_5 = (2 + x)).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: (x_3 = i) \/ ((2 + x_2) = i).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
}
Prove: (-3) <= i.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34699)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 29):
Let x = i / 2.
Let x_1 = 1 + x.
Let x_2 = 2 * x.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i.
Let x_5 = x_4 / 2.
Let x_6 = i % 2.
Let x_7 = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_2 = i) <-> (x_6 = 0).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (x_5 = x_1) \/ (x_5 = (2 + x)).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: (x_3 = i) \/ ((2 + x_2) = i).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-3) <= i.
}
Prove: x < x_7.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38345)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (20ms) (368)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 29):
Assume { Type: is_sint32(n). }
Prove: (-1) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.55ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.55ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 33):
Let x = n / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 % 2.
Let x_3 = 2 * y.
Let x_4 = x_1 / 2.
Let x_5 = i / 2.
Let x_6 = 2 * x_5.
Let x_7 = i % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_6 = i) \/ (x_8 = i).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_6 = i) <-> (x_7 = 0).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_7 = 1) -> (((i - 1) / 2) = x_5)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: x_6 <= i.
  (* Then *)
  Have: i < n.
  If x_2 = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: (x_4 = y) \/ (x_4 = (1 + y)).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (x_3 = i) \/ (x_1 = x_3).
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= x.
}
Prove: (x_2 = 0) <-> (x_1 = x_3).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (41370)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (9ms) (76)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 35):
Let x = 2 * y.
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Residual *)
  When: (x_1 % 2) != 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= (n / 2).
  (* Then *)
  Have: x < n.
  (* Invariant *)
  Have: (x_2 = y) \/ (x_2 = (1 + y)).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= y)))).
}
Prove: x_2 = y.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (35273)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (13ms) (196)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 39):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = x % 2.
Let x_4 = n / 2.
Let x_5 = i / 2.
Let x_6 = 2 * x_5.
Let x_7 = i % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_6 = i) \/ (x_8 = i).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_6 = i) <-> (x_7 = 0).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_7 = 1) -> (((i - 1) / 2) = x_5)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: x_6 <= i.
  (* Then *)
  Have: i < n.
  If x_3 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_5)). }
  Else { Have: x_1 = x_5. }
  (* Invariant *)
  Have: (x_2 = i) \/ (x = x_2).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_2 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: (x = x_2) <-> (x_3 = 0).
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (37749)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 51):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 55):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = i_1 / 2.
Let x_5 = n / 2.
Let x_6 = 2 * x_4.
Let x_7 = i_1 % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (x_6 = i_1) \/ (x_8 = i_1).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (x_6 = i_1) <-> (x_7 = 0).
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: ((x_7 = 1) -> (((i_1 - 1) / 2) = x_4)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = i_1)).
  (* Invariant *)
  Have: x_6 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_4)). }
  Else { Have: x_2 = x_4. }
  (* Invariant *)
  Have: (x_3 = i_1) \/ (x = x_3).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_2)))).
  (* Invariant *)
  Have: (-2) <= i_1.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (x = x_3) <-> (x_1 = 0).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_2 = x_4)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x = x_3)).
}
Prove: (i / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (39574)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0003/034_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0003/034_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0003/034_merged.c, line 63):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0003/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
