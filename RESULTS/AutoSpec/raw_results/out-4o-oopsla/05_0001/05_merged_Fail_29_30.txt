[kernel] Parsing out/05_0001/05_merged.c (with preprocessing)
[kernel:typing:no-proto] out/05_0001/05_merged.c:32: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/05_0001/05_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo05_loop_invariant_4_preserved (Qed 13ms) (Z3)
[wp] Proved goals:   29 / 30
  Qed:              22
  Alt-Ergo 2.5.4:    5 (4ms-5ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo05
------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 14):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = j - 1 - j_1.
Let x_3 = x_1 * x_2.
Let x_4 = x_3 / 2.
Let x_5 = 2 * j_1.
Let x_6 = j + x_4.
Let x_7 = (x_1 * (1 + j - j_1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j_2) /\ is_sint32(j_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (x_4 = j_1) \/ (x_6 = (1 + x_5)).
  (* Invariant *)
  Have: ((if (flag_0 = 0) then 0 else x_2) + x_4) = j_1.
  (* Invariant *)
  Have: ((flag_0 * x_2) + x_4) = j_1.
  (* Invariant *)
  Have: x_5 < x_6.
  (* Invariant *)
  Have: x_4 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (1 + j) = j_2. }
  Else { Have: j = j_2. }
}
Prove: (x_7 = j_2) \/ ((j + x_7) = (j_2 + j_1)).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (39445)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 15):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = (x_1 * (1 + j - j_1)) / 2.
Let x_3 = j - 1 - j_1.
Let x_4 = x_1 * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 2 * j_1.
Let x_7 = j + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j_2) /\ is_sint32(j_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (x_5 = j_1) \/ (x_7 = (1 + x_6)).
  (* Invariant *)
  Have: ((if (flag_0 = 0) then 0 else x_3) + x_5) = j_1.
  (* Invariant *)
  Have: ((flag_0 * x_3) + x_5) = j_1.
  (* Invariant *)
  Have: x_6 < x_7.
  (* Invariant *)
  Have: x_5 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (1 + j) = j_2. }
  Else { Have: j = j_2. }
  (* Invariant *)
  Have: (x_2 = j_2) \/ ((j + x_2) = (j_2 + j_1)).
}
Prove: ((if (flag_0 = 0) then 0 else x_1) + x_2) = j_2.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (57102)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 16):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = (x_1 * (1 + j - j_1)) / 2.
Let x_3 = j - 1 - j_1.
Let x_4 = x_1 * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 2 * j_1.
Let x_7 = j + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_5) /\
      is_sint32(j + x_5 - j_1) /\ is_sint32(j + x_2 - j_1) /\
      is_sint32(j + x_2 - 1 - j_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_7 = (1 + x_6).
  (* Invariant *)
  Have: ((flag_0 * x_3) + x_5) = j_1.
  (* Invariant *)
  Have: x_6 < x_7.
  (* Invariant *)
  Have: x_5 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = (1 + j_1).
}
Prove: x_2 = ((flag_0 * x_1) + x_5).
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 18):
Let x_1 = 1 + x.
Let x_2 = flag_0 * x_1.
Let x_3 = x + x_2.
Let x_4 = (x_1 * (2 + x)) / 2.
Let x_5 = (if (flag_0 = 0) then 0 else x_1) + x_4.
Let x_6 = flag_0 * x.
Let x_7 = x_6 + (if (flag_0 = 0) then 0 else x_1) + x_4.
Let x_8 = (x * x_1) / 2.
Let x_9 = 1 + x + x_2 + x_8.
Let x_10 = -x_2.
Let x_11 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\
      is_sint32((if (flag_0 = 0) then 0 else x_1) + x_4 - x_2) /\
      is_sint32((if (flag_0 = 0) then 0 else x_1) + x_4 - 1 - x - x_2) /\
      is_sint32(x_6 + (if (flag_0 = 0) then 0 else x_1) + x_4 - 1 - x - x_2).
  (* Invariant *)
  Have: (x_9 = x_7) \/ ((1 + (2 * x) + x_2 + x_8) = x_7).
  (* Invariant *)
  Have: (1 + x + (if (flag_0 = 0) then 0 else x) + x_2 + x_8) = x_7.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_9 = x_5.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_3 < x_7.
  (* Invariant *)
  Have: x_3 < x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: x_2 = (1 + x_6). }
}
Prove: x_2 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (36170)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (147)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 19):
Let x_1 = 1 + x.
Let x_2 = flag_0 * x_1.
Let x_3 = flag_0 * x.
Let x_4 = (x_1 * (2 + x)) / 2.
Let x_5 = x_3 + x_4.
Let x_6 = (x * x_1) / 2.
Let x_7 = -x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x + x_4) /\ is_sint32(x_4 - x_2) /\
      is_sint32(1 + x + x_4) /\ is_sint32(x_3 + x_4 - x_2) /\
      is_sint32(1 + x + x_4 - x_2).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x + x_2 + x_6) = x_5.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 = (x_2 + x_6).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = (1 + x_3).
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: x_2 = x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (34027)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 21):
Let x_1 = 1 + x.
Let x_2 = x_1 * (2 + x).
Let x_3 = x_2 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_3 - 1) /\
      is_sint32(x + x_3) /\ is_sint32(x_3 - 1 - x) /\ is_sint32(1 + x + x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_3 = (1 + x + ((x * x_1) / 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (flag_0 * x) = x.
  (* Invariant *)
  Have: (flag_0 * x_1) = x_1.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (32536)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 25):
Let x_1 = 1 + x.
Let x_2 = flag_0 * x_1.
Let x_3 = (x_1 * (2 + x)) / 2.
Let x_4 = flag_0 * x.
Let x_5 = x_4 + x_3.
Let x_6 = (x * x_1) / 2.
Let x_7 = 1 + x + x_6.
Let x_8 = x_2 + x_3.
Let x_9 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_8) /\
      is_sint32(x_3 - 1 - x) /\ is_sint32(x_4 + x_3 - 1 - x).
  (* Invariant *)
  Have: (x_7 = x_5) \/ ((1 + (2 * x) + x_6) = x_5).
  (* Invariant *)
  Have: (1 + x + (if (flag_0 = 0) then 0 else x) + x_6) = x_5.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (x_2 = (1 + x_4)) /\ (x_8 = (1 + j)). }
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = x_1).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_2 = 0) else (x_2 = x_1).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 0 <= x_8.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (34327)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (59)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/05_0001/05_merged.c, line 26):
Let x_1 = 1 + x.
Let x_2 = x_1 * (2 + x).
Let x_3 = x_2 / 2.
Let x_4 = x + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_3 - 1) /\
      is_sint32(x_4) /\ is_sint32(x_3 - 1 - x) /\ is_sint32(1 + x + x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_3 = (1 + x + ((x * x_1) / 2)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (flag_0 * x) = x.
  (* Invariant *)
  Have: (flag_0 * x_1) = x_1.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (-1) <= x_4.
}
Prove: (-1) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (32758)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (4ms) (50)

------------------------------------------------------------

Goal Establishment of Invariant (file out/05_0001/05_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Loop assigns (file out/05_0001/05_merged.c, line 27) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/05_0001/05_merged.c, line 27) (2/2):
Call Result at line 32
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/05_0001/05_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/05_0001/05_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo05'.
  Callers assumptions might be imprecise.
