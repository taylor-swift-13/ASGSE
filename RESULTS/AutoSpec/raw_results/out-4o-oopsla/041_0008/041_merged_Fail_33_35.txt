[kernel] Parsing out/041_0008/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0008/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0008/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0008/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 35 goals scheduled
[wp] [Timeout] typed_foo041_loop_invariant_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo041_loop_invariant_9_preserved (Qed 23ms) (Z3)
[wp] Proved goals:   33 / 35
  Qed:              26
  Alt-Ergo 2.5.4:    7
  Timeout:           2
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 19):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + n.
Let x_4 = n * x_3.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(1 + i + x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: (((i_1 * (1 + i_1)) / 2) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: ((0 < i) -> ((x_2 = 0) \/ (2 <= x_1))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: ((i * (i - 1)) / 2) <= x_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: (((i_2 * (1 + i_2)) / 2) = x_2) /\ (i_2 <= i) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((0 < i) -> (2 <= x_1)).
  (* Invariant *)
  Have: ((i = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= i.
}
Prove: (i + x_2) < x_5.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 19):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: (-1) <= (n * (1 + n)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (29620)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (14)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 20):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i + x_2.
Let x_4 = 1 + n.
Let x_5 = n * x_4.
Let x_6 = x_5 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(1 + i + x_2).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (((i_1 * (1 + i_1)) / 2) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: ((0 < i) -> ((x_2 = 0) \/ (2 <= x_1))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: ((i * (i - 1)) / 2) <= x_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (((i_3 * (1 + i_3)) / 2) <= x_2))).
  (* Invariant *)
  Have: (((i_2 * (1 + i_2)) / 2) = x_2) /\ (i_2 <= i) /\ (0 <= i_2).
  (* Invariant *)
  Have: ((0 < i) -> (2 <= x_1)).
  (* Invariant *)
  Have: ((i = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: x_3 < x_6.
}
Prove: (x_3 = (-1)) \/ (0 <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (35635)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (4ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 21):
Let x = n * (1 + n).
Let x_1 = x / 2.
Let x_2 = i * (1 + i).
Let x_3 = x_2 / 2.
Let x_4 = 2 + x_3.
Let x_5 = -x_3.
Let x_6 = j - x_3.
Let x_7 = j - 1 - x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x_3) /\ is_sint32(x_6) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (((i_1 * (1 + i_1)) / 2) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: ((x_4 <= j) -> ((x_3 = 0) \/ (2 <= x_2))).
  (* Invariant *)
  Have: j <= (1 + n + x_3).
  (* Invariant *)
  Have: j <= (1 + (2 * x_3)).
  (* Invariant *)
  Have: j <= (2 + n + x_3).
  (* Invariant *)
  Have: (((j - 2 - x_3) * x_7) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((i_2 + x_3) < j) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2 + x_3) <= j) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
  (* Invariant *)
  Have: (0 <= i) /\ ((i + x_3) < j).
  (* Invariant *)
  Have: ((x_6 * x_7) / 2) = x_3.
  (* Invariant *)
  Have: ((x_4 <= j) -> (2 <= x_2)).
  (* Invariant *)
  Have: (((1 + x_3) = j) -> (x_3 = 0)).
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: x_3 < j.
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: (j = 0) \/ (0 < j).
}
Prove: j <= (n + x_3).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (39494)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (32ms) (754)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 25):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 + x_2.
Let x_4 = 1 + n.
Let x_5 = n * x_4.
Let x_6 = x_5 / 2.
Let x_7 = 1 + i_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_7).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (((i_2 * (1 + i_2)) / 2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: ((0 < i_1) -> ((x_2 = 0) \/ (2 <= x_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: ((i_1 * (i_1 - 1)) / 2) <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      (((i_4 * (1 + i_4)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (((i_4 * (1 + i_4)) / 2) <= x_2))).
  (* Invariant *)
  Have: (((i_3 * (1 + i_3)) / 2) = x_2) /\ (i_3 <= i_1) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((0 < i_1) -> (2 <= x_1)).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_3 < x_6.
  (* Invariant *)
  Have: (x_3 = (-1)) \/ (0 <= x_3).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: (-1) <= i_1.
}
Prove: ((i * (1 + i)) / 2) <= x_7.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (139ms) (2498)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 26):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Let x_4 = i_1 + x_2.
Let x_5 = 1 + n.
Let x_6 = n * x_5.
Let x_7 = x_6 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_6.
  (* Invariant *)
  Have: (((i_2 * (1 + i_2)) / 2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: x_2 <= x_7.
  (* Invariant *)
  Have: ((0 < i_1) -> ((x_2 = 0) \/ (2 <= x_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: ((i_1 * (i_1 - 1)) / 2) <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      (((i_4 * (1 + i_4)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (((i_4 * (1 + i_4)) / 2) <= x_2))).
  (* Invariant *)
  Have: (((i_3 * (1 + i_3)) / 2) = x_2) /\ (i_3 <= i_1) /\ (0 <= i_3).
  (* Invariant *)
  Have: ((0 < i_1) -> (2 <= x_1)).
  (* Invariant *)
  Have: ((i_1 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_4 < x_7.
  (* Invariant *)
  Have: (x_4 = (-1)) \/ (0 <= x_4).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      (((i_4 * (1 + i_4)) / 2) <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (39736)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (32ms) (914)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 27):
Let x = i * (1 + i).
Let x_1 = x / 2.
Let x_2 = n * (1 + n).
Let x_3 = x_2 / 2.
Let x_4 = 2 + x_1.
Let x_5 = -x_1.
Let x_6 = j - x_1.
Let x_7 = j - 1 - x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: (((i_1 * (1 + i_1)) / 2) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((x_4 <= j) -> ((x_1 = 0) \/ (2 <= x))).
  (* Invariant *)
  Have: j <= (1 + n + x_1).
  (* Invariant *)
  Have: j <= (1 + (2 * x_1)).
  (* Invariant *)
  Have: j <= (2 + n + x_1).
  (* Invariant *)
  Have: (((j - 2 - x_1) * x_7) / 2) <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((i_2 + x_1) < j) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2 + x_1) <= j) ->
      (((i_2 * (1 + i_2)) / 2) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ ((i + x_1) < j).
  (* Invariant *)
  Have: ((x_6 * x_7) / 2) = x_1.
  (* Invariant *)
  Have: ((x_4 <= j) -> (2 <= x)).
  (* Invariant *)
  Have: (((1 + x_1) = j) -> (x_1 = 0)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 < j.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (j = 0) \/ (0 < j).
  (* Invariant *)
  Have: j <= (n + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((i_2 + x_1) <= j) ->
      (((i_2 * (1 + i_2)) / 2) <= j))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((i_2 + x_1) < j) ->
      (((i_2 * (1 + i_2)) / 2) <= j))).
}
Prove: exists i_2 : Z. (((i_2 * (1 + i_2)) / 2) = j) /\ (0 <= i_2) /\
    ((i_2 + x_1) <= j).
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 28):
Let x = i * (1 + i).
Let x_1 = x / 2.
Let x_2 = i_1 * (1 + i_1).
Let x_3 = x_2 / 2.
Let x_4 = n * (1 + n).
Let x_5 = x_4 / 2.
Let x_6 = 2 + x_1.
Let x_7 = -x_1.
Let x_8 = x_3 - x_1.
Let x_9 = x_3 - 1 - x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_8) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: (((i_2 * (1 + i_2)) / 2) = 0) /\ (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: ((x_6 <= x_3) -> ((x_1 = 0) \/ (2 <= x))).
  (* Invariant *)
  Have: x_3 <= (1 + n + x_1).
  (* Invariant *)
  Have: x_3 <= (1 + (2 * x_1)).
  (* Invariant *)
  Have: x_3 <= (2 + n + x_1).
  (* Invariant *)
  Have: (((x_3 - 2 - x_1) * x_9) / 2) <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i_3 + x_1) < x_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3 + x_1) <= x_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ ((i + x_1) < x_3).
  (* Invariant *)
  Have: ((x_8 * x_9) / 2) = x_1.
  (* Invariant *)
  Have: ((x_6 <= x_3) -> (2 <= x)).
  (* Invariant *)
  Have: ((x_3 = (1 + x_1)) -> (x_1 = 0)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 < x_3.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x_3 = 0) \/ (2 <= x_2).
  (* Invariant *)
  Have: x_3 <= (n + x_1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i_3 + x_1) <= x_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i_3 + x_1) < x_3) ->
      (((i_3 * (1 + i_3)) / 2) <= x_3))).
  (* Invariant *)
  Have: (0 <= i_1) /\ ((i_1 + x_1) <= x_3).
}
Prove: ((x_8 * (1 + x_3 - x_1)) / 2) = x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (65ms) (1556)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 30):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = (i * x) / 2.
Let x_5 = 1 + n.
Let x_6 = n * x_5.
Let x_7 = x_6 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_3 - 1 - i).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= x_6.
  (* Invariant *)
  Have: (((i_1 * (1 + i_1)) / 2) = 0) /\ (i_1 <= 0) /\ (0 <= i_1).
  (* Invariant *)
  Have: x_3 <= (1 + i + x_7).
  (* Invariant *)
  Have: ((0 < i) -> ((x_3 = x) \/ (x_1 <= x_3))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (2 * i) < x_3.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (i + ((i * (i - 1)) / 2)) < x_3.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      ((i + ((i_4 * (1 + i_4)) / 2)) < x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      ((i + ((i_4 * (1 + i_4)) / 2)) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + i + ((i_2 * (1 + i_2)) / 2))) /\ (i_2 <= i) /\
      (0 <= i_2).
  (* Invariant *)
  Have: x_3 = (1 + i + x_4).
  (* Invariant *)
  Have: ((0 < i) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: ((i = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: i < x_3.
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: (x_3 = 0) \/ (2 <= x_2).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      (((i_4 * (1 + i_4)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((i_4 * (1 + i_4)) / 2) <= x_3))).
  (* Invariant *)
  Have: (x_3 = ((i_3 * (1 + i_3)) / 2)) /\ (0 <= i_3) /\ (i_3 <= x).
}
Prove: 2 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (42434)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (59)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0008/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0008/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/041_0008/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0008/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0008/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
