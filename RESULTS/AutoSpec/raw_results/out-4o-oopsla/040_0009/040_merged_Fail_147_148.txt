[kernel] Parsing out/040_0009/040_merged.c (with preprocessing)
[kernel:typing:no-proto] out/040_0009/040_merged.c:53: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/040_0009/040_merged.c:106: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/040_0009/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/040_0009/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 148 goals scheduled
[wp] [Timeout] typed_foo040_loop_invariant_48_preserved (Qed 23ms) (Z3)
[wp] Proved goals:  147 / 148
  Qed:             119
  Alt-Ergo 2.5.4:   14
  Z3 4.8.12:        14
  Timeout:           1
------------------------------------------------------------
  Function foo040
------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 18):
Let x = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(j_3) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j_3).
  (* Invariant *)
  Have: (0 < j_3) /\ (0 <= i).
  (* Invariant *)
  Have: i < j_3.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j_3 % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  If (x % 2) = 0
  Then { Have: j_3 = j_1. Have: (2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: (1 + j_2) = j. }
  (* Invariant *)
  Have: (i = (-2)) \/ (2 <= j).
}
Prove: (0 < j) /\ ((-2) <= i).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34630)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 19):
Let x = 2 + i.
Let x_1 = j % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(j_3) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j_3).
  (* Invariant *)
  Have: (0 < j_3) /\ (0 <= i).
  (* Invariant *)
  Have: i < j_3.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j_3 % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_2 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_2 = 0) \/ (x_2 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  If (x % 2) = 0
  Then { Have: j_3 = j_1. Have: (2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: (1 + j_2) = j. }
  (* Invariant *)
  Have: (i = (-2)) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ ((-2) <= i).
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (36800)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (16ms) (251)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 20):
Let x = 1 + j.
Let x_1 = x % 2.
Let x_2 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Residual *)
  When: (x_2 % 2) != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_3 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_3 = 0) \/ (x_3 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_2 <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (36308)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (224)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 21):
Let x = 2 + i.
Let x_1 = 1 + j.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 1.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_3 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_3 = 0) \/ (x_3 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: x <= j.
}
Prove: x_2 = 1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (37583)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (16ms) (219)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 22):
Let x = 1 + j.
Let x_1 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (x_1 % 2) = 1.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_2 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_2 = 0) \/ (x_2 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (36576)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (9ms) (212)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 23):
Let x = 2 + i.
Let x_1 = x % 2.
Let x_2 = 1 + j.
Let x_3 = x_2 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Residual *)
  When: x_1 != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_4 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_4 = 0) \/ (x_4 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = 1)).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = 0)).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (36083)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (16ms) (251)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 25):
Let x = 2 + j.
Let x_1 = x % 2.
Let x_2 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: (x_2 % 2) = 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_3 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_3 = 0) \/ (x_3 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_1 = 1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (30ms) (69891)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (12ms) (212)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 31):
Let x = 2 + j.
Let x_1 = 2 + i.
Let x_2 = (2 + i + (2 * i_1)) % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Goal *)
  When: 0 <= i_1.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_4 : Z. let x_3 = (i + (2 * i_4)) % 2 in ((0 <= i_4) ->
      ((x_3 = 0) \/ (x_3 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (38320)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (18ms) (289)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 36):
Let x = 2 + j.
Let x_1 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_2 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_2 = 0) \/ (x_2 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= i.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_2 = (2 + i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_2 = 0) \/ (x_2 = 1))).
}
Prove: exists i_3 : Z. 0 <= i_3.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (26915)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 36):
Assume { Type: is_sint32(flag_0). (* Pre-condition *) Have: 0 < flag_0. }
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:0.96ms) (10ms) (23753)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 44):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 65):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = x_2 / x_1.
Let x_4 = j + x_2 - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_5 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_5 = 0) \/ (x_5 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 <= x_3).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_1 * x_3) = x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_3) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_3) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_3) ->
      ((i_11 * x_1) = x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_3) ->
      ((j + (i_11 * x_1)) = (i + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((i_9 * x_1) = x_2) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_10.
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: (x_4 % x_1) = 0.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (540ms) (1827876)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 65):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x = 0) \/ (x = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
}
Prove: (0 % (j - i)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (32555)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (9ms) (116)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 66):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = j + x_2 - i.
Let x_4 = x_2 / x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_3) /\ is_sint32(1 + x_4).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_5 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_5 = 0) \/ (x_5 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 <= x_4).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: x_4 <= x_2.
  (* Invariant *)
  Have: (x_1 * x_4) = x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_4) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_4) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_4) ->
      ((i_11 * x_1) = x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_4) ->
      ((j + (i_11 * x_1)) = (i + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((i_9 * x_1) = x_2) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_10.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_3 % x_1) = 0.
}
Prove: (i <= (j + x_2)) /\ ((-1) <= x_4).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (45594)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (13ms) (507)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 67):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = x_2 / x_1.
Let x_4 = j + x_2 - i.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_6 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 <= x_3).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = 0)).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (x_1 * x_3) = x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_3) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_3) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_3) ->
      ((i_11 * x_1) = x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_3) ->
      ((j + (i_11 * x_1)) = (i + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((i_9 * x_1) = x_2) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_10.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_4 % x_1) = 0.
  (* Invariant *)
  Have: (i <= (j + x_2)) /\ ((-1) <= x_3).
}
Prove: (x_4 / x_1) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (30ms) (119841)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 67):
Let x = j - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (0 % x) = 0.
}
Prove: (0 / x) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (7ms) (131)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 69):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = j + x_2.
Let x_4 = j + x_2 - i.
Let x_5 = x_4 / x_1.
Let x_6 = x_5 - 1.
Let x_7 = 1 + (x_2 / x_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(x_5) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_8 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_8 = 0) \/ (x_8 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 < x_5).
  (* Invariant *)
  Have: x_5 = x_7.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_2 = 0)).
  (* Invariant *)
  Have: x_5 <= (1 + x_2).
  (* Invariant *)
  Have: x_5 <= x_7.
  (* Invariant *)
  Have: (x_1 * x_6) = x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> (((2 + i_11) <= x_5) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_5) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_5) ->
      ((i_11 * x_1) = x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> (((2 + i_11) <= x_5) ->
      ((j + (i_11 * x_1)) = (i + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((i_9 * x_1) = x_2) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_10.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_4 % x_1) = 0.
  (* Invariant *)
  Have: i <= x_3.
}
Prove: (i + x_5) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (41049)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (5ms) (242)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 71):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = j + x_2 - i.
Let x_4 = x_3 / x_1.
Let x_5 = j + x_2.
Let x_6 = x_4 - 1.
Let x_7 = 1 + (x_2 / x_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_8 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_8 = 0) \/ (x_8 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 < x_4).
  (* Invariant *)
  Have: x_4 = x_7.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_2 = 0)).
  (* Invariant *)
  Have: x_4 <= (1 + x_2).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: (x_1 * x_6) = x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> (((2 + i_11) <= x_4) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_4) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < x_4) ->
      ((i_11 * x_1) = x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> (((2 + i_11) <= x_4) ->
      ((j + (i_11 * x_1)) = (i + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((i_9 * x_1) = x_2) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i_10.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_3 % x_1) = 0.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (i + x_4) <= x_5.
}
Prove: (i + (x_1 * x_4)) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (12239)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (10ms) (251)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 74):
Let x = 1 + a.
Let x_1 = j - i_1.
Let x_2 = x * x_1.
Let x_3 = j + (a * x_1).
Let x_4 = i_1 + x_2.
Let x_5 = i_1 + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_5).
  (* Goal *)
  When: (i <= a) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i_1 = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i_1).
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_12 : Z. let x_6 = (i_1 + (2 * i_12)) % 2 in ((0 <= i_12) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_5 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x_1) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) = x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      (((2 * j) + (i_12 * x_1)) = ((2 * i_1) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x_1)) = x_4) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x_1) = x.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
}
Prove: (i * x_1) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (47593)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 77):
Let x = j - i_1.
Let x_1 = 1 + a.
Let x_2 = x_1 * x.
Let x_3 = j + (a * x).
Let x_4 = i_1 + x_2.
Let x_5 = i_1 + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_5).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i_1 = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i_1).
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_12 : Z. let x_6 = (i_1 + (2 * i_12)) % 2 in ((0 <= i_12) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: (x_5 % x) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      ((j + (i_12 * x)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x)) = x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      (((2 * j) + (i_12 * x)) = ((2 * i_1) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x)) = x_4) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x) = x_1.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((i_12 * x) <= x_2))).
}
Prove: (i * x) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (650ms) (2135390)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 78):
Let x = 1 + a.
Let x_1 = j - i.
Let x_2 = x * x_1.
Let x_3 = j + (a * x_1).
Let x_4 = i + x_2.
Let x_5 = i + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_12 : Z. let x_6 = (i + (2 * i_12)) % 2 in ((0 <= i_12) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_5 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x_1) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) = x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      (((2 * j) + (i_12 * x_1)) = ((2 * i) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x_1)) = x_4) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x_1) = x.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((i_12 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 <= x) ->
      ((i_12 * x_1) <= x_2))).
}
Prove: x_2 = (i_1 * x_1).
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 79):
Let x = 1 + a.
Let x_1 = j - i_1.
Let x_2 = x * x_1.
Let x_3 = j + (a * x_1).
Let x_4 = i_1 + x_2.
Let x_5 = i_1 + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_5).
  (* Goal *)
  When: (i <= a) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i_1 = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i_1).
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_12 : Z. let x_6 = (i_1 + (2 * i_12)) % 2 in ((0 <= i_12) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x_1) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_5 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x_1) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) = x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      (((2 * j) + (i_12 * x_1)) = ((2 * i_1) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x_1)) = x_4) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x_1) = x.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((i_12 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 <= x) ->
      ((i_12 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 <= x) ->
      (x_2 = (i_12 * x_1)))).
}
Prove: (j + (i * x_1)) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (30ms) (50782)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 80):
Let x = 1 + a.
Let x_1 = j - i.
Let x_2 = x * x_1.
Let x_3 = j + (a * x_1).
Let x_4 = i + x_2.
Let x_5 = i + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_6 = (i + (2 * i_11)) % 2 in ((0 <= i_11) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: ((i_4 * x_1) = 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: 0 <= i_6.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_5 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x_1) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < a) ->
      ((j + (i_11 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_11 : Z. ((i_11 <= a) -> ((0 <= i_11) ->
      ((j + (i_11 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_11 : Z. ((i_11 <= a) -> ((0 <= i_11) ->
      ((j + (i_11 * x_1)) = x_4))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < a) ->
      (((2 * j) + (i_11 * x_1)) = ((2 * i) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: ((j + (i_8 * x_1)) = x_4) /\ (0 <= i_8).
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_10.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x_1) = x.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: forall i_11 : Z. ((i_11 <= a) -> ((0 <= i_11) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x) ->
      ((i_11 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x) ->
      (x_2 = (i_11 * x_1)))).
}
Prove: exists i_11 : Z. 0 <= i_11.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (36222)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 80):
Let x = j - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = (i + (2 * i_3)) % 2 in ((0 <= i_3) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
}
Prove: exists i_3 : Z. 0 <= i_3.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (25762)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 81):
Let x = 1 + a.
Let x_1 = j - i.
Let x_2 = x * x_1.
Let x_3 = j + (a * x_1).
Let x_4 = i + x_2.
Let x_5 = i + x_2 - j.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_12 : Z. let x_6 = (i + (2 * i_12)) % 2 in ((0 <= i_12) ->
      ((x_6 = 0) \/ (x_6 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: ((i_4 * x_1) = 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * x_1) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: 0 <= i_6.
  (* Invariant *)
  Have: (0 % x_1) = 0.
  (* Invariant *)
  Have: (0 / x_1) = 0.
  (* Invariant *)
  Have: (x_5 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= a) /\ (j <= x_4).
  (* Invariant *)
  Have: (x_5 / x_1) = a.
  (* Invariant *)
  Have: ((a = 0) -> (x_4 = j)).
  (* Invariant *)
  Have: (a + j) <= x_4.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) <= x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((j + (i_12 * x_1)) = x_4))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < a) ->
      (((2 * j) + (i_12 * x_1)) = ((2 * i) + x_2)))).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: ((j + (i_8 * x_1)) = x_4) /\ (0 <= i_8).
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (0 <= i_9).
  (* Invariant *)
  Have: 0 <= i_10.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_2 % x_1) = 0.
  (* Invariant *)
  Have: (0 <= x_2) /\ ((-1) <= a).
  (* Invariant *)
  Have: (x_2 / x_1) = x.
  (* Invariant *)
  Have: ((a = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: forall i_12 : Z. ((i_12 <= a) -> ((0 <= i_12) ->
      ((i_12 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 <= x) ->
      ((i_12 * x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 <= x) ->
      (x_2 = (i_12 * x_1)))).
  (* Invariant *)
  Have: 0 <= i_11.
}
Prove: exists i_12 : Z. (x_2 = (i_12 * x_1)) /\ (0 <= i_12).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (60ms) (164059)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 81):
Let x = j - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_4 : Z. let x_1 = (i + (2 * i_4)) % 2 in ((0 <= i_4) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: 0 <= i_3.
}
Prove: exists i_4 : Z. ((i_4 * x) = 0) /\ (0 <= i_4).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (53028)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 82):
Let x = j - i.
Let x_1 = i_1 * x.
Let x_2 = x_1 / x.
Let x_3 = x_2 - 1.
Let x_4 = j + (x * x_3).
Let x_5 = i + x_1.
Let x_6 = i + x_1 - j.
Let x_7 = 1 + (x_6 / x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_13 : Z. let x_8 = (i + (2 * i_13)) % 2 in ((0 <= i_13) ->
      ((x_8 = 0) \/ (x_8 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: (x_6 % x) = 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (j <= x_5).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_5 = j)).
  (* Invariant *)
  Have: (j + x_2) <= (1 + i + x_1).
  (* Invariant *)
  Have: x_2 <= x_7.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> (((2 + i_13) <= x_2) ->
      ((j + (i_13 * x)) <= x_5))).
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> ((i_13 < x_2) ->
      ((j + (i_13 * x)) <= x_5))).
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> ((i_13 < x_2) ->
      ((j + (i_13 * x)) = x_5))).
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> (((2 + i_13) <= x_2) ->
      (((2 * j) + (i_13 * x)) = ((2 * i) + x_1)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x)) = x_5) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x)) = x_5) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_1 % x) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x * x_2) = x_1.
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> ((i_13 < x_2) ->
      ((i_13 * x) <= x_1))).
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> ((i_13 <= x_2) ->
      ((i_13 * x) <= x_1))).
  (* Invariant *)
  Have: forall i_13 : Z. ((0 <= i_13) -> ((i_13 <= x_2) ->
      ((i_13 * x) = x_1))).
  (* Invariant *)
  Have: 0 <= i_12.
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: exists i_13 : Z. ((i_13 * x) = x_1) /\ (0 <= i_13).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (52394)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 82):
Let x = j - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_5 : Z. let x_1 = (i + (2 * i_5)) % 2 in ((0 <= i_5) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: ((i_4 * x) = 0) /\ (0 <= i_4).
}
Prove: exists i_5 : Z. ((i_5 * x) = 0) /\ (0 <= i_5).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (13ms) (311)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 83):
Let x = j - i.
Let x_1 = i_1 * x.
Let x_2 = x_1 / x.
Let x_3 = x_2 - 1.
Let x_4 = j + (x * x_3).
Let x_5 = i + x_1.
Let x_6 = i + x_1 - j.
Let x_7 = 1 + (x_6 / x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_14 : Z. let x_8 = (i + (2 * i_14)) % 2 in ((0 <= i_14) ->
      ((x_8 = 0) \/ (x_8 = 1))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Invariant *)
  Have: ((i_5 * x) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: ((i_6 * x) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: 0 <= i_7.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: (x_6 % x) = 0.
  (* Invariant *)
  Have: (0 < x_2) /\ (j <= x_5).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_5 = j)).
  (* Invariant *)
  Have: (j + x_2) <= (1 + i + x_1).
  (* Invariant *)
  Have: x_2 <= x_7.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> (((2 + i_14) <= x_2) ->
      ((j + (i_14 * x)) <= x_5))).
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> ((i_14 < x_2) ->
      ((j + (i_14 * x)) <= x_5))).
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> ((i_14 < x_2) ->
      ((j + (i_14 * x)) = x_5))).
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> (((2 + i_14) <= x_2) ->
      (((2 * j) + (i_14 * x)) = ((2 * i) + x_1)))).
  (* Invariant *)
  Have: 0 <= i_8.
  (* Invariant *)
  Have: ((j + (i_9 * x)) = x_5) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((j + (i_10 * x)) = x_5) /\ (0 <= i_10).
  (* Invariant *)
  Have: 0 <= i_11.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: (x_1 % x) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x * x_2) = x_1.
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> ((i_14 < x_2) ->
      ((i_14 * x) <= x_1))).
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> ((i_14 <= x_2) ->
      ((i_14 * x) <= x_1))).
  (* Invariant *)
  Have: forall i_14 : Z. ((0 <= i_14) -> ((i_14 <= x_2) ->
      ((i_14 * x) = x_1))).
  (* Invariant *)
  Have: 0 <= i_12.
  (* Invariant *)
  Have: ((i_13 * x) = x_1) /\ (0 <= i_13).
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: exists i_14 : Z. 0 <= i_14.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (37712)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 83):
Let x = j - i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (2 <= j).
  (* Invariant *)
  Have: (0 < j) /\ (0 <= i).
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_6 : Z. let x_1 = (i + (2 * i_6)) % 2 in ((0 <= i_6) ->
      ((x_1 = 0) \/ (x_1 = 1))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (0 % x) = 0.
  (* Invariant *)
  Have: (0 / x) = 0.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: ((i_4 * x) = 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: ((i_5 * x) = 0) /\ (0 <= i_5).
}
Prove: exists i_6 : Z. 0 <= i_6.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (26501)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 97):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0009/040_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0009/040_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/040_0009/040_merged.c, line 50) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/040_0009/040_merged.c, line 50) (2/2):
Call Result at line 53
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/040_0009/040_merged.c, line 103) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/040_0009/040_merged.c, line 103) (2/2):
Call Result at line 106
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/040_0009/040_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0009/040_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0009/040_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo040'.
  Callers assumptions might be imprecise.
