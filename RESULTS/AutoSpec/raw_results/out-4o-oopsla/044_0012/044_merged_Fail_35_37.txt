[kernel] Parsing out/044_0012/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 37 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_4_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_6_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   35 / 37
  Qed:              28
  Alt-Ergo 2.5.4:    7 (4ms-10ms-27ms)
  Timeout:           2
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 18):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = 1 + k.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = (if (flag_0 = 1) then 1 else 2) + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = (2 * i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= k.
}
Prove: x_3 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (33904)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (6ms) (104)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 18):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: 0 <= k.
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
}
Prove: 0 <= (n * (1 + k)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30177)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 20):
Let x = i * (if (flag_0 = 1) then 1 else 2).
Let x_1 = (if (flag_0 = 1) then 1 else 2) + x.
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_4) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x = 0))).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = (2 * i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_3)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
}
Prove: (x_4 * (if (flag_0 = 1) then 1 else 2)) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (10419)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (7ms) (123)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 21):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + k.
Let x_3 = i * (if (flag_0 = 1) then 1 else 2).
Let x_4 = x_1 - x_3.
Let x_5 = x_2 * x_4.
Let x_6 = 2 * i.
Let x_7 = 2 + x_3.
Let x_8 = 1 + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x_3 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_8)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_7)).
  (* Invariant *)
  Have: x_1 = ((if (flag_0 = 1) then 1 else 2) + x_3).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x_3 = 0))).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_4) = x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 * x_4) = x_3))).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_3 = i) /\ (x_1 = x_8))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 = x_6) /\ (x_1 = x_7))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = x_6)).
  (* Invariant *)
  Have: (i * x_4) = x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_5)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (35112)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (8ms) (143)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 21):
Let x = n * (1 + k).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x)).
}
Prove: 0 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 23):
Let x = 1 + i_1.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + k.
Let x_3 = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = x_1 - x_3.
Let x_5 = x_2 * x_4.
Let x_6 = 2 * i_1.
Let x_7 = 2 + x_3.
Let x_8 = 1 + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x_3 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_8)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_7)).
  (* Invariant *)
  Have: x_1 = ((if (flag_0 = 1) then 1 else 2) + x_3).
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = 0) /\ (x_3 = 0))).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 * x_4) = x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_2 * x_4) = x_3))).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_3 = i_1) /\ (x_1 = x_8))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = i_1)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 = x_6) /\ (x_1 = x_7))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = x_6)).
  (* Invariant *)
  Have: (i_1 * x_4) = x_3.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: x_1 <= x_5.
}
Prove: (i * x_4) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 24):
Let x = 1 + i_1.
Let x_1 = i_1 * (if (flag_0 = 1) then 1 else 2).
Let x_2 = x * (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_2 - x_1.
Let x_4 = 1 + k.
Let x_5 = x_4 * x_3.
Let x_6 = 2 * i_1.
Let x_7 = 2 + x_1.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x_1 < x_2.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x_8)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_2 = x_7)).
  (* Invariant *)
  Have: x_2 = ((if (flag_0 = 1) then 1 else 2) + x_1).
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = 0) /\ (x_1 = 0))).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: i_1 <= x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 * x_3) = x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_2 * x_3) = x_1))).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 = i_1) /\ (x_2 = x_8))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = i_1)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 = x_6) /\ (x_2 = x_7))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_6)).
  (* Invariant *)
  Have: (i_1 * x_3) = x_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = (-1)) /\ (x_2 = 0))).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> ((i_2 * x_3) = x_2))).
}
Prove: (i * x_3) = x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (27ms) (665)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 25):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_1 - (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_3).
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_1 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_1 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (x_1 = ((2 * i) + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (x_1 = (i_1 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (i_1 * (if (flag_0 = 1) then 1 else 2))))).
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37405)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (10ms) (214)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 32):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = i * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 + x_4.
Let x_6 = 1 + x_4.
Let x_7 = x_1 - x_4.
Let x_8 = 1 + k.
Let x_9 = x_8 * x_7.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_4) /\ is_sint32(x_1) /\ is_sint32(x_7).
  (* Invariant *)
  Have: 0 <= x_9.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x_4 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_6)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_5)).
  (* Invariant *)
  Have: x_1 = ((if (flag_0 = 1) then 1 else 2) + x_4).
  (* Invariant *)
  Have: ((k < 0) -> ((i = 0) /\ (x_4 = 0))).
  (* Invariant *)
  Have: x_4 <= x_9.
  (* Invariant *)
  Have: i <= x_8.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_7) = x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 * x_7) = x_4))).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_4 = i) /\ (x_1 = x_6))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_4 = x_2) /\ (x_1 = x_5))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_4 = x_2)).
  (* Invariant *)
  Have: (i * x_7) = x_4.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: x_1 <= x_9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> ((i_1 * x_7) = x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i_1 * x_7) = x_1))).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 = x) /\ (x_1 = x_6))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 = x_3) /\ (x_1 = x_5))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_3)).
}
Prove: (x * x_7) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (11779)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (161)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0012/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0012/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0012/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0012/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
