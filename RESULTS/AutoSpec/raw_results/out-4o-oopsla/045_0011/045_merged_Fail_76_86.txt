[kernel] Parsing out/045_0011/045_merged.c (with preprocessing)
[kernel:typing:no-proto] out/045_0011/045_merged.c:40: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0011/045_merged.c:84: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0011/045_merged.c:57: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/045_0011/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0011/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0011/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/045_0011/045_merged.c:57: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 86 goals scheduled
[wp] [Timeout] typed_foo045_loop_invariant_21_established (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_22_established (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_23_established (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_25_established (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_26_established (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_27_established (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_28_established (Qed 8ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_29_established (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_33_established (Qed 10ms) (Z3)
[wp] [Timeout] typed_foo045_loop_invariant_34_established (Qed 8ms) (Z3)
[wp] Proved goals:   76 / 86
  Qed:              70
  Alt-Ergo 2.5.4:    5 (0.70ms-19ms-32ms)
  Z3 4.8.12:         1 (10ms)
  Timeout:          10
------------------------------------------------------------
  Function foo045
------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 16):
Let x_1 = 1 + x.
Let x_2 = x * x_1.
Let x_3 = x_2 / 2.
Let x_4 = x + x_3.
Let x_5 = 2 * x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(1 + x_5 + x_3) /\ is_sint32(2 + x_5 + x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (-1) <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (31621)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 21):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = j - 1 - j_1.
Let x_3 = x_1 * x_2.
Let x_4 = x_3 / 2.
Let x_5 = j + x_4.
Let x_6 = j_2 + j_1.
Let x_7 = 1 + (2 * j_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j_2) /\ is_sint32(j_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(j + x_4 - j_1).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: j <= (1 + j_1 + x_4).
  (* Invariant *)
  Have: ((if (flag_0 = 0) then 0 else x_2) + x_4) = j_1.
  (* Invariant *)
  Have: x_4 <= j_1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = x_7)).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_4 = j_1)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (1 + j) = j_2. }
  Else { Have: j = j_2. }
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (x_5 <= x_6) \/ (x_5 <= (1 + j_2 + j_1)).
}
Prove: ((if (flag_0 = 0) then 0 else x_1) + ((x_1 * (1 + j - j_1)) / 2))
         = j_2.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (74467)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 60):
Let x_2 = x_1 * (1 + x_1).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x_1) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_3) /\
      is_sint32(x_4).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
}
Prove: (x + y) = z.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 61):
Let x_2 = x_1 * (1 + x_1).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x_1) + x_3.
Let x_5 = x + y.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
}
Prove: x_5 <= w.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 62):
Let x_2 = x + y.
Let x_3 = x_1 * (1 + x_1).
Let x_4 = x_3 / 2.
Let x_5 = (if (flag_0 = 0) then 0 else x_1) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: x_2 <= w.
}
Prove: (x_2 % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 64):
Let x_1 = x * (1 + x).
Let x_2 = x_1 / 2.
Let x_3 = (if (flag_0 = 0) then 0 else x) + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
}
Prove: (2 * y) <= z.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 65):
Let x_1 = 2 * y.
Let x_2 = x * (1 + x).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
}
Prove: x_1 <= (z + (z / 2)).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 66):
Let x_1 = 2 * y.
Let x_2 = x * (1 + x).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
}
Prove: (0 <= y) /\ (y <= z).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 67):
Let x_2 = x + y.
Let x_3 = x_1 * (1 + x_1).
Let x_4 = x_3 / 2.
Let x_5 = (if (flag_0 = 0) then 0 else x_1) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= (x + (x_2 / 2)).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y).
}
Prove: (0 < w) /\ (0 <= x_2).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 68):
Let x_1 = 2 * y.
Let x_2 = x * (1 + x).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: (0 < w) /\ (0 <= z).
}
Prove: (x_1 = z) \/ ((1 + x_1) = z).
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 69):
Let x_1 = 2 * y.
Let x_2 = x * (1 + x).
Let x_3 = x_2 / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x) + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: (0 < w) /\ (0 <= z).
  (* Invariant *)
  Have: (x_1 = z) \/ ((1 + x_1) = z).
}
Prove: z <= (x_1 + (w / 2)).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (37139)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (24ms) (453)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 70):
Let x_1 = 2 * y.
Let x_2 = 1 + x_1.
Let x_3 = x * (1 + x).
Let x_4 = x_3 / 2.
Let x_5 = (if (flag_0 = 0) then 0 else x) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: (0 < w) /\ (0 <= z).
  (* Invariant *)
  Have: (x_1 = z) \/ (x_2 = z).
  (* Invariant *)
  Have: z <= (x_1 + (w / 2)).
}
Prove: z <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (35093)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (0.70ms) (97)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 71):
Let x_1 = 2 * y.
Let x_2 = 1 + x_1.
Let x_3 = x * (1 + x).
Let x_4 = x_3 / 2.
Let x_5 = (if (flag_0 = 0) then 0 else x) + x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(z - y) /\
      is_sint32(x_4) /\ is_sint32(x_5).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: z <= w.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: (0 < w) /\ (0 <= z).
  (* Invariant *)
  Have: (x_1 = z) \/ (x_2 = z).
  (* Invariant *)
  Have: z <= (x_1 + (w / 2)).
  (* Invariant *)
  Have: z <= x_2.
}
Prove: z <= (x_1 + (if ((w % 2) = 1) then 1 else 0)).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (38908)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (32ms) (706)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 72):
Let x_2 = 1 + y.
Let x_3 = x + y.
Let x_4 = x_1 * (1 + x_1).
Let x_5 = x_4 / 2.
Let x_6 = (if (flag_0 = 0) then 0 else x_1) + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(w) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_5) /\ is_sint32(x_6).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: x_3 <= w.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= (x + (x_3 / 2)).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y).
  (* Invariant *)
  Have: (0 < w) /\ (0 <= x_3).
  (* Invariant *)
  Have: (y = x) \/ (x_2 = x).
  (* Invariant *)
  Have: x <= (y + (w / 2)).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x <= (y + (if ((w % 2) = 1) then 1 else 0)).
}
Prove: (1 + x + y) = w.
Prover Z3 4.8.12 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 73):
Let x_1 = 2 * y.
Let x_2 = 1 + z.
Let x_3 = x_2 % 2.
Let x_4 = 1 + x_1.
Let x_5 = x * (1 + x).
Let x_6 = x_5 / 2.
Let x_7 = (if (flag_0 = 0) then 0 else x) + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_2) /\ is_sint32(z - y) /\
      is_sint32(x_6) /\ is_sint32(x_7).
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (x_1 = z) \/ (x_4 = z).
  (* Invariant *)
  Have: z <= (x_1 + (x_2 / 2)).
  (* Invariant *)
  Have: z <= x_4.
  (* Invariant *)
  Have: z <= (x_1 + (if (x_3 = 1) then 1 else 0)).
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 74):
Let x_1 = 2 * y.
Let x_2 = 1 + x_1.
Let x_3 = 1 + z.
Let x_4 = x * (1 + x).
Let x_5 = x_4 / 2.
Let x_6 = (if (flag_0 = 0) then 0 else x) + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_3) /\ is_sint32(z - y) /\
      is_sint32(x_5) /\ is_sint32(x_6).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= (z + (z / 2)).
  (* Invariant *)
  Have: (0 <= y) /\ (y <= z).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (x_1 = z) \/ (x_2 = z).
  (* Invariant *)
  Have: z <= (x_1 + (x_3 / 2)).
  (* Invariant *)
  Have: z <= x_2.
  (* Invariant *)
  Have: z <= x_1.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39770)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (32ms) (656)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0011/045_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0011/045_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0011/045_merged.c, line 35) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0011/045_merged.c, line 35) (2/2):
Call Result at line 40
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0011/045_merged.c, line 81) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0011/045_merged.c, line 81) (2/2):
Call Result at line 84
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/045_0011/045_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0011/045_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0011/045_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0011/045_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo045'.
  Callers assumptions might be imprecise.
