[kernel] Parsing out/034_0012/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 165 goals scheduled
[wp] [Timeout] typed_foo034_loop_invariant_7_established (Qed 0.53ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_20_established (Qed 0.98ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_25_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_25_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_43_preserved (Qed 25ms) (Z3)
[wp] Proved goals:  160 / 165
  Qed:             141
  Alt-Ergo 2.5.4:   17
  Z3 4.8.12:         2 (10ms)
  Timeout:           5
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 11):
Let x = 1 + i.
Let x_1 = i % 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= (n / 2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_3 <= i) /\ (i <= x_4).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_3 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x_3 = i)) \/ ((x_1 = 1) /\ (x_4 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
}
Prove: y <= (1 + (x / 2)).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (40730)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (21ms) (375)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 15):
Let x = i / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 / 2.
Let x_3 = i % 2.
Let x_4 = 2 * x.
Let x_5 = 1 + x_4.
Let x_6 = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(1 + x).
  (* Residual *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_4 <= i) /\ (i <= x_5).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = i)) \/ ((x_3 = 1) /\ (x_5 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: (x < x_6) \/ (x < x_2).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (40463)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (22ms) (317)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 17):
Assume { Type: is_sint32(n). }
Prove: (0 <= n) \/ ((-1) <= n).
Prover Z3 4.8.12 returns Timeout (Qed:0.53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.53ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 20):
Let x = n / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 / 2.
Let x_3 = i % 2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_5 <= i) /\ (i <= x_6).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_5 = i)) \/ ((x_3 = 1) /\ (x_6 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  If (x_1 % 2) = 0
  Then { Have: (1 + x_4) = y. }
  Else { Have: x_4 = y. }
  (* Invariant *)
  Have: y <= (1 + x_2).
  (* Invariant *)
  Have: (y <= x) \/ (y <= x_2).
}
Prove: y <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (41083)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (26ms) (373)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 26):
Let x = i / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 / 2.
Let x_3 = i % 2.
Let x_4 = 2 * x.
Let x_5 = 1 + x_4.
Let x_6 = n / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(1 + x).
  (* Residual *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_4 <= i) /\ (i <= x_5).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = i)) \/ ((x_3 = 1) /\ (x_5 = i)).
  (* Invariant *)
  Have: x <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x < x_2.
}
Prove: x < x_6.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (40351)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (20ms) (341)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 26):
Assume { Type: is_sint32(n). (* Invariant *) Have: (0 <= n) \/ ((-1) <= n). }
Prove: (-1) <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.92ms) (10ms) (29163)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.92ms) (10)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 30):
Assume { Type: is_sint32(n). (* Invariant *) Have: (-1) <= n. }
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.98ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 34):
Let x = n / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 / 2.
Let x_3 = i % 2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = 1 + x_5.
Let x_7 = 2 * y.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_5 <= i) /\ (i <= x_6).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_5 = i)) \/ ((x_3 = 1) /\ (x_6 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  If (x_1 % 2) = 0
  Then { Have: (1 + x_4) = y. }
  Else { Have: x_4 = y. }
  (* Invariant *)
  Have: y <= (1 + x_2).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: y <= x.
}
Prove: (i <= x_7) /\ (x_7 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (41818)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 35):
Let x = 2 * y.
Let x_1 = 1 + i.
Let x_2 = n / 2.
Let x_3 = x_1 / 2.
Let x_4 = i % 2.
Let x_5 = i / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_6 <= i) /\ (i <= x_7).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_6 = i) \/ (x_7 = i).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_6 = i)) \/ ((x_4 = 1) /\ (x_7 = i)).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  If (x_1 % 2) = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i <= x) /\ (x <= x_1).
}
Prove: (2 + i) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 35):
Assume {
  Type: is_sint32(n).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 < n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 50):
Let x_1 = 2 * y.
Let x_2 = 1 + x.
Let x_3 = n / 2.
Let x_4 = x_2 / 2.
Let x_5 = x % 2.
Let x_6 = x / 2.
Let x_7 = 2 * x_6.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_7 <= x) /\ (x <= x_8).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) = x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: (x_7 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_7 = x)) \/ ((x_5 = 1) /\ (x_8 = x)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_7 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  If (x_2 % 2) = 0
  Then { Have: (1 + x_6) = y. }
  Else { Have: x_6 = y. }
  (* Invariant *)
  Have: y <= (1 + x_4).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x <= x_1) /\ (x_1 <= x_2).
  (* Invariant *)
  Have: (2 + x) <= n.
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (37930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 51):
Let x = 1 + i_1.
Let x_1 = 2 * y.
Let x_2 = n / 2.
Let x_3 = x / 2.
Let x_4 = i_1 % 2.
Let x_5 = i_1 / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_6 <= i_1) /\ (i_1 <= x_7).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_6 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_6 = i_1)) \/ ((x_4 = 1) /\ (x_7 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If (x % 2) = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i_1 <= x_1) /\ (x_1 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
}
Prove: (i / 2) <= y.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (43687)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (34ms) (483)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 51):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 52):
Let x = 1 + i_1.
Let x_1 = 2 * y.
Let x_2 = n / 2.
Let x_3 = x / 2.
Let x_4 = i_1 % 2.
Let x_5 = i_1 / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_6 <= i_1) /\ (i_1 <= x_7).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_6 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_6 = i_1)) \/ ((x_4 = 1) /\ (x_7 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If (x % 2) = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i_1 <= x_1) /\ (x_1 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= y)))).
}
Prove: (i / 2) <= y.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (44588)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (34ms) (488)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 52):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 53):
Let x = 1 + i_1.
Let x_1 = 2 * y.
Let x_2 = n / 2.
Let x_3 = x / 2.
Let x_4 = i_1 % 2.
Let x_5 = i_1 / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_6 <= i_1) /\ (i_1 <= x_7).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_6 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_6 = i_1)) \/ ((x_4 = 1) /\ (x_7 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If (x % 2) = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i_1 <= x_1) /\ (x_1 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= y)))).
}
Prove: (i / 2) = y.
Prover Z3 4.8.12 returns Timeout (Qed:25ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:25ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 53):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 54):
Let x_1 = 1 + x.
Let x_2 = 2 * y.
Let x_3 = n / 2.
Let x_4 = x_1 / 2.
Let x_5 = x % 2.
Let x_6 = x / 2.
Let x_7 = 2 * x_6.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_1).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_7 <= x) /\ (x <= x_8).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) = x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: (x_7 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_7 = x)) \/ ((x_5 = 1) /\ (x_8 = x)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_7 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  If (x_1 % 2) = 0
  Then { Have: (1 + x_6) = y. }
  Else { Have: x_6 = y. }
  (* Invariant *)
  Have: y <= (1 + x_4).
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x <= x_2) /\ (x_2 <= x_1).
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) = y)))).
}
Prove: i <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (41072)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (5ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 55):
Let x = 1 + i_1.
Let x_1 = 2 * y.
Let x_2 = n / 2.
Let x_3 = x / 2.
Let x_4 = i_1 % 2.
Let x_5 = i_1 / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_6 <= i_1) /\ (i_1 <= x_7).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_6 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_6 = i_1)) \/ ((x_4 = 1) /\ (x_7 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If (x % 2) = 0
  Then { Have: (1 + x_5) = y. }
  Else { Have: x_5 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i_1 <= x_1) /\ (x_1 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) = y)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
}
Prove: (i / 2) <= y.
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (44261)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (29ms) (446)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 56):
Let x_1 = 1 + x.
Let x_2 = x / 2.
Let x_3 = 1 + x_2.
Let x_4 = 2 * x_2.
Let x_5 = 2 + x_4.
Let x_6 = n / 2.
Let x_7 = x_1 / 2.
Let x_8 = x % 2.
Let x_9 = 1 + x_4.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x_3).
  (* Residual *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_4 <= x) /\ (x <= x_9).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: (x_4 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_4 = x)) \/ ((x_8 = 1) /\ (x_9 = x)).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_4 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x_2 <= x_7.
  (* Invariant *)
  Have: x_2 < x_7.
  (* Invariant *)
  Have: x_2 < x_6.
  (* Invariant *)
  Have: (x_4 < x) /\ (x <= x_5).
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) = x_3)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
}
Prove: (x_9 = x) \/ (x_5 = x).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (41075)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (6ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 57):
Let x = 2 * y.
Let x_1 = 1 + i.
Let x_2 = n / 2.
Let x_3 = x_1 / 2.
Let x_4 = x_1 % 2.
Let x_5 = i % 2.
Let x_6 = i / 2.
Let x_7 = 2 * x_6.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: (x_7 <= i) /\ (i <= x_8).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: (x_7 = i) \/ (x_8 = i).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_7 = i)) \/ ((x_5 = 1) /\ (x_8 = i)).
  (* Invariant *)
  Have: x_6 <= i.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_8 = i)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_7 = i)).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  If x_4 = 0
  Then { Have: (1 + x_6) = y. }
  Else { Have: x_6 = y. }
  (* Invariant *)
  Have: y <= (1 + x_3).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (i <= x) /\ (x <= x_1).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= y)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) = y)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: (x = i) \/ (x_1 = x).
}
Prove: ((x = i) /\ (x_4 = 1)) \/ ((x_1 = x) /\ (x_4 = 0)).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (46605)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (19ms) (521)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 58):
Let x = 2 * y.
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: y <= (n / 2).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: y <= (1 + x_2).
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) = y)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: (x_1 % 2) = 1.
}
Prove: x_2 = y.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (42504)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (15ms) (253)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 62):
Let x_1 = 1 + x.
Let x_2 = x_1 % 2.
Let x_3 = x_1 / 2.
Let x_4 = 2 * x_3.
Let x_5 = n / 2.
Let x_6 = x % 2.
Let x_7 = x / 2.
Let x_8 = 2 * x_7.
Let x_9 = 1 + x_8.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_8 <= x) /\ (x <= x_9).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = x_7)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: (x_8 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_8 = x)) \/ ((x_6 = 1) /\ (x_9 = x)).
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_8 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  If x_2 = 0
  Then { Have: (x_3 = (1 + y)) /\ (x_3 = (1 + x_7)). }
  Else { Have: x_3 = x_7. }
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x <= x_4) /\ (x_4 <= x_1).
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (x_3 = (i / 2))))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: (x_4 = x) \/ (x_1 = x_4).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = x_4)) \/ ((x_2 = 1) /\ (x_4 = x)).
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (42517)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (5ms) (49)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 79):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = n / 2.
Let x_5 = i_1 % 2.
Let x_6 = i_1 / 2.
Let x_7 = 2 * x_6.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_7 <= i_1) /\ (i_1 <= x_8).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_7 = i_1) \/ (x_8 = i_1).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_7 = i_1)) \/ ((x_5 = 1) /\ (x_8 = i_1)).
  (* Invariant *)
  Have: x_6 <= i_1.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_8 = i_1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_7 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_6)). }
  Else { Have: x_2 = x_6. }
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (i_1 <= x_3) /\ (x_3 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (x_2 = (i_2 / 2))))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: (x_3 = i_1) \/ (x = x_3).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x = x_3)) \/ ((x_1 = 1) /\ (x_3 = i_1)).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = i_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x = x_3)).
}
Prove: (i / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (45895)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (31ms) (458)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 80):
Let x_1 = 1 + x.
Let x_2 = x_1 % 2.
Let x_3 = x_1 / 2.
Let x_4 = 2 * x_3.
Let x_5 = n / 2.
Let x_6 = x % 2.
Let x_7 = x / 2.
Let x_8 = 2 * x_7.
Let x_9 = 1 + x_8.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_8 <= x) /\ (x <= x_9).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) = x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: (x_8 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_8 = x)) \/ ((x_6 = 1) /\ (x_9 = x)).
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_8 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  If x_2 = 0
  Then { Have: (x_3 = (1 + y)) /\ (x_3 = (1 + x_7)). }
  Else { Have: x_3 = x_7. }
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x <= x_4) /\ (x_4 <= x_1).
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (x_3 = (i_1 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: (x_4 = x) \/ (x_1 = x_4).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = x_4)) \/ ((x_2 = 1) /\ (x_4 = x)).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_4 = x)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_1 = x_4)).
}
Prove: i <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (43298)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (6ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 81):
Let x_1 = 1 + x.
Let x_2 = x_1 % 2.
Let x_3 = x_1 / 2.
Let x_4 = 2 * x_3.
Let x_5 = n / 2.
Let x_6 = x % 2.
Let x_7 = x / 2.
Let x_8 = 2 * x_7.
Let x_9 = 1 + x_8.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_7) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: (x_8 <= x) /\ (x <= x_9).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) <= x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 / 2) = x_7)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < x) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: (x_8 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_8 = x)) \/ ((x_6 = 1) /\ (x_9 = x)).
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_8 = x)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x.
  If x_2 = 0
  Then { Have: (x_3 = (1 + y)) /\ (x_3 = (1 + x_7)). }
  Else { Have: x_3 = x_7. }
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x <= x_4) /\ (x_4 <= x_1).
  (* Invariant *)
  Have: (2 + x) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= x) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (x_3 = (i_1 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 <= x) ->
      (i_1 <= x_1)))).
  (* Invariant *)
  Have: (x_4 = x) \/ (x_1 = x_4).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_1 = x_4)) \/ ((x_2 = 1) /\ (x_4 = x)).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_4 = x)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_1 = x_4)).
}
Prove: i <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (43298)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (6ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 83):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = n / 2.
Let x_5 = i_1 % 2.
Let x_6 = i_1 / 2.
Let x_7 = 2 * x_6.
Let x_8 = 1 + x_7.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (x_7 <= i_1) /\ (i_1 <= x_8).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: (x_7 = i_1) \/ (x_8 = i_1).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_7 = i_1)) \/ ((x_5 = 1) /\ (x_8 = i_1)).
  (* Invariant *)
  Have: x_6 <= i_1.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_8 = i_1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_7 = i_1)).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_6)). }
  Else { Have: x_2 = x_6. }
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (i_1 <= x_3) /\ (x_3 <= x).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (x_2 = (i_2 / 2))))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: (x_3 = i_1) \/ (x = x_3).
  (* Invariant *)
  Have: ((x_1 = 0) /\ (x = x_3)) \/ ((x_1 = 1) /\ (x_3 = i_1)).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = i_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x = x_3)).
}
Prove: (i / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (45895)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 91):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0012/034_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0012/034_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0012/034_merged.c, line 93):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0012/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
