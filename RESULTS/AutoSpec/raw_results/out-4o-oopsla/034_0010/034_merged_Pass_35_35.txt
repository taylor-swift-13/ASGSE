[kernel] Parsing out/034_0010/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 35 goals scheduled
[wp] Proved goals:   35 / 35
  Qed:              27
  Alt-Ergo 2.5.4:    8
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 11):
Let x = 1 + i.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = i % 2.
Let x_4 = 1 + x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_1) = y. }
  Else { Have: x_1 = y. }
}
Prove: (x / 2) = y.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38996)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (19ms) (279)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 13):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_2.
}
Prove: (2 * x_1) = i.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (35940)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (17ms) (324)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 14):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = i_1 / 2.
Let x_4 = 2 * x_3.
Let x_5 = i_1 % 2.
Let x_6 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_3)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_3 <= i_1.
  (* Invariant *)
  Have: (x_4 = i_1) \/ (x_6 = i_1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_4 = i_1)).
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_3)). }
  Else { Have: x_2 = x_3. }
  (* Invariant *)
  Have: ((x_1 = 1) -> ((2 * x_2) = i_1)).
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (34525)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 15):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = i_1 / 2.
Let x_4 = 2 * x_3.
Let x_5 = i_1 % 2.
Let x_6 = 1 + x_4.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_3)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_3 <= i_1.
  (* Invariant *)
  Have: (x_4 = i_1) \/ (x_6 = i_1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_4 = i_1)).
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_3)). }
  Else { Have: x_2 = x_3. }
  (* Invariant *)
  Have: ((x_1 = 1) -> ((2 * x_2) = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
}
Prove: (i / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (38946)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (26ms) (356)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 20):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = x % 2.
Let x_3 = i / 2.
Let x_4 = 2 * x_3.
Let x_5 = i % 2.
Let x_6 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_4 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_2 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_3)). }
  Else { Have: x_1 = x_3. }
  (* Invariant *)
  Have: ((x_2 = 1) -> ((2 * x_1) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: (-2) <= i.
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (36728)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (6ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 22):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_1 % 2.
Let x_4 = 2 * x_2.
Let x_5 = x / 2.
Let x_6 = 2 * x_5.
Let x_7 = x % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_5)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: (x_6 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = x)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  If x_3 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_5)). }
  Else { Have: x_2 = x_5. }
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: (x_4 = x) \/ (x_1 = x_4).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (38359)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (23ms) (302)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 23):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 * x_2.
Let x_4 = x / 2.
Let x_5 = 2 * x_4.
Let x_6 = x % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_4)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: (x_5 = x) \/ (x_7 = x).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = x)).
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  Have: x_2 = (1 + x_4).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_1 = x_3).
}
Prove: x_1 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (38028)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 25):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 * x_2.
Let x_4 = x_1 % 2.
Let x_5 = x / 2.
Let x_6 = 2 * x_5.
Let x_7 = x % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Residual *)
  When: x_4 != 0.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_5)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: (x_6 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = x)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  Have: x_2 = x_5.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_3 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_1 = x_3).
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36975)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/034_0010/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0010/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
