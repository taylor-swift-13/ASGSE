[kernel] Parsing out/034_0010/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 43 goals scheduled
[wp] [Timeout] typed_foo034_loop_invariant_3_established (Qed 0.50ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_4_established (Qed 0.77ms) (Z3)
[wp] [Timeout] typed_foo034_loop_invariant_8_preserved (Qed 15ms) (Z3)
[wp] Proved goals:   40 / 43
  Qed:              30
  Alt-Ergo 2.5.4:    9 (5ms-16ms-29ms)
  Z3 4.8.12:         1 (10ms)
  Timeout:           3
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 11):
Let x = 1 + i.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = i % 2.
Let x_4 = 1 + x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= (n / 2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) < x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_1)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_1) = y. }
  Else { Have: x_1 = y. }
}
Prove: (x / 2) = y.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (43164)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (22ms) (348)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 13):
Let x = 1 + i.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = i % 2.
Let x_4 = 1 + x_2.
Let x_5 = n / 2.
Let x_6 = x / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_1) /\
      is_sint32(x) /\ is_sint32(x_6).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) < x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_1)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x_2 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (x_6 = (1 + y)) /\ (x_6 = (1 + x_1)). }
  Else { Have: x_6 = x_1. }
}
Prove: x_6 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (39432)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (22ms) (309)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 13):
Assume { Type: is_sint32(n). }
Prove: (-1) <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.50ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.50ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 14):
Assume { Type: is_sint32(n). (* Invariant *) Have: (-1) <= n. }
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.77ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.77ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 15):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = n / 2.
Let x_3 = i / 2.
Let x_4 = 2 * x_3.
Let x_5 = i % 2.
Let x_6 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) < x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_3)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_4 = i) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: (2 * x_1) = i.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (25ms) (427)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 16):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = n / 2.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = i_1 % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) < x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_4)). }
  Else { Have: x_2 = x_4. }
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((2 * x_2) = i_1)).
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (36927)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 17):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = n / 2.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = i_1 % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) < x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_4)). }
  Else { Have: x_2 = x_4. }
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((2 * x_2) = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
}
Prove: (i / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (42931)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (29ms) (426)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 18):
Let x = 1 + i_1.
Let x_1 = x / 2.
Let x_2 = x % 2.
Let x_3 = n / 2.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = i_1 % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_2 <= i_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) < x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) = x_4)))).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: x_4 <= i_1.
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i_1)).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  If x_2 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_4)). }
  Else { Have: x_1 = x_4. }
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((x_2 = 1) -> ((2 * x_1) = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_1)))).
}
Prove: (i / 2) < x_1.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 19):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = x % 2.
Let x_3 = n / 2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = i % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: ((i_1 % 2) = 0) /\ (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < i) ->
      (i_2 <= i)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i) ->
      ((i_2 / 2) < x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i) ->
      ((i_2 / 2) = x_4)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_7 = i).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_2 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_4)). }
  Else { Have: x_1 = x_4. }
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((x_2 = 1) -> ((2 * x_1) = i)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((i_2 <= i) -> ((0 <= i_2) ->
      (i_2 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i) -> ((0 <= i_2) ->
      ((i_2 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((i_2 <= i) -> ((0 <= i_2) ->
      ((i_2 / 2) < x_1)))).
}
Prove: x_1 = (i_1 / 2).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (46029)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 24):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = x % 2.
Let x_3 = n / 2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = i % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < i) ->
      (i_1 <= i)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) < x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) = x_4)))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_7 = i).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_2 = 0
  Then { Have: (x_1 = (1 + y)) /\ (x_1 = (1 + x_4)). }
  Else { Have: x_1 = x_4. }
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((x_2 = 1) -> ((2 * x_1) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (i_1 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) < x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (i_1 / 2))))).
  (* Invariant *)
  Have: (-2) <= i.
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (41715)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (7ms) (76)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 26):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = x_1 % 2.
Let x_4 = 2 * x_2.
Let x_5 = n / 2.
Let x_6 = x / 2.
Let x_7 = 2 * x_6.
Let x_8 = x % 2.
Let x_9 = 1 + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) < x_6)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = x_6)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: (x_7 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_7 = x)).
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  If x_3 = 0
  Then { Have: (x_2 = (1 + y)) /\ (x_2 = (1 + x_6)). }
  Else { Have: x_2 = x_6. }
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) < x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (x_2 = (i / 2))))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: (x_4 = x) \/ (x_1 = x_4).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (44346)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (20ms) (374)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 27):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 * x_2.
Let x_4 = n / 2.
Let x_5 = x / 2.
Let x_6 = 2 * x_5.
Let x_7 = x % 2.
Let x_8 = 1 + x_6.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: ((x_7 = 1) -> (x_8 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_5)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) < x_5)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = x_5)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: (x_6 = x) \/ (x_8 = x).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_6 = x)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  Have: x_2 = (1 + x_5).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) < x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (x_2 = (i / 2))))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_1 = x_3).
}
Prove: x_1 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (43965)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (7ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 29):
Let x_1 = 1 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 * x_2.
Let x_4 = x_1 % 2.
Let x_5 = n / 2.
Let x_6 = x / 2.
Let x_7 = 2 * x_6.
Let x_8 = x % 2.
Let x_9 = 1 + x_7.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_6) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Residual *)
  When: x_4 != 0.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_9 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < x) -> (i <= x)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_6)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) < x_6)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) = x_6)))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: (x_7 = x) \/ (x_9 = x).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_7 = x)).
  (* Invariant *)
  Have: x_7 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: x < n.
  Have: x_2 = x_6.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_3 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= x) ->
      (i <= x_1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) < x_2)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      (x_2 = (i / 2))))).
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_1 = x_3).
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (41859)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0010/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0010/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0010/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0010/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
