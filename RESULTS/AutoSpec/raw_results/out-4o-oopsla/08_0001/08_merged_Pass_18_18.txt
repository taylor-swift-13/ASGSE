[kernel] Parsing out/08_0001/08_merged.c (with preprocessing)
[kernel:typing:no-proto] out/08_0001/08_merged.c:25: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/08_0001/08_merged.c:21: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/08_0001/08_merged.c:20: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/08_0001/08_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/08_0001/08_merged.c:6: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/08_0001/08_merged.c:6: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              14
  Alt-Ergo 2.5.4:    4 (4ms-6ms)
------------------------------------------------------------
  Function foo08
------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 10):
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3).
  (* Residual *)
  When: 4 <= x_2.
  (* Invariant *)
  Have: y_3 <= (100 * x_3).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_3 <= 3).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (x_3 = x_1) /\ (y_3 = y_2).
    Have: (1 + x_1) = x.
    If x_1 <= (-2)
    Then { Have: ((1 + y) = y_1) /\ ((1 + y_2) = y_1). }
    Else { Have: (1 + y_2) = y. }
  }
  Else { Have: (x_3 = x) /\ (y_3 = y). }
}
Prove: y <= (100 * x).
Prover Z3 4.8.12 returns Valid (Qed:47ms) (10ms) (34268)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:47ms) (6ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 11):
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Invariant *)
  Have: y_4 <= (100 * x_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: y <= (100 * x).
}
Prove: (3 <= y) \/ (x <= 3).
Prover Z3 4.8.12 returns Valid (Qed:54ms) (10ms) (39108)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:54ms) (6ms) (104)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 12):
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Invariant *)
  Have: y_4 <= (100 * x_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: y <= (100 * x).
  (* Invariant *)
  Have: (3 <= y) \/ (x <= 3).
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Valid (Qed:58ms) (10ms) (39895)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:58ms) (4ms) (101)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 13):
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3).
  (* Residual *)
  When: x < 0.
  (* Invariant *)
  Have: y_3 <= (100 * x_4).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_4 <= 3).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_3 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_3 = y_4).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_4 = y_5).
      If 4 <= x_3
      Then { Have: x_3 = x_2. Have: (1 + x_2) = x. }
      Else { Have: (x_3 = x) /\ (y_5 = y_2). }
      Have: (1 + y) = y_2.
    }
    Else { Have: (x_5 = x) /\ (y_4 = y). }
  }
  (* Invariant *)
  Have: y <= (100 * x).
  (* Invariant *)
  Have: (3 <= y) \/ (x <= 3).
  (* Invariant *)
  Have: 0 <= y.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:50ms) (20ms) (35703)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:50ms) (5ms) (20)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 17) (1/4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 17) (2/4):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 17) (3/4):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 17) (4/4):
Call Result at line 25
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/08_0001/08_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo08'.
  Callers assumptions might be imprecise.
