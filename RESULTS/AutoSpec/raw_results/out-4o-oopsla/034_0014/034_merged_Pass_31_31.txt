[kernel] Parsing out/034_0014/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 31 goals scheduled
[wp] Proved goals:   31 / 31
  Qed:              25
  Alt-Ergo 2.5.4:    6 (4ms-14ms-20ms)
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 11):
Let x = i % 2.
Let x_1 = i / 2.
Let x_2 = 2 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Residual *)
  When: (x_4 % 2) != 0.
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (x = 1) \/ (x_2 = i).
  (* Invariant *)
  Have: ((x = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: ((x = 0) -> (x_2 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: x_1 <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (31443)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 12):
Let x = 1 + i.
Let x_1 = i % 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: y <= x.
}
Prove: y <= (x / 2).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34688)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (18ms) (293)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 14):
Let x = 1 + i.
Let x_1 = i % 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: x_2 <= i.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: ((x_1 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= (x / 2).
}
Prove: i <= (2 * y).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (35068)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (17ms) (340)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 16):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = i % 2.
Let x_3 = i / 2.
Let x_4 = 2 * x_3.
Let x_5 = 1 + x_4.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (x_2 = 1) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_4 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_3) = y. }
  Else { Have: x_3 = y. }
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: i <= (2 * y).
}
Prove: x_1 = y.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (34593)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (20ms) (277)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 17):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = x % 2.
Let x_4 = i % 2.
Let x_5 = i / 2.
Let x_6 = 2 * x_5.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_5) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: (x_4 = 1) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: x_6 <= i.
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  If x_3 = 0
  Then { Have: x_1 = (1 + x_5). }
  Else { Have: x_1 = x_5. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: i <= x_2.
}
Prove: (x_3 = 1) \/ (x = x_2).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (34695)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (18ms) (287)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 20):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = x / 2.
Let x_3 = 2 * x_2.
Let x_4 = i / 2.
Let x_5 = i % 2.
Let x_6 = 2 * x_4.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_4) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Residual *)
  When: x_1 != 0.
  (* Invariant *)
  Have: x_4 <= i.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: (x_5 = 1) \/ (x_6 = i).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: x_6 <= i.
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = i)).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  Have: x_2 = x_4.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (x_1 = 1) \/ (x = x_3).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_3 = i)).
}
Prove: x_3 <= x.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (33887)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0014/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0014/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Loop assigns (file out/034_0014/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0014/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
