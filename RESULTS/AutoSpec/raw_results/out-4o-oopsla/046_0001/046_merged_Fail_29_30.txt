[kernel] Parsing out/046_0001/046_merged.c (with preprocessing)
[kernel:typing:no-proto] out/046_0001/046_merged.c:33: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/046_0001/046_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo046_loop_invariant_preserved (Qed 26ms) (Z3)
[wp] Proved goals:   29 / 30
  Qed:              22
  Alt-Ergo 2.5.4:    7 (5ms-18ms-27ms)
  Timeout:           1
------------------------------------------------------------
  Function foo046
------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 14):
Let x_3 = z_2 % 2.
Let x_4 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2).
  (* Goal *)
  When: (z % 2) = 1.
  (* Invariant *)
  Have: ((x_3 = 1) -> (y_2 = x_2)).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: x_3 = (y_2 % 2).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 < w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_2 = x_2)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If x_3 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
}
Prove: y = x.
Prover Z3 4.8.12 returns Timeout (Qed:26ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:26ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 15):
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + y.
Let x_6 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_5) /\
      is_sint32(x_3).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 < w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y = x_2)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = x)).
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (36576)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (27ms) (262)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 16):
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + y.
Let x_6 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_5) /\
      is_sint32(x_3).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 < w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y = x_2)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = x)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
}
Prove: x_4 = (x_5 % 2).
Prover Z3 4.8.12 returns Valid (Qed:35ms) (10ms) (38966)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (23ms) (335)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (26ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (26ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 21):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = 1 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(1 + w) /\ is_sint32(1 + x) /\
      is_sint32(x_3) /\ is_sint32(x_1).
  (* Residual *)
  When: (z % 2) = 0.
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((x_2 = 1) -> (y = x)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: x_2 = (x_3 % 2).
}
Prove: x <= 0.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (45231)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (22ms) (344)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 22):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = 1 + y.
Let x_4 = 1 + w.
Let x_5 = x_4 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_4) /\ is_sint32(1 + x) /\ is_sint32(x_3) /\
      is_sint32(x_1).
  (* Residual *)
  When: (z % 2) = 0.
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((x_2 = 1) -> (y = x)).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: x_2 = (x_3 % 2).
  (* Invariant *)
  Have: x <= 0.
}
Prove: (x_5 = 0) \/ (x_5 = 1).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (40699)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (20ms) (374)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 23):
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + y.
Let x_6 = w_2 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(w_1) /\
      is_sint32(w_2) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(y) /\ is_sint32(z) /\ is_sint32(x_5) /\ is_sint32(x_3).
  (* Residual *)
  When: (z % 2) = 0.
  (* Goal *)
  When: (w % 2) = 0.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x_2 <= w_2.
  (* Invariant *)
  Have: x_2 < w_2.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y = x_2)).
  (* Invariant *)
  Have: 0 < w_2.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then {
    Have: (w_2 = w_1) /\ (x_2 = x_1).
    Have: (1 + x_1) = x.
    Have: (1 + w_1) = w.
  }
  Else { Have: (w_2 = w) /\ (x_2 = x). }
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = x)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
}
Prove: x_5 = x.
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (40054)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:29ms) (23ms) (365)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 25):
Let x_1 = 1 + w.
Let x_2 = x_1 % 2.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1) /\ is_sint32(1 + x) /\ is_sint32(x_5) /\
      is_sint32(x_3).
  (* Residual *)
  When: (z % 2) = 0.
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((x_4 = 1) -> (y = x)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: x <= 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_2 = 0) -> (y = 0)).
}
Prove: (-1) <= z.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (33920)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (7ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 26):
Let x_1 = 1 + w.
Let x_2 = x_1 % 2.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = 1 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1) /\ is_sint32(1 + x) /\ is_sint32(x_5) /\
      is_sint32(x_3).
  (* Residual *)
  When: (z % 2) = 0.
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (y % 2) = 0.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((x_4 = 1) -> (y = x)).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: x_4 = (x_5 % 2).
  (* Invariant *)
  Have: x <= 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_2 = 0) -> (y = 0)).
  (* Invariant *)
  Have: (-1) <= z.
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (34024)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0001/046_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0001/046_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Loop assigns (file out/046_0001/046_merged.c, line 28) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0001/046_merged.c, line 28) (2/2):
Call Result at line 33
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/046_0001/046_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/046_0001/046_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo046'.
  Callers assumptions might be imprecise.
