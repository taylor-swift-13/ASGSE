[kernel] Parsing out/041_0005/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0005/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0005/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0005/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 37 goals scheduled
[wp] [Timeout] typed_foo041_loop_invariant_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo041_loop_invariant_13_established (Qed 4ms) (Z3)
[wp] Proved goals:   35 / 37
  Qed:              28
  Alt-Ergo 2.5.4:    7
  Timeout:           2
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 19):
Let x = -j_1.
Let x_1 = j - 1 - j_1.
Let x_2 = n * (1 + n).
Let x_3 = j - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: (((j - 2 - j_1) * x_1) / 2) = j_1.
  (* Invariant *)
  Have: ((x_3 * x_1) / 2) = j_1.
  (* Invariant *)
  Have: j_1 <= (x_2 / 2).
  (* Invariant *)
  Have: j <= (1 + j_1 + n).
  (* Invariant *)
  Have: (1 + ((x_1 * (2 + j - j_1)) / 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((j_1 + i) < j) ->
      (((i * (1 + i)) / 2) = j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= (2 + j_1 + n).
  (* Invariant *)
  Have: j_1 < j.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 23):
Let x = 1 + i.
Let x_1 = (x * (2 + i)) / 2.
Let x_2 = (i * x) / 2.
Let x_3 = 1 + n.
Let x_4 = n * x_3.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (1 + i + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (1 + i + x_2).
  (* Invariant *)
  Have: x_1 <= (1 + i + x_5).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = (1 + ((i * (3 + i)) / 2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (1 + i + ((i_1 * (1 + i_1)) / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_1))).
  (* Invariant *)
  Have: i < x_1.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_1 = x_2.
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (36865)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (6ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 23):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: (-1) <= (n * (1 + n)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (29826)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 24):
Let x = 1 + i.
Let x_1 = (x * (2 + i)) / 2.
Let x_2 = 1 + n.
Let x_3 = n * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (i * x) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (1 + i + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (1 + i + x_5).
  (* Invariant *)
  Have: x_1 <= (1 + i + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = (1 + ((i * (3 + i)) / 2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (1 + i + ((i_1 * (1 + i_1)) / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_1))).
  (* Invariant *)
  Have: i < x_1.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_1 = x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37001)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (6ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 25):
Let x = 1 + i.
Let x_1 = (x * (2 + i)) / 2.
Let x_2 = 1 + n.
Let x_3 = n * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (i * x) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (1 + i + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (1 + i + x_5).
  (* Invariant *)
  Have: x_1 <= (1 + i + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = (1 + ((i * (3 + i)) / 2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (1 + i + ((i_1 * (1 + i_1)) / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i + i_1) < x_1))).
  (* Invariant *)
  Have: i < x_1.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_1 = x_5.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: i < n.
}
Prove: ((x * (4 + i)) / 2) = (1 + i + x_1).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (37862)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 27):
Let x = 1 + i.
Let x_1 = (x * (4 + i)) / 2.
Let x_2 = 1 + n.
Let x_3 = n * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (i * x) / 2.
Let x_6 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1 - 2 - x_6) /\ is_sint32(x_1 - 1 - i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (2 + x_6 + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (2 + x_6 + x_5).
  (* Invariant *)
  Have: x_1 <= (2 + x_6 + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = (2 + i + ((i * (3 + i)) / 2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      (x_1 = (2 + x_6 + ((i_2 * (1 + i_2)) / 2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      ((2 + i_2 + x_6) <= x_1))).
  (* Invariant *)
  Have: (2 + x_6) <= x_1.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_1 = (1 + i + x_5).
  (* Invariant *)
  Have: x_1 = (1 + i + ((x * (2 + i)) / 2)).
  (* Invariant *)
  Have: x_1 <= (1 + i + x_4).
  (* Invariant *)
  Have: i < n.
}
Prove: x_1 = (1 + i + ((i_1 * (1 + i_1)) / 2)).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (39236)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (5ms) (55)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 28):
Let x = 1 + i_1.
Let x_1 = (x * (4 + i_1)) / 2.
Let x_2 = 1 + n.
Let x_3 = n * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (i_1 * x) / 2.
Let x_6 = 2 * i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1 - 2 - x_6) /\
      is_sint32(x_1 - 1 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (2 + x_6 + ((i_1 * (i_1 - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (2 + x_6 + x_5).
  (* Invariant *)
  Have: x_1 <= (2 + x_6 + x_4).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_1 = (2 + i_1 + ((i_1 * (3 + i_1)) / 2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (x_1 = (2 + x_6 + ((i_2 * (1 + i_2)) / 2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((2 + i_2 + x_6) <= x_1))).
  (* Invariant *)
  Have: (2 + x_6) <= x_1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + i_1 + x_5).
  (* Invariant *)
  Have: x_1 = (1 + i_1 + ((x * (2 + i_1)) / 2)).
  (* Invariant *)
  Have: x_1 <= (1 + i_1 + x_4).
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) ->
      (x_1 = (1 + i_1 + ((i_2 * (1 + i_2)) / 2))))).
}
Prove: (i + i_1) < x_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (37231)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (6ms) (55)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 29):
Let x = 1 + i.
Let x_1 = (x * (4 + i)) / 2.
Let x_2 = 1 + n.
Let x_3 = n * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (i * x) / 2.
Let x_6 = 2 * i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1 - 2 - x_6) /\ is_sint32(x_1 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (2 + x_6 + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (2 + x_6 + x_5).
  (* Invariant *)
  Have: x_1 <= (2 + x_6 + x_4).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = (2 + i + ((i * (3 + i)) / 2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (x_1 = (2 + x_6 + ((i_1 * (1 + i_1)) / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((2 + i_1 + x_6) <= x_1))).
  (* Invariant *)
  Have: (2 + x_6) <= x_1.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x_1 = (1 + i + x_5).
  (* Invariant *)
  Have: x_1 = (1 + i + ((x * (2 + i)) / 2)).
  (* Invariant *)
  Have: x_1 <= (1 + i + x_4).
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (x_1 = (1 + i + ((i_1 * (1 + i_1)) / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((i + i_1) < x_1))).
}
Prove: i < x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (37831)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (5ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 31):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Residual *)
  When: flag_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (-1) <= (n * (1 + n)).
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0005/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0005/041_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/041_0005/041_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0005/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0005/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
