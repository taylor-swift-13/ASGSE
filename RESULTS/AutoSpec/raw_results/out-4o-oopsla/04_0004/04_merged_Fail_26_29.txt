[kernel] Parsing out/04_0004/04_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_foo04_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_7_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_12_established (Qed 0.91ms) (Z3)
[wp] Proved goals:   26 / 29
  Qed:              19
  Alt-Ergo 2.5.4:    5
  Z3 4.8.12:         2 (10ms-20ms)
  Timeout:           3
------------------------------------------------------------
  Function foo04
------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 8):
Assume { Type: is_sint32(y). }
Prove: 0 < y.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 9):
Let x_1 = x + y.
Let x_2 = (y * (y - 1)) / 2.
Let x_3 = y_1 * (y_1 - 1).
Let x_4 = 1 + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: (-49) <= y_1.
  (* Invariant *)
  Have: (-99) <= x_3.
  (* Invariant *)
  Have: (-99) <= (y_1 * (51 + y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (49 + y_1)).
  (* Invariant *)
  Have: 50 <= y_1.
  (* Invariant *)
  Have: (50 + x) <= x_2.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x < ((y * (51 + y)) / 2).
  (* Invariant *)
  Have: x < ((y * (49 + y)) / 2).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (-50) <= x.
}
Prove: (50 + x + y) <= ((y * x_4) / 2).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (38691)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 9):
Assume { Type: is_sint32(y). (* Invariant *) Have: 0 < y. }
Prove: (-1) <= (y * (y - 1)).
Prover Alt-Ergo 2.5.4 returns Valid (5ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 11):
Let x_1 = 1 + y.
Let x_2 = (y * x_1) / 2.
Let x_3 = x + y.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= y_1.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-99) <= (y_1 * (51 + y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (49 + y_1)).
  (* Invariant *)
  Have: 50 <= y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < ((y * (51 + y)) / 2).
  (* Invariant *)
  Have: x < ((y * (49 + y)) / 2).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (50 + x + y) <= x_2.
}
Prove: x_3 < x_2.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33259)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 12):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= y_1.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-99) <= (y_1 * (51 + y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (49 + y_1)).
  (* Invariant *)
  Have: 50 <= y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < ((y * (51 + y)) / 2).
  (* Invariant *)
  Have: x < ((y * (49 + y)) / 2).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < x_3.
}
Prove: x_1 < ((x_2 * (52 + y)) / 2).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (40576)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 12):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (-49) <= y.
  (* Invariant *)
  Have: (-99) <= x.
}
Prove: (-99) <= (y * (51 + y)).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (29769)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (6ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 13):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= y_1.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-99) <= (y_1 * (51 + y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (49 + y_1)).
  (* Invariant *)
  Have: 50 <= y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < ((y * (51 + y)) / 2).
  (* Invariant *)
  Have: x < ((y * (49 + y)) / 2).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < x_3.
  (* Invariant *)
  Have: x_1 < ((x_2 * (52 + y)) / 2).
}
Prove: x_1 < ((x_2 * (50 + y)) / 2).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (42440)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (47ms) (745)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 13):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (-49) <= y.
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-99) <= (y * (51 + y)).
}
Prove: (-99) <= (y * (49 + y)).
Prover Z3 4.8.12 returns Valid (Qed:0.83ms) (10ms) (29996)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.83ms) (17)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 14):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: (-49) <= y_1.
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-99) <= (y_1 * (51 + y_1)).
  (* Invariant *)
  Have: (-99) <= (y_1 * (49 + y_1)).
  (* Invariant *)
  Have: 50 <= y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < ((y * (51 + y)) / 2).
  (* Invariant *)
  Have: x < ((y * (49 + y)) / 2).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < x_3.
  (* Invariant *)
  Have: x_1 < ((x_2 * (52 + y)) / 2).
  (* Invariant *)
  Have: x_1 < ((x_2 * (50 + y)) / 2).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 19):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (-49) <= y.
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-99) <= (y * (51 + y)).
  (* Invariant *)
  Have: (-99) <= (y * (49 + y)).
}
Prove: 50 <= y.
Prover Z3 4.8.12 returns Timeout (Qed:0.91ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.91ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0004/04_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0004/04_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Loop assigns (file out/04_0004/04_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/04_0004/04_merged.c:2: Warning: 
  No 'assigns' specification for function 'foo04'.
  Callers assumptions might be imprecise.
