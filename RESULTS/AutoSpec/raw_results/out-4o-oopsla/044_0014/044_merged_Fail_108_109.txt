[kernel] Parsing out/044_0014/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 109 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_9_established (Qed 3ms) (Z3)
[wp] Proved goals:  108 / 109
  Qed:              94
  Alt-Ergo 2.5.4:   12 (4ms-18ms-60ms)
  Z3 4.8.12:         2 (10ms)
  Timeout:           1
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 18):
Let x = 2 * i.
Let x_1 = i * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 1 + i.
Let x_6 = (if (flag_0 = 1) then 1 else 2) + (if (flag_0 = 1) then i else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_5) /\ is_sint32(x_6) /\ ((flag_0 = 1) \/ is_sint32(x)).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x) = x_1.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / (if (flag_0 = 1) then 1 else 2))
          = i.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/ (0 < i).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: forall i_1 : Z.
      let x_7 = (1 + i_1) * (if (flag_0 = 1) then 1 else 2) in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_2) else (x <= x_2).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_1 <= i) else (x_1 <= x).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
  (* Then *)
  Have: i <= k.
}
Prove: (x_5 * (if (flag_0 = 1) then 1 else 2)) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (11175)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (11ms) (296)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 20):
Let x = 2 * i.
Let x_1 = 1 + i.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_2 - (if (flag_0 = 1) then i else x).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 2 + (if (flag_0 = 1) then i else x).
Let x_8 = 1 + (if (flag_0 = 1) then i else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      ((flag_0 = 1) \/ is_sint32(x)).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: x_2
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x)).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: if (flag_0 = 1) then (i < x_2) else (x < x_2).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x_8)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_2 = x_7)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x)
          = (i * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x) = (i * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / x_3) = i.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/ (x_2 <= (2 * (if (flag_0 = 1) then i else x))).
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i else x) = i) /\ (x_2 = x_8))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 = x_7) /\ ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = (1 + i_1) * x_3 in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = i_1 * x_3 in ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_6) else (x <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
  (* Then *)
  Have: i <= k.
}
Prove: (x_1 * x_3) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (12179)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (22ms) (471)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 22):
Let x = 2 * i.
Let x_1 = (if (flag_0 = 1) then 1 else 2) + (if (flag_0 = 1) then i else x).
Let x_2 = 1 + i.
Let x_3 = i * (if (flag_0 = 1) then 1 else 2).
Let x_4 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 1 + k.
Let x_6 = x_5 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ ((flag_0 = 1) \/ is_sint32(x)).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_6)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: ((k < 0) -> (i = 0)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / (if (flag_0 = 1) then 1 else 2))
          = i.
  (* Invariant *)
  Have: (((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
           = 0) /\ ((if (flag_0 = 1) then i else x) = x_3).
  (* Invariant *)
  Have: (i = 0) \/ (0 < i).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: forall i_1 : Z.
      let x_7 = (1 + i_1) * (if (flag_0 = 1) then 1 else 2) in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i <= x_6) else (x <= x_6))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_3 <= i) else (x_3 <= x).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_7 <= i) else (x_7 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((0 <= k) -> ((x_2 * (if (flag_0 = 1) then 1 else 2)) = x_1)).
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
}
Prove: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (59850)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 23):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + k.
Let x_3 = x_1 - 1.
Let x_4 = 2 * x_1.
Let x_5 = 2 + k.
Let x_6 = x_5 * (if (flag_0 = 1) then 1 else 2).
Let x_7 = x_2 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: ((j % (if (flag_0 = 1) then 1 else 2)) = 0) /\
      ((x_3 * (if (flag_0 = 1) then 1 else 2)) = j).
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_4)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_3 else (x_4 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Then *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (41817)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 26):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: ((0 <= k) -> ((-1) <= k)).
  (* Invariant *)
  Have: (0 / n) = 0.
  (* Invariant *)
  Have: (0 % n) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: (-1) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 33):
Let x = 1 + i_1.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i_1.
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then 1 else 2)
    + (i_1 * (if (flag_0 = 1) then 1 else 2)).
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_7)).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i_1 = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i_1.
  (* Invariant *)
  Have: (x_1 = x_4) /\ ((x_3 % (if (flag_0 = 1) then 1 else 2)) = 0).
  (* Invariant *)
  Have: (i_1 = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i_1 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_2 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_2) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_2 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_7))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_5).
  (* Invariant *)
  Have: ((k < 0) -> (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i_1 else x_2)).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_2 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 / 2) = i_1)).
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
}
Prove: ((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (42742)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (20ms) (505)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 34):
Let x = 1 + i_1.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i_1.
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then 1 else 2)
    + (i_1 * (if (flag_0 = 1) then 1 else 2)).
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_7)).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i_1 = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i_1.
  (* Invariant *)
  Have: (x_1 = x_4) /\ ((x_3 % (if (flag_0 = 1) then 1 else 2)) = 0).
  (* Invariant *)
  Have: (i_1 = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i_1 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_2 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_2) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_2 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_7))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_5).
  (* Invariant *)
  Have: ((k < 0) -> (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i_1 else x_2)).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_2 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 / 2) = i_1)).
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i_1 = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((1 + i_2) * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (43127)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (16ms) (517)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 35):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_4 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_7)).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: (x_1 = x_4) /\ ((x_3 % (if (flag_0 = 1) then 1 else 2)) = 0).
  (* Invariant *)
  Have: (i = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_2 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_1) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_7))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_5).
  (* Invariant *)
  Have: ((k < 0) -> (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x_2)).
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_3 / 2) = i)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
}
Prove: (0 <= x_1) \/ (x_1 <= x_7).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (43559)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (20ms) (527)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 41):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = 1 + k.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = x / (if (flag_0 = 1) then 1 else 2).
Let x_4 = 2 * x_3.
Let x_5 = x_3 - 1.
Let x_6 = 2 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_5).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: x_3 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_3 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_4)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_3) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_5 else (x_4 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = (1 + (j / 2)))).
  (* Then *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: (x_3 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_4)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: (0 <= x) \/ (x <= x_2).
}
Prove: x <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (50ms) (157289)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (16ms) (480)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 41):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Goal *)
  When: 0 <= k.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
}
Prove: 0 <= ((1 + k) * (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (33021)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 43):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + k.
Let x_3 = x_2 * (if (flag_0 = 1) then 1 else 2).
Let x_4 = 2 * i.
Let x_5 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_6 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_7 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_3)).
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: (x_5 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: (x_1 = x_6) /\ ((x_5 % (if (flag_0 = 1) then 1 else 2)) = 0).
  (* Invariant *)
  Have: (i = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_5 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_4 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_1) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_3))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_7).
  (* Invariant *)
  Have: ((k < 0) -> (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x_4)).
  (* Invariant *)
  Have: x_6 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_5 / 2) = i)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_4))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: (0 <= x_1) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_3)).
}
Prove: x_1 <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (40809)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (18ms) (525)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 43):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= ((1 + k) * (if (flag_0 = 1) then 1 else 2)))).
}
Prove: 0 <= ((2 + k) * (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (34389)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (29)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 48):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = 2 * i.
Let x_6 = 2 + x_5.
Let x_7 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_7).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_4)).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((k < 0) ->
      ((i = 0) /\ (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2)))).
  (* Invariant *)
  Have: (x_7 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: (x_1 = x_8) /\ ((x_7 % (if (flag_0 = 1) then 1 else 2)) = 0).
  (* Invariant *)
  Have: (i = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_7 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_5 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_1) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_4))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_2).
  (* Invariant *)
  Have: ((k < 0) -> (if (flag_0 = 1) then (x_1 = 1) else (x_1 = 2))).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x_5)).
  (* Invariant *)
  Have: x_8 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_7 / 2) = i)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> ((i = (-1)) /\ (x_1 = 0))).
  (* Invariant *)
  Have: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_1 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = x_6)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: (0 <= x_1) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: ((0 <= k) -> (x_1 <= x_4)).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: ((k < 0) -> (x_1 = 0)).
}
Prove: (if (flag_0 = 1) then x else x_6) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (54685)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (20ms) (536)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 50):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = (if (flag_0 = 1) then x else x_2)
    - (if (flag_0 = 1) then i else x_1).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 1 + (if (flag_0 = 1) then i else x_1).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (if (flag_0 = 1) then i else x_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ ((flag_0 = 1) \/ is_sint32(x_1)) /\
      ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = (-1)))
         else ((flag_0 != 1) \/ (i = (-1)))) /\
      (if (flag_0 = 1) then (x_8 = x) else (x_8 = x_2)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_6)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
       else ((flag_0 = 1) /\ (i = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: ((k < 0) -> (i = 0)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x_1) / x_3) = i.
  (* Invariant *)
  Have: (((if (flag_0 = 1) then i else x_1) % x_3) = 0) /\
      ((if (flag_0 = 1) then i else x_1) = (i * x_3)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x_1) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/
      (if (flag_0 = 1) then (i < (2 * (if (flag_0 = 1) then i else x_1)))
       else ((flag_0 != 1) /\ (0 < i))).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i else x_1) = i) /\
       (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
        else ((flag_0 = 1) /\ (i = (-1)))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x_1) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = (1 + i_1) * x_3 in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = i_1 * x_3 in ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x_1)))).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i <= x_6) else (x_1 <= x_6))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x_1 <= x_4).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x_1)
          = (i * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x_1) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_9 <= i) else (x_9 <= x_1)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x_1) / 2) = i)).
  (* Then *)
  Have: i <= k.
  (* Invariant *)
  Have: ((k < 0) -> (i = (-1))).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) / x_3) = x.
  (* Invariant *)
  Have: (((if (flag_0 = 1) then x else x_2) % x_3) = 0) /\
      ((if (flag_0 = 1) then x else x_2) = (x * x_3)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
        else ((flag_0 = 1) /\ (i = (-1)))) /\ ((flag_0 = 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then x else x_2) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       ((flag_0 != 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = (1 + i_1) * x_3 in ((i_1 <= i) ->
      ((0 <= i_1) -> (if (flag_0 = 1) then (x_9 <= x) else (x_9 <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_9 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_9 <= x) else (x_9 <= x_2)))).
  (* Invariant *)
  Have: ((-1) <= i) \/ (if (flag_0 = 1) then (i < x_6) else (x_2 <= x_6)).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i < x_6) else (x_2 <= x_6))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i < x_4) else (x_2 <= x_4).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x else x_2)
          = (x * (if (flag_0 = 1) then 1 else 2)).
}
Prove: if (flag_0 = 1) then (flag_0 = 1) else ((flag_0 != 1) \/ ((-1) <= i)).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (3576)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (7ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 56):
Let x = 1 + i_1.
Let x_1 = 2 * i_1.
Let x_2 = 2 + x_1.
Let x_3 = (if (flag_0 = 1) then x else x_2)
    - (if (flag_0 = 1) then i_1 else x_1).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 1 + (if (flag_0 = 1) then i_1 else x_1).
Let x_8 = (if (flag_0 = 1) then 1 else 2)
    + (if (flag_0 = 1) then i_1 else x_1).
Let x_9 = i * x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_3) /\ ((flag_0 = 1) \/ is_sint32(x_1)) /\
      ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = (-1)))
         else ((flag_0 != 1) \/ (i_1 = (-1)))) /\
      (if (flag_0 = 1) then (x_8 = x) else (x_8 = x_2)).
  (* Invariant *)
  Have: ((0 <= k) -> (0 <= x_6)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
       else ((flag_0 = 1) /\ (i_1 = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0)))).
  (* Invariant *)
  Have: ((k < 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i_1 else x_1) / x_3) = i_1.
  (* Invariant *)
  Have: (((if (flag_0 = 1) then i_1 else x_1) % x_3) = 0) /\
      ((if (flag_0 = 1) then i_1 else x_1) = (i_1 * x_3)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i_1 else x_1)
         % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (i_1 = 0) \/
      (if (flag_0 = 1) then (i_1 < (2 * (if (flag_0 = 1) then i_1 else x_1)))
       else ((flag_0 != 1) /\ (0 < i_1))).
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i_1 else x_1) = i_1) /\
       (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
        else ((flag_0 = 1) /\ (i_1 = (-1)))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i_1 else x_1) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       ((flag_0 != 1) \/ (i_1 = 0)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_10 = (1 + i_2) * x_3 in ((0 <= i_2) ->
      ((i_2 < i_1) ->
      (if (flag_0 = 1) then (x_10 <= i_1) else (x_10 <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_10 = i_2 * x_3 in ((0 <= i_2) ->
      ((i_2 < i_1) ->
      (if (flag_0 = 1) then (x_10 <= i_1) else (x_10 <= x_1)))).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i_1 <= x_6) else (x_1 <= x_6))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 <= x_4) else (x_1 <= x_4).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i_1 else x_1)
          = (i_1 * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i_1 else x_1) = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. let x_10 = i_2 * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) ->
      (if (flag_0 = 1) then (x_10 <= i_1) else (x_10 <= x_1)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i_1 else x_1) / 2) = i_1)).
  (* Then *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((k < 0) -> (i_1 = (-1))).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) / x_3) = x.
  (* Invariant *)
  Have: (((if (flag_0 = 1) then x else x_2) % x_3) = 0) /\
      ((if (flag_0 = 1) then x else x_2) = (x * x_3)).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x else x_2) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
        else ((flag_0 = 1) /\ (i_1 = (-1)))) /\
       ((flag_0 = 1) \/ (i_1 = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then x else x_2) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       ((flag_0 != 1) \/ (i_1 = (-1))))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_10 = (1 + i_2) * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) -> (if (flag_0 = 1) then (x_10 <= x) else (x_10 <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_10 = i_2 * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) -> (if (flag_0 = 1) then (x_10 <= x) else (x_10 <= x_2)))).
  (* Invariant *)
  Have: ((-1) <= i_1) \/
      (if (flag_0 = 1) then (i_1 < x_6) else (x_2 <= x_6)).
  (* Invariant *)
  Have: ((0 <= k) -> (if (flag_0 = 1) then (i_1 < x_6) else (x_2 <= x_6))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 < x_4) else (x_2 <= x_4).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x else x_2)
          = (x * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: if (flag_0 = 1) then (flag_0 = 1)
        else ((flag_0 != 1) \/ ((-1) <= i_1)).
}
Prove: if (flag_0 = 1) then (x_9 <= x) else (x_9 <= x_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (60ms) (1106)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0014/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0014/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
