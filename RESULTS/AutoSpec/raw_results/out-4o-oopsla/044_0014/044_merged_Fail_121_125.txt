[kernel] Parsing out/044_0014/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 125 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_9_established (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_15_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_15_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_29_preserved (Qed 6ms) (Z3)
[wp] Proved goals:  121 / 125
  Qed:             108
  Alt-Ergo 2.5.4:   11 (5ms-16ms-60ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 18):
Let x = 2 * i.
Let x_1 = i * (if (flag_0 = 1) then 1 else 2).
Let x_2 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = i % 2.
Let x_6 = 1 + i.
Let x_7 = (if (flag_0 = 1) then 1 else 2) + (if (flag_0 = 1) then i else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_6) /\ is_sint32(x_7) /\ ((flag_0 = 1) \/ is_sint32(x)).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x) = x_1.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / (if (flag_0 = 1) then 1 else 2))
          = i.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/ (0 < i).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: forall i_1 : Z.
      let x_8 = (1 + i_1) * (if (flag_0 = 1) then 1 else 2) in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_8 <= i) else (x_8 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_8 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_8 <= i) else (x_8 <= x)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (if (flag_0 = 1) then ((i + (if (x_5 = 0) then 0 else 1)) = 0)
       else (x_5 = 0))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_2) else (x <= x_2).
  (* Invariant *)
  Have: if (flag_0 = 1) then (x_1 <= i) else (x_1 <= x).
  (* Invariant *)
  Have: forall i_1 : Z. let x_8 = i_1 * (if (flag_0 = 1) then 1 else 2) in
      ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_8 <= i) else (x_8 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
}
Prove: (x_6 * (if (flag_0 = 1) then 1 else 2)) = x_7.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (11271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (12ms) (310)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 20):
Let x = 2 * i.
Let x_1 = 1 + i.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_2 - (if (flag_0 = 1) then i else x).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 2 + (if (flag_0 = 1) then i else x).
Let x_8 = i % 2.
Let x_9 = 1 + (if (flag_0 = 1) then i else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      ((flag_0 = 1) \/ is_sint32(x)).
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: x_2
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x)).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: if (flag_0 = 1) then (i < x_2) else (x < x_2).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_2 = x_9)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_2 = x_7)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x)
          = (i * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x) = (i * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / x_3) = i.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/ (x_2 <= (2 * (if (flag_0 = 1) then i else x))).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i else x) = i) /\ (x_2 = x_9))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 = x_7) /\ ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_10 = (1 + i_1) * x_3 in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_10 <= i) else (x_10 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_10 = i_1 * x_3 in ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_10 <= i) else (x_10 <= x)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_2 = x_7) /\
       (if (flag_0 = 1) then ((i + (if (x_8 = 0) then 0 else 1)) = 0)
        else (x_8 = 0)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_6) else (x <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. let x_10 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_10 <= i) else (x_10 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
}
Prove: (x_1 * x_3) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (12323)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (20ms) (480)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 22):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = x_1 - (if (flag_0 = 1) then 1 else 2).
Let x_3 = (if (flag_0 = 1) then 1 else 2)
    + (i * (if (flag_0 = 1) then 1 else 2)).
Let x_4 = 2 * i.
Let x_5 = (2 + k) * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_1 = x_3.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: (x_2 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: (x_2 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (i = 0) \/ ((2 * (if (flag_0 = 1) then 1 else 2)) <= x_1).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (i + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_4 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + ((1 + i_1) * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (x_1
         = (x_4 + (if (flag_0 = 1) then 1 else 2)
            + (if ((i % 2) = 0) then 0 else 1)))).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_7).
  (* Invariant *)
  Have: x_1 <= ((if (flag_0 = 1) then 1 else 2) + x_5).
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (if (flag_0 = 1) then i else x_4)).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_1 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 / 2) = i)).
}
Prove: (x_1 / (if (flag_0 = 1) then 1 else 2)) = x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (49994)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 23):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = x_1 - 1.
Let x_3 = 2 * x_1.
Let x_4 = 2 + k.
Let x_5 = x_4 * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_2 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_3)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_3 + (if ((x_2 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_2 else (x_3 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
}
Prove: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (42244)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 26):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: ((0 <= k) -> ((-1) <= k)).
  (* Invariant *)
  Have: (0 / n) = 0.
  (* Invariant *)
  Have: (0 % n) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: (-1) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 32):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = x_1 - 1.
Let x_3 = 2 * x_1.
Let x_4 = 2 + k.
Let x_5 = x_4 * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_2 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_3)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_3 + (if ((x_2 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_2 else (x_3 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: x_1 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 32):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: (0 / n) = 0.
  (* Invariant *)
  Have: (0 % n) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 40):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = x_1 - 1.
Let x_4 = 2 + k.
Let x_5 = x_4 * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_3 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_2 + (if ((x_3 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_3 else (x_2 - 2)) = j.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
}
Prove: ((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (50ms) (212156)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (16ms) (473)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 41):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = x_1 - 1.
Let x_4 = 2 + k.
Let x_5 = x_4 * (if (flag_0 = 1) then 1 else 2).
Let x_6 = 1 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: (x_3 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_2 + (if ((x_3 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_3 else (x_2 - 2)) = j.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) ->
      (((1 + i_1) * (if (flag_0 = 1) then 1 else 2)) <= x))).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (60ms) (260713)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (17ms) (485)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 46):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: flag_0 != 1.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: (-2) <= k.
  (* Invariant *)
  Have: i <= (1 + k).
  (* Invariant *)
  Have: (i = 0) \/ (0 < i).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: i <= (2 + k).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: (x_2 / 2) = x.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x))).
}
Prove: (x % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 49):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_1 - 1.
Let x_6 = 2 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_1 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_1 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_2)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_2 + (if ((x_5 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_5 else (x_2 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: (0 <= x) \/ (x <= x_4).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_2 + (if ((x_1 % 2) = 0) then 0 else 1)) = x)).
}
Prove: x <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (40ms) (144132)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (12ms) (498)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 49):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: 0 <= ((1 + k) * (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (33021)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (28)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 51):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = 1 + k.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = x / (if (flag_0 = 1) then 1 else 2).
Let x_4 = 2 * x_3.
Let x_5 = x_3 - 1.
Let x_6 = 2 + k.
Let x_7 = x_6 * (if (flag_0 = 1) then 1 else 2).
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_5).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: x_3 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_3 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_4)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_3) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_4 + (if ((x_5 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_5 else (x_4 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_3 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_3 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_3 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_3 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_4)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_4 + (if ((x_3 % 2) = 0) then 0 else 1)) = x)).
  (* Invariant *)
  Have: x <= x_2.
}
Prove: x <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (12219)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (17ms) (498)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 51):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= ((1 + k) * (if (flag_0 = 1) then 1 else 2)).
}
Prove: 0 <= ((2 + k) * (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31043)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 56):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = 2 + k.
Let x_2 = x_1 * (if (flag_0 = 1) then 1 else 2).
Let x_3 = 1 + k.
Let x_4 = x_3 * (if (flag_0 = 1) then 1 else 2).
Let x_5 = x / (if (flag_0 = 1) then 1 else 2).
Let x_6 = 2 * x_5.
Let x_7 = x_5 - 1.
Let x_8 = 2 + j.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_5) /\ is_sint32(x_7).
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (x_7 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_5 = (1 + (j / (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_5 = 1) \/ (if (flag_0 = 1) then (0 < j) else (2 <= j)).
  (* Invariant *)
  Have: x_5 <= x_3.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_5 = (1 + j))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((j % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_8 = x_6)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_5) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_5) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((x_6 + (if ((x_7 % 2) = 0) then 0 else 1)) = x_8)).
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_7 else (x_6 - 2)) = j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_5) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_5 = (1 + (j / 2)))).
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_5 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_5 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_6)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_5) ->
      (((1 + i) * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_5) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((x_6 + (if ((x_5 % 2) = 0) then 0 else 1)) = x)).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= x_2.
}
Prove: if (flag_0 = 1) then (x_5 = x) else (x = x_6).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (46076)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (11ms) (351)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 58):
Let x = 2 * i.
Let x_1 = 1 + i.
Let x_2 = 2 + x.
Let x_3 = (if (flag_0 = 1) then x_1 else x_2)
    - (if (flag_0 = 1) then i else x).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 1 + (if (flag_0 = 1) then i else x).
Let x_8 = x_1 % 2.
Let x_9 = i % 2.
Let x_10 = (if (flag_0 = 1) then 1 else 2) + (if (flag_0 = 1) then i else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ ((flag_0 = 1) \/ is_sint32(x)) /\
      ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = (-1)))
         else ((flag_0 != 1) \/ (i = (-1)))) /\
      (if (flag_0 = 1) then (x_10 = x_1) else (x_10 = x_2)).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
       else ((flag_0 = 1) /\ (i = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x)
          = (i * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i else x) = (i * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) / x_3) = i.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i = 0) \/
      (if (flag_0 = 1) then (i < (2 * (if (flag_0 = 1) then i else x)))
       else ((flag_0 != 1) /\ (0 < i))).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i else x) = i) /\
       (if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
        else ((flag_0 = 1) /\ (i = (-1)))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       ((flag_0 != 1) \/ (i = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = (1 + i_1) * x_3 in ((0 <= i_1) ->
      ((i_1 < i) -> (if (flag_0 = 1) then (x_11 <= i) else (x_11 <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = i_1 * x_3 in ((0 <= i_1) -> ((i_1 < i) ->
      (if (flag_0 = 1) then (x_11 <= i) else (x_11 <= x)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       (if (flag_0 = 1) then ((i + (if (x_9 = 0) then 0 else 1)) = 0)
        else (x_9 = 0)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_6) else (x <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i else x) = i)).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_11 <= i) else (x_11 <= x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i else x) / 2) = i)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_1 else x_2)
          = (x_1 * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_1 else x_2) = (x_1 * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2) / x_3) = x_1.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2)
         % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then ((flag_0 = 1) \/ (i = 0))
        else ((flag_0 = 1) /\ (i = (-1)))) /\ ((flag_0 = 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then x_1 else x_2) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       ((flag_0 != 1) \/ (i = (-1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = (1 + i_1) * x_3 in ((i_1 <= i) ->
      ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_11 <= x_1) else (x_11 <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_11 = i_1 * x_3 in ((i_1 <= i) -> ((0 <= i_1) ->
      (if (flag_0 = 1) then (x_11 <= x_1) else (x_11 <= x_2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i) else ((flag_0 != 1) \/ (i = 0))) /\
       (if (flag_0 = 1) then ((i + (if (x_8 = 0) then 0 else 1)) = (-1))
        else (x_8 = 0)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i < x_6) else (x_2 <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i < x_4) else (x_2 <= x_4).
}
Prove: if (flag_0 = 1) then (flag_0 = 1) else ((flag_0 != 1) \/ ((-1) <= i)).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (3624)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (8ms) (80)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 64):
Let x = 2 * i_1.
Let x_1 = 1 + i_1.
Let x_2 = 2 + x.
Let x_3 = (if (flag_0 = 1) then x_1 else x_2)
    - (if (flag_0 = 1) then i_1 else x).
Let x_4 = (2 + k) * x_3.
Let x_5 = 1 + k.
Let x_6 = x_5 * x_3.
Let x_7 = 1 + (if (flag_0 = 1) then i_1 else x).
Let x_8 = x_1 % 2.
Let x_9 = i_1 % 2.
Let x_10 = (if (flag_0 = 1) then 1 else 2)
    + (if (flag_0 = 1) then i_1 else x).
Let x_11 = i * x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ ((flag_0 = 1) \/ is_sint32(x)) /\
      ((flag_0 = 1) \/ is_sint32(x_2)).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: (0 / x_3) = 0.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (-1) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = (-1)))
         else ((flag_0 != 1) \/ (i_1 = (-1)))) /\
      (if (flag_0 = 1) then (x_10 = x_1) else (x_10 = x_2)).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (0 % x_3) = 0.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
       else ((flag_0 = 1) /\ (i_1 = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0)))).
  (* Invariant *)
  Have: (if (flag_0 = 1) then i_1 else x)
          = (i_1 * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i_1 <= x_5.
  (* Invariant *)
  Have: (if (flag_0 = 1) then i_1 else x) = (i_1 * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i_1 else x) / x_3) = i_1.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i_1 else x) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then i_1 else x) % (if (flag_0 = 1) then 1 else 2))
          = 0.
  (* Invariant *)
  Have: (i_1 = 0) \/
      (if (flag_0 = 1) then (i_1 < (2 * (if (flag_0 = 1) then i_1 else x)))
       else ((flag_0 != 1) /\ (0 < i_1))).
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (((if (flag_0 = 1) then i_1 else x) = i_1) /\
       (if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
        else ((flag_0 = 1) /\ (i_1 = (-1)))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i_1 else x) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       ((flag_0 != 1) \/ (i_1 = 0)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_12 = (1 + i_2) * x_3 in ((0 <= i_2) ->
      ((i_2 < i_1) ->
      (if (flag_0 = 1) then (x_12 <= i_1) else (x_12 <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_12 = i_2 * x_3 in ((0 <= i_2) ->
      ((i_2 < i_1) ->
      (if (flag_0 = 1) then (x_12 <= i_1) else (x_12 <= x)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       (if (flag_0 = 1) then ((i_1 + (if (x_9 = 0) then 0 else 1)) = 0)
        else (x_9 = 0)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 <= x_6) else (x <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 <= x_4) else (x <= x_4).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((if (flag_0 = 1) then i_1 else x) = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. let x_12 = i_2 * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) -> (if (flag_0 = 1) then (x_12 <= i_1) else (x_12 <= x)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then i_1 else x) / 2) = i_1)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_1 else x_2)
          = (x_1 * (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: (if (flag_0 = 1) then x_1 else x_2) = (x_1 * x_3).
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2) / x_3) = x_1.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2) % x_3) = 0.
  (* Invariant *)
  Have: ((if (flag_0 = 1) then x_1 else x_2)
         % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      ((if (flag_0 = 1) then ((flag_0 = 1) \/ (i_1 = 0))
        else ((flag_0 = 1) /\ (i_1 = (-1)))) /\
       ((flag_0 = 1) \/ (i_1 = (-1))))).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (((if (flag_0 = 1) then x_1 else x_2) % 2) = 0)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       ((flag_0 != 1) \/ (i_1 = (-1))))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_12 = (1 + i_2) * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) ->
      (if (flag_0 = 1) then (x_12 <= x_1) else (x_12 <= x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_12 = i_2 * x_3 in ((i_2 <= i_1) ->
      ((0 <= i_2) ->
      (if (flag_0 = 1) then (x_12 <= x_1) else (x_12 <= x_2)))).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      ((if (flag_0 = 1) then (x_7 = i_1) else ((flag_0 != 1) \/ (i_1 = 0))) /\
       (if (flag_0 = 1) then ((i_1 + (if (x_8 = 0) then 0 else 1)) = (-1))
        else (x_8 = 0)))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 < x_6) else (x_2 <= x_6).
  (* Invariant *)
  Have: if (flag_0 = 1) then (i_1 < x_4) else (x_2 <= x_4).
  (* Invariant *)
  Have: if (flag_0 = 1) then (flag_0 = 1)
        else ((flag_0 != 1) \/ ((-1) <= i_1)).
}
Prove: if (flag_0 = 1) then (x_11 <= x_1) else (x_11 <= x_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (60ms) (1124)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0014/044_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0014/044_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0014/044_merged.c, line 80):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0014/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
