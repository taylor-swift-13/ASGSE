[kernel] Parsing out/041_0002/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0002/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0002/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0002/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_foo041_assert (Qed 12ms) (Z3)
[wp] Proved goals:   27 / 28
  Qed:              21
  Alt-Ergo 2.5.4:    6
  Timeout:           1
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 22):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = j - 1 - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (j <= (1 + (2 * j_1))) /\ (j <= (2 + j_1 + n)).
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) < j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: ((x_1 * x_2) / 2) = j_1.
  (* Then *)
  Have: j <= (1 + j_1 + n).
}
Prove: ((x_1 * (1 + j - j_1)) / 2) <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (37090)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (24ms) (280)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 23):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= (1 + n)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34653)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 24):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= (1 + n)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (57874)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (33ms) (634)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 25):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= (1 + n)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
}
Prove: ((i * (i - 1)) / 2) <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (40ms) (660)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 26):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (i <= x_2) /\ (i <= (1 + n)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((x * (2 + i)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_3))).
}
Prove: (-1) <= (i + x_2).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37063)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 27):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = (x_1 * (1 + j - j_1)) / 2.
Let x_3 = j - 1 - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (j <= (1 + (2 * j_1))) /\ (j <= (2 + j_1 + n)).
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) < j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: ((x_1 * x_3) / 2) = j_1.
  (* Then *)
  Have: j <= (1 + j_1 + n).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((j_1 + i) < j) -> (i <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((j_1 + i) < j) ->
      (((i * (1 + i)) / 2) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) <= j) ->
      (((i * (i - 1)) / 2) <= j))).
  (* Invariant *)
  Have: 0 <= j.
}
Prove: x_2 = j.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (51206)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (31ms) (316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Assertion (file out/041_0002/041_merged.c, line 40):
Let x = i * (1 + i).
Let x_1 = x / 2.
Let x_2 = i + k + x_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: (i <= x_1) /\ (i <= (1 + n)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_1))).
  (* Invariant *)
  Have: (-1) <= x.
  (* Else *)
  Have: n < i.
}
Prove: (2 * n) < x_2.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/041_0002/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0002/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0002/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
