[kernel] Parsing out/041_0002/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0002/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0002/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0002/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_foo041_loop_invariant_3_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   28 / 29
  Qed:              22
  Alt-Ergo 2.5.4:    3 (3ms-24ms-66ms)
  Z3 4.8.12:         3
  Timeout:           1
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 21):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(1 + i + x_2).
  (* Pre-condition *)
  Have: 0 < i.
  (* Invariant *)
  Have: ((i = (-1)) -> (x_2 = 0)).
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: i = (-1).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 23):
Let x = 1 + j_1 + n.
Let x_1 = (n * (1 + n)) / 2.
Let x_2 = -j_1.
Let x_3 = j - j_1.
Let x_4 = j - 1 - j_1.
Let x_5 = 2 + j_1 + n.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(n) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_1 = 0)).
  (* Invariant *)
  Have: (j <= (1 + (2 * j_1))) /\ (j <= x_5).
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: ((x_5 = j) -> (x_1 = j_1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) < j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: ((x_3 * x_4) / 2) = j_1.
  (* Then *)
  Have: j <= x.
  (* Invariant *)
  Have: ((x = j) -> (x_1 = j)).
}
Prove: ((x_3 * (1 + j - j_1)) / 2) <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (38034)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 24):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= x_4).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_5 = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((n = i_1) -> (x_5 = x_3)).
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (35512)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (50)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 25):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= x_4).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_5 = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((n = i_1) -> (x_5 = x_3)).
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (67255)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 26):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i_1 + x_2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 < i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (i_1 <= x_2) /\ (i_1 <= x_4).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = i_1) -> (x_5 = x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= i_1) ->
      (((i_2 * (i_2 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: ((n = i_1) -> (x_5 = x_3)).
  (* Invariant *)
  Have: ((x * (2 + i_1)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_3))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((i_2 * (1 + i_2)) / 2) <= x_3))).
}
Prove: ((i * (i - 1)) / 2) <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (66ms) (1214)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 27):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i + x_2.
Let x_4 = 1 + n.
Let x_5 = (n * x_4) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (i <= x_2) /\ (i <= x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_4 = i) -> (x_5 = x_2)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= i) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_2))).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: ((n = i) -> (x_5 = x_3)).
  (* Invariant *)
  Have: ((x * (2 + i)) / 2) <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      (((i_1 * (i_1 - 1)) / 2) <= x_3))).
}
Prove: (-1) <= (i + x_2).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (37904)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (3ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 28):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = (x_1 * (1 + j - j_1)) / 2.
Let x_3 = 1 + j_1 + n.
Let x_4 = (n * (1 + n)) / 2.
Let x_5 = j - 1 - j_1.
Let x_6 = 2 + j_1 + n.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> (x_4 = 0)).
  (* Invariant *)
  Have: (j <= (1 + (2 * j_1))) /\ (j <= x_6).
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: ((x_6 = j) -> (x_4 = j_1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) -> (i <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) < j) ->
      (((i * (i - 1)) / 2) <= j_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: ((x_1 * x_5) / 2) = j_1.
  (* Then *)
  Have: j <= x_3.
  (* Invariant *)
  Have: ((x_3 = j) -> (x_4 = j)).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((j_1 + i) < j) -> (i <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((j_1 + i) < j) ->
      (((i * (1 + i)) / 2) <= j))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> (((j_1 + i) <= j) ->
      (((i * (i - 1)) / 2) <= j))).
  (* Invariant *)
  Have: 0 <= j.
}
Prove: x_2 = j.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (56865)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0002/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0002/041_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Loop assigns (file out/041_0002/041_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0002/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0002/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
