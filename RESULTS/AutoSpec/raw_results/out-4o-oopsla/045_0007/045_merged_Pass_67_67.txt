[kernel] Parsing out/045_0007/045_merged.c (with preprocessing)
[kernel:typing:no-proto] out/045_0007/045_merged.c:33: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0007/045_merged.c:79: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/045_0007/045_merged.c:65: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/045_0007/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0007/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/045_0007/045_merged.c:7: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 67 goals scheduled
[wp] Proved goals:   67 / 67
  Qed:              61
  Alt-Ergo 2.5.4:    6 (3ms-9ms-20ms)
------------------------------------------------------------
  Function foo045
------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 18):
Let x_1 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(1 + j) /\ is_sint32(1 + x) /\
      is_sint32(j - x) /\ is_sint32(j - 1 - (2 * x)) /\ is_sint32(j - 1 - x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x) < j.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x < j.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x = (-1)) \/ ((-1) <= x).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (31636)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (16)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 25):
Let x_1 = 1 + x.
Let x_2 = j + (if (flag_0 = 0) then 0 else x_1).
Let x_3 = -(if (flag_0 = 0) then 0 else x).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(j - (if (flag_0 = 0) then 0 else x)) /\
      is_sint32(1 + j + x - (if (flag_0 = 0) then 0 else x)) /\
      is_sint32(1 + j + x + (if (flag_0 = 0) then 0 else x_1)
        - (if (flag_0 = 0) then 0 else x)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x <= j)).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x <= j).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (if (flag_0 = 0) then (0 <= x_2) else (x <= x_2))).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: if (flag_0 = 0)
       then ((-1) <= (j + x + (if (flag_0 = 0) then 0 else x_1)))
       else ((-1) <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (32324)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (7ms) (44)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 69):
Let x_5 = 1 + z.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0_0) /\
      is_sint32(tmp_1_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(z) /\
      is_sint32(x_5) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 <= j)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_4 <= j).
  (* Invariant *)
  Have: y_3 <= x_3.
  (* Invariant *)
  Have: (y_3 = x_3) \/ ((1 + y_3) = x_3).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: y_2 <= x_2.
  (* Invariant *)
  Have: (y_2 = x_2) \/ ((1 + y_2) = x_2).
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0_0 != 0.
  If (x_5 % 2) = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If (z % 2) = 0
  Then { Have: y_2 = y_1. Have: (1 + y_1) = y. }
  Else { Have: y_2 = y. }
}
Prove: y <= x.
Prover Z3 4.8.12 returns Valid (Qed:41ms) (20ms) (39602)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (13ms) (220)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 70):
Let x_5 = 1 + z.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0_0) /\
      is_sint32(tmp_1_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\ is_sint32(z) /\
      is_sint32(x_5) /\ is_sint32(j - (if (flag_0 = 0) then 0 else x_4)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 <= j)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_4 <= j).
  (* Invariant *)
  Have: y_3 <= x_3.
  (* Invariant *)
  Have: (y_3 = x_3) \/ ((1 + y_3) = x_3).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: y_2 <= x_2.
  (* Invariant *)
  Have: (y_2 = x_2) \/ ((1 + y_2) = x_2).
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0_0 != 0.
  If (x_5 % 2) = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If (z % 2) = 0
  Then { Have: y_2 = y_1. Have: (1 + y_1) = y. }
  Else { Have: y_2 = y. }
  (* Invariant *)
  Have: y <= x.
}
Prove: (y = x) \/ ((1 + y) = x).
Prover Z3 4.8.12 returns Valid (Qed:46ms) (20ms) (40666)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:46ms) (20ms) (317)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 74):
Let x_5 = 1 + y.
Let x_6 = 1 + z.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0_0) /\
      is_sint32(tmp_1_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(z) /\ is_sint32(x_5) /\ is_sint32(x_6) /\
      is_sint32(j - (if (flag_0 = 0) then 0 else x_4)).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 <= j)).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_4 <= j).
  (* Invariant *)
  Have: y_1 <= x_3.
  (* Invariant *)
  Have: (y_1 = x_3) \/ ((1 + y_1) = x_3).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (y = x_2) \/ (x_5 = x_2).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: tmp_0_0 != 0.
  If (x_6 % 2) = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  (* Invariant *)
  Have: y < x.
  (* Invariant *)
  Have: (x_5 = x) \/ ((2 + y) = x).
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:39ms) (10ms) (35470)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:39ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/045_0007/045_merged.c, line 75):
Let x_3 = 1 + x.
Let x_4 = 1 + z.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(tmp_0_0) /\
      is_sint32(tmp_1_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(z) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(j - (if (flag_0 = 0) then 0 else x_2)).
  (* Residual *)
  When: (x_4 % 2) = 1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_2 <= j)).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_2 <= j).
  (* Invariant *)
  Have: y_3 <= x_1.
  (* Invariant *)
  Have: (y_3 = x_1) \/ ((1 + y_3) = x_1).
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: tmp_1_0 != 0.
  (* Invariant *)
  Have: y_2 <= x.
  (* Invariant *)
  Have: (y_2 = x) \/ ((1 + y_2) = x).
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0_0 != 0.
  If (z % 2) = 0
  Then { Have: y_2 = y_1. Have: (1 + y_1) = y. }
  Else { Have: y_2 = y. }
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (y = x) \/ (x_3 = y).
  (* Invariant *)
  Have: 0 <= y.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:42ms) (20ms) (35562)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:42ms) (3ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/045_0007/045_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 28) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 28) (2/2):
Call Result at line 33
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 60) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 60) (2/3):
Call Result at line 65
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 60) (3/3):
Call Result at line 79
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 76) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/045_0007/045_merged.c, line 76) (2/2):
Call Result at line 79
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/045_0007/045_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0007/045_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0007/045_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/045_0007/045_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo045'.
  Callers assumptions might be imprecise.
