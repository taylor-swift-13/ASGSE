[kernel] Parsing out/027_0025/027_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 114 goals scheduled
[wp] [Timeout] typed_foo027_loop_invariant_16_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_20_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo027_loop_invariant_27_established (Qed 2ms) (Z3)
[wp] Proved goals:  111 / 114
  Qed:              98
  Alt-Ergo 2.5.4:   12
  Z3 4.8.12:         1 (160ms)
  Timeout:           3
------------------------------------------------------------
  Function foo027
------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 31):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (l <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((k <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (l <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (i <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((l <= i_2) -> (l = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
}
Prove: (x = l) \/ (x = n).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (184ms) (3111)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 32):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (i <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
}
Prove: i <= n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 36):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (l <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((k <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (l <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (i <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((l <= i_2) -> (l = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
}
Prove: (2 + i) <= n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (199ms) (3028)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 36):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: 0 < i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (i <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: i <= n.
}
Prove: i < n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 43):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i_1) \/ (n = i_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l = i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i_1) <= n.
}
Prove: l <= i.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (36441)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 43):
Assume {
  Type: is_sint32(k) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < l).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 44):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (l <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i) -> ((l <= i_3) -> (l = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (l <= i_3))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (36733)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 45):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (l <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i) -> ((l <= i_3) -> (l = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
}
Prove: i < i_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (37753)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (69)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 47):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (l <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i) -> ((l <= i_3) -> (l = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i < i_3))).
}
Prove: x = l.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (38237)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 49):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (k <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i_1) \/ (n = i_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l = i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 < i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((l <= i_3) -> (x = l))).
}
Prove: l <= i.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (39093)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 49):
Assume {
  Type: is_sint32(k) /\ is_sint32(l) /\ is_sint32(n).
  (* Goal *)
  When: (k <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (l <= i_2).
}
Prove: l <= i.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (160ms) (172997)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 50):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i < n) /\ (i_1 < i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i_1) \/ (n = i_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l = i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 < i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((l <= i_3) -> (x = l))).
}
Prove: l <= i.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (38801)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 51):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 < i_1) /\ (i_1 <= k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i) -> ((l <= i_3) -> (l = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i < i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((l <= i_3) -> (x = l))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < n) -> (l <= i_3))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39267)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 52):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 < i_1) /\ (i_1 < k).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i) -> ((l <= i_3) -> (l = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i < i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((l <= i_3) -> (x = l))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 <= k) -> (l <= x))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (39847)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (3ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 63):
Let x = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= i_1))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (l <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((k <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i) \/ (n = i).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (l <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (i <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < i) -> ((l <= i_2) -> (l = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: l <= i.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i) <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (l <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (l <= x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((l <= i_2) -> ((i_2 < n) -> (i < i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((l <= i_2) -> (x = l))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i < i_2) -> ((i_2 < n) -> (l <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 <= k) -> (l <= x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 < i_2) -> ((i_2 < k) -> (l <= x))).
}
Prove: l <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (40091)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 66):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(l) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i < n) /\ (i_1 < i).
  (* Pre-condition *)
  Have: 0 < l.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 < i_3) -> ((i_3 < k) -> (l <= i_2))).
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: l <= n.
  (* Invariant *)
  Have: l < n.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (l <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((k <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (l = i_1) \/ (n = i_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < i_1) -> ((l <= i_3) -> (l = i_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 < i_1.
  (* Invariant *)
  Have: l <= i_1.
  (* Invariant *)
  Have: (x = l) \/ (x = n).
  (* Invariant *)
  Have: (2 + i_1) <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> (l <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((l <= i_3) -> ((i_3 < n) -> (i_1 < i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((l <= i_3) -> (x = l))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < n) -> (l <= i_3))).
  (* Invariant *)
  Have: l <= x.
}
Prove: l <= i.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (38852)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/027_0025/027_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/027_0025/027_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/027_0025/027_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/027_0025/027_merged.c, line 73):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/027_0025/027_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo027'.
  Callers assumptions might be imprecise.
