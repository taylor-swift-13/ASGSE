[kernel] Parsing out/024_0006/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 51 goals scheduled
[wp] Proved goals:   51 / 51
  Qed:              41
  Alt-Ergo 2.5.4:   10
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 8):
Let x = 1 + i_3.
Assume {
  Type: is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (j <= i_2) /\ (i_2 < n) /\ (i_3 < i_1) /\ (i_1 <= j) /\
      (i <= x).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      ((i_5 <= j_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_1 <= i_4) -> ((i_5 <= j_1) ->
      ((i_4 <= k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((0 <= i_6) ->
      ((i_3 <= i_5) -> ((j_2 <= i_4) -> ((i_4 < n) -> ((i_5 <= j_2) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((0 <= i_6) ->
      ((i_3 <= i_5) -> ((j_2 <= i_4) -> ((i_5 <= j_2) -> ((i_4 <= k_1) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_3 <= j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
}
Prove: (i <= i_1) /\ (i_1 <= i_2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (37953)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (0.70ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 8):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (i_2 <= 0) /\ (0 <= i_2) /\ (0 <= i) /\ (j <= i_1) /\ (i_1 < n) /\
      (i <= j).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:0.74ms) (10ms) (29953)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.74ms) (5ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 9):
Let x = 1 + i_3.
Assume {
  Type: is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (j <= i_2) /\ (i_3 < i_1) /\ (i_1 <= j) /\ (i_2 <= k) /\
      (i <= x).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_1 <= i_4) -> ((i_4 < n) ->
      ((i_5 <= j_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_1 <= i_4) -> ((i_5 <= j_1) ->
      ((i_4 <= k_1) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((0 <= i_6) ->
      ((i_3 <= i_5) -> ((j_2 <= i_4) -> ((i_4 < n) -> ((i_5 <= j_2) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((0 <= i_6) ->
      ((i_3 <= i_5) -> ((j_2 <= i_4) -> ((i_5 <= j_2) -> ((i_4 <= k_2) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_3 <= j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
}
Prove: (i <= i_1) /\ (i_1 <= i_2).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (38293)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 9):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (i_2 <= 0) /\ (0 <= i_2) /\ (0 <= i) /\ (j <= i_1) /\ (i <= j) /\
      (i_1 <= k).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((j <= i_3) -> ((i_3 < n) ->
      ((i_4 <= j) -> (i_4 <= i_3))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30802)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 11):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      ((i_3 <= j_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_3 <= j_1) ->
      ((i_2 <= k) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_2 < n) -> ((i_3 <= j_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_3 <= j_2) -> ((i_2 <= k_1) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_1 < i_3) -> ((0 <= i_4) -> ((j <= i_2) ->
      ((i_3 <= j) -> ((i_2 <= k_2) -> ((i_4 <= x) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (38718)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (4ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 25):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_2 <= j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_2 <= j_2) -> ((i_1 <= k_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (37672)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (4ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 27):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      ((i_3 <= j_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_3 <= j_1) ->
      ((i_2 <= k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_2 < n) -> ((i_3 <= j_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_3 <= j_2) -> ((i_2 <= k_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38186)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 28):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_2 < n) ->
      ((i_3 <= j_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_1 <= i_2) -> ((i_3 <= j_1) ->
      ((i_2 <= k_1) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_2 < n) -> ((i_3 <= j_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      ((i_1 <= i_3) -> ((j_2 <= i_2) -> ((i_3 <= j_2) -> ((i_2 <= k_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 <= j) -> (i_2 < k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (38936)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (8ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 39):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_2 <= j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_2 <= j_2) -> ((i_1 <= k_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37674)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 41):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_2 <= j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_1 < n) -> ((i_2 <= j_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((i <= i_2) ->
      ((j_2 <= i_1) -> ((i_2 <= j_2) -> ((i_1 <= k_2) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (37776)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (18)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 47):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0006/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
