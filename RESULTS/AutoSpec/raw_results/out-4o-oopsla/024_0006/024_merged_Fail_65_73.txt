[kernel] Parsing out/024_0006/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 73 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_4_established (Qed 0.69ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_5_established (Qed 0.80ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_18_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_18_established (Qed 9ms) (Z3)
[wp] Proved goals:   65 / 73
  Qed:              55
  Alt-Ergo 2.5.4:   10 (2ms-6ms-8ms)
  Timeout:           8
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 8):
Assume { Type: is_sint32(k) /\ is_sint32(n). }
Prove: k <= n.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
}
Prove: j <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 10):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
}
Prove: j <= k.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 11):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.69ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.69ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 12):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + i).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_1 <= i_1) -> ((i_2 <= j_1) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k_1) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i_1 < n))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((0 <= i_3) ->
      ((i <= i_2) -> ((i <= i_1) -> ((i_1 < n) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((i_1 <= i) ->
      ((0 <= i_3) -> ((i <= i_2) -> ((i <= i_1) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < k) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (39823)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (7ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 12):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:0.80ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.80ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 13):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 14):
Let x = 1 + i_3.
Assume {
  Type: is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (j <= i_2) /\ (i_2 < n) /\ (i_3 < i_1) /\ (i_1 <= j) /\
      (i <= x).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_2 <= i_4) -> ((i_4 < n) ->
      ((i_5 <= j_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_2 <= i_4) -> ((i_5 <= j_2) ->
      ((i_4 <= k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i_3.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((i_5 <= i_3) ->
      ((0 <= i_6) -> ((i_3 <= i_5) -> ((i_3 <= i_4) -> ((i_4 < n) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((i_5 <= i_3) ->
      ((i_4 <= i_3) -> ((0 <= i_6) -> ((i_3 <= i_5) -> ((i_3 <= i_4) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_3 <= j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < j) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_3 < j.
}
Prove: (i <= i_1) /\ (i_1 <= i_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (6ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 14):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (i_2 <= 0) /\ (0 <= i_2) /\ (0 <= i) /\ (j <= i_1) /\ (i_1 < n) /\
      (i <= j).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (31187)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (8ms) (38)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 15):
Let x = 1 + i_3.
Assume {
  Type: is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (j <= i_2) /\ (i_3 < i_1) /\ (i_1 <= j) /\ (i_2 <= j) /\
      (i <= x).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_2 <= i_4) -> ((i_4 < n) ->
      ((i_5 <= j_2) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((j_2 <= i_4) -> ((i_5 <= j_2) ->
      ((i_4 <= k) -> (i_5 <= i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < k) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j_2) -> (i_4 < n))).
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i_3.
  (* Invariant *)
  Have: i_3 <= j_1.
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((i_5 <= i_3) ->
      ((0 <= i_6) -> ((i_3 <= i_5) -> ((i_3 <= i_4) -> ((i_4 < n) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_6,i_5,i_4 : Z. ((i_6 <= i_3) -> ((i_5 <= i_3) ->
      ((i_4 <= i_3) -> ((0 <= i_6) -> ((i_3 <= i_5) -> ((i_3 <= i_4) ->
      ((i_6 <= i_5) /\ (i_5 <= i_4)))))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_3 <= i_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < i_2) -> ((i_3 <= i_4) -> (i_4 < n))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= i_2.
  (* Invariant *)
  Have: i_3 < i_2.
}
Prove: (i <= i_1) /\ (i_1 <= i_2).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (41421)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (7ms) (86)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 15):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (i_2 <= 0) /\ (0 <= i_2) /\ (0 <= i) /\ (j <= i_1) /\ (i <= j) /\
      (i_1 <= k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((j <= i_3) -> ((i_3 < n) ->
      ((i_4 <= j) -> (i_4 <= i_3))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32012)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (38)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 16):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (j <= i) /\ (i < k).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j <= i_1) -> ((i_2 <= j) ->
      ((i_1 <= k) -> (i_2 <= i_1))))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32497)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (30)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 17):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j <= i_1) -> ((i_2 <= j) ->
      ((i_1 <= k) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (i_1 < n))).
}
Prove: i < n.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33145)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (30)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 19):
Let x = 1 + i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_2 <= i_2) -> ((i_2 < n) ->
      ((i_3 <= j_2) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((j_2 <= i_2) -> ((i_3 <= j_2) ->
      ((i_2 <= k) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 < n))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i_1.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((i_3 <= i_1) ->
      ((0 <= i_4) -> ((i_1 <= i_3) -> ((i_1 <= i_2) -> ((i_2 < n) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_4 <= i_1) -> ((i_3 <= i_1) ->
      ((i_2 <= i_1) -> ((0 <= i_4) -> ((i_1 <= i_3) -> ((i_1 <= i_2) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: forall i_4,i_3,i_2 : Z. ((i_1 < i_3) -> ((0 <= i_4) -> ((j <= i_2) ->
      ((i_3 <= j) -> ((i_2 <= j) -> ((i_4 <= x) ->
      ((i_4 <= i_3) /\ (i_3 <= i_2)))))))).
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (41741)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (6ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 33):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_2) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_2 <= j_2) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j_2 <= i_1) -> ((i_1 < k_1) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 < n))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((0 <= i_3) ->
      ((i <= i_2) -> ((i <= i_1) -> ((i_1 < n) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((i_1 <= i) ->
      ((0 <= i_3) -> ((i <= i_2) -> ((i <= i_1) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: x = k.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 33):
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((j_2 <= i) -> ((i < n) ->
      ((i_1 <= j_2) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((j_2 <= i) -> ((i_1 <= j_2) ->
      ((i <= k_1) -> (i_1 <= i))))).
  (* Invariant *)
  Have: forall i : Z. ((j_2 <= i) -> ((i < k_1) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_2) -> (i < n))).
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= j_1.
  (* Invariant *)
  Have: forall i_2,i_1,i : Z. ((0 <= i_2) -> ((j <= i_1) -> ((j_1 <= i) ->
      ((i < n) -> ((i_2 <= j) -> ((i_1 <= j_1) ->
      ((i_2 <= i_1) /\ (i_1 <= i)))))))).
  (* Invariant *)
  Have: forall i_2,i_1,i : Z. ((0 <= i_2) -> ((j <= i_1) -> ((j_1 <= i) ->
      ((i_2 <= j) -> ((i_1 <= j_1) -> ((i <= k) ->
      ((i_2 <= i_1) /\ (i_1 <= i)))))))).
  (* Invariant *)
  Have: forall i : Z. ((j_1 <= i) -> ((i < k) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < j_1) -> (i < n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < n))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
}
Prove: k = j.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 50):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_2) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_2 <= j_2) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j_2 <= i_1) -> ((i_1 < k_1) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 < n))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((0 <= i_3) ->
      ((i <= i_2) -> ((i <= i_1) -> ((i_1 < n) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((i_1 <= i) ->
      ((0 <= i_3) -> ((i <= i_2) -> ((i <= i_1) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (40641)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (2ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 52):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: k_1 <= n.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: j_2 <= k_1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_1 < n) ->
      ((i_2 <= j_2) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((j_2 <= i_1) -> ((i_2 <= j_2) ->
      ((i_1 <= k_1) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j_2 <= i_1) -> ((i_1 < k_1) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 < n))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((0 <= i_3) ->
      ((i <= i_2) -> ((i <= i_1) -> ((i_1 < n) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_3,i_2,i_1 : Z. ((i_3 <= i) -> ((i_2 <= i) -> ((i_1 <= i) ->
      ((0 <= i_3) -> ((i <= i_2) -> ((i <= i_1) ->
      ((i_3 <= i_2) /\ (i_2 <= i_1)))))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (40743)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (5ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0006/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0006/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0006/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0006/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
