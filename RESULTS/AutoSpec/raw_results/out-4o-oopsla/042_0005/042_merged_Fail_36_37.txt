[kernel] Parsing out/042_0005/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0005/042_merged.c:36: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0005/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 37 goals scheduled
[wp] [Timeout] typed_foo042_assert (Qed 9ms) (Z3)
[wp] Proved goals:   36 / 37
  Qed:              26
  Alt-Ergo 2.5.4:    8 (4ms-11ms-21ms)
  Z3 4.8.12:         2
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 15):
Let x_3 = x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: (1 + x) = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ ((1 + x) = x_2). Have: (1 + x_2) = x_1. }
}
Prove: x_4 = ((x_1 + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (40ms) (111850)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (19ms) (314)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 16):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_5 % 2) = x_6)).
}
Prove: a <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:33ms) (10ms) (46765)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:33ms) (9ms) (155)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 17):
Let x_3 = 1 + x + y.
Let x_4 = a % 2.
Let x_5 = (1 + x_2 + y_2) % 2.
Let x_6 = x_2 + y_2.
Let x_7 = x_6 % 2.
Let x_8 = a_1 % 2.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(1 + x).
  (* Residual *)
  When: x_4 != 1.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_7 = x_8)).
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = x_8)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_2).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_5 else x_7) = x_8.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (y_2 = y).
    Have: (x_1 + y) = a.
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (x_2 = x) /\ (y_2 = y_1).
    Have: (1 + x + y_1) = a.
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_3 % 2) = x_4)).
  (* Invariant *)
  Have: a <= x_3.
}
Prove: x_4 = 0.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (43271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (9ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 18):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  (* Goal *)
  When: 0 <= i.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_6 % 2) = x_5)).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (10ms) (45930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (7ms) (94)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 19):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_6 % 2) = x_5)).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
}
Prove: exists i_2 : Z. 0 <= i_2.
Prover Z3 4.8.12 returns Valid (Qed:29ms) (10ms) (31674)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 19):
Let x = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0).
  If flag_0 != 0
  Then { Have: a = 0. }
  Else { Have: a = 1. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x = 0)).
  (* Invariant *)
  Have: a <= 2.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (0 <= a)).
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (24720)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 20):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_6 % 2) = x_5)).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: 0 <= i_2.
}
Prove: 2 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:33ms) (20ms) (44374)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:33ms) (4ms) (95)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 22):
Let x_2 = x_1 + y_1.
Let x_3 = x + y.
Let x_4 = 1 + x + y.
Let x_5 = x_4 % 2.
Let x_6 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_4).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_3 < x_2.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((-1) <= x_3)).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_2.
}
Prove: x_5 = ((1 + x_1 + y_1) % 2).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (60ms) (225549)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (21ms) (269)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 25):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = (1 + x_4 + y_4) % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_10)).
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_10)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_9) = x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> ((x_6 % 2) = x_5)).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (((1 + x + y) % 2) = x_5)).
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:39ms) (20ms) (51570)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:39ms) (12ms) (210)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 30):
Let x_5 = (1 + x + y) % 2.
Let x_6 = x + y.
Let x_7 = x_6 % 2.
Let x_8 = a % 2.
Let x_9 = (1 + x_4 + y_4) % 2.
Let x_10 = x_4 + y_4.
Let x_11 = x_10 % 2.
Let x_12 = a_1 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = x_12)).
  (* Invariant *)
  Have: a_1 <= x_10.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_10.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_12)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_11) = x_12.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_8 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_7 = x_8)).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = x_8)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_5 else x_7) = x_8.
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:36ms) (10ms) (39427)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (8ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0005/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0005/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/042_0005/042_merged.c, line 53):
Let x_1 = (1 + x + y) % 2.
Let x_2 = x + y.
Let x_3 = x_2 % 2.
Let x_4 = a_2 % 2.
Let x_5 = a_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y).
  If flag_0 != 0
  Then { Have: a_3 = 0. }
  Else { Have: a_3 = 1. }
  (* Invariant *)
  Have: a_3 <= 2.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_5 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_5 = 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: 0 <= a_3.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_3 = x_4)).
  (* Invariant *)
  Have: a_2 <= x_2.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_1 = x_4)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_1 else x_3) = x_4.
  (* Invariant *)
  Have: 0 <= a_2.
  If flag_0 != 0
  Then { Have: a_2 = a_1. Have: (1 + a_1) = a. }
  Else { Have: a_2 = a. }
}
Prove: (a % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/042_0005/042_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0005/042_merged.c, line 32) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0005/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0005/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
