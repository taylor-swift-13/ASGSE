[kernel] Parsing out/014_0012/014_merged.c (with preprocessing)
[kernel:typing:no-proto] out/014_0012/014_merged.c:37: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/014_0012/014_merged.c:6: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 46 goals scheduled
[wp] [Timeout] typed_foo014_loop_invariant_2_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_5_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo014_loop_invariant_7_preserved (Qed 19ms) (Z3)
[wp] Proved goals:   43 / 46
  Qed:              38
  Alt-Ergo 2.5.4:    4 (8ms-10ms)
  Z3 4.8.12:         1 (2.3s)
  Timeout:           3
------------------------------------------------------------
  Function foo014
------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 12):
Let a_1 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(a - 1) /\
      is_sint32(1 + j).
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: j <= (1 + a).
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_1).
  (* Invariant *)
  Have: x_1 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 15):
Let a_1 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = a + j.
Let x_2 = 1 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_1).
  (* Invariant *)
  Have: x_1 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
}
Prove: (2 + a) <= m.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 16):
Let a_1 = IAbs.abs(a).
Let x = 1 + m.
Let x_1 = a + j.
Let x_2 = 1 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x).
  (* Invariant *)
  Have: j <= x_2.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_1).
  (* Invariant *)
  Have: x_1 <= (2 * m).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a < i_1) /\ (0 < (a + i_1))))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: (2 + a) <= m.
}
Prove: (a < i) /\ ((-1) <= (a + i)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (8ms) (98)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 17):
Let x = 1 + a.
Let x_1 = 2 + a.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Goal *)
  When: (0 < i) /\ (i <= j).
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= (2 * m).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a <= i_1) /\ (0 <= (a + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < j) ->
      ((a < i_1) /\ (0 < (a + i_1))))).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x) ->
      ((a < i_1) /\ ((-1) <= (a + i_1))))).
}
Prove: (0 <= (a + i)) /\ (x_1 <= i).
Prover Z3 4.8.12 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 18):
Let x = 2 + a.
Let x_1 = 1 + a.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x_1) ->
      ((a < i) /\ ((-1) <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. (i <= 0) \/ (x <= i).
}
Prove: (2 + (2 * a)) <= m.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (2.3s) (1096142)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 19):
Let x = 2 + a.
Let x_1 = 1 + a.
Let a_1 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (j + a_1) <= x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_1 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x_1) ->
      ((a < i) /\ ((-1) <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. (i <= 0) \/ (x <= i).
  (* Invariant *)
  Have: (2 + (2 * a)) <= m.
}
Prove: IAbs.abs(x_1) <= m.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37119)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (9ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 20):
Let x = 1 + a.
Let a_1 = IAbs.abs(x).
Let x_1 = 2 + a.
Let a_2 = IAbs.abs(a).
Let x_2 = 1 + m.
Let x_3 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_2).
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_3).
  (* Invariant *)
  Have: x_3 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a_2 <= m.
  (* Invariant *)
  Have: (j + a_2) <= x_2.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= (a + m)).
  (* Invariant *)
  Have: a_2 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x_1 <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x) ->
      ((a < i) /\ ((-1) <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. (i <= 0) \/ (x_1 <= i).
  (* Invariant *)
  Have: (2 + (2 * a)) <= m.
  (* Invariant *)
  Have: a_1 <= m.
}
Prove: (a + a_1) < m.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37290)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (10ms) (95)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 29):
Let x = a + m.
Let x_1 = 1 + a.
Let a_1 = IAbs.abs(x_1).
Let x_2 = 2 + a.
Let a_2 = IAbs.abs(a).
Let x_3 = 1 + m.
Let x_4 = a + j.
Assume {
  Type: is_sint32(a) /\ is_sint32(j) /\ is_sint32(m) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Residual *)
  When: tmp_0 != 0.
  (* Invariant *)
  Have: 0 < m.
  (* Invariant *)
  Have: (0 < j) /\ (j <= x_3).
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: j <= (1 + a + m).
  (* Invariant *)
  Have: (a < j) /\ (0 < x_4).
  (* Invariant *)
  Have: x_4 <= (2 * m).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a <= i) /\ (0 <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i < j) -> ((a < i) /\ (0 < (a + i))))).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: a_2 <= m.
  (* Invariant *)
  Have: (j + a_2) <= x_3.
  (* Invariant *)
  Have: (a <= m) /\ (0 <= x).
  (* Invariant *)
  Have: a_2 < j.
  (* Then *)
  Have: j <= m.
  (* Invariant *)
  Have: x_2 <= m.
  (* Invariant *)
  Have: forall i : Z. ((0 < i) -> ((i <= x_1) ->
      ((a < i) /\ ((-1) <= (a + i))))).
  (* Invariant *)
  Have: forall i : Z. (i <= 0) \/ (x_2 <= i).
  (* Invariant *)
  Have: (2 + (2 * a)) <= m.
  (* Invariant *)
  Have: a_1 <= m.
  (* Invariant *)
  Have: (a + a_1) < m.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: a_1 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (37536)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (10ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/014_0012/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/014_0012/014_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Loop assigns (file out/014_0012/014_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/014_0012/014_merged.c, line 33) (2/2):
Call Result at line 37
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/014_0012/014_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/014_0012/014_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo014'.
  Callers assumptions might be imprecise.
