[kernel] Parsing out/046_0003/046_merged.c (with preprocessing)
[kernel:typing:no-proto] out/046_0003/046_merged.c:37: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/046_0003/046_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 38 goals scheduled
[wp] [Timeout] typed_foo046_loop_invariant_18_preserved (Qed 26ms) (Z3)
[wp] Proved goals:   37 / 38
  Qed:              30
  Alt-Ergo 2.5.4:    7 (5ms-31ms)
  Timeout:           1
------------------------------------------------------------
  Function foo046
------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 14):
Let x_1 = w % 2.
Let x_2 = 1 + x.
Let x_3 = z / 2.
Let x_4 = 1 + x_3.
Let x_5 = 1 + z.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_3 <= z.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_2 = w)).
  (* Invariant *)
  Have: ((x_1 = 0) /\ ((2 + x) = w)) \/ ((x_1 = 1) /\ (x_2 = w)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 % 2) = (x_5 % 2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (37762)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (20ms) (370)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 15):
Let x_1 = z / 2.
Let x_2 = 1 + x_1.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = w % 2.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = w)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ ((2 + x) = w)) \/ ((x_5 = 1) /\ (x_6 = w)).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_4.
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (36806)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (25ms) (361)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 19):
Let x_3 = z % 2.
Let x_4 = z_2 % 2.
Let x_5 = w % 2.
Let x_6 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2).
  (* Invariant *)
  Have: x_4 = (y_2 % 2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: x_2 <= y_2.
  (* Invariant *)
  Have: x_2 <= (1 + y_2).
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((x_4 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: ((x_5 = 1) -> (x_6 = w)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ ((2 + x_2) = w)) \/ ((x_5 = 1) /\ (x_6 = w)).
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If x_4 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
}
Prove: x <= y.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (20ms) (47664)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (25ms) (582)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 20):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z / 2.
Let x_4 = 1 + x_3.
Let x_5 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(z) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_4).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_3 <= z.
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 2) = x_2.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
}
Prove: x <= (2 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (32686)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (5ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 22):
Let x_1 = z % 2.
Let x_2 = z_2 % 2.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x_3) /\ is_sint32(2 + x).
  (* Residual *)
  When: (x_3 % 2) = 1.
  (* Invariant *)
  Have: x_2 = (y_2 % 2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: x <= y_2.
  (* Invariant *)
  Have: x <= (1 + y_2).
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((z_2 / 2) = y_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If x_2 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_1 = (y % 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
  (* Invariant *)
  Have: x < y.
}
Prove: x <= 0.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (41021)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (21ms) (370)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (26ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 27):
Let x_3 = w % 2.
Let x_4 = z / 2.
Let x_5 = 1 + x_4.
Let x_6 = 1 + z.
Let x_7 = x_6 % 2.
Let x_8 = w_2 % 2.
Let x_9 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(w_1) /\
      is_sint32(w_2) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(z) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_4 <= z.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= w_2.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: 0 < w_2.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((x_8 = 1) -> (x_9 = w_2)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ ((2 + x_2) = w_2)) \/ ((x_8 = 1) /\ (x_9 = w_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If x_8 = 1
  Then {
    Have: (w_2 = w_1) /\ (x_2 = x_1).
    Have: (1 + x_1) = x.
    Have: (1 + w_1) = w.
  }
  Else { Have: (w_2 = w) /\ (x_2 = x). }
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x <= (2 + x_4).
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: 0 < w.
}
Prove: (-3) <= z.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (36382)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (5ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 29):
Let x_3 = w % 2.
Let x_4 = z / 2.
Let x_5 = 1 + x_4.
Let x_6 = w_2 % 2.
Let x_7 = 1 + x_2.
Let x_8 = 1 + z.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(w_1) /\
      is_sint32(w_2) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(z) /\ is_sint32(x_4) /\ is_sint32(x_8) /\ is_sint32(x_5).
  (* Residual *)
  When: (z % 2) = 0.
  (* Goal *)
  When: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_4 <= z.
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= w_2.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: 0 < w_2.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = w_2)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ ((2 + x_2) = w_2)) \/ ((x_6 = 1) /\ (x_7 = w_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then {
    Have: (w_2 = w_1) /\ (x_2 = x_1).
    Have: (1 + x_1) = x.
    Have: (1 + w_1) = w.
  }
  Else { Have: (w_2 = w) /\ (x_2 = x). }
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x <= (2 + x_4).
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: (-3) <= z.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: (x_8 / 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (40920)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (31ms) (493)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0003/046_merged.c, line 31):
Let x_1 = z % 2.
Let x_2 = z_2 % 2.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x_3) /\ is_sint32(2 + x).
  (* Residual *)
  When: (x_3 % 2) = 1.
  (* Invariant *)
  Have: x_2 = (y_2 % 2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: x <= y_2.
  (* Invariant *)
  Have: x <= (1 + y_2).
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((z_2 / 2) = y_2)).
  (* Then *)
  Have: tmp_0 != 0.
  If x_2 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_1 = (y % 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: x <= 0.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((z / 2) = y)).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:26ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:26ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0003/046_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0003/046_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0003/046_merged.c, line 32) (2/2):
Call Result at line 37
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/046_0003/046_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/046_0003/046_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo046'.
  Callers assumptions might be imprecise.
