[kernel] Parsing out/042_0006/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0006/042_merged.c:65: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0006/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 94 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_22_established (Qed 3ms) (Z3)
[wp] Proved goals:   93 / 94
  Qed:              71
  Alt-Ergo 2.5.4:   17 (5ms-12ms-29ms)
  Z3 4.8.12:         5 (10ms-12ms-20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 15):
Let x_5 = 1 + x_4 + y_4.
Let x_6 = x_5 % 2.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_10.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_5.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_9 = x_7) \/ (x_6 = x_7).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_7)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_9) = x_7.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_6 = x_7)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
}
Prove: x <= (1 + y).
Prover Z3 4.8.12 returns Valid (Qed:64ms) (10ms) (32013)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 17):
Let x_5 = 1 + x_4 + y_4.
Let x_6 = x_5 % 2.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_10.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_5.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_9 = x_7) \/ (x_6 = x_7).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_7)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_9) = x_7.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_6 = x_7)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
}
Prove: x <= y.
Prover Z3 4.8.12 returns Valid (Qed:65ms) (32104)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:65ms) (29ms) (622)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 24):
Let x_5 = 1 + x_4 + y_4.
Let x_6 = x_5 % 2.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_2 % 2.
Let x_11 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_10.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_5.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: (x_9 = x_7) \/ (x_6 = x_7).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_9 = x_7)).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_9) = x_7.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_6 = x_7)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
}
Prove: (x_11 <= a) \/ (2 <= x_11).
Prover Z3 4.8.12 returns Valid (Qed:40ms) (10ms) (32360)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (8ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 27):
Let x_5 = x + y.
Let x_6 = 1 + x_4 + y_4.
Let x_7 = x_6 % 2.
Let x_8 = a_1 % 2.
Let x_9 = x_4 + y_4.
Let x_10 = x_9 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 <= x_9.
  (* Invariant *)
  Have: (x_10 = x_8) \/ (x_7 = x_8).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = x_8)).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_10) = x_8.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_9.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_8)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
}
Prove: (a <= (flag_0 + x + y)) \/ (a <= (1 + x + y)).
Prover Z3 4.8.12 returns Valid (Qed:49ms) (10ms) (32633)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:49ms) (8ms) (170)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 28):
Let x_5 = flag_0 + x + y.
Let x_6 = x + y.
Let x_7 = 1 + x_4 + y_4.
Let x_8 = x_7 % 2.
Let x_9 = a_1 % 2.
Let x_10 = x_4 + y_4.
Let x_11 = x_10 % 2.
Let x_12 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_12.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_12 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_7.
  (* Invariant *)
  Have: a_1 <= x_10.
  (* Invariant *)
  Have: (x_11 = x_9) \/ (x_8 = x_9).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_8 else x_11) = x_9.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_10.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_8 = x_9)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_6 <= a) \/ (2 <= x_6).
  (* Invariant *)
  Have: (a <= x_5) \/ (a <= (1 + x + y)).
}
Prove: (a <= x_5) \/ (2 <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:46ms) (10ms) (32644)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:46ms) (11ms) (168)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 29):
Let x_5 = flag_0 + x + y.
Let x_6 = x + y.
Let x_7 = 1 + x + y.
Let x_8 = 1 + x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: (x_12 = x_10) \/ (x_9 = x_10).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_10)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_12) = x_10.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_11.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_10)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_6 <= a) \/ (2 <= x_6).
  (* Invariant *)
  Have: (a <= x_5) \/ (a <= x_7).
  (* Invariant *)
  Have: (a <= x_5) \/ (2 <= x_6).
}
Prove: a <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:49ms) (10ms) (32671)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:49ms) (6ms) (141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 34):
Let x_5 = x + y.
Let x_6 = 1 + x_4 + y_4.
Let x_7 = x_6 % 2.
Let x_8 = a_1 % 2.
Let x_9 = x_4 + y_4.
Let x_10 = x_9 % 2.
Let x_11 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_11.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_11 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_6.
  (* Invariant *)
  Have: a_1 <= x_9.
  (* Invariant *)
  Have: (x_10 = x_8) \/ (x_7 = x_8).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = x_8)).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_10) = x_8.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_9.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_7 = x_8)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= (flag_0 + x + y)) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= (1 + x + y).
}
Prove: a <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:47ms) (10ms) (32788)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:47ms) (11ms) (167)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 35):
Let x_5 = x + y.
Let x_6 = 1 + x + y.
Let x_7 = a % 2.
Let x_8 = 1 + x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: (x_12 = x_10) \/ (x_9 = x_10).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_10)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_12) = x_10.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_11.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_10)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_7 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= (flag_0 + x + y)) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: a <= x_5.
}
Prove: ((x_5 % 2) = x_7) \/ ((x_6 % 2) = x_7).
Prover Z3 4.8.12 returns Valid (Qed:47ms) (10ms) (33204)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 36):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = 1 + x + y.
Let x_8 = 1 + x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  (* Goal *)
  When: 0 <= i.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: (x_12 = x_10) \/ (x_9 = x_10).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_10)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_12) = x_10.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_11.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_10)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= (flag_0 + x + y)) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: ((x_5 % 2) = x_6) \/ ((x_7 % 2) = x_6).
}
Prove: i <= a.
Prover Z3 4.8.12 returns Valid (Qed:41ms) (10ms) (33445)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 36):
Let x = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0).
  (* Goal *)
  When: 0 <= i.
  If flag_0 != 0
  Then { Have: a = 0. }
  Else { Have: a = 1. }
  (* Invariant *)
  Have: a <= 3.
  (* Invariant *)
  Have: a <= 2.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
}
Prove: i <= a.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 37):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = 1 + x + y.
Let x_8 = 1 + x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  (* Goal *)
  When: 0 <= i.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: (x_12 = x_10) \/ (x_9 = x_10).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_10)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_12) = x_10.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_11.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_10)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= (flag_0 + x + y)) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: ((x_5 % 2) = x_6) \/ ((x_7 % 2) = x_6).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a)).
}
Prove: 0 <= a.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (9ms) (111)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 40):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = 1 + x + y.
Let x_8 = 1 + x_4 + y_4.
Let x_9 = x_8 % 2.
Let x_10 = a_1 % 2.
Let x_11 = x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_13.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_13 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_8.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: (x_12 = x_10) \/ (x_9 = x_10).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_12 = x_10)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_9 else x_12) = x_10.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_11.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_9 = x_10)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= (flag_0 + x + y)) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: ((x_5 % 2) = x_6) \/ ((x_7 % 2) = x_6).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
}
Prove: (0 <= a) \/ (x_5 <= a).
Prover Z3 4.8.12 returns Valid (Qed:53ms) (10ms) (33698)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:53ms) (9ms) (114)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 41):
Let x_3 = x + y.
Let x_4 = x_1 + y_1.
Let x_5 = x_3 % 2.
Let x_6 = 1 + x_1 + y_1.
Let x_7 = flag_0 + x_1 + y_1.
Let x_8 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= 0)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: a <= (1 + x + y).
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: x_5 = x_8.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: (1 + x) = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ ((1 + x) = x_2). Have: (1 + x_2) = x_1. }
  (* Invariant *)
  Have: x_1 <= (1 + y_1).
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: (x_4 <= x_3) \/ (2 <= x_4).
  (* Invariant *)
  Have: (x_3 <= x_7) \/ (2 <= x_4).
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_5 = (x_4 % 2)) \/ ((x_6 % 2) = x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= x_3)).
  (* Invariant *)
  Have: (0 <= x_3) \/ (x_4 <= x_3).
}
Prove: (0 <= x_3) \/ (x_3 <= x_7).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (30088)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 43):
Let x_5 = flag_0 + x + y.
Let x_6 = x + y.
Let x_7 = a % 2.
Let x_8 = 1 + x + y.
Let x_9 = 1 + x_4 + y_4.
Let x_10 = x_9 % 2.
Let x_11 = a_1 % 2.
Let x_12 = x_4 + y_4.
Let x_13 = x_12 % 2.
Let x_14 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_14.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_14 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_14 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_9.
  (* Invariant *)
  Have: a_1 <= x_12.
  (* Invariant *)
  Have: (x_13 = x_11) \/ (x_10 = x_11).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = x_11)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_10 else x_13) = x_11.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_12.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = x_11)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_7 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_6 <= a) \/ (2 <= x_6).
  (* Invariant *)
  Have: (a <= x_5) \/ (2 <= x_6).
  (* Invariant *)
  Have: a <= x_8.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: ((x_6 % 2) = x_7) \/ ((x_8 % 2) = x_7).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_6 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_5).
}
Prove: (0 <= a) \/ (2 <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:58ms) (33859)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:58ms) (6ms) (121)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 44):
Let x_5 = x + y.
Let x_6 = flag_0 + x + y.
Let x_7 = a % 2.
Let x_8 = 1 + x + y.
Let x_9 = 1 + x_4 + y_4.
Let x_10 = x_9 % 2.
Let x_11 = a_1 % 2.
Let x_12 = x_4 + y_4.
Let x_13 = x_12 % 2.
Let x_14 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_14.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_14 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_14 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_9.
  (* Invariant *)
  Have: a_1 <= x_12.
  (* Invariant *)
  Have: (x_13 = x_11) \/ (x_10 = x_11).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = x_11)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_10 else x_13) = x_11.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_12.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = x_11)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_7 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_5 <= a) \/ (2 <= x_5).
  (* Invariant *)
  Have: (a <= x_6) \/ (2 <= x_5).
  (* Invariant *)
  Have: a <= x_8.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: ((x_5 % 2) = x_7) \/ ((x_8 % 2) = x_7).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_5 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_6).
  (* Invariant *)
  Have: (0 <= a) \/ (2 <= x_5).
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.12 returns Valid (Qed:52ms) (10ms) (34363)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:52ms) (12ms) (234)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 45):
Let x_3 = x + y.
Let x_4 = x_1 + y_1.
Let x_5 = flag_0 + x_1 + y_1.
Let x_6 = x_3 % 2.
Let x_7 = x_4 % 2.
Let x_8 = 1 + x_1 + y_1.
Let x_9 = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y_1) /\
      is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= 0)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: a <= (1 + x + y).
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: x_6 = x_9.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_6 = 1
  Then { Have: (1 + x) = x_1. Have: (1 + y) = y_1. }
  Else { Have: (y = y_1) /\ ((1 + x) = x_2). Have: (1 + x_2) = x_1. }
  (* Invariant *)
  Have: x_1 <= (1 + y_1).
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: (x_4 <= x_3) \/ (2 <= x_4).
  (* Invariant *)
  Have: (x_3 <= x_5) \/ (2 <= x_4).
  (* Invariant *)
  Have: x_3 <= x_8.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_6 = x_7) \/ ((x_8 % 2) = x_6).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= x_3)).
  (* Invariant *)
  Have: (0 <= x_3) \/ (x_4 <= x_3).
  (* Invariant *)
  Have: (0 <= x_3) \/ (x_3 <= x_5).
  (* Invariant *)
  Have: (0 <= x_3) \/ (2 <= x_4).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
}
Prove: x_6 = x_7.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (30541)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (26ms) (331)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 47):
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = 1 + flag_0 + x + y.
Let x_8 = 2 + x + y.
Let x_9 = 1 + x_2 + y_2.
Let x_10 = x_9 % 2.
Let x_11 = a_1 % 2.
Let x_12 = x_2 + y_2.
Let x_13 = x_12 % 2.
Let x_14 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(1 + x).
  (* Residual *)
  When: x_5 != 1.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_14 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_14.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_14 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_14 = 1)).
  (* Invariant *)
  Have: x_2 <= (1 + y_2).
  (* Invariant *)
  Have: x_2 <= y_2.
  (* Invariant *)
  Have: a_1 <= x_9.
  (* Invariant *)
  Have: a_1 <= x_12.
  (* Invariant *)
  Have: (x_13 = x_11) \/ (x_10 = x_11).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_2).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_13 = x_11)).
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_11 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_10 else x_13) = x_11.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_12.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = x_11)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (y_2 = y).
    Have: (x_1 + y) = a.
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (x_2 = x) /\ (y_2 = y_1).
    Have: (1 + x + y_1) = a.
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: (0 < x_6) \/ (x_6 < a).
  (* Invariant *)
  Have: (0 < x_6) \/ (a <= x_7).
  (* Invariant *)
  Have: a <= x_8.
  (* Invariant *)
  Have: a <= x_3.
  (* Invariant *)
  Have: (x_4 = x_5) \/ ((x_8 % 2) = x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_6 < a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_7).
  (* Invariant *)
  Have: (0 <= a) \/ (0 < x_6).
  (* Invariant *)
  Have: (0 < y) /\ (0 <= x).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 = x_5)).
}
Prove: x_5 = 0.
Prover Z3 4.8.12 returns Valid (Qed:42ms) (10ms) (33266)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:42ms) (11ms) (198)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 49):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Let x_5 = x_1 + y_1.
Let x_6 = (1 + x_1 + y_1) % 2.
Let x_7 = a % 2.
Let x_8 = 1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_8) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= 1)).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: x <= x_8.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ (x_8 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_8 = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= (1 + y_1).
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: (2 <= x_5) \/ (x_5 <= x_2).
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: x_4 < x_5.
  (* Invariant *)
  Have: (x_3 = (x_5 % 2)) \/ (x_3 = x_6).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((-1) <= x_4)).
  (* Invariant *)
  Have: ((-1) <= x_4) \/ (x_5 <= x_2).
  (* Invariant *)
  Have: ((-1) <= x_4) \/ (2 <= x_5).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
}
Prove: x_3 = x_6.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (30147)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (28ms) (325)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 50):
Let x_5 = 1 + x + y.
Let x_6 = x_5 % 2.
Let x_7 = x + y.
Let x_8 = x_7 % 2.
Let x_9 = a % 2.
Let x_10 = flag_0 + x + y.
Let x_11 = 1 + x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_1 % 2.
Let x_14 = x_4 + y_4.
Let x_15 = x_14 % 2.
Let x_16 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  (* Goal *)
  When: 0 <= i.
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_16 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_16.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_16 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_16 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: a_1 <= x_14.
  (* Invariant *)
  Have: (x_15 = x_13) \/ (x_12 = x_13).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_15 = x_13)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_12 else x_15) = x_13.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_14.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_12 = x_13)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_9 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_7 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (a <= x_10) \/ (2 <= x_7).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: (x_8 = x_9) \/ (x_6 = x_9).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_7 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_10).
  (* Invariant *)
  Have: (0 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_8) = x_9.
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:45ms) (10ms) (34575)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:45ms) (9ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 51):
Let x_5 = 1 + x + y.
Let x_6 = x_5 % 2.
Let x_7 = x + y.
Let x_8 = x_7 % 2.
Let x_9 = a % 2.
Let x_10 = flag_0 + x + y.
Let x_11 = 1 + x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_1 % 2.
Let x_14 = x_4 + y_4.
Let x_15 = x_14 % 2.
Let x_16 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_16 = 1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_16.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_16 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_16 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: a_1 <= x_14.
  (* Invariant *)
  Have: (x_15 = x_13) \/ (x_12 = x_13).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_15 = x_13)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_12 else x_15) = x_13.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_14.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_12 = x_13)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_9 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_7 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (a <= x_10) \/ (2 <= x_7).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: (x_8 = x_9) \/ (x_6 = x_9).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (i_2 <= a)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_7 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_10).
  (* Invariant *)
  Have: (0 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_8) = x_9.
}
Prove: exists i_2 : Z. 0 <= i_2.
Prover Z3 4.8.12 returns Valid (Qed:49ms) (20ms) (34855)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 51):
Let x = a % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0).
  If flag_0 != 0
  Then { Have: a = 0. }
  Else { Have: a = 1. }
  (* Invariant *)
  Have: a <= 3.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (i <= a)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (2 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= (2 + flag_0)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x = 0)).
  (* Invariant *)
  Have: a <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (25716)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 52):
Let x_5 = 1 + x + y.
Let x_6 = x_5 % 2.
Let x_7 = x + y.
Let x_8 = x_7 % 2.
Let x_9 = a % 2.
Let x_10 = flag_0 + x + y.
Let x_11 = 1 + x_4 + y_4.
Let x_12 = x_11 % 2.
Let x_13 = a_1 % 2.
Let x_14 = x_4 + y_4.
Let x_15 = x_14 % 2.
Let x_16 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_16 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_16.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_16 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_16 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_11.
  (* Invariant *)
  Have: a_1 <= x_14.
  (* Invariant *)
  Have: (x_15 = x_13) \/ (x_12 = x_13).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_15 = x_13)).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_13 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_12 else x_15) = x_13.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_14.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_12 = x_13)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_9 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (x_7 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (a <= x_10) \/ (2 <= x_7).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: (x_8 = x_9) \/ (x_6 = x_9).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_7 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= x_10).
  (* Invariant *)
  Have: (0 <= a) \/ (2 <= x_7).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_6 else x_8) = x_9.
  (* Invariant *)
  Have: 0 <= i_2.
}
Prove: 2 <= x_7.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:60ms) (9ms) (80)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 56):
Let x_5 = x + y.
Let x_6 = 1 + x + y.
Let x_7 = x_6 % 2.
Let x_8 = x_5 % 2.
Let x_9 = a % 2.
Let x_10 = 1 + x_4 + y_4.
Let x_11 = x_10 % 2.
Let x_12 = a_1 % 2.
Let x_13 = x_4 + y_4.
Let x_14 = x_13 % 2.
Let x_15 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: a_2 <= 3.
  (* Invariant *)
  Have: (x_15 = 0) \/ (x_15 = 1).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_2)).
  (* Invariant *)
  Have: a_2 <= 2.
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_15.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a_2.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_15 = 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_15 = 1)).
  (* Invariant *)
  Have: x_4 <= (1 + y_4).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: a_1 <= x_10.
  (* Invariant *)
  Have: a_1 <= x_13.
  (* Invariant *)
  Have: (x_14 = x_12) \/ (x_11 = x_12).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a_1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_14 = x_12)).
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_12 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_11 else x_14) = x_12.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 2 <= x_13.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_11 = x_12)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_9 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= (1 + y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: (x_8 = x_9) \/ (x_7 = x_9).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (i_3 <= a)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (0 <= a)).
  (* Invariant *)
  Have: (0 <= a) \/ (x_5 <= a).
  (* Invariant *)
  Have: (0 <= a) \/ (a <= (flag_0 + x + y)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_8 = x_9)).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_7 else x_8) = x_9.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 2 <= x_5.
}
Prove: 0 <= a.
Prover Z3 4.8.12 returns Valid (Qed:49ms) (10ms) (34535)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:49ms) (7ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0006/042_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0006/042_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/042_0006/042_merged.c, line 61) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0006/042_merged.c, line 61) (2/2):
Call Result at line 65
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0006/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0006/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
