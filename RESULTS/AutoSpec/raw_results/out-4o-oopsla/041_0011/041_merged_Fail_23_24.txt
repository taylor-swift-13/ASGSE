[kernel] Parsing out/041_0011/041_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/041_0011/041_merged.c:15: Warning: 
  Calling undeclared function unknown1. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/041_0011/041_merged.c:12: Warning: 
  Neither code nor implicit assigns clause for function unknown, generating default assigns from the prototype
[kernel:annot:missing-spec] out/041_0011/041_merged.c:12: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_foo041_assert (Qed 12ms) (Z3)
[wp] Proved goals:   23 / 24
  Qed:              19
  Alt-Ergo 2.5.4:    2 (6ms)
  Z3 4.8.12:         2 (10ms-20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo041
------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 19):
Let x = 2 + j_1 + n.
Let x_1 = -j_1.
Let x_2 = j - j_1.
Let x_3 = j - 1 - j_1.
Let x_4 = x_2 * x_3.
Let x_5 = 2 * j_1.
Let x_6 = ((j - 2 - j_1) * x_3) / 2.
Let x_7 = (n * (1 + n)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> ((n + x_7) = (-1))).
  (* Invariant *)
  Have: x_5 < (j + x_6).
  (* Invariant *)
  Have: ((x = j) -> ((1 + n + x_7) = j_1)).
  (* Invariant *)
  Have: j <= (1 + x_5).
  (* Invariant *)
  Have: x_6 <= j_1.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (x_4 / 2) = j_1.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Then *)
  Have: j <= (1 + j_1 + n).
}
Prove: j <= ((x_2 * (1 + j - j_1)) / 2).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (64458)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 24):
Let x = 1 + j_1 + n.
Let x_1 = (n * (1 + n)) / 2.
Let x_2 = 1 + n + x_1.
Let x_3 = -j_1.
Let x_4 = j - j_1.
Let x_5 = x_4 * (1 + j - j_1).
Let x_6 = 2 + j_1 + n.
Let x_7 = j - 1 - j_1.
Let x_8 = x_4 * x_7.
Let x_9 = 2 * j_1.
Let x_10 = ((j - 2 - j_1) * x_7) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_4) /\ is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> ((n + x_1) = (-1))).
  (* Invariant *)
  Have: x_9 < (j + x_10).
  (* Invariant *)
  Have: ((x_6 = j) -> (x_2 = j_1)).
  (* Invariant *)
  Have: j <= (1 + x_9).
  (* Invariant *)
  Have: x_10 <= j_1.
  (* Invariant *)
  Have: x_8 <= x_9.
  (* Invariant *)
  Have: (x_8 / 2) = j_1.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Then *)
  Have: j <= x.
  (* Invariant *)
  Have: j <= (x_5 / 2).
  (* Invariant *)
  Have: ((x = j) -> (x_2 = j)).
}
Prove: x_5 <= (2 * j).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (10383)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 25):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = x_1 * (1 + j - j_1).
Let x_3 = 1 + j_1 + n.
Let x_4 = (n * (1 + n)) / 2.
Let x_5 = 1 + n + x_4.
Let x_6 = x_2 / 2.
Let x_7 = 2 + j_1 + n.
Let x_8 = j - 1 - j_1.
Let x_9 = x_1 * x_8.
Let x_10 = 2 * j_1.
Let x_11 = ((j - 2 - j_1) * x_8) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> ((n + x_4) = (-1))).
  (* Invariant *)
  Have: x_10 < (j + x_11).
  (* Invariant *)
  Have: ((x_7 = j) -> (x_5 = j_1)).
  (* Invariant *)
  Have: j <= (1 + x_10).
  (* Invariant *)
  Have: x_11 <= j_1.
  (* Invariant *)
  Have: x_9 <= x_10.
  (* Invariant *)
  Have: (x_9 / 2) = j_1.
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j_1 < j.
  (* Then *)
  Have: j <= x_3.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: ((x_3 = j) -> (x_5 = j)).
  (* Invariant *)
  Have: x_2 <= (2 * j).
}
Prove: x_6 = j.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38647)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 28):
Let x = 1 + i.
Let x_1 = x * (2 + i).
Let x_2 = x_1 / 2.
Let x_3 = 2 * x_2.
Let x_4 = i * x.
Let x_5 = x_4 / 2.
Let x_6 = 1 + n.
Let x_7 = (n * x_6) / 2.
Let x_8 = 1 + i + x_5.
Let x_9 = 2 * i.
Let x_10 = (i * (i - 1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1 - i).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n = (-1)) -> ((n + x_7) = (-1))).
  (* Invariant *)
  Have: x_2 <= x_8.
  (* Invariant *)
  Have: x_2 <= (1 + x_9 + x_10).
  (* Invariant *)
  Have: ((x_6 = i) -> (x_2 = (2 + i + n + x_7))).
  (* Invariant *)
  Have: x_9 < x_2.
  (* Invariant *)
  Have: (i + x_10) < x_2.
  (* Invariant *)
  Have: (2 + x_9 + x_4) <= x_3.
  (* Invariant *)
  Have: x_2 = x_8.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: i < x_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: ((n = i) -> (x_2 = (1 + n + x_7))).
  (* Invariant *)
  Have: x_5 <= x_2.
  (* Invariant *)
  Have: x_1 <= x_3.
}
Prove: (-1) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (35677)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (6ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/041_0011/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/041_0011/041_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Assertion (file out/041_0011/041_merged.c, line 38):
Let x = i * (1 + i).
Let x_1 = 1 + n.
Let x_2 = x / 2.
Let x_3 = (i * (i - 1)) / 2.
Let x_4 = (n * x_1) / 2.
Let x_5 = i + k + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Else { Have: k = 1. }
  (* Invariant *)
  Have: ((n = (-1)) -> ((n + x_4) = (-1))).
  (* Invariant *)
  Have: x_2 <= (i + x_3).
  (* Invariant *)
  Have: ((x_1 = i) -> (x_2 = (1 + n + x_4))).
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x <= (2 * x_2).
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n < i.
}
Prove: (2 * n) < x_5.
Prover Z3 4.8.12 returns Timeout (Qed:12ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:12ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/041_0011/041_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/041_0011/041_merged.c:12: Warning: 
  No 'assigns' specification for function 'foo041'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/041_0011/041_merged.c:15: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
