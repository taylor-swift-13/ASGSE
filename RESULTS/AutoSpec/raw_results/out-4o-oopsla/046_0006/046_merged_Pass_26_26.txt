[kernel] Parsing out/046_0006/046_merged.c (with preprocessing)
[kernel:typing:no-proto] out/046_0006/046_merged.c:31: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/046_0006/046_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] Proved goals:   26 / 26
  Qed:              19
  Alt-Ergo 2.5.4:    4
  Z3 4.8.12:         3 (10ms-13ms-20ms)
------------------------------------------------------------
  Function foo046
------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 14):
Let x_1 = z / 2.
Let x_2 = w % 2.
Let x_3 = 1 + z.
Let x_4 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Residual *)
  When: (z % 2) = 0.
  (* Goal *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: ((x_2 = 1) -> (((w - 1) / 2) = x)).
  (* Invariant *)
  Have: (if ((x % 2) = 0) then 1 else 0) = x_2.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((z - x_1) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_3 / 2) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (40372)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (25ms) (440)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 15):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = z / 2.
Let x_4 = 1 + x_3.
Let x_5 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_4).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_3 <= z.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: ((x_5 = 1) -> (((w - 1) / 2) = x)).
  (* Invariant *)
  Have: (if ((x % 2) = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((z - x_3) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((x_1 / 2) = x_4)).
}
Prove: (if ((x_4 % 2) = 0) then 0 else 1) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (46931)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 18):
Let x = z % 2.
Let x_1 = z_2 % 2.
Let x_2 = (w - 1) / 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(1 + w) /\ is_sint32(x_2) /\ is_sint32(1 + x_2).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: (if ((y_2 % 2) = 0) then 0 else 1) = x_1.
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: w <= 4.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((z_2 - y_2) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_1 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: ((x = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: (if ((y % 2) = 0) then 0 else 1) = x.
  (* Invariant *)
  Have: y <= z.
}
Prove: w <= 2.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (46371)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (36ms) (596)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 19):
Let x = z % 2.
Let x_1 = z_2 % 2.
Let x_2 = (w - 1) / 2.
Let x_3 = 1 + w.
Let x_4 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Residual *)
  When: (w % 2) = 1.
  (* Goal *)
  When: (x_3 % 2) = 1.
  (* Invariant *)
  Have: ((x_1 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: (if ((y_2 % 2) = 0) then 0 else 1) = x_1.
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: w <= 4.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((z_2 - y_2) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_1 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: ((x = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: (if ((y % 2) = 0) then 0 else 1) = x.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: w <= 2.
}
Prove: (w / 2) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (48899)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 20):
Let x = 1 + w.
Let x_1 = x % 2.
Let x_2 = (w - 1) / 2.
Let x_3 = 1 + x_2.
Let x_4 = z % 2.
Let x_5 = z_2 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: ((x_5 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: (if ((y_2 % 2) = 0) then 0 else 1) = x_5.
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: w <= 4.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((z_2 - y_2) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: ((x_4 = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: (if ((y % 2) = 0) then 0 else 1) = x_4.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: w <= 2.
  (* Invariant *)
  Have: ((x_1 = 1) -> ((w / 2) = x_3)).
}
Prove: (if ((x_3 % 2) = 0) then 1 else 0) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (54311)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 23):
Let x_3 = w % 2.
Let x_4 = z / 2.
Let x_5 = 1 + x_4.
Let x_6 = 1 + z.
Let x_7 = x_6 % 2.
Let x_8 = w_2 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(w_1) /\
      is_sint32(w_2) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(z) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_4 <= z.
  (* Invariant *)
  Have: x_2 <= w_2.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: ((x_8 = 1) -> (((w_2 - 1) / 2) = x_2)).
  (* Invariant *)
  Have: (if ((x_2 % 2) = 0) then 1 else 0) = x_8.
  (* Invariant *)
  Have: 0 < w_2.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: ((z - x_4) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_8 = 1
  Then {
    Have: (w_2 = w_1) /\ (x_2 = x_1).
    Have: (1 + x_1) = x.
    Have: (1 + w_1) = w.
  }
  Else { Have: (w_2 = w) /\ (x_2 = x). }
  (* Invariant *)
  Have: ((x_7 = 0) -> ((x_6 / 2) = x_5)).
  (* Invariant *)
  Have: (if ((x_5 % 2) = 0) then 0 else 1) = x_7.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: ((x_3 = 1) -> (((w - 1) / 2) = x)).
  (* Invariant *)
  Have: (if ((x % 2) = 0) then 1 else 0) = x_3.
  (* Invariant *)
  Have: 0 < w.
}
Prove: (-3) <= z.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (36836)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 24):
Let x = (w - 1) / 2.
Let x_1 = 1 + x.
Let x_2 = 1 + w.
Let x_3 = x_2 % 2.
Let x_4 = z % 2.
Let x_5 = z_2 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: ((x_5 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: (if ((y_2 % 2) = 0) then 0 else 1) = x_5.
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: w <= 4.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: ((z_2 - y_2) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: ((x_4 = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: (if ((y % 2) = 0) then 0 else 1) = x_4.
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: w <= 2.
  (* Invariant *)
  Have: ((x_3 = 1) -> ((w / 2) = x_1)).
  (* Invariant *)
  Have: (if ((x_1 % 2) = 0) then 1 else 0) = x_3.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: 0 <= y.
}
Prove: (-2) <= w.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (36774)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0006/046_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (22ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0006/046_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0006/046_merged.c, line 26) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0006/046_merged.c, line 26) (2/2):
Call Result at line 31
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/046_0006/046_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/046_0006/046_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo046'.
  Callers assumptions might be imprecise.
