[kernel] Parsing out/042_0008/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0008/042_merged.c:32: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0008/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] Proved goals:   28 / 28
  Qed:              20
  Alt-Ergo 2.5.4:    8 (4ms-23ms-71ms)
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 15):
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Let x_5 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_5.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x = x_1. }
  Else { Have: ((1 + x_2) = x_1) /\ ((1 + x) = x_1). }
}
Prove: x_4 = 1.
Prover Z3 4.8.12 returns Valid (Qed:37ms) (37971)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (19ms) (282)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 16):
Let x_2 = 1 + x_1 + y.
Let x_3 = x_2 % 2.
Let x_4 = x_1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: x_1 = x. }
  Else { Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) -> (x_3 = 1))).
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (36763)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (5ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 17):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = x_4 + y_4.
Let x_8 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_8.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = 0))) \/ (((flag_0 != 0) -> (x_8 = 1))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 < a_1))) \/ (((flag_0 != 0) -> (x_7 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: 2 <= x_7.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = a_1))) \/
      (((flag_0 != 0) -> (x_7 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 = 0))) \/ (((flag_0 != 0) -> (x_6 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) ->
      ((if (flag_0 = 0) then 1 else 0) = x_5))).
  (* Invariant *)
  Have: 0 < x.
}
Prove: ((x % 2) = 1) /\ ((y % 2) = 1).
Prover Z3 4.8.12 returns Valid (Qed:53ms) (60ms) (160963)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:53ms) (71ms) (1315)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 20):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (42264)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (17ms) (360)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 21):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
}
Prove: x_3 = 1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (42279)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (25ms) (356)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 22):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 < a_1))) \/ (((flag_0 != 0) -> (x_8 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = a_1))) \/
      (((flag_0 != 0) -> (x_8 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 < a))) \/ (((flag_0 != 0) -> (x_6 <= a))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x) = a))) \/
      (((flag_0 = 0) -> ((1 + (2 * y)) = a))).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
}
Prove: 2 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (46002)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (9ms) (130)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 23):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((x_3 % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: ((x + y - 1) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (31983)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (4ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 25):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 < a_1))) \/ (((flag_0 != 0) -> (x_8 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = a_1))) \/
      (((flag_0 != 0) -> (x_8 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 < a))) \/ (((flag_0 != 0) -> (x_5 <= a))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x) = a))) \/
      (((flag_0 = 0) -> ((1 + (2 * y)) = a))).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: 2 <= x_5.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (x_5 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:30ms) (10ms) (60273)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (31ms) (577)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 28) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 28) (2/2):
Call Result at line 32
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0008/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0008/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
