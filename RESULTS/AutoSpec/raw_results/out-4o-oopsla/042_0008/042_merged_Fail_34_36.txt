[kernel] Parsing out/042_0008/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0008/042_merged.c:36: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0008/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_2_preserved (Qed 21ms) (Z3)
[wp] [Timeout] typed_foo042_loop_invariant_7_established (Qed 3ms) (Z3)
[wp] Proved goals:   34 / 36
  Qed:              24
  Alt-Ergo 2.5.4:    9 (4ms-14ms-28ms)
  Z3 4.8.12:         1 (10ms)
  Timeout:           2
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 15):
Let x_3 = 1 + x_2 + y_1.
Let x_4 = x_2 + y_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(1 + y_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x_2 <= y_1.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_4) -> ((y_1 % i) = (x_2 % i))).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If (x_3 % 2) = 1
  Then { Have: x_2 = x. Have: (2 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ ((1 + y_1) = y). Have: (1 + x_1) = x. }
}
Prove: x <= y.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (39895)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 16):
Let x_3 = 1 + x_2 + y_1.
Let x_4 = x_2 + y_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(1 + y_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (2 + (2 * i)) <= (x + y).
  (* Invariant *)
  Have: x_2 <= y_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + (2 * i_1)) <= x_4) ->
      ((y_1 % i_1) = (x_2 % i_1))).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If (x_3 % 2) = 1
  Then { Have: x_2 = x. Have: (2 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ ((1 + y_1) = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
}
Prove: (y % i) = (x % i).
Prover Z3 4.8.12 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 17):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + (2 * i_1)) <= x_4) ->
      ((y % i_1) = (x % i_1))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + (2 * i_1)) <= (x_1 + y_1)) ->
      ((y_1 % i_1) = (x_1 % i_1))).
}
Prove: ((i % 2) = 0) \/ (x_3 = 1).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (42039)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (20ms) (375)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 18):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + (2 * i_1)) <= x_4) ->
      ((y % i_1) = (x % i_1))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + (2 * i_1)) <= (x_1 + y_1)) ->
      ((y_1 % i_1) = (x_1 % i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_2) ->
      (((i_1 % 2) = 0) \/ (x_3 = 1)))).
}
Prove: x_3 = 1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (38505)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (18ms) (286)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 19):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = x_1 + y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(1 + y_2) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_4) -> ((y_2 % i) = (x_1 % i))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_2 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_2.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ ((1 + y_2) = y_1). Have: (1 + y_1) = y. }
  Else { Have: (1 + y_2) = y. Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= (x + y)) -> ((y % i) = (x % i))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) -> (x_3 = 1))).
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (40439)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (4ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 20):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = x_1 + y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(1 + y_2) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_4) -> ((y_2 % i) = (x_1 % i))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_2 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_2.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ ((1 + y_2) = y_1). Have: (1 + y_1) = y. }
  Else { Have: (1 + y_2) = y. Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= (x + y)) -> ((y % i) = (x % i))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x.
}
Prove: ((x % 2) = 1) /\ ((y % 2) = 1).
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (45287)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 21):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_4) -> ((y % i) = (x % i))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= (x_1 + y_1)) ->
      ((y_1 % i) = (x_1 % i))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
}
Prove: 0 <= x_4.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (36384)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (5ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 21):
Assume {
  Type: is_sint32(flag_0).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: forall i : Z. ((i <= 0) -> ((0 <= i) -> ((i % 2) = 0))).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 24):
Let x_2 = x + y.
Let x_3 = 1 + x + y.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_2) -> ((y % i) = (x % i))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= (x_1 + y_1)) ->
      ((y_1 % i) = (x_1 % i))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_3) ->
      (((i % 2) = 0) \/ (x_4 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_4 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: 0 <= x_2.
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (41317)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (21ms) (405)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 25):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= x_4) -> ((y % i) = (x % i))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i : Z. (((2 + (2 * i)) <= (x_1 + y_1)) ->
      ((y_1 % i) = (x_1 % i))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
}
Prove: x_3 = 1.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (41455)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (20ms) (400)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 27):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: forall i : Z. (((3 + (2 * i)) <= x_1) -> ((x_3 % i) = (x % i))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((x_3 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: ((x + y - 1) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i : Z. (((2 * i) < x_1) -> ((x_2 % i) = (x % i))).
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (33685)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (4ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 29):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: forall i : Z. (((3 + (2 * i)) <= x_1) -> ((x_3 % i) = (x % i))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((x_3 % 2) = 1).
  (* Invariant *)
  Have: 0 < a.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: ((x + y - 1) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: forall i : Z. (((2 * i) < x_1) -> ((x_2 % i) = (x % i))).
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: 0 <= y.
}
Prove: ((1 + x + y) % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (49935)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (28ms) (427)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 32) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0008/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0008/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
