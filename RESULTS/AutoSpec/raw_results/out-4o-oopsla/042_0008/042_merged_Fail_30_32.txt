[kernel] Parsing out/042_0008/042_merged.c (with preprocessing)
[kernel:typing:no-proto] out/042_0008/042_merged.c:34: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/042_0008/042_merged.c:3: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo042_loop_invariant_preserved (Qed 61ms) (Z3)
[wp] [Timeout] typed_foo042_loop_invariant_2_preserved (Qed 47ms) (Z3)
[wp] Proved goals:   30 / 32
  Qed:              22
  Alt-Ergo 2.5.4:    7 (4ms-21ms-67ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo042
------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 15):
Let x_5 = a_1 % 2.
Let x_6 = x_4 + y_4.
Let x_7 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: forall i : Z. ((i <= a_2) -> ((0 <= i) ->
      ((x_7 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: forall i : Z. ((i <= a_1) -> ((0 <= i) ->
      ((x_5 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 < a_1))) \/ (((flag_0 != 0) -> (x_6 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: 2 <= x_6.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_6 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 = a_1))) \/
      (((flag_0 != 0) -> (x_6 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
}
Prove: x <= y.
Prover Z3 4.8.12 returns Timeout (Qed:61ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:61ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 16):
Let x_3 = a_1 % 2.
Let x_4 = x_2 + y_2.
Let x_5 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(1 + x).
  (* Residual *)
  When: (a % 2) != 1.
  (* Goal *)
  When: (i <= a) /\ (0 <= i).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= a_2) -> ((0 <= i_1) ->
      ((x_5 = 1) \/ ((i_1 % 2) = 0)))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 = 0))) \/ (((flag_0 != 0) -> (x_5 = 1))).
  (* Invariant *)
  Have: x_2 <= y_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= a_1) -> ((0 <= i_1) ->
      ((x_3 = 1) \/ ((i_1 % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: ((x_2 % 2) = 1) /\ ((y_2 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 < a_1))) \/ (((flag_0 != 0) -> (x_4 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_2) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_2)) = a_1))).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_3.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_2.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 = a_1))) \/
      (((flag_0 != 0) -> (x_4 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_3 = 0))) \/ (((flag_0 != 0) -> (x_3 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_2 = x_1) /\ ((x_1 + y) = a) /\ ((x_1 + y_2) = a).
    Have: (1 + x_1) = x.
  }
  Else {
    Have: (y_2 = y_1) /\ ((1 + x + y_1) = a) /\ ((1 + x_2 + y_1) = a).
    Have: (1 + y_1) = y.
  }
  (* Invariant *)
  Have: x < y.
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:47ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:47ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 17):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_2) ->
      (((i_1 % 2) = 0) \/ (x_3 = 1)))).
}
Prove: x_3 = 1.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (36973)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (14ms) (280)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 18):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = x_1 + y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(1 + y_2) /\ is_sint32(x_2).
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_2 % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y_2.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ ((1 + y_2) = y_1). Have: (1 + y_1) = y. }
  Else { Have: (1 + y_2) = y. Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) -> (x_3 = 1))).
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (38920)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (6ms) (60)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 19):
Let x_5 = a % 2.
Let x_6 = a_1 % 2.
Let x_7 = x_4 + y_4.
Let x_8 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: forall i : Z. ((i <= a_2) -> ((0 <= i) ->
      ((x_8 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_8 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_8.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = 0))) \/ (((flag_0 != 0) -> (x_8 = 1))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: forall i : Z. ((i <= a_1) -> ((0 <= i) ->
      ((x_6 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 < a_1))) \/ (((flag_0 != 0) -> (x_7 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: 2 <= x_7.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_7 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = a_1))) \/
      (((flag_0 != 0) -> (x_7 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 = 0))) \/ (((flag_0 != 0) -> (x_6 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= a) -> ((0 <= i) ->
      ((x_5 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x) ->
      ((if (flag_0 = 0) then 1 else 0) = x_5))).
  (* Invariant *)
  Have: 0 < x.
}
Prove: ((x % 2) = 1) /\ ((y % 2) = 1).
Prover Z3 4.8.12 returns Valid (Qed:57ms) (70ms) (216668)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:57ms) (67ms) (1303)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 22):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (39649)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (24ms) (388)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 23):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(1 + y) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 2 <= x_4.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ ((1 + y) = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: (1 + y) = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (((i % 2) = 0) \/ (x_3 = 1)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (x_3 = 1))).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((x_1 % 2) = 1) /\ ((y_1 % 2) = 1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
}
Prove: x_3 = 1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (39782)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (26ms) (382)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 24):
Let x_5 = a % 2.
Let x_6 = x + y.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: forall i : Z. ((i <= a_2) -> ((0 <= i) ->
      ((x_9 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: forall i : Z. ((i <= a_1) -> ((0 <= i) ->
      ((x_7 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 < a_1))) \/ (((flag_0 != 0) -> (x_8 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = a_1))) \/
      (((flag_0 != 0) -> (x_8 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_5 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= a) -> ((0 <= i) ->
      ((x_5 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_6 < a))) \/ (((flag_0 != 0) -> (x_6 <= a))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x) = a))) \/
      (((flag_0 = 0) -> ((1 + (2 * y)) = a))).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
}
Prove: 2 <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (10ms) (39797)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (5ms) (60)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 25):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = y - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: x < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((x_3 % 2) = 1).
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Invariant *)
  Have: 3 <= x_1.
  (* Invariant *)
  Have: 2 <= y.
  (* Invariant *)
  Have: ((x + y - 1) % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (32275)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (4ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 27):
Let x_5 = x + y.
Let x_6 = a % 2.
Let x_7 = a_1 % 2.
Let x_8 = x_4 + y_4.
Let x_9 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: forall i : Z. ((i <= a_2) -> ((0 <= i) ->
      ((x_9 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= a_2))) \/ (((flag_0 = 0) -> (3 <= a_2))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_9.
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 1))) \/ (((flag_0 = 0) -> (a_2 = 2))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_9 = 0))) \/ (((flag_0 != 0) -> (x_9 = 1))).
  (* Invariant *)
  Have: x_4 <= y_4.
  (* Invariant *)
  Have: forall i : Z. ((i <= a_1) -> ((0 <= i) ->
      ((x_7 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((x_4 % 2) = 1) /\ ((y_4 % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 < a_1))) \/ (((flag_0 != 0) -> (x_8 <= a_1))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x_4) = a_1))) \/
      (((flag_0 = 0) -> ((1 + (2 * y_4)) = a_1))).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_7.
  (* Invariant *)
  Have: 2 <= x_8.
  (* Invariant *)
  Have: 0 < y_4.
  (* Invariant *)
  Have: (x_8 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_8 = a_1))) \/
      (((flag_0 != 0) -> (x_8 = (1 + a_1)))).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_7 = 0))) \/ (((flag_0 != 0) -> (x_7 = 1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If x_6 = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: forall i : Z. ((i <= a) -> ((0 <= i) ->
      ((x_6 = 1) \/ ((i % 2) = 0)))).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((y % 2) = 1).
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_5 < a))) \/ (((flag_0 != 0) -> (x_5 <= a))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> ((2 * x) = a))) \/
      (((flag_0 = 0) -> ((1 + (2 * y)) = a))).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: 2 <= x_5.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (x_5 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (20ms) (63345)

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/042_0008/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/042_0008/042_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 30) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/042_0008/042_merged.c, line 30) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/042_0008/042_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/042_0008/042_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo042'.
  Callers assumptions might be imprecise.
