[kernel] Parsing out/032_0002/032_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] [Timeout] typed_foo032_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_2_preserved (Qed 19ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_6_preserved (Qed 7ms) (Z3)
[wp] Proved goals:   16 / 19
  Qed:              13
  Alt-Ergo 2.5.4:    2 (4ms-8ms)
  Z3 4.8.12:         1 (190ms)
  Timeout:           3
------------------------------------------------------------
  Function foo032
------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 8):
Let x = n / 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(1 + n).
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = b))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_1 = i_2 % 2 in ((0 <= i_2) -> ((i_2 < n) ->
      ((((x_1 = 1) -> (i_1 < j))) /\ (((x_1 = 0) -> (j < i_1)))))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = 0)))).
  (* Invariant *)
  Have: ((b = 1) -> ((j + x) = i_1)).
  (* Invariant *)
  Have: ((b = 0) -> ((i_1 + x) = j)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
}
Prove: (if (b = 0) then 1 else 0) = (i % 2).
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 9):
Let x = n / 2.
Let x_1 = i % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\
      is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(n) /\
      is_sint32(1 + n).
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> ((i_4 % 2) = b))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_2 = i_4 % 2 in ((0 <= i_4) -> ((i_4 < n) ->
      ((((x_2 = 1) -> (i_3 < j_2))) /\ (((x_2 = 0) -> (j_2 < i_3)))))).
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 % 2) = 1) -> ((0 <= i_4) -> ((i_4 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_4 : Z. (((i_4 % 2) = 0) -> ((0 <= i_4) -> ((i_4 < n) ->
      (b = 0)))).
  (* Invariant *)
  Have: ((b = 1) -> ((j_2 + x) = i_3)).
  (* Invariant *)
  Have: ((b = 0) -> ((i_3 + x) = j_2)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: (i_3 = i_2) /\ (j_2 = j). Have: (1 + i_2) = i_1. }
  Else { Have: (i_3 = i_1) /\ (j_2 = j_1). Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= n) ->
      ((if (b = 0) then 1 else 0) = (i_4 % 2)))).
}
Prove: (((x_1 = 1) -> (i_1 < j))) /\ (((x_1 = 0) -> (j < i_1))).
Prover Z3 4.8.12 returns Timeout (Qed:19ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:19ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 10):
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(1 + i) /\ is_sint32(1 + n).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: ((i_1 % 2) = 1) /\ (0 <= i_1) /\ (i_1 <= n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = b))).
  (* Invariant *)
  Have: forall i_2 : Z. let x = i_2 % 2 in ((0 <= i_2) -> ((i_2 < n) ->
      ((((x = 1) -> (i < j))) /\ (((x = 0) -> (j < i)))))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      false))).
  (* Invariant *)
  Have: ((b = 1) -> ((j + (n / 2)) = i)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) -> ((i_2 % 2) = 0))).
  (* Invariant *)
  Have: forall i_2 : Z. let x = i_2 % 2 in ((0 <= i_2) -> ((i_2 <= n) ->
      ((((x = 0) -> (j <= i))) /\ (((x = 1) -> ((2 + i) <= j)))))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (36710)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (8ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 11):
Assume {
  Type: is_sint32(n) /\ is_sint32(1 + n).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: forall i_1 : Z. let x = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((((x = 1) -> (2 <= n))) /\ (((x = 0) -> (n <= (-2))))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: forall i_1 : Z. let x = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= n) ->
      ((((x = 1) -> ((-1) <= n))) /\ (((x = 0) -> (n <= (-4))))))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (34311)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (4ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> ((i % 2) = 0))).
  (* Invariant *)
  Have: forall i : Z. let x_1 = i % 2 in ((0 <= i) -> ((i < n) ->
      ((((x_1 = 1) -> (2 <= n))) /\ (((x_1 = 0) -> (n <= (-2))))))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < n) -> false))).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> ((i % 2) = 1))).
  (* Invariant *)
  Have: forall i : Z. let x_1 = i % 2 in ((0 <= i) -> ((i <= n) ->
      ((((x_1 = 1) -> ((-1) <= n))) /\ (((x_1 = 0) -> (n <= (-4))))))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= n) -> false))).
}
Prove: ((n / 2) + (x / 2)) = (-1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (190ms) (294051)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(1 + i) /\ is_sint32(x).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((((x_1 = 1) -> (i < j))) /\ (((x_1 = 0) -> (j < i)))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: ((b = 1) -> ((j + (n / 2)) = i)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: b != 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 <= n) ->
      ((((x_1 = 0) -> (j <= i))) /\ (((x_1 = 1) -> ((2 + i) <= j)))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      false))).
}
Prove: (1 + i + (x / 2)) = j.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Loop assigns (file out/032_0002/032_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/032_0002/032_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo032'.
  Callers assumptions might be imprecise.
