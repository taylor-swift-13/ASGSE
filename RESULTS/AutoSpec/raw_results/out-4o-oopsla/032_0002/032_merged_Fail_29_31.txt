[kernel] Parsing out/032_0002/032_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 31 goals scheduled
[wp] [Timeout] typed_foo032_loop_invariant_preserved (Qed 30ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_8_preserved (Qed 14ms) (Z3)
[wp] Proved goals:   29 / 31
  Qed:              24
  Alt-Ergo 2.5.4:    5 (11ms-14ms)
  Timeout:           2
------------------------------------------------------------
  Function foo032
------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 8):
Let x = n / 2.
Let x_1 = n % 2.
Let x_2 = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(j_2 + (if (x_1 = 1) then 1 else 0)).
  (* Invariant *)
  Have: if (x_1 = 0) then (x_1 != 1) else (x_1 = 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_3 != 1) /\ (((x_3 = 0) -> (x_1 = 1)))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 0)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) ->
      ((if (b = 0) then 1 else 0) = (i_1 % 2)))).
  (* Invariant *)
  Have: ((x_1 = 1) -> (b = 1)).
  (* Invariant *)
  Have: ((b = 1) -> (if (x_1 = 1) then (x = 1) else (x = 0))).
  (* Invariant *)
  Have: ((b = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: ((b = 0) -> ((x + (if (x_1 = 1) then 1 else 0)) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  If b != 0
  Then { Have: j_2 = j. Have: (1 + j + (if (x_1 = 1) then 1 else 0)) = i. }
  Else {
    Have: (j_2 = j_1) /\ ((j_2 + (if (x_1 = 1) then 1 else 0)) = i).
    Have: (1 + j_2) = j.
  }
}
Prove: (j + (if ((x_2 % 2) = 0) then 0 else 1)) = i.
Prover Z3 4.8.12 returns Timeout (Qed:30ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:30ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 9):
Let x = 1 + n.
Let x_1 = x % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> ((i % 2) = b))).
  (* Invariant *)
  Have: forall i : Z. let x_2 = i % 2 in ((0 <= i) -> ((i < n) ->
      ((x_2 != 0) /\ (x_2 != 1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < n) -> (b = 1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < n) -> false))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> ((i % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: x_1 != 0.
}
Prove: x_1 = 1.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (35523)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (12ms) (177)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 11):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (36566)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (12ms) (246)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 12):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) = 0))).
}
Prove: (i % 2) != 1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (36434)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (14ms) (211)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: ((i % 2) = 1) /\ (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) != 1))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (37010)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (14ms) (214)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= n) -> ((i_1 % 2) != 1))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 <= n) ->
      false))).
}
Prove: (i % 2) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 16):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> ((i % 2) = b))).
  (* Invariant *)
  Have: forall i : Z. let x_1 = i % 2 in ((0 <= i) -> ((i < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i < n) -> (b = 1)))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < n) -> false))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> ((i % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: b != 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> ((i % 2) = 0))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> ((i % 2) != 1))).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 1) -> ((0 <= i) -> ((i <= n) -> false))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> ((i % 2) = 1))).
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (11ms) (159)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/032_0002/032_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/032_0002/032_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo032'.
  Callers assumptions might be imprecise.
