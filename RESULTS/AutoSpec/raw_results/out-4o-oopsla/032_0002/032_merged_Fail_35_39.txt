[kernel] Parsing out/032_0002/032_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 39 goals scheduled
[wp] [Timeout] typed_foo032_loop_invariant_preserved (Qed 29ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_2_preserved (Qed 31ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo032_loop_invariant_16_established (Qed 1ms) (Z3)
[wp] Proved goals:   35 / 39
  Qed:              28
  Alt-Ergo 2.5.4:    5 (9ms-13ms-19ms)
  Z3 4.8.12:         2 (10ms-20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo032
------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 8):
Let x = j - 1.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(j) /\ is_sint32(x).
  (* Invariant *)
  Have: ((b = 1) -> (i = 0)).
  (* Invariant *)
  Have: ((b = 0) -> (i = 0)).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= j) ->
      ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_1 = i_1 % 2 in ((0 <= i_1) ->
      (((2 + i_1) <= j) -> ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) ->
      (((2 + i_1) <= j) -> false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= j) ->
      ((i_1 % 2) = 1))).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: (x / 2) = 0.
  (* Invariant *)
  Have: j <= 201.
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: j <= 200.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 9):
Let x = n % 2.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(n) /\ is_sint32(1 + n) /\
      is_sint32(j + (if (x = 1) then 1 else 0)) /\
      is_sint32(1 + j + (if (x = 1) then 1 else 0)).
  (* Residual *)
  When: b != 0.
  (* Invariant *)
  Have: ((b_1 = 1) -> (i = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i = 0)).
  (* Invariant *)
  Have: if (x = 1) then (2 <= n) else ((-1) <= n).
  (* Invariant *)
  Have: if (x = 0) then (x != 1) else (x = 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_2 != 1) /\ (((x_2 = 0) -> (x = 1)))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((x = 1) -> (b = 1)).
  (* Invariant *)
  Have: ((b = 1) -> (if (x = 1) then (x_1 = 1) else (x_1 = 0))).
  (* Invariant *)
  Have: ((b = 1) -> (n = j)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
}
Prove: if (x = 1) then (3 <= n) else (0 < n).
Prover Z3 4.8.12 returns Timeout (Qed:31ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:31ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 10):
Let x = n % 2.
Let x_1 = n / 2.
Let x_2 = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(j + (if (x = 1) then 1 else 0)) /\
      is_sint32(1 + j + (if (x = 1) then 1 else 0)).
  (* Residual *)
  When: b != 0.
  (* Invariant *)
  Have: ((b_1 = 1) -> (i = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i = 0)).
  (* Invariant *)
  Have: if (x = 1) then (2 <= n) else ((-1) <= n).
  (* Invariant *)
  Have: if (x = 0) then (x != 1) else (x = 1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = b))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = i_1 % 2 in ((0 <= i_1) -> ((i_1 < n) ->
      ((x_3 != 1) /\ (((x_3 = 0) -> (x = 1)))))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 1) -> ((0 <= i_1) -> ((i_1 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> ((i_1 % 2) = 0))).
  (* Invariant *)
  Have: ((x = 1) -> (b = 1)).
  (* Invariant *)
  Have: ((b = 1) -> (if (x = 1) then (x_1 = 1) else (x_1 = 0))).
  (* Invariant *)
  Have: ((b = 1) -> (n = j)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  (* Invariant *)
  Have: if (x = 1) then (3 <= n) else (0 < n).
}
Prove: (x != 1) /\ ((x_2 % 2) != 0).
Prover Z3 4.8.12 returns Valid (Qed:32ms) (10ms) (44146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 11):
Let x = 1 + n.
Let x_1 = x % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = b))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_2 = i_2 % 2 in ((0 <= i_2) -> ((i_2 < n) ->
      ((x_2 != 0) /\ (x_2 != 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: x_1 != 0.
  (* Invariant *)
  Have: 0 < n.
}
Prove: x_1 = 1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (37259)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (9ms) (206)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 13):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(i_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_2 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_2 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = b))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = i_3 % 2 in ((0 <= i_3) -> ((i_3 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 1) -> ((0 <= i_3) -> ((i_3 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 0) -> ((0 <= i_3) -> ((i_3 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: 0 < n.
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (38305)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (19ms) (277)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 14):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(i_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_2 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_2 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = b))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = i_3 % 2 in ((0 <= i_3) -> ((i_3 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 1) -> ((0 <= i_3) -> ((i_3 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 0) -> ((0 <= i_3) -> ((i_3 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= n) -> ((i_3 % 2) = 0))).
}
Prove: (i % 2) != 1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (38160)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (12ms) (236)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 15):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: ((i_2 % 2) = 1) /\ (0 <= i_2) /\ (i_2 <= n).
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = b))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = i_3 % 2 in ((0 <= i_3) -> ((i_3 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 1) -> ((0 <= i_3) -> ((i_3 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 0) -> ((0 <= i_3) -> ((i_3 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= n) -> ((i_3 % 2) != 1))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (38735)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (12ms) (238)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 17):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(i_2) /\
      is_sint32(n) /\ is_sint32(1 + i_1) /\ is_sint32(x).
  (* Residual *)
  When: b != 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= n).
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_2 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_2 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = b))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_1 = i_3 % 2 in ((0 <= i_3) -> ((i_3 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 1) -> ((0 <= i_3) -> ((i_3 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 0) -> ((0 <= i_3) -> ((i_3 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i_1)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= n) -> ((i_3 % 2) = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= n) -> ((i_3 % 2) != 1))).
  (* Invariant *)
  Have: forall i_3 : Z. (((i_3 % 2) = 1) -> ((0 <= i_3) -> ((i_3 <= n) ->
      false))).
}
Prove: (i % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (44141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 18):
Let x = 1 + n.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(i_1) /\
      is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 1.
  (* Invariant *)
  Have: ((b_1 = 1) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((b_1 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (n % 2) = 0.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = b))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_1 = i_2 % 2 in ((0 <= i_2) -> ((i_2 < n) ->
      ((x_1 != 0) /\ (x_1 != 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 < n) ->
      (b = 1)))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < n) ->
      false))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> ((i_2 % 2) = 0))).
  (* Invariant *)
  Have: ((b = 1) -> ((n / 2) = 0)).
  (* Invariant *)
  Have: ((b = 1) -> (n = i)).
  (* Invariant *)
  Have: n <= 200.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= 199.
  Have: b != 0.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) -> ((i_2 % 2) = 0))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) -> ((i_2 % 2) != 1))).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 1) -> ((0 <= i_2) -> ((i_2 <= n) ->
      false))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= n) -> ((i_2 % 2) = 1))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38162)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (13ms) (187)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 20):
Assume { Type: is_sint32(j). }
Prove: j = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 23):
Assume { Type: is_sint32(i). }
Prove: i = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/032_0002/032_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/032_0002/032_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Loop assigns (file out/032_0002/032_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/032_0002/032_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo032'.
  Callers assumptions might be imprecise.
