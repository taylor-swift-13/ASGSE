[kernel] Parsing out/025_0015/025_merged.c (with preprocessing)
[kernel:typing:no-proto] out/025_0015/025_merged.c:39: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/025_0015/025_merged.c:26: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/025_0015/025_merged.c:6: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/025_0015/025_merged.c:6: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 32 goals scheduled
[wp] [Timeout] typed_foo025_assert (Qed 2ms) (Z3)
[wp] Proved goals:   31 / 32
  Qed:              25
  Alt-Ergo 2.5.4:    6 (3ms-5ms-6ms)
  Timeout:           1
------------------------------------------------------------
  Function foo025
------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 14):
Let x_1 = 1 + y.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1).
  (* Residual *)
  When: i < j.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= (i_1 + j_1).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= (i + j).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (31915)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (18)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 16):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3).
  (* Invariant *)
  Have: x_2 <= y_3.
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= (i_1 + j_1).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= (i + j).
  If j <= i
  Then {
    Have: (x_2 = x_1) /\ (y_3 = y_1).
    Have: (1 + x_1) = x.
    Have: (1 + y_1) = y.
  }
  Else { Have: (x_2 = x) /\ (y_3 = y_2). Have: (1 + y_2) = y. }
  (* Invariant *)
  Have: x <= y.
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34596)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (3ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 17):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + x) /\ is_sint32(1 + y).
  (* Residual *)
  When: j <= i.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= (i_1 + j_1).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= (i + j).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (32255)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 33):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(j_3) /\ is_sint32(tmp_0) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j_3.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= (i_1 + j_3).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= (i + j_2).
  (* Then *)
  Have: tmp_0 != 0.
  If y = x
  Then { Have: j_2 = j. }
  Else { Have: j_2 = j_1. Have: (1 + j_1) = j. }
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (33211)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (50)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 34):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\
      is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(j_3) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j_3.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= (i_3 + j_3).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= (i_2 + j_2).
  (* Then *)
  Have: tmp_0 != 0.
  If y = x
  Then { Have: (i_2 = i_1) /\ (j_2 = j). Have: (1 + i_1) = i. }
  Else { Have: (i_2 = i) /\ (j_2 = j_1). Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: 0 <= j.
}
Prove: 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (34336)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/025_0015/025_merged.c, line 35):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(i_3) /\
      is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(j_3) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j_3.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: 0 <= (i_3 + j_3).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= (i_2 + j_2).
  (* Then *)
  Have: tmp_0 != 0.
  If y = x
  Then { Have: (i_2 = i_1) /\ (j_2 = j). Have: (1 + i_1) = i. }
  Else { Have: (i_2 = i) /\ (j_2 = j_1). Have: (1 + j_1) = j. }
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
}
Prove: 0 <= (i + j).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (34152)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (4ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/025_0015/025_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Assertion (file out/025_0015/025_merged.c, line 58):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= (i + j).
}
Prove: j <= i.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/025_0015/025_merged.c, line 21) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/025_0015/025_merged.c, line 21) (2/3):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/025_0015/025_merged.c, line 21) (3/3):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/025_0015/025_merged.c, line 36) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/025_0015/025_merged.c, line 36) (2/2):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/025_0015/025_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/025_0015/025_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/025_0015/025_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo025'.
  Callers assumptions might be imprecise.
