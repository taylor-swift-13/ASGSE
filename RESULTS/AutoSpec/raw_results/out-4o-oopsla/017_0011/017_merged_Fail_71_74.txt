[kernel] Parsing out/017_0011/017_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 74 goals scheduled
[wp] [Timeout] typed_foo017_loop_invariant_preserved (Qed 18ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_6_established (Qed 0.92ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_23_preserved (Qed 14ms) (Z3)
[wp] Proved goals:   71 / 74
  Qed:              64
  Alt-Ergo 2.5.4:    6
  Z3 4.8.12:         1 (20ms)
  Timeout:           3
------------------------------------------------------------
  Function foo017
------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 9):
Let x = i - 1.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + x_2.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_4) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_3.
  (* Invariant *)
  Have: (i * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_3.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (i <= (1 + i_1 + x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_1 <= 3.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_3.
  (* Invariant *)
  Have: (j * x) <= 1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      (i <= (1 + i_1 + x_2)))).
  (* Else *)
  Have: i <= j.
}
Prove: ((i * x_4) / 2) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:18ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:18ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 11):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = i * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 1 + x_2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (i <= (1 + i_1 + x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_5))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_4 <= 3.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_6.
  (* Invariant *)
  Have: ((j * x_3) + x_5) <= x_6.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      (i <= (1 + i_1 + x_2)))).
  (* Else *)
  Have: i <= j.
}
Prove: x_1 <= 1.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (44193)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 14):
Assume { Type: is_sint32(n). }
Prove: 0 < n.
Prover Z3 4.8.12 returns Timeout (Qed:0.92ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.92ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 15):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = i * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 1 + x_2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (i <= (1 + i_1 + x_5)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_5))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_4 <= 3.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_6.
  (* Invariant *)
  Have: ((j * x_3) + x_5) <= x_6.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      (i <= (1 + i_1 + x_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: x_1 <= 1.
}
Prove: i <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (6ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 17):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = i * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 1 + x_2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < j).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i <= (1 + i_2 + x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      ((((1 + i_2) * (i - i_2)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_4 <= 3.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_6.
  (* Invariant *)
  Have: ((j * x_3) + x_5) <= x_6.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (i <= (1 + i_2 + x_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: i <= x_2.
}
Prove: i <= (i_1 + x_2).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (39069)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (7ms) (65)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 19):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 - 1.
Let x_4 = i_1 * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 1 + x_2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i_1 * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (1 + i_2 + x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_4 <= 3.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_6.
  (* Invariant *)
  Have: ((j * x_3) + x_5) <= x_6.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (i_1 <= (1 + i_2 + x_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_1 <= (i_2 + x_2)))).
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (39755)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (7ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 20):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 - 1.
Let x_4 = i_1 * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 1 + x_2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_6).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i_1 * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (1 + i_2 + x_5)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_5))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_5))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_4 <= 3.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: j <= x_6.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_6.
  (* Invariant *)
  Have: ((j * x_3) + x_5) <= x_6.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (i_1 <= (1 + i_2 + x_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_1 <= (i_2 + x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_2))).
}
Prove: (((1 + i) * (1 + i_1 - i)) / 2) <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (47567)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (7ms) (68)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 22):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + x_2.
Let x_4 = i_1 - 1.
Let x_5 = i_1 * x_4.
Let x_6 = x_5 / 2.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i_1 * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (1 + i_2 + x_6)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= x_6))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) <= x_6))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_5 <= 3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 = x_6.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_3.
  (* Invariant *)
  Have: ((j * x_4) + x_6) <= x_3.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= x_3.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->
      (i_1 <= (1 + i_2 + x_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: i_1 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (i_1 <= (i_2 + x_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((((1 + i_2) * (1 + i_1 - i_2)) / 2) <= x_3))).
}
Prove: ((i * (1 + i)) / 2) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (48509)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (69)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 24):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + x_2.
Let x_4 = i - 1.
Let x_5 = i * x_4.
Let x_6 = x_5 / 2.
Let x_7 = 1 + x_6.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: j_1 <= x_7.
  (* Invariant *)
  Have: (i * j_1) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= x_7.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (i <= (1 + i_1 + x_6)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= x_7))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) <= x_6))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_5 <= 3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_2 = x_6.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= x_3.
  (* Invariant *)
  Have: ((j * x_4) + x_6) <= x_3.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      (i <= (1 + i_1 + x_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: x_1 <= 1.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i <= (i_1 + x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((((1 + i_1) * (1 + i - i_1)) / 2) <= x_3))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) <= x_2))).
}
Prove: i <= 1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (42255)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 38):
Let x = j + k.
Let x_1 = 2 * k_1.
Let x_2 = -k_1.
Let x_3 = j + k - k_1.
Let x_4 = j + k - 1 - k_1.
Let x_5 = x_3 * x_4.
Let x_6 = x_5 / 2.
Let x_7 = k_1 + n.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(n) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: (1 + x_6) = k_1.
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: (j_1 * x_3) <= 1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 <= j_1) /\ (k_1 < x) /\ ((j_1 + k_1) <= x).
  (* Invariant *)
  Have: x <= x_7.
  (* Invariant *)
  Have: x <= (1 + k_1 + x_6).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_1) ->
      (x <= (1 + k_1 + i + x_6)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) -> (i <= x_6))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) ->
      ((((1 + i) * (j + k - k_1 - i)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x) ->
      (((i * (1 + i)) / 2) <= x_6))).
  (* Invariant *)
  Have: j_1 <= 1.
  (* Invariant *)
  Have: x_5 <= 3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: x < x_7.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: ((j * x_4) + x_6) <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x_6 <= k_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (x <= (i + x_1)))).
  (* Then *)
  Have: k_1 < k.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/017_0011/017_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/017_0011/017_merged.c, line 52):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/017_0011/017_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo017'.
  Callers assumptions might be imprecise.
