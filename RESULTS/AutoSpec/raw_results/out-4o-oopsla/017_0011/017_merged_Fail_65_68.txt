[kernel] Parsing out/017_0011/017_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 68 goals scheduled
[wp] [Timeout] typed_foo017_loop_invariant_2_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_12_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo017_loop_invariant_25_preserved (Qed 14ms) (Z3)
[wp] Proved goals:   65 / 68
  Qed:              51
  Alt-Ergo 2.5.4:   10 (1ms-7ms-9ms)
  Z3 4.8.12:         4 (20ms-903ms-3.3s)
  Timeout:           3
------------------------------------------------------------
  Function foo017
------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 10):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Let x_2 = 1 + i.
Let x_3 = i * x_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x_2).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_1) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_1) <= k_1.
  (* Invariant *)
  Have: (2 * x_1) <= k_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x) + x_1) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
}
Prove: (x_3 + (x_3 / 2)) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 13):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = i - 1.
Let x_3 = (i * x_2) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_3) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_3) <= k_1.
  (* Invariant *)
  Have: (2 * x_3) <= k_1.
  (* Invariant *)
  Have: x_3 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_2) + x_3) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_3 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + (x_1 / 2)) <= k.
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (59998)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 14):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
}
Prove: x_2 <= k.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (40215)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (1ms) (49)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 15):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < j).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      ((((1 + i_2) * (i - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i <= (k + i_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
}
Prove: i < (i_1 + k).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (38402)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (8ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 16):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < j).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      ((((1 + i_2) * (i - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i <= (k + i_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i < (k + i_2)))).
}
Prove: x_2 < k.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (41253)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (7ms) (52)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 17):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i_1 * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i_1 <= (k + i_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_1 < (k + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (x_2 < k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (39794)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 18):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i_1 * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i_1 <= (k + i_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_1 < (k + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 < k))).
}
Prove: (((1 + i) * (1 + i_1 - i)) / 2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (3.3s) (7030545)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 19):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      ((((1 + i_2) * (i - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i <= (k + i_2)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i < (k + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      ((((1 + i_2) * (1 + i - i_2)) / 2) <= k))).
}
Prove: x_2 < k.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (43630)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (9ms) (55)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 20):
Let x = 1 + i_1.
Let x_1 = i_1 * x.
Let x_2 = x_1 / 2.
Let x_3 = i_1 - 1.
Let x_4 = (i_1 * x_3) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i_1 * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i_1) /\ (j_1 <= i_1) /\ (0 <= j_1).
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->
      (i_1 <= (k_1 + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((((1 + i_2) * (i_1 - i_2)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (((i_2 * (1 + i_2)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (i_1 <= (k + i_2)))).
  (* Else *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_1 < (k + i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (i_2 < k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((((1 + i_2) * (1 + i_1 - i_2)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (x_2 < k))).
}
Prove: ((i * (1 + i)) / 2) < k.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 22):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i < (k + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((((1 + i_1) * (1 + i - i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) < k))).
}
Prove: (i + x_2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (30ms) (81239)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (9ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 23):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i < (k + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((((1 + i_1) * (1 + i - i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) < k))).
  (* Invariant *)
  Have: (i + x_2) <= k.
}
Prove: (2 * x_2) <= k.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (45371)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 24):
Let x = 1 + i.
Let x_1 = i * x.
Let x_2 = x_1 / 2.
Let x_3 = i - 1.
Let x_4 = (i * x_3) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_4) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_1.
  (* Invariant *)
  Have: (2 * x_4) <= k_1.
  (* Invariant *)
  Have: x_4 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_3) + x_4) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_4 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Else *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_1 + x_2) <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i < (k + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((((1 + i_1) * (1 + i - i_1)) / 2) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x_2 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((i_1 * (1 + i_1)) / 2) < k))).
  (* Invariant *)
  Have: (i + x_2) <= k.
  (* Invariant *)
  Have: (2 * x_2) <= k.
}
Prove: x_2 < k.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (43096)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (9ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 36):
Let x = i - 1.
Let x_1 = (i * x) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(1 + j) /\
      is_sint32(i + k - j).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_1) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_1) <= k_1.
  (* Invariant *)
  Have: (2 * x_1) <= k_1.
  (* Invariant *)
  Have: x_1 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x) + x_1) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Then *)
  Have: j < i.
}
Prove: (2 * j) < (i + k).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (37855)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 39):
Let x = i + k.
Let x_1 = i - 1.
Let x_2 = (i * x_1) / 2.
Let x_3 = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(i + k - j).
  (* Invariant *)
  Have: j_1 <= k_1.
  (* Invariant *)
  Have: ((i * j_1) + x_2) <= k_1.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: (0 < i) /\ (j_1 <= i) /\ (0 <= j_1).
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= (k_1 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((((1 + i_1) * (i - i_1)) / 2) <= k_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (((i_1 * (1 + i_1)) / 2) < k_1))).
  (* Invariant *)
  Have: (j_1 + x_2) <= k_1.
  (* Invariant *)
  Have: (2 * x_2) <= k_1.
  (* Invariant *)
  Have: x_2 < k_1.
  (* Invariant *)
  Have: 0 < k_1.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_1) + x_2) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i <= (k + i_1)))).
  (* Then *)
  Have: j < i.
  (* Invariant *)
  Have: (2 * j) < x.
}
Prove: (j + ((j * x_3) / 2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (240ms) (418553)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 40):
Let x = 1 + j.
Let x_1 = j + k.
Let x_2 = 2 * k_1.
Let x_3 = -k_1.
Let x_4 = j + k - k_1.
Let x_5 = j + k - 1 - k_1.
Let x_6 = (x_4 * x_5) / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4).
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: ((j_1 * x_4) + x_6) <= k_2.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_2.
  (* Invariant *)
  Have: (0 <= j_1) /\ (k_1 < x_1) /\ ((j_1 + k_1) <= x_1).
  (* Invariant *)
  Have: x_1 <= (k_1 + k_2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_1) -> (x_1 <= (k_1 + k_2 + i)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_1) -> (i < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_1) ->
      ((((1 + i) * (j + k - k_1 - i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_1) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: (j_1 + x_6) <= k_2.
  (* Invariant *)
  Have: (2 * x_6) <= k_2.
  (* Invariant *)
  Have: x_6 < k_2.
  (* Invariant *)
  Have: 0 < k_2.
  (* Then *)
  Have: x_1 < (k_1 + n).
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: ((j * x_5) + x_6) <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: x_6 <= k_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (x_1 <= (i + x_2)))).
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j < k.
  (* Invariant *)
  Have: ((j * x) / 2) <= k.
}
Prove: ((x * x_5) + x_6) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 44):
Let x = 1 + j.
Let x_1 = -k_1.
Let x_2 = j + k - 1 - k_1.
Let x_3 = j + k - k_1.
Let x_4 = (x_3 * x_2) / 2.
Let x_5 = j + k.
Let x_6 = 2 * k_1.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: ((j_1 * x_3) + x_4) <= k_2.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_2.
  (* Invariant *)
  Have: (0 <= j_1) /\ (k_1 < x_5) /\ ((j_1 + k_1) <= x_5).
  (* Invariant *)
  Have: x_5 <= (k_1 + k_2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j_1) -> (x_5 <= (k_1 + k_2 + i)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_5) -> (i < k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_5) ->
      ((((1 + i) * (j + k - k_1 - i)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((k_1 + i) < x_5) ->
      (((i * (1 + i)) / 2) < k_2))).
  (* Invariant *)
  Have: (j_1 + x_4) <= k_2.
  (* Invariant *)
  Have: (2 * x_4) <= k_2.
  (* Invariant *)
  Have: x_4 < k_2.
  (* Invariant *)
  Have: 0 < k_2.
  (* Then *)
  Have: x_5 < (k_1 + n).
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k_1.
  (* Invariant *)
  Have: ((j * x_2) + x_4) <= k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_4 <= k_1.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (x_5 <= (i + x_6)))).
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j < k.
  (* Invariant *)
  Have: ((j * x) / 2) <= k.
  (* Invariant *)
  Have: ((x * x_2) + x_4) <= k.
  (* Invariant *)
  Have: (-1) <= j.
}
Prove: x_4 <= k.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (39777)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (9ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 45):
Let x = -k.
Let x_1 = j + k_1 - k.
Let x_2 = j + k_1 - 1 - k.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = 1 + j.
Let x_5 = j + k_1.
Let x_6 = 2 * k.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k_1) /\ is_sint32(k) /\
      is_sint32(k_2) /\ is_sint32(n) /\ is_sint32(x_4) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Invariant *)
  Have: j_1 <= k_2.
  (* Invariant *)
  Have: ((j_1 * x_1) + x_3) <= k_2.
  (* Invariant *)
  Have: ((j_1 * (j_1 - 1)) / 2) <= k_2.
  (* Invariant *)
  Have: (0 <= j_1) /\ (k < x_5) /\ ((j_1 + k) <= x_5).
  (* Invariant *)
  Have: x_5 <= (k + k_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->
      (x_5 <= (k + k_2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1) < x_5) -> (i_1 < k_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1) < x_5) ->
      ((((1 + i_1) * (j + k_1 - k - i_1)) / 2) <= k_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1) < x_5) ->
      (((i_1 * (1 + i_1)) / 2) < k_2))).
  (* Invariant *)
  Have: (j_1 + x_3) <= k_2.
  (* Invariant *)
  Have: (2 * x_3) <= k_2.
  (* Invariant *)
  Have: x_3 < k_2.
  (* Invariant *)
  Have: 0 < k_2.
  (* Then *)
  Have: x_5 < (k + n).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: k <= k_1.
  (* Invariant *)
  Have: ((j * (j - 1)) / 2) <= k.
  (* Invariant *)
  Have: ((j * x_2) + x_3) <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_3 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (x_5 <= (i_1 + x_6)))).
  (* Then *)
  Have: k < k_1.
  (* Invariant *)
  Have: j < k_1.
  (* Invariant *)
  Have: ((j * x_4) / 2) <= k_1.
  (* Invariant *)
  Have: ((x_4 * x_2) + x_3) <= k_1.
  (* Invariant *)
  Have: (-1) <= j.
  (* Invariant *)
  Have: x_3 <= k_1.
}
Prove: j <= (i + k).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (40200)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (7ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/017_0011/017_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/017_0011/017_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/017_0011/017_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/017_0011/017_merged.c, line 49):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/017_0011/017_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo017'.
  Callers assumptions might be imprecise.
