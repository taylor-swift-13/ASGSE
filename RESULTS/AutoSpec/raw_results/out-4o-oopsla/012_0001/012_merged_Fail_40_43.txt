[kernel] Parsing out/012_0001/012_merged.c (with preprocessing)
[kernel:typing:no-proto] out/012_0001/012_merged.c:38: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/012_0001/012_merged.c:57: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/012_0001/012_merged.c:56: Warning: 
  Body of function foo012 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/012_0001/012_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/012_0001/012_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/012_0001/012_merged.c:56: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 43 goals scheduled
[wp] [Timeout] typed_foo012_loop_invariant_2_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo012_loop_invariant_9_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo012_assert_missing_return (Qed 5ms) (Z3)
[wp] Proved goals:   40 / 43
  Qed:              33
  Alt-Ergo 2.5.4:    6
  Z3 4.8.12:         1 (1s)
  Timeout:           3
------------------------------------------------------------
  Function foo012
------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 13):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = t_1 % 2.
Let x_5 = 2 * t_1.
Let x_6 = 2 * x_3.
Let x_7 = 1 + flag_0.
Let x_8 = 1 + x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (t + ((x_1 * (if (flag_0 = 0) then 0 else x_2)) / 2)) = x_8.
  (* Invariant *)
  Have: (t + (x_7 * (if (flag_0 = 0) then 0 else x_2))) = x_8.
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else x_3)) = t_1.
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else (x_2 * x_2))) = t_1.
  (* Invariant *)
  Have: ((flag_0 * x_2) + (x_7 * x_2)) = t_1.
  (* Invariant *)
  Have: (x_2 * (1 + (if (flag_0 = 0) then 0 else 1))) = t_1.
  (* Invariant *)
  Have: (x_6 = t_1) \/ ((1 + x_6) = t).
  (* Invariant *)
  Have: ((x_2 * (flag_0 + t - 1 - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: x_5 < (t + x_3).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_4 else 0) = x_4.
  (* Invariant *)
  Have: x_3 <= t_1.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (t + (((1 + t - t_1) * (if (flag_0 = 0) then 0 else x_1)) / 2))
         = (t_2 + t_1).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (1s) (2528361)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 14):
Let x = 1 + a.
Let x_1 = (x * (2 + a)) / 2.
Let x_2 = (a * (a + flag_0)) / 2.
Let x_3 = (a * x) / 2.
Let x_4 = a + x_3.
Let x_5 = 1 + flag_0.
Let x_6 = a * x_5.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(1 + a + x_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_2 = x_4.
  (* Invariant *)
  Have: x_2 = (a + x_6).
  (* Invariant *)
  Have: x_2 = (2 * x_3).
  (* Invariant *)
  Have: x_2 = ((a * a) + x_3).
  (* Invariant *)
  Have: x_2 = ((a * flag_0) + x_6).
  (* Invariant *)
  Have: x_2 = (2 * a).
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + a + x_2).
}
Prove: x_1 = (x * x_5).
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 15):
Let x = 1 + a.
Let x_1 = (x * (2 + a)) / 2.
Let x_2 = 1 + flag_0.
Let x_3 = x * x_2.
Let x_4 = (a * (a + flag_0)) / 2.
Let x_5 = (a * x) / 2.
Let x_6 = a + x_5.
Let x_7 = a * x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_4) /\
      is_sint32(1 + a + x_3) /\ is_sint32(1 + a + x_5).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_4 = x_6.
  (* Invariant *)
  Have: x_4 = (a + x_7).
  (* Invariant *)
  Have: x_4 = (2 * x_5).
  (* Invariant *)
  Have: x_4 = ((a * a) + x_5).
  (* Invariant *)
  Have: x_4 = ((a * flag_0) + x_7).
  (* Invariant *)
  Have: x_4 = (2 * a).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = (1 + a + x_4).
  (* Invariant *)
  Have: x_1 = x_3.
}
Prove: x_3 = (x_5 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (39188)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (7ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (19ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (19ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 19):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = flag_0 * x_1.
Let x_3 = 1 + flag_0.
Let x_4 = x_3 * x_1.
Let x_5 = x_2 + x_4.
Let x_6 = (x_1 * (1 + t_1 - t)) / 2.
Let x_7 = t_1 - 1 - t.
Let x_8 = (x_1 * x_7) / 2.
Let x_9 = t + x_2 + x_4.
Let x_10 = 2 * t_1.
Let x_11 = 2 * t.
Let x_12 = t_1 + x_8.
Let x_13 = x_3 * x_7.
Let x_14 = 1 + x_11.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_7) /\ is_sint32(x_5) /\ is_sint32(x_8) /\
      is_sint32(t + x_2 + x_4 - t_1) /\ is_sint32(t_1 + x_8 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_12 = x_14.
  (* Invariant *)
  Have: (t_1 + x_13) = x_14.
  (* Invariant *)
  Have: ((x_7 * x_7) + x_8) = t.
  (* Invariant *)
  Have: (2 * x_8) = t.
  (* Invariant *)
  Have: ((flag_0 * x_7) + x_13) = t.
  (* Invariant *)
  Have: (2 + (3 * t)) = x_10.
  (* Invariant *)
  Have: ((x_7 * (flag_0 + t_1 - 1 - t)) / 2) = t.
  (* Invariant *)
  Have: x_11 < x_12.
  (* Invariant *)
  Have: (t % 2) = 0.
  (* Invariant *)
  Have: x_8 <= t.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_9 = x_10.
  (* Invariant *)
  Have: (t_1 + x_6) = x_9.
  (* Invariant *)
  Have: (t + x_2) = t_1.
  (* Invariant *)
  Have: (t_1 + x_8 + x_6) = x_9.
  (* Invariant *)
  Have: ((x_1 * x_1) + x_6) = x_5.
  (* Invariant *)
  Have: x_5 = (2 * x_6).
}
Prove: (x_11 + x_2 + x_4) = x_10.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (39828)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 21):
Assume { Type: is_sint32(tmp_0). (* Then *) Have: tmp_0 != 0. }
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 22):
Let x = -t.
Let x_1 = -t_1.
Let x_2 = ((t - t_1) * (flag_0 + t - t_1)) / 2.
Let x_3 = x_2 - t.
Let x_4 = (x_3 * (flag_0 + x_2 - t)) / 2.
Let x_5 = t + x_4.
Let x_6 = t_1 + x_2.
Let x_7 = 2 * t.
Let x_8 = x_7 + x_4.
Let x_9 = 2 * x_2.
Let x_10 = 1 + flag_0.
Let x_11 = x_10 * x_3.
Let x_12 = (x_3 * (1 + x_2 - t)) / 2.
Let x_13 = x_2 - 1 - t.
Let x_14 = (x_3 * x_13) / 2.
Let x_15 = x_2 + x_14.
Let x_16 = x_10 * x_13.
Let x_17 = 1 + t + t_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_13) /\
      is_sint32(x_14) /\ is_sint32(x_4) /\ is_sint32(x_2 + x_14 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_15 = x_17.
  (* Invariant *)
  Have: (x_2 + x_16) = x_17.
  (* Invariant *)
  Have: ((x_13 * x_13) + x_14) = t_1.
  (* Invariant *)
  Have: (2 * x_14) = t_1.
  (* Invariant *)
  Have: ((flag_0 * x_13) + x_16) = t_1.
  (* Invariant *)
  Have: (2 + t_1 + x_7) = x_9.
  (* Invariant *)
  Have: ((x_13 * (flag_0 + x_2 - 1 - t)) / 2) = t_1.
  (* Invariant *)
  Have: (t + t_1) < x_15.
  (* Invariant *)
  Have: (t_1 % 2) = 0.
  (* Invariant *)
  Have: x_14 <= t_1.
  (* Invariant *)
  Have: t < x_2.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_2 + x_12) = x_5.
  (* Invariant *)
  Have: x_5 = (x_2 + x_11).
  (* Invariant *)
  Have: (x_2 + x_14 + x_12) = x_5.
  (* Invariant *)
  Have: x_4 = ((x_3 * x_3) + x_12).
  (* Invariant *)
  Have: x_4 = (2 * x_12).
  (* Invariant *)
  Have: x_4 = ((flag_0 * x_3) + x_11).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_5 = x_6) \/ (x_8 = (t_1 + x_9)).
}
Prove: x_8 <= (x_9 + x_14).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (42846)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (12ms) (121)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 23):
Let x = -s_1.
Let x_1 = s - s_1.
Let x_2 = (x_1 * (flag_0 + s - s_1)) / 2.
Let x_3 = s_1 + x_2.
Let x_4 = 2 * s.
Let x_5 = 2 * s_1.
Let x_6 = 1 + flag_0.
Let x_7 = x_6 * x_1.
Let x_8 = (x_1 * (1 + s - s_1)) / 2.
Let x_9 = s + x_8.
Let x_10 = s - 1 - s_1.
Let x_11 = (x_10 * (flag_0 + s - 1 - s_1)) / 2.
Let x_12 = -x_11.
Let x_13 = ((t - x_11) * (flag_0 + t - x_11)) / 2.
Let x_14 = x_6 * x_10.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(t) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_10) /\ is_sint32(x_2) /\ is_sint32(x_11).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (1 + x_11) = s.
  (* Invariant *)
  Have: (1 + s_1 + x_11) = (s + x_14).
  (* Invariant *)
  Have: x_11 = (s_1 + (x_10 * x_10)).
  (* Invariant *)
  Have: x_11 = x_5.
  (* Invariant *)
  Have: x_11 = ((flag_0 * x_10) + x_14).
  (* Invariant *)
  Have: (2 + x_5 + x_11) = x_4.
  (* Invariant *)
  Have: x_11 < s.
  (* Invariant *)
  Have: (x_11 % 2) = 0.
  (* Invariant *)
  Have: ((x_1 * x_10) / 2) = s_1.
  (* Invariant *)
  Have: s_1 <= x_11.
  (* Invariant *)
  Have: s_1 < s.
  (* Then *)
  Have: tmp_0 != 0.
  Have: ((s_1 + x_13) = (s + t)) /\ ((x_11 + x_13) = (2 * t)).
  (* Invariant *)
  Have: x_3 = x_9.
  (* Invariant *)
  Have: x_3 = (s + x_7).
  (* Invariant *)
  Have: x_2 = x_9.
  (* Invariant *)
  Have: x_2 = ((x_1 * x_1) + x_8).
  (* Invariant *)
  Have: x_2 = (2 * x_8).
  (* Invariant *)
  Have: x_2 = ((flag_0 * x_1) + x_7).
  (* Invariant *)
  Have: (x_5 + x_2) = x_4.
  (* Invariant *)
  Have: (x_2 = x_4) \/ (x_2 = (s + s_1)).
  (* Invariant *)
  Have: x_3 <= x_4.
}
Prove: (x_2 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (44606)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (7ms) (83)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 24):
Let x = -t.
Let x_1 = -t_1.
Let x_2 = ((t - t_1) * (flag_0 + t - t_1)) / 2.
Let x_3 = x_2 - t.
Let x_4 = (x_3 * (flag_0 + x_2 - t)) / 2.
Let x_5 = 2 * t.
Let x_6 = x_5 + x_4.
Let x_7 = 2 * x_2.
Let x_8 = x_2 - 1 - t.
Let x_9 = (x_3 * x_8) / 2.
Let x_10 = t + x_4.
Let x_11 = t_1 + x_2.
Let x_12 = 1 + flag_0.
Let x_13 = x_12 * x_3.
Let x_14 = (x_3 * (1 + x_2 - t)) / 2.
Let x_15 = x_2 + x_9.
Let x_16 = x_12 * x_8.
Let x_17 = 1 + t + t_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_8) /\
      is_sint32(x_9) /\ is_sint32(x_4) /\ is_sint32(x_2 + x_9 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_15 = x_17.
  (* Invariant *)
  Have: (x_2 + x_16) = x_17.
  (* Invariant *)
  Have: ((x_8 * x_8) + x_9) = t_1.
  (* Invariant *)
  Have: (2 * x_9) = t_1.
  (* Invariant *)
  Have: ((flag_0 * x_8) + x_16) = t_1.
  (* Invariant *)
  Have: (2 + t_1 + x_5) = x_7.
  (* Invariant *)
  Have: ((x_8 * (flag_0 + x_2 - 1 - t)) / 2) = t_1.
  (* Invariant *)
  Have: (t + t_1) < x_15.
  (* Invariant *)
  Have: (t_1 % 2) = 0.
  (* Invariant *)
  Have: x_9 <= t_1.
  (* Invariant *)
  Have: t < x_2.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_11 = x_5.
  (* Invariant *)
  Have: (x_2 + x_14) = x_10.
  (* Invariant *)
  Have: x_10 = (x_2 + x_13).
  (* Invariant *)
  Have: (x_2 + x_9 + x_14) = x_10.
  (* Invariant *)
  Have: x_4 = ((x_3 * x_3) + x_14).
  (* Invariant *)
  Have: x_4 = (2 * x_14).
  (* Invariant *)
  Have: x_4 = ((flag_0 * x_3) + x_13).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_10 = x_11) \/ (x_6 = (t_1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (x_7 + x_9).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
}
Prove: x_15 = (t + x_14).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (43703)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (13ms) (123)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 27):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = (x_1 * (flag_0 + t - t_1)) / 2.
Let x_3 = t_1 + x_2.
Let x_4 = (x_1 * (1 + t - t_1)) / 2.
Let x_5 = t + x_4.
Let x_6 = 2 * t_1.
Let x_7 = 2 * t.
Let x_8 = 1 + flag_0.
Let x_9 = x_8 * x_1.
Let x_10 = 2 * x_4.
Let x_11 = t - 1 - t_1.
Let x_12 = (x_1 * x_11) / 2.
Let x_13 = t + x_12.
Let x_14 = x_8 * x_11.
Let x_15 = 1 + x_6.
Let x_16 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_11) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(t_1 + x_4 - t) /\ is_sint32(t_1 + x_2 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_13 = x_15.
  (* Invariant *)
  Have: (t + x_14) = x_15.
  (* Invariant *)
  Have: (x_12 + x_4) = t.
  (* Invariant *)
  Have: ((x_11 * x_11) + x_12) = t_1.
  (* Invariant *)
  Have: (2 * x_12) = t_1.
  (* Invariant *)
  Have: ((flag_0 * x_11) + x_14) = t_1.
  (* Invariant *)
  Have: (2 + (3 * t_1)) = x_7.
  (* Invariant *)
  Have: ((t_1 + x_10) = x_7) \/ ((1 + x_6 + x_10) = (3 * t)).
  (* Invariant *)
  Have: ((x_11 * (flag_0 + t - 1 - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: t_1 < x_4.
  (* Invariant *)
  Have: (t_1 % 2) = 0.
  (* Invariant *)
  Have: (t_1 + x_4) = x_13.
  (* Invariant *)
  Have: x_4 <= t.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: x_3 = (t + x_9).
  (* Invariant *)
  Have: x_2 = x_10.
  (* Invariant *)
  Have: x_2 = ((x_1 * x_1) + x_4).
  (* Invariant *)
  Have: x_2 = ((flag_0 * x_1) + x_9).
  (* Invariant *)
  Have: (x_6 + x_2) = x_7.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
}
Prove: x_4 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (41428)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (9ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0001/012_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0001/012_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/012_0001/012_merged.c, line 63):
Let x_1 = 1 + a.
Let x_2 = (a * x_1) / 2.
Let x_3 = (a * (a + flag_0)) / 2.
Let x_4 = x_3 % 2.
Let x_5 = 2 * x_2.
Let x_6 = 1 + flag_0.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: x_3 = (a + ((x_1 * (if (flag_0 = 0) then 0 else a)) / 2)).
  (* Invariant *)
  Have: x_3 = (a + (x_6 * (if (flag_0 = 0) then 0 else a))).
  (* Invariant *)
  Have: x_3 = (x_2 + (if (flag_0 = 0) then 0 else x_2)).
  (* Invariant *)
  Have: x_3 = ((if (flag_0 = 0) then 0 else (a * a)) + x_2).
  (* Invariant *)
  Have: x_3 = ((a * flag_0) + (a * x_6)).
  (* Invariant *)
  Have: x_3 = (a * (1 + (if (flag_0 = 0) then 0 else 1))).
  (* Invariant *)
  Have: (x_3 = x_5) \/ ((a + x_3) = x_5).
  (* Invariant *)
  Have: x_3 <= (a + x_2).
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_4 else 0) = x_4.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Else *)
  Have: x < y.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/012_0001/012_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/012_0001/012_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/012_0001/012_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/012_0001/012_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/012_0001/012_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo012'.
  Callers assumptions might be imprecise.
