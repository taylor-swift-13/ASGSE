[kernel] Parsing out/012_0002/012_merged.c (with preprocessing)
[kernel:typing:no-proto] out/012_0002/012_merged.c:39: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/012_0002/012_merged.c:58: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/012_0002/012_merged.c:57: Warning: 
  Body of function foo012 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/012_0002/012_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/012_0002/012_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/012_0002/012_merged.c:57: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 45 goals scheduled
[wp] [Timeout] typed_foo012_loop_invariant_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo012_assert_missing_return (Qed 4ms) (Z3)
[wp] Proved goals:   43 / 45
  Qed:              40
  Alt-Ergo 2.5.4:    3 (4ms-6ms-9ms)
  Timeout:           2
------------------------------------------------------------
  Function foo012
------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 13):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Let x_3 = x_1 * x_2.
Let x_4 = x_3 / 2.
Let x_5 = 1 + (2 * t_1).
Let x_6 = 2 * x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(t + x_4 - t_1).
  (* Invariant *)
  Have: ((x_2 * (if (flag_0 = 0) then 1 else 2)) + x_4) = t_1.
  (* Invariant *)
  Have: (x_4 + (if (flag_0 = 0) then 0 else (x_2 * x_2))) = t_1.
  (* Invariant *)
  Have: (x_4 + (if (flag_0 = 0) then 0 else x_4)) = t_1.
  (* Invariant *)
  Have: (t + x_6) = x_5.
  (* Invariant *)
  Have: x_4 <= t_1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_6 = t_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (((2 * t) + x_4) = (2 + (3 * t_1)))).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: t_1 < t.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_4 = t_1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((t + x_4) = x_5)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (t + (x_1 * (if (flag_0 = 0) then 1 else 2)) + x_4) = (t_2 + t_1).
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 15):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = x_1 * x_1.
Let x_3 = (x_1 * (1 + t_1 - t)) / 2.
Let x_4 = 2 * t_1.
Let x_5 = 3 * t_1.
Let x_6 = 3 * t.
Let x_7 = x_6 + x_2 + x_3.
Let x_8 = x_2 + x_3.
Let x_9 = 2 * t.
Let x_10 = t_1 - 1 - t.
Let x_11 = (x_1 * x_10) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_10) /\ is_sint32(x_8) /\
      is_sint32(t + x_2 + x_3 - t_1) /\ is_sint32(x_6 + x_2 + x_3 - x_5) /\
      is_sint32(x_9 + x_2 + x_3 - x_4).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_10 * x_10) + x_11) = t.
  (* Invariant *)
  Have: ((4 * t) + (2 * x_2) + (2 * x_3)) = (1 + (5 * t_1)).
  (* Invariant *)
  Have: (2 * x_11) = t.
  (* Invariant *)
  Have: x_7 = (x_5 + x_11).
  (* Invariant *)
  Have: (x_9 + x_2 + x_3) <= x_5.
  (* Invariant *)
  Have: (x_9 + x_2 + x_11 + x_3) = x_5.
  (* Invariant *)
  Have: x_8 = (2 + t_1).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: x_5 <= x_7.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t + x_2 + x_3) = x_4.
}
Prove: (x_9 + x_3) = x_4.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (38605)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (9ms) (53)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 17):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = 2 * t_1.
Let x_3 = (x_1 * (1 + t - t_1)) / 2.
Let x_4 = 2 * t.
Let x_5 = 3 * t_1.
Let x_6 = 3 * t.
Let x_7 = 2 + x_5.
Let x_8 = t - 1 - t_1.
Let x_9 = (x_1 * x_8) / 2.
Let x_10 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_8) /\
      is_sint32(2 + x_5 - x_4) /\ is_sint32(2 + x_2 - t) /\
      is_sint32(2 + x_2 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_8 * x_8) + x_9) = t_1.
  (* Invariant *)
  Have: (3 + (4 * t_1)) = x_6.
  (* Invariant *)
  Have: (2 + x_2 + x_9) = x_4.
  (* Invariant *)
  Have: (x_4 + x_9) = x_7.
  (* Invariant *)
  Have: t_1 < t.
  (* Invariant *)
  Have: (4 + (5 * t_1)) = (4 * t).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (2 + x_5 + x_3) = x_6.
  (* Invariant *)
  Have: (x_2 + x_3) = x_4.
  (* Invariant *)
  Have: (t + (x_1 * x_1)) = (2 + x_2).
}
Prove: x_3 = (2 + t_1).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (37971)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (4ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 18):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = (x_1 * (1 + t_1 - t)) / 2.
Let x_3 = t + x_2.
Let x_4 = 2 * t.
Let x_5 = x_4 + x_2.
Let x_6 = 2 * t_1.
Let x_7 = 2 * x_2.
Let x_8 = x_4 + x_7.
Let x_9 = 3 * t_1.
Let x_10 = t_1 - 1 - t.
Let x_11 = (x_1 * x_10) / 2.
Let x_12 = -t_1.
Let x_13 = (-2) * t_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_10) /\ is_sint32(t + x_2 - t_1) /\
      is_sint32(x_4 + x_2 - x_6) /\ is_sint32(t + x_7 - t_1) /\
      is_sint32(x_4 + x_7 - x_6).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: x_2 = (2 + t).
  (* Invariant *)
  Have: ((x_10 * x_10) + x_11) = t.
  (* Invariant *)
  Have: (t + x_11 + x_2) = x_6.
  (* Invariant *)
  Have: x_8 = (1 + x_9).
  (* Invariant *)
  Have: (2 * x_11) = t.
  (* Invariant *)
  Have: x_5 = (x_6 + x_11).
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_8 = x_9.
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: x_3 = (t_1 + (x_1 * x_1)).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (34348)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (4ms) (112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/012_0002/012_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/012_0002/012_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/012_0002/012_merged.c, line 64):
Let x_1 = a * (1 + a).
Let x_2 = x_1 / 2.
Let x_3 = x_2 + (if (flag_0 = 0) then 0 else x_2).
Let x_4 = a * (if (flag_0 = 0) then 1 else 2).
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_4 = 0) else (x_2 = x_4).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_2 = (a * a)).
  (* Invariant *)
  Have: if (flag_0 = 0) then ((a + x_2) = 0) else (a = 0).
  (* Invariant *)
  Have: ((flag_0 != 0) ->
      (if (flag_0 = 0) then (a = 0) else (x_2 = (2 * a)))).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((flag_0 = 0) -> (if (flag_0 = 0) then (a = 0) else (x_2 = a))).
  (* Else *)
  Have: x < y.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/012_0002/012_merged.c, line 34) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/012_0002/012_merged.c, line 34) (2/2):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/012_0002/012_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/012_0002/012_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/012_0002/012_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo012'.
  Callers assumptions might be imprecise.
