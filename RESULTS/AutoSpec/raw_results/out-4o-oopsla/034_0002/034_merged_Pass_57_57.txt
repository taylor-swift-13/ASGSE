[kernel] Parsing out/034_0002/034_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 57 goals scheduled
[wp] Proved goals:   57 / 57
  Qed:              47
  Alt-Ergo 2.5.4:   10 (4ms-15ms-36ms)
------------------------------------------------------------
  Function foo034
------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 11):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = i % 2.
Let x_3 = 1 + x_1.
Let x_4 = 1 + i.
Let x_5 = 1 + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_5).
  (* Residual *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_3 = i).
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_2 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_1 = i) <-> (x_2 = 0).
  (* Then *)
  Have: i < n.
}
Prove: (x_4 / 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (35385)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (19ms) (285)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 13):
Let x = i / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 / 2.
Let x_3 = 2 * x.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_3 = i) <-> (x_4 = 0).
  (* Then *)
  Have: i < n.
  If (x_1 % 2) = 0
  Then { Have: (1 + x) = y. }
  Else { Have: x = y. }
  (* Invariant *)
  Have: (x = y) \/ (x_2 = y).
}
Prove: y <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (35446)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (20ms) (302)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 15):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = i / 2.
Let x_3 = 2 * x_2.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Let x_6 = 2 * y.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_2)))).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x_2 <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x_2)).
  (* Invariant *)
  Have: (x_3 = i) <-> (x_4 = 0).
  (* Then *)
  Have: i < n.
  If (x % 2) = 0
  Then { Have: (1 + x_2) = y. }
  Else { Have: x_2 = y. }
  (* Invariant *)
  Have: (x_2 = y) \/ (x_1 = y).
  (* Invariant *)
  Have: y <= x_1.
}
Prove: (x_6 = i) \/ (x = x_6).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (36456)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (27ms) (439)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 18):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + i.
Let x_3 = i % 2.
Let x_4 = 1 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_4 = i).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_4 = i)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_3 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_1 = i) <-> (x_3 = 0).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= (x_2 / 2).
  (* Invariant *)
  Have: (x_1 = i) \/ (x_2 = x_1).
}
Prove: x_1 = i.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32603)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 19):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = 1 + i.
Let x_4 = x_3 / 2.
Let x_5 = 1 + x.
Let x_6 = i % 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_5).
  (* Goal *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_2 = i).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_2 = i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_1 = i) <-> (x_6 = 0).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: (x_2 = i) \/ ((2 + x_1) = i).
}
Prove: x_2 = i.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32623)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 20):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * y.
Let x_3 = x / 2.
Let x_4 = i_1 / 2.
Let x_5 = 2 * x_4.
Let x_6 = i_1 % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x).
  (* Goal *)
  When: ((i % 2) = 0) /\ (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_7 = i_1).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i_1)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i_1)).
  (* Invariant *)
  Have: forall i_2 : Z. (((i_2 % 2) = 0) -> ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 / 2) <= x_4)))).
  (* Invariant *)
  Have: x_5 <= i_1.
  (* Invariant *)
  Have: (x_4 <= i_1) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i_1 - 1) / 2) = x_4)).
  (* Invariant *)
  Have: (x_5 = i_1) <-> (x_6 = 0).
  (* Then *)
  Have: i_1 < n.
  If x_1 = 0
  Then { Have: (1 + x_4) = y. }
  Else { Have: x_4 = y. }
  (* Invariant *)
  Have: (x_4 = y) \/ (x_3 = y).
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_2 = i_1) \/ (x = x_2).
  (* Invariant *)
  Have: ((x_1 = 1) -> (x_2 = i_1)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x = x_2)).
}
Prove: (i / 2) <= y.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (38423)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (36ms) (576)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 21):
Let x = i / 2.
Let x_1 = 1 + i.
Let x_2 = x_1 % 2.
Let x_3 = 2 * x.
Let x_4 = i % 2.
Let x_5 = 1 + x_3.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Residual *)
  When: x_2 != 0.
  (* Invariant *)
  Have: (x_3 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_3 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_3 = i) <-> (x_4 = 0).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= (x_1 / 2).
  (* Invariant *)
  Have: (x_3 = i) \/ (x_1 = x_3).
  (* Invariant *)
  Have: ((x_2 = 1) -> (x_3 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x)))).
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (34113)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 22):
Let x = i / 2.
Let x_1 = 2 * x.
Let x_2 = 1 + i.
Let x_3 = x_2 % 2.
Let x_4 = i % 2.
Let x_5 = 1 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Residual *)
  When: x_3 != 0.
  (* Invariant *)
  Have: (x_1 = i) \/ (x_5 = i).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_5 = i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_4 = 1) -> (((i - 1) / 2) = x)).
  (* Invariant *)
  Have: (x_1 = i) <-> (x_4 = 0).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= (x_2 / 2).
  (* Invariant *)
  Have: (x_1 = i) \/ (x_2 = x_1).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_1 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x)))).
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: x <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (34215)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 24):
Let x_1 = x / 2.
Let x_2 = 1 + x.
Let x_3 = 2 * x_1.
Let x_4 = x_2 % 2.
Let x_5 = x_2 / 2.
Let x_6 = x % 2.
Let x_7 = 1 + x_3.
Assume {
  Type: is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Residual *)
  When: x_4 != 0.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_7 = x).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = x)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_3 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i < x) ->
      ((i / 2) <= x_1)))).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: (x_1 <= x) /\ ((-1) <= x).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((x - 1) / 2) = x_1)).
  (* Invariant *)
  Have: (x_3 = x) <-> (x_6 = 0).
  (* Then *)
  Have: x < n.
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_2 = x_3).
  (* Invariant *)
  Have: ((x_4 = 1) -> (x_3 = x)).
  (* Invariant *)
  Have: forall i : Z. (((i % 2) = 0) -> ((0 <= i) -> ((i <= x) ->
      ((i / 2) <= x_1)))).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: x_5 = x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (36556)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (22ms) (396)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/034_0002/034_merged.c, line 38):
Let x = 1 + i.
Let x_1 = x / 2.
Let x_2 = 2 * x_1.
Let x_3 = x % 2.
Let x_4 = i / 2.
Let x_5 = 2 * x_4.
Let x_6 = i % 2.
Let x_7 = 1 + x_5.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_4) /\ is_sint32(x) /\
      is_sint32(x_1).
  (* Residual *)
  When: x_3 != 0.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_7 = i).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_7 = i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_5 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 / 2) <= x_4)))).
  (* Invariant *)
  Have: x_5 <= i.
  (* Invariant *)
  Have: (x_4 <= i) /\ ((-1) <= i).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((x_6 = 1) -> (((i - 1) / 2) = x_4)).
  (* Invariant *)
  Have: (x_5 = i) <-> (x_6 = 0).
  (* Then *)
  Have: i < n.
  Have: x_1 = x_4.
  (* Invariant *)
  Have: (x_2 = i) \/ (x = x_2).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x_2 = i)).
  (* Invariant *)
  Have: forall i_1 : Z. (((i_1 % 2) = 0) -> ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 / 2) <= x_1)))).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((-2) <= i) /\ (x_1 <= x).
}
Prove: x != x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36472)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/034_0002/034_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/034_0002/034_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/034_0002/034_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo034'.
  Callers assumptions might be imprecise.
