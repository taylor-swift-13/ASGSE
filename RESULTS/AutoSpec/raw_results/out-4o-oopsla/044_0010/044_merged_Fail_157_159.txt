[kernel] Parsing out/044_0010/044_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 159 goals scheduled
[wp] [Timeout] typed_foo044_loop_invariant_4_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo044_loop_invariant_4_established (Qed 3ms) (Z3)
[wp] Proved goals:  157 / 159
  Qed:             144
  Alt-Ergo 2.5.4:    9 (6ms-15ms-65ms)
  Z3 4.8.12:         4 (10ms-17ms-30ms)
  Timeout:           2
------------------------------------------------------------
  Function foo044
------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 18):
Let x = j / (if (flag_0 = 1) then 1 else 2).
Let x_1 = j + (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(1 + x).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: (x * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = j)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 * x) = j)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= x) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j <= ((if (flag_0 = 1) then 1 else 2) + x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x <= (1 + k)) -> (x = j))).
}
Prove: x < (x_1 / (if (flag_0 = 1) then 1 else 2)).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (30ms) (57870)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 21):
Let x = j / (if (flag_0 = 1) then 1 else 2).
Let x_1 = j + (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(1 + x).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: (x * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = j)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 * x) = j)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= x) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j <= ((if (flag_0 = 1) then 1 else 2) + x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x <= (1 + k)) -> (x = j))).
  (* Invariant *)
  Have: x < (x_1 / (if (flag_0 = 1) then 1 else 2)).
}
Prove: x < k.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 21):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  If flag_0 = 1
  Then { Have: n = 1. }
  Else { Have: n = 2. }
  (* Invariant *)
  Have: 0 <= (0 / n).
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 54):
Let x = j / (if (flag_0 = 1) then 1 else 2).
Let x_1 = j + (if (flag_0 = 1) then 1 else 2).
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: (x * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < x) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x = j)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 * x) = j)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 <= x) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j <= ((if (flag_0 = 1) then 1 else 2) + x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x <= (1 + k)) -> (x = j))).
  (* Invariant *)
  Have: x < (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: x < k.
}
Prove: (x_2 * (if (flag_0 = 1) then 1 else 2)) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10841)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (8ms) (119)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 56):
Let x = 1 + i_1.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = i_1 + (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i_1 * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_1) -> ((0 <= i_5) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_3 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (x_1 = ((2 * i_1) + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: (x_3 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (x_1 <= (i_1 + (2 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i_1 <= (1 + k)) -> (x_1 = x_2))).
  (* Invariant *)
  Have: i_1 < (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i_1 < k.
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (30ms) (95279)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (11ms) (219)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 57):
Let x = 1 + i_1.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = i_1 + (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(k) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i_1 * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_1) -> ((0 <= i_5) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_3 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (x_1 = ((2 * i_1) + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: (x_3 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_4 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (x_1 <= (i_1 + (2 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i_1 <= (1 + k)) -> (x_1 = x_2))).
  (* Invariant *)
  Have: i_1 < (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i_1 < k.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (20ms) (40248)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (7ms) (226)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 58):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = i + (if (flag_0 = 1) then 1 else 2).
Let x_3 = x_1 - (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_4 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_2 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_2)).
  (* Invariant *)
  Have: ((flag_0 != 1) ->
      (x_1 = ((2 * i) + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: (x_3 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_3 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_3 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (x_1 <= (i + (2 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i <= (1 + k)) -> (x_1 = x_2))).
  (* Invariant *)
  Have: i < (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
}
Prove: exists i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
    (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (41367)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 69):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = i + (if (flag_0 = 1) then 1 else 2).
Let x_4 = x_1 - (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_2 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_2 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: (x_4 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_4 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_3 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (x_1 <= (i + (2 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i <= (1 + k)) -> (x_1 = x_3))).
  (* Invariant *)
  Have: i < (x_1 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
}
Prove: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (65783)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 69):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: 0 <= (0 / (if (flag_0 = 1) then 1 else 2)).
  (* Invariant *)
  Have: 0 <= k.
}
Prove: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30318)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (6ms) (66)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 70):
Let x = 1 + i.
Let x_1 = x * (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * i.
Let x_3 = x_1 / (if (flag_0 = 1) then 1 else 2).
Let x_4 = i + (if (flag_0 = 1) then 1 else 2).
Let x_5 = x_1 - (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: x_1
          = ((if (flag_0 = 1) then 1 else 2)
             + (i * (if (flag_0 = 1) then 1 else 2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((if (flag_0 = 1) then 1 else 2)
        + (i_5 * (if (flag_0 = 1) then 1 else 2))) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_2 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_4)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (x_2 + (if (flag_0 = 1) then 1 else 2)))).
  (* Invariant *)
  Have: (x_5 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (x_5 / (if (flag_0 = 1) then 1 else 2)) = i.
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) ->
      (x_1
         = ((if (flag_0 = 1) then 1 else 2)
            + (i_3 * (if (flag_0 = 1) then 1 else 2)))))).
  (* Invariant *)
  Have: if (flag_0 = 1) then (0 < x_1) else (2 <= x_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: ((flag_0 = 1) ->
      (x_1 <= (i + (2 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((i <= (1 + k)) -> (x_1 = x_4))).
  (* Invariant *)
  Have: i < x_3.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) ->
      (x_1 = (i_4 * (if (flag_0 = 1) then 1 else 2))))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x_1 = (2 + x_2))).
  (* Invariant *)
  Have: (x_1 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: x_3 = x.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (62175)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (65ms) (1643)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 70):
Let x = 0 / (if (flag_0 = 1) then 1 else 2).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: x = 0.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (30408)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (67)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 71):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + j.
Let x_4 = 1 + (j / (if (flag_0 = 1) then 1 else 2)).
Let x_5 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_2)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_3))).
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (20ms) (41813)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (11ms) (254)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 72):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 78):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + j.
Let x_4 = 1 + (j / (if (flag_0 = 1) then 1 else 2)).
Let x_5 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < x_1) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> (((2 + i_5) <= x_1) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_2) -> (((2 + i_2) <= x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_2)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_3))).
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x_1) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < x_1) ->
      ((i_5 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: (i * (if (flag_0 = 1) then 1 else 2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (82621)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (12ms) (260)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 79):
Let x = j + (if (flag_0 = 1) then 1 else 2).
Let x_1 = x / (if (flag_0 = 1) then 1 else 2).
Let x_2 = 2 * x_1.
Let x_3 = 1 + j.
Let x_4 = 1 + (j / (if (flag_0 = 1) then 1 else 2)).
Let x_5 = x_1 - 1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_5).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) ->
      ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: x_1 <= (1 + k).
  (* Invariant *)
  Have: (x_5 * (if (flag_0 = 1) then 1 else 2)) = j.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= j))).
  (* Invariant *)
  Have: ((0 <= i_1) -> (((2 + i_1) <= x_1) ->
      ((i_1 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> ((2 + j) = x_2)).
  (* Invariant *)
  Have: (j % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < x_1) ->
      ((i_2 * (if (flag_0 = 1) then 1 else 2)) = j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((flag_0 = 1) -> (j < ((if (flag_0 = 1) then 1 else 2) + x_1))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> ((x_1 <= (2 + k)) -> (x_1 = x_3))).
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: (x_1 * (if (flag_0 = 1) then 1 else 2)) = x.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((i_4 * (if (flag_0 = 1) then 1 else 2)) <= x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < x_1) ->
      ((i_3 * (if (flag_0 = 1) then 1 else 2)) = x))).
  (* Invariant *)
  Have: ((flag_0 = 1) -> (x_1 = x)).
  (* Invariant *)
  Have: ((flag_0 != 1) -> (x = x_2)).
  (* Invariant *)
  Have: (x % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: exists i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
    ((i_4 * (if (flag_0 = 1) then 1 else 2)) = x))).
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (45312)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 79):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: (0 % (if (flag_0 = 1) then 1 else 2)) = 0.
  (* Invariant *)
  Have: (0 / (if (flag_0 = 1) then 1 else 2)) = 0.
}
Prove: exists i : Z. ((i <= 0) -> ((0 <= i) ->
    ((i * (if (flag_0 = 1) then 1 else 2)) = 0))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (174)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 84):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 85):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 86):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 87):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 88):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 89):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 90):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 91):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 92):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 93):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 94):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 95):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/044_0010/044_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/044_0010/044_merged.c, line 96):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Loop assigns (file out/044_0010/044_merged.c, line 97):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/044_0010/044_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo044'.
  Callers assumptions might be imprecise.
