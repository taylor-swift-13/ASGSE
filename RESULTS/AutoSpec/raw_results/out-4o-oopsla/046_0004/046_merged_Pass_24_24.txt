[kernel] Parsing out/046_0004/046_merged.c (with preprocessing)
[kernel:typing:no-proto] out/046_0004/046_merged.c:30: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/046_0004/046_merged.c:5: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] Proved goals:   24 / 24
  Qed:              17
  Alt-Ergo 2.5.4:    7 (5ms-15ms-28ms)
------------------------------------------------------------
  Function foo046
------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 14):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_1).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (w % 2) = 1.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_2 = 0) \/ (x_2 = 1).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36153)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (16ms) (224)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 15):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(1 + y) /\ is_sint32(x_1).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_1).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (w % 2) = 1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (32233)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 16):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(1 + w) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_1).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_1).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (32793)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 18):
Let x_1 = 1 + z.
Let x_2 = x_1 % 2.
Let x_3 = 1 + w.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_3) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_1).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_1).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (37356)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (23ms) (297)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 20):
Let x_1 = 1 + w.
Let x_2 = x_1 % 2.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_3).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_3).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
}
Prove: (-1) <= z.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (33191)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (7ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 23):
Let x_1 = 1 + w.
Let x_2 = x_1 % 2.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_3).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_3).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (-1) <= z.
}
Prove: ((2 + w + z) % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (49995)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (22ms) (355)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/046_0004/046_merged.c, line 24):
Let x_1 = 1 + w.
Let x_2 = x_1 % 2.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(z) /\ is_sint32(x_1) /\ is_sint32(1 + x) /\
      is_sint32(1 + y) /\ is_sint32(x_3).
  (* Residual *)
  When: (w % 2) = 1.
  (* Invariant *)
  Have: (0 <= y) /\ (y <= x_3).
  (* Invariant *)
  Have: (x <= w) /\ (0 <= x).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Invariant *)
  Have: ((w + z) % 2) = 1.
  (* Invariant *)
  Have: (z % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (-1) <= z.
  (* Invariant *)
  Have: ((2 + w + z) % 2) = 1.
}
Prove: ((x_2 = 0) /\ (x_4 = 1)) \/ ((x_2 = 1) /\ (x_4 = 0)).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (41545)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (28ms) (398)

------------------------------------------------------------

Goal Establishment of Invariant (file out/046_0004/046_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Loop assigns (file out/046_0004/046_merged.c, line 25) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/046_0004/046_merged.c, line 25) (2/2):
Call Result at line 30
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/046_0004/046_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/046_0004/046_merged.c:5: Warning: 
  No 'assigns' specification for function 'foo046'.
  Callers assumptions might be imprecise.
