[kernel] Parsing out/04_0006/04_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_foo04_loop_invariant_6_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo04_loop_invariant_8_established (Qed 0.96ms) (Z3)
[wp] Proved goals:   27 / 29
  Qed:              15
  Alt-Ergo 2.5.4:   10 (2ms-17ms-111ms)
  Z3 4.8.12:         2 (20ms-220ms)
  Timeout:           2
------------------------------------------------------------
  Function foo04
------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 9):
Let x_1 = x + y.
Let x_2 = y * y.
Let x_3 = y - 1.
Let x_4 = 1 + y.
Let x_5 = (y * x_4) / 2.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) ->
      (((i * (i - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_3) / 2).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: x < (x_3 * x_3).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      ((x + ((i * (i - 1)) / 2)) < x_2))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_1 = (-50))).
}
Prove: (50 + x + y) <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (44930)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 9):
Assume { Type: is_sint32(y). }
Prove: (-1) <= (y * (y - 1)).
Prover Z3 4.8.12 returns Valid (20ms) (29638)
Prover Alt-Ergo 2.5.4 returns Valid (5ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 11):
Let x_1 = 1 + y.
Let x_2 = (y * x_1) / 2.
Let x_3 = x + y.
Let x_4 = y * y.
Let x_5 = y - 1.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) ->
      (((i * (i - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_5) / 2).
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: x < (x_5 * x_5).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      ((x + ((i * (i - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_4.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_3 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_2.
}
Prove: x_3 < ((x_1 * (2 + y)) / 2).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (40038)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (24ms) (554)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 11):
Assume { Type: is_sint32(y). (* Invariant *) Have: (-1) <= (y * (y - 1)). }
Prove: (-99) <= (y * (1 + y)).
Prover Z3 4.8.12 returns Valid (10ms) (30073)
Prover Alt-Ergo 2.5.4 returns Valid (2ms) (25)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 12):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = y * y.
Let x_5 = y - 1.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) ->
      (((i * (i - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_5) / 2).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x < (x_5 * x_5).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      ((x + ((i * (i - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_4.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_1 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < ((x_2 * (2 + y)) / 2).
}
Prove: x_1 < x_4.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36327)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 12):
Let x = y - 1.
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-1) <= (y * x).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
}
Prove: (-49) <= (x * x).
Prover Z3 4.8.12 returns Valid (20ms) (29940)
Prover Alt-Ergo 2.5.4 returns Valid (4ms) (9)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 13):
Let x_1 = x + y.
Let x_2 = y * y.
Let x_3 = 1 + y.
Let x_4 = (y * x_3) / 2.
Let x_5 = y - 1.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_3) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y_1) ->
      ((-101) <= (i_1 * (1 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y_1) ->
      (((i_1 * (i_1 - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_5) / 2).
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < (x_5 * x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) ->
      (x <= ((i_1 * (1 + i_1)) / 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) ->
      ((x + ((i_1 * (i_1 - 1)) / 2)) < x_2))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_1 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_1 < ((x_3 * (2 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_2.
}
Prove: x_1 <= ((i * (1 + i)) / 2).
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 13):
Let x = y - 1.
Assume {
  Type: is_sint32(y).
  (* Goal *)
  When: (0 <= i) /\ (i < y).
  (* Invariant *)
  Have: (-1) <= (y * x).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
  (* Invariant *)
  Have: (-49) <= (x * x).
}
Prove: (-101) <= (i * (1 + i)).
Prover Z3 4.8.12 returns Valid (Qed:0.84ms) (10ms) (30610)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.84ms) (4ms) (14)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 14):
Let x_1 = x + y.
Let x_2 = y * y.
Let x_3 = 1 + y.
Let x_4 = (y * x_3) / 2.
Let x_5 = y - 1.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_3) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y_1) ->
      ((-101) <= (i_1 * (1 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y_1) ->
      (((i_1 * (i_1 - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_5) / 2).
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < (x_5 * x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) ->
      (x <= ((i_1 * (1 + i_1)) / 2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) ->
      ((x + ((i_1 * (i_1 - 1)) / 2)) < x_2))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_1 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_1 < ((x_3 * (2 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) ->
      (x_1 <= ((i_1 * (1 + i_1)) / 2)))).
}
Prove: (x + y + ((i * (i - 1)) / 2)) < (x_3 * x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (40ms) (107909)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (111ms) (1834)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 14):
Let x = y - 1.
Assume {
  Type: is_sint32(y).
  (* Goal *)
  When: (0 <= i) /\ (i < y).
  (* Invariant *)
  Have: (-1) <= (y * x).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
  (* Invariant *)
  Have: (-49) <= (x * x).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) ->
      ((-101) <= (i_1 * (1 + i_1))))).
}
Prove: ((i * (i - 1)) / 2) <= (49 + (y * y)).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (220ms) (413379)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 15):
Let x = y - 1.
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-1) <= (y * x).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
  (* Invariant *)
  Have: (-49) <= (x * x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      (((i * (i - 1)) / 2) <= (49 + (y * y))))).
}
Prove: 0 <= y.
Prover Z3 4.8.12 returns Timeout (Qed:0.96ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.96ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 16):
Let x_1 = 1 + y.
Let x_2 = x + y.
Let x_3 = y * y.
Let x_4 = (y * x_1) / 2.
Let x_5 = y - 1.
Let x_6 = y_1 * y_1.
Let x_7 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_7 * x_7).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) ->
      (((i * (i - 1)) / 2) <= (49 + x_6)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_7).
  (* Invariant *)
  Have: (-49) <= x_6.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_5) / 2).
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < (x_5 * x_5).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      ((x + ((i * (i - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_2 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_4.
  (* Invariant *)
  Have: x_2 < ((x_1 * (2 + y)) / 2).
  (* Invariant *)
  Have: x_2 < x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      (x_2 <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      ((x + y + ((i * (i - 1)) / 2)) < (x_1 * x_1)))).
  (* Invariant *)
  Have: (-1) <= y.
}
Prove: (-50) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (38275)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 18):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = x_2 * x_2.
Let x_4 = y * y.
Let x_5 = (y * x_2) / 2.
Let x_6 = y - 1.
Let x_7 = y_1 * y_1.
Let x_8 = y_1 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-99) <= (y_1 * (1 + y_1)).
  (* Invariant *)
  Have: (-49) <= (x_8 * x_8).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) ->
      (((i * (i - 1)) / 2) <= (49 + x_7)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: (-1) <= (y_1 * x_8).
  (* Invariant *)
  Have: (-49) <= x_7.
  (* Invariant *)
  Have: ((y = 0) -> (x = (-50))).
  (* Invariant *)
  Have: (50 + x) <= ((y * x_6) / 2).
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: x < (x_6 * x_6).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      ((x + ((i * (i - 1)) / 2)) < x_4))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: x < x_4.
  (* Then *)
  Have: x < 0.
  (* Invariant *)
  Have: ((y = (-1)) -> (x_1 = (-50))).
  (* Invariant *)
  Have: (50 + x + y) <= x_5.
  (* Invariant *)
  Have: x_1 < ((x_2 * (2 + y)) / 2).
  (* Invariant *)
  Have: x_1 < x_4.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      (x_1 <= ((i * (1 + i)) / 2)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      ((x + y + ((i * (i - 1)) / 2)) < x_3))).
  (* Invariant *)
  Have: (-1) <= y.
  (* Invariant *)
  Have: (-50) <= x_1.
}
Prove: x_1 < x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (38466)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (7ms) (79)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 18):
Let x = y - 1.
Let x_1 = y * y.
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-99) <= (y * (1 + y)).
  (* Invariant *)
  Have: (-49) <= (x * x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((-101) <= (i * (1 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) ->
      (((i * (i - 1)) / 2) <= (49 + x_1)))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-1) <= (y * x).
}
Prove: (-49) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (31227)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (19)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0006/04_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0006/04_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/04_0006/04_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/04_0006/04_merged.c:2: Warning: 
  No 'assigns' specification for function 'foo04'.
  Callers assumptions might be imprecise.
