[kernel] Parsing out/040_0005/040_merged.c (with preprocessing)
[kernel:typing:no-proto] out/040_0005/040_merged.c:87: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/040_0005/040_merged.c:131: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/040_0005/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/040_0005/040_merged.c:7: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] Computing [100 goals...]
[wp] 198 goals scheduled
[wp] [Timeout] typed_foo040_loop_invariant_12_established (Qed 1ms) (Z3)
[wp] Proved goals:  197 / 198
  Qed:             172
  Alt-Ergo 2.5.4:   13 (5ms-45ms-185ms)
  Z3 4.8.12:        12 (10ms-14ms-20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo040
------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 17):
Let x = 2 + i.
Let x_1 = j % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(j_1) /\ is_sint32(j_2) /\ is_sint32(j_3) /\
      is_sint32(tmp_0) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: i < j_3.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 % 2) = 0)).
  (* Invariant *)
  Have: forall i_7 : Z. let x_2 = i_7 % 2 in ((x_2 != 0) -> ((0 <= i_7) ->
      (x_2 = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 < i_7) -> (i <= (j_3 + i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j_3) -> (((j_3 - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j_3).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j_3).
  (* Invariant *)
  Have: ((j_3 - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j_3.
  (* Invariant *)
  Have: (j_3 % 2) = 1.
  (* Invariant *)
  Have: forall i_7 : Z. let x_2 = i_7 % 2 in ((x_2 = 0) -> ((0 <= i_7) ->
      (x_2 != 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> (i < (j_3 + i_7))).
  (* Invariant *)
  Have: 0 < j_3.
  (* Then *)
  Have: tmp_0 != 0.
  If (x % 2) = 0
  Then { Have: j_3 = j_1. Have: (2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: (1 + j_2) = j. }
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Valid (Qed:30ms) (10ms) (43490)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (38ms) (614)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 21):
Let x = 1 + j.
Let x_1 = x % 2.
Let x_2 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Residual *)
  When: (x_2 % 2) != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 % 2) = 0)).
  (* Invariant *)
  Have: forall i_7 : Z. let x_3 = i_7 % 2 in ((x_3 != 0) -> ((0 <= i_7) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 < i_7) -> (i <= (j + i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_7 : Z. let x_3 = i_7 % 2 in ((x_3 = 0) -> ((0 <= i_7) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> (i < (j + i_7))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: x_2 <= j.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (42363)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 24):
Let x = 2 + i.
Let x_1 = 1 + j.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Residual *)
  When: (x % 2) != 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 % 2) = 0)).
  (* Invariant *)
  Have: forall i_7 : Z. let x_3 = i_7 % 2 in ((x_3 != 0) -> ((0 <= i_7) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 < i_7) -> (i <= (j + i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_7 : Z. let x_3 = i_7 % 2 in ((x_3 = 0) -> ((0 <= i_7) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> (i < (j + i_7))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: x <= j.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (42375)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (40ms) (619)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 28):
Let x = 2 + i_1.
Let x_1 = 2 + j.
Let x_2 = x_1 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 != 0) -> ((0 <= i_8) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i_1 <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((2 * i_8) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i_1) % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 = 0) -> ((0 <= i_8) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i_1 < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x % 2) = 0.
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (43573)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 28):
Assume {
  Type: is_sint32(flag_0).
  (* Goal *)
  When: 0 <= i.
  (* Pre-condition *)
  Have: 0 < flag_0.
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 30):
Let x = 2 + i_1.
Let x_1 = 2 + j.
Let x_2 = x_1 % 2.
Let x_3 = i % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (x_3 != 0) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i_1 <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((2 * i_8) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i_1) % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 = 0) -> ((0 <= i_8) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i_1 < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
}
Prove: x_2 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (45042)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 30):
Let x = i % 2.
Assume {
  Type: is_sint32(flag_0).
  (* Goal *)
  When: (x != 0) /\ (0 <= i).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 % 2) = 0)).
}
Prove: x = 1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30201)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (6ms) (59)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 31):
Let x = 2 + j.
Let x_1 = x % 2.
Let x_2 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: 0 < i_1.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 != 0) -> ((0 <= i_8) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((2 * i_8) <= i))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 = 0) -> ((0 <= i_8) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 != 0) -> ((0 <= i_8) ->
      (x_1 = x_3))).
}
Prove: i <= (i_1 + j).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (38729)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (6ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 32):
Let x = 2 + j.
Let x_1 = x % 2.
Let x_2 = 2 + i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i <= (1 + i_1)).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 != 0) -> ((0 <= i_8) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i_1 <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((2 * i_8) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i_1) % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 = 0) -> ((0 <= i_8) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i_1 < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_3 = i_8 % 2 in ((x_3 != 0) -> ((0 <= i_8) ->
      (x_1 = x_3))).
}
Prove: (i % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (20ms) (44493)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 33):
Let x = 1 + i_1.
Let x_1 = 2 + j.
Let x_2 = x_1 % 2.
Let x_3 = 2 + i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i_1 <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((2 * i_8) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i_1) % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 = 0) -> ((0 <= i_8) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i_1 < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_2 = x_4))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 0))).
}
Prove: (i % 2) = 1.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (45268)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 34):
Let x = 1 + i.
Let x_1 = 2 + j.
Let x_2 = x_1 % 2.
Let x_3 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((2 * i_8) <= i))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 = 0) -> ((0 <= i_8) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_2 = x_4))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 1))).
}
Prove: x_2 != 0.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (45661)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 35):
Let x = 1 + i_1.
Let x_1 = 2 + j.
Let x_2 = x_1 % 2.
Let x_3 = 2 + i_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i_1 <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) -> ((2 * i_8) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i_1) % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 = 0) -> ((0 <= i_8) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i_1 < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_2 = x_4))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> (x_2 != 0))).
}
Prove: (2 * i) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (45646)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 36):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = 2 + j.
Let x_3 = x_2 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_7 : Z. let x_4 = i_7 % 2 in ((x_4 != 0) -> ((0 <= i_7) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 < i_7) -> (i <= (j + i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((i_7 % 2) = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_7 : Z. let x_4 = i_7 % 2 in ((x_4 = 0) -> ((0 <= i_7) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> (i < (j + i_7))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 % 2) = 0)).
  (* Invariant *)
  Have: forall i_7 : Z. let x_4 = i_7 % 2 in ((x_4 != 0) -> ((0 <= i_7) ->
      (x_3 = x_4))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 % 2) = 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((i_7 % 2) = 1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> (x_3 != 0))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> ((2 * i_7) <= x_1))).
}
Prove: exists i_7 : Z. ((0 <= i_7) -> ((i_7 <= (1 + j)) ->
    (((2 + j - i_7) % 2) = 0))).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (46314)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 36):
Assume {
  Type: is_sint32(flag_0).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i % 2) = 0)).
  (* Invariant *)
  Have: forall i : Z. let x = i % 2 in ((x != 0) -> ((0 <= i) -> (x = 1))).
}
Prove: exists i : Z. ((i <= 0) -> ((0 <= i) -> (((1 - i) % 2) = 0))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (165ms) (2072)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 37):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = 2 + j.
Let x_3 = x_2 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 < i_8) -> (i <= (j + i_8))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) -> ((2 * i_8) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 = 0) -> ((0 <= i_8) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> (i < (j + i_8))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 % 2) = 0)).
  (* Invariant *)
  Have: forall i_8 : Z. let x_4 = i_8 % 2 in ((x_4 != 0) -> ((0 <= i_8) ->
      (x_3 = x_4))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((i_8 % 2) = 1))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> (x_3 != 0))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 <= x) -> ((2 * i_8) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 <= (1 + j)) -> (((2 + j - i_7) % 2) = 0))).
}
Prove: exists i_8 : Z. ((i_8 % 2) = 0) /\ (0 <= i_8).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (46545)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (58ms) (718)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 37):
Assume {
  Type: is_sint32(flag_0).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 % 2) = 0)).
  (* Invariant *)
  Have: forall i_1 : Z. let x = i_1 % 2 in ((x != 0) -> ((0 <= i_1) ->
      (x = 1))).
  (* Invariant *)
  Have: ((i <= 0) -> ((0 <= i) -> (((1 - i) % 2) = 0))).
}
Prove: exists i_1 : Z. ((i_1 % 2) = 0) /\ (0 <= i_1).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (185ms) (2872)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 38):
Let x = 1 + i.
Let x_1 = 2 + i.
Let x_2 = 2 + j.
Let x_3 = x_2 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_9 : Z. let x_4 = i_9 % 2 in ((x_4 != 0) -> ((0 <= i_9) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 < i_9) -> (i <= (j + i_9))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((2 * i_9) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_9 : Z. let x_4 = i_9 % 2 in ((x_4 = 0) -> ((0 <= i_9) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> (i < (j + i_9))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 % 2) = 0)).
  (* Invariant *)
  Have: forall i_9 : Z. let x_4 = i_9 % 2 in ((x_4 != 0) -> ((0 <= i_9) ->
      (x_3 = x_4))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x) -> ((i_9 % 2) = 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x) -> ((i_9 % 2) = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x) -> (x_3 != 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x) -> ((2 * i_9) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 <= (1 + j)) -> (((2 + j - i_7) % 2) = 0))).
  (* Invariant *)
  Have: ((i_8 % 2) = 0) /\ (0 <= i_8).
}
Prove: exists i_9 : Z. (0 <= i_9) /\ (i_9 <= x_2).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (47969)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (51ms) (797)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 43):
Let x = 2 + i.
Let x_1 = 2 + j.
Let x_2 = 1 + i.
Let x_3 = x_1 % 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. let x_4 = i_10 % 2 in ((x_4 != 0) -> ((0 <= i_10) ->
      (x_4 = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 < i_10) -> (i <= (j + i_10))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((2 * i_10) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. let x_4 = i_10 % 2 in ((x_4 = 0) -> ((0 <= i_10) ->
      (x_4 != 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> (i < (j + i_10))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 % 2) = 0)).
  (* Invariant *)
  Have: forall i_10 : Z. let x_4 = i_10 % 2 in ((x_4 != 0) -> ((0 <= i_10) ->
      (x_3 = x_4))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) -> (x_3 != 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((2 * i_10) <= x))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 <= (1 + j)) -> (((2 + j - i_7) % 2) = 0))).
  (* Invariant *)
  Have: ((i_8 % 2) = 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: ((x % 2) = 0) /\ (0 <= i_9) /\ (i_9 <= x_1).
}
Prove: ((-2) <= i) /\ ((-2) <= j).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (48028)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (8ms) (105)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 50):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 53):
Let x = 2 + j.
Let x_1 = 1 + i.
Let x_2 = 2 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: (x % 2) = 0.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. let x_3 = i_10 % 2 in ((x_3 != 0) -> ((0 <= i_10) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 < i_10) -> (i <= (j + i_10))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((2 * i_10) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. let x_3 = i_10 % 2 in ((x_3 = 0) -> ((0 <= i_10) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> (i < (j + i_10))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 % 2) = 0)).
  (* Invariant *)
  Have: forall i_10 : Z. ((i_10 % 2) = 0) \/ (i_10 < 0).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_1) ->
      ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_1) ->
      ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_1) -> false)).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_1) ->
      ((2 * i_10) <= x_2))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 <= (1 + j)) -> (((2 + j - i_7) % 2) = 0))).
  (* Invariant *)
  Have: ((i_8 % 2) = 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: (0 <= i_9) /\ (i_9 <= x).
  (* Invariant *)
  Have: ((-2) <= i) /\ ((-2) <= j).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (48442)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 54):
Let x = 2 + i.
Let x_1 = 2 + j.
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. let x_3 = i_10 % 2 in ((x_3 != 0) -> ((0 <= i_10) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 < i_10) -> (i <= (j + i_10))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i) -> ((2 * i_10) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. let x_3 = i_10 % 2 in ((x_3 = 0) -> ((0 <= i_10) ->
      (x_3 != 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> (i < (j + i_10))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 % 2) = 0)).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x_2) ->
      ((2 * i_10) <= x))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 <= (1 + j)) -> (((2 + j - i_7) % 2) = 0))).
  (* Invariant *)
  Have: ((i_8 % 2) = 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: ((x % 2) = 0) /\ (0 <= i_9) /\ (i_9 <= x_1).
  (* Invariant *)
  Have: ((-2) <= i) /\ ((-2) <= j).
}
Prove: (x / 2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (48301)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 56):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 59):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 61):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 62):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 63):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 65):
Let x = 2 + j.
Let x_1 = 2 + i.
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Goal *)
  When: 0 <= i_1.
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_11 : Z. let x_3 = i_11 % 2 in ((x_3 != 0) -> ((0 <= i_11) ->
      (x_3 = 1))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 < i_11) -> (i <= (j + i_11))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < i) -> ((i_11 % 2) = 0))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < i) -> ((i_11 % 2) = 1))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 < i) -> ((2 * i_11) <= i))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: ((j - i) % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> (i < (j + i_11))).
  (* Invariant *)
  Have: 0 < j.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 % 2) = 0)).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_2) ->
      ((i_11 % 2) = 0))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_2) ->
      ((i_11 % 2) = 1))).
  (* Invariant *)
  Have: forall i_11 : Z. ((0 <= i_11) -> ((i_11 <= x_2) ->
      ((2 * i_11) <= x_1))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 <= (1 + j)) -> (((2 + j - i_8) % 2) = 0))).
  (* Invariant *)
  Have: ((i_9 % 2) = 0) /\ (0 <= i_9).
  (* Invariant *)
  Have: ((x_1 % 2) = 0) /\ (0 <= i_10) /\ (i_10 <= x).
  (* Invariant *)
  Have: ((-2) <= i) /\ ((-2) <= j).
  (* Invariant *)
  Have: (x_1 / 2) <= x.
  (* Invariant *)
  Have: (x % 2) = 1.
  (* Invariant *)
  Have: forall i_11 : Z. let x_3 = i_11 % 2 in ((x_3 = 0) -> ((0 <= i_11) ->
      (x_3 != 1))).
}
Prove: i < (i_1 + j).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (41371)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (6ms) (53)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 66):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 67):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 68):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 69):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 70):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 71):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 72):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 72):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 73):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 74):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 75):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 76):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 76):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 77):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 77):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 78):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 78):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 79):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 79):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 80):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 80):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 81):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 82):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 83):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 98):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 99):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 100):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 101):
Let x = -i.
Let x_1 = j - i.
Let x_2 = i_1 * x_1.
Let x_3 = a * x_1.
Let x_4 = 1 + a.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x_4) /\ is_sint32(x_2) /\
      is_sint32(j + x_2 - i).
  (* Goal *)
  When: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 % 2) = 0)).
  (* Invariant *)
  Have: forall i_9 : Z. let x_5 = i_9 % 2 in ((x_5 != 0) -> ((0 <= i_9) ->
      (x_5 = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 < i_9) -> (i <= (j + i_9))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((2 * i_9) <= i))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_9 : Z. let x_5 = i_9 % 2 in ((x_5 = 0) -> ((0 <= i_9) ->
      (x_5 != 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> (i < (j + i_9))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((i_8 * x_1) = 0) /\ (i_8 <= 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 <= a) -> ((0 <= i_9) -> ((i_9 * x_1) <= x_2))).
  (* Invariant *)
  Have: (i_1 <= a) /\ (0 <= i_1).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> (a = 0)).
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: (i + (x_4 * x_1)) <= (j + x_2).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (12241)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (8ms) (185)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 101):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 102):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 103):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 104):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 105):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 105):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 106):
Let x = 1 + a.
Let x_1 = -i_1.
Let x_2 = j - i_1.
Let x_3 = i_1 + (x * x_2).
Let x_4 = i * x_2.
Let x_5 = j + x_4.
Let x_6 = a * x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(j + x_4 - i_1).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 % 2) = 0)).
  (* Invariant *)
  Have: forall i_9 : Z. let x_7 = i_9 % 2 in ((x_7 != 0) -> ((0 <= i_9) ->
      (x_7 = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 < i_9) -> (i_1 <= (j + i_9))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i_1) -> ((i_9 % 2) = 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i_1) -> ((i_9 % 2) = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i_1) -> ((2 * i_9) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_9 : Z. let x_7 = i_9 % 2 in ((x_7 = 0) -> ((0 <= i_9) ->
      (x_7 != 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> (i_1 < (j + i_9))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((i_8 * x_2) = 0) /\ (i_8 <= 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: x_4 = x_6.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 <= a) -> ((0 <= i_9) -> ((i_9 * x_2) <= x_4))).
  (* Invariant *)
  Have: (i <= a) /\ (0 <= i).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_4 = 0) -> (a = 0)).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: x_3 <= x_5.
}
Prove: x_5 = x_3.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (12285)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (8ms) (196)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 106):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 107):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 107):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 108):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 108):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 109):
Let x = 1 + a.
Let x_1 = j - i_1.
Let x_2 = x * x_1.
Let x_3 = i_1 + x_2.
Let x_4 = j + (a * x_1).
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(i_1 + x_2 - j).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 % 2) = 0)).
  (* Invariant *)
  Have: forall i_10 : Z. let x_5 = i_10 % 2 in ((x_5 != 0) -> ((0 <= i_10) ->
      (x_5 = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 < i_10) -> (i_1 <= (j + i_10))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) -> ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) -> ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) ->
      ((2 * i_10) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. let x_5 = i_10 % 2 in ((x_5 = 0) -> ((0 <= i_10) ->
      (x_5 != 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> (i_1 < (j + i_10))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((i_8 * x_1) = 0) /\ (i_8 <= 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: forall i_10 : Z. ((i_10 <= a) -> ((0 <= i_10) ->
      ((j + (i_10 * x_1)) <= x_3))).
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_3) /\ (i_9 <= a) /\ (0 <= i_9).
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = j) -> (a = 0)).
  (* Then *)
  Have: tmp_0_0 != 0.
}
Prove: (i * x_1) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (46121)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 109):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 110):
Let x = 1 + a.
Let x_1 = j - i.
Let x_2 = x * x_1.
Let x_3 = i + x_2.
Let x_4 = j + (a * x_1).
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(j) /\
      is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(i + x_2 - j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_1 <= 0) -> ((0 <= i_1) -> (((1 - i_1) % 2) = 0))).
  (* Invariant *)
  Have: ((i_2 % 2) = 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: (0 <= i_3) /\ (i_3 <= 1).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 % 2) = 0)).
  (* Invariant *)
  Have: forall i_9 : Z. let x_5 = i_9 % 2 in ((x_5 != 0) -> ((0 <= i_9) ->
      (x_5 = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 < i_9) -> (i <= (j + i_9))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 0))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((i_9 % 2) = 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) -> ((2 * i_9) <= i))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < j) -> (((j - i_4) % 2) = 0))).
  (* Invariant *)
  Have: ((i_5 % 2) = 0) /\ (0 <= i_5).
  (* Invariant *)
  Have: (0 <= i_6) /\ (i_6 <= j).
  (* Invariant *)
  Have: (0 <= i) /\ (0 <= j).
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (i / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_9 : Z. let x_5 = i_9 % 2 in ((x_5 = 0) -> ((0 <= i_9) ->
      (x_5 != 1))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> (i < (j + i_9))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((i_7 * x_1) = 0) /\ (i_7 <= 0) /\ (0 <= i_7).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: x_4 = x_3.
  (* Invariant *)
  Have: forall i_9 : Z. ((i_9 <= a) -> ((0 <= i_9) ->
      ((j + (i_9 * x_1)) <= x_3))).
  (* Invariant *)
  Have: ((j + (i_8 * x_1)) = x_3) /\ (i_8 <= a) /\ (0 <= i_8).
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_3 = j) -> (a = 0)).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 <= x) -> ((i_9 * x_1) <= x_2))).
}
Prove: exists i_9 : Z. (x_2 = (i_9 * x_1)) /\ (0 <= i_9) /\ (i_9 <= x).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (47184)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 110):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 111):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 111):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 112):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 112):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 113):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 113):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 114):
Let x = 1 + a.
Let x_1 = j - i_1.
Let x_2 = i * x_1.
Let x_3 = x * x_1.
Let x_4 = i_1 + x_2.
Let x_5 = j + (a * x_1).
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(i_1) /\
      is_sint32(j) /\ is_sint32(tmp_0_0) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(i_1 + x_2 - j).
  (* Pre-condition *)
  Have: 0 < flag_0.
  (* Invariant *)
  Have: ((i_2 <= 0) -> ((0 <= i_2) -> (((1 - i_2) % 2) = 0))).
  (* Invariant *)
  Have: ((i_3 % 2) = 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (0 <= i_4) /\ (i_4 <= 1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: (i_1 % 2) = 0.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 % 2) = 0)).
  (* Invariant *)
  Have: forall i_10 : Z. let x_6 = i_10 % 2 in ((x_6 != 0) -> ((0 <= i_10) ->
      (x_6 = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 < i_10) -> (i_1 <= (j + i_10))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) -> ((i_10 % 2) = 0))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) -> ((i_10 % 2) = 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) ->
      ((2 * i_10) <= i_1))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < j) -> (((j - i_5) % 2) = 0))).
  (* Invariant *)
  Have: ((i_6 % 2) = 0) /\ (0 <= i_6).
  (* Invariant *)
  Have: (0 <= i_7) /\ (i_7 <= j).
  (* Invariant *)
  Have: (0 <= i_1) /\ (0 <= j).
  (* Invariant *)
  Have: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (i_1 / 2) <= j.
  (* Invariant *)
  Have: (j % 2) = 1.
  (* Invariant *)
  Have: forall i_10 : Z. let x_6 = i_10 % 2 in ((x_6 = 0) -> ((0 <= i_10) ->
      (x_6 != 1))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> (i_1 < (j + i_10))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: ((i_8 * x_1) = 0) /\ (i_8 <= 0) /\ (0 <= i_8).
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: x_5 = x_4.
  (* Invariant *)
  Have: forall i_10 : Z. ((i_10 <= a) -> ((0 <= i_10) ->
      ((j + (i_10 * x_1)) <= x_4))).
  (* Invariant *)
  Have: ((j + (i_9 * x_1)) = x_4) /\ (i_9 <= a) /\ (0 <= i_9).
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_4 = j) -> (a = 0)).
  (* Then *)
  Have: tmp_0_0 != 0.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 <= x) ->
      ((i_10 * x_1) <= x_2))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
}
Prove: 0 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (42421)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (5ms) (253)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 114):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 115):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 115):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 116):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 116):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 117):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 117):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 118):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 118):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 119):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 119):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 120):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 120):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 121):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 121):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 122):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 122):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 123):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 123):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 124):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 124):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 125):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 125):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 126):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 126):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/040_0005/040_merged.c, line 127):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/040_0005/040_merged.c, line 127):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/040_0005/040_merged.c, line 84) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/040_0005/040_merged.c, line 84) (2/2):
Call Result at line 87
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Loop assigns (file out/040_0005/040_merged.c, line 128) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/040_0005/040_merged.c, line 128) (2/2):
Call Result at line 131
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/040_0005/040_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0005/040_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/040_0005/040_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo040'.
  Callers assumptions might be imprecise.
