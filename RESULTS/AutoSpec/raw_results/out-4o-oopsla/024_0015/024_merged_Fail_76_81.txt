[kernel] Parsing out/024_0015/024_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 81 goals scheduled
[wp] [Timeout] typed_foo024_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_2_established (Qed 0.95ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_4_established (Qed 0.95ms) (Z3)
[wp] [Timeout] typed_foo024_loop_invariant_14_preserved (Qed 20ms) (Z3)
[wp] Proved goals:   76 / 81
  Qed:              67
  Alt-Ergo 2.5.4:    9 (4ms-6ms-8ms)
  Timeout:           5
------------------------------------------------------------
  Function foo024
------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 8):
Assume { Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n). }
Prove: (n = j) \/ (k < n).
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 9):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: (n = j) \/ (k < n).
}
Prove: j <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.95ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.95ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 10):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: (n = j) \/ (k < n).
  (* Invariant *)
  Have: j <= n.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 11):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Invariant *)
  Have: (n = j) \/ (k < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:0.95ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.95ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 12):
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < j).
  (* Invariant *)
  Have: (n = j) \/ (k < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j.
}
Prove: i <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30543)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (24)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 29):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(1 + j).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j_1) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_1 <= i_2)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
}
Prove: (2 + j) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 31):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j_1) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_1 <= i_2)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (41011)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (5ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 34):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (i_2 <= i_3)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= j))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: i <= k.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (41543)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (6ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 35):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= j).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_2) -> (i_2 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j_1) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (i_2 <= i_3)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < j) -> (i_2 <= j))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_1 <= i_3) -> ((i_3 < j) -> ((j <= i_2) ->
      ((i_2 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 <= i_2))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_1 <= x.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 <= j) -> (i_2 <= k))).
}
Prove: i < k.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (42249)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (5ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 39):
Let x = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i <= i_1) /\ (i_2 < n) /\ (i_1 <= j) /\ (j < i_2).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j_1) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> (i <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. ((i <= i_4) -> ((i_4 < n) -> (i_3 <= i_4)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < j) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i) -> ((0 <= i_4) -> ((i <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 <= j) -> (i_3 <= x))).
}
Prove: j < k.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (43865)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (8ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 40):
Let x = 1 + j.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (i <= i_2) /\ (0 <= i) /\ (i_2 <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_2) -> (i_3 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j_1) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < n) -> (i_3 <= i_4)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 <= j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_4 < j) -> ((j <= i_3) ->
      ((i_3 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Else *)
  Have: n <= k.
  (* Invariant *)
  Have: (2 + j) <= k.
  (* Invariant *)
  Have: i_2 <= x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 <= j) -> (i_3 <= x))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_2 <= i_4) -> ((i_3 < k) -> ((i_4 <= j) ->
      ((j < i_3) -> (j < k))))).
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (44874)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (6ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 40):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(k_1) /\ is_sint32(n).
  (* Goal *)
  When: (i <= i_2) /\ (0 <= i) /\ (i_2 <= i_1) /\ (i_1 < n).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) -> (i_3 <= n))).
  (* Invariant *)
  Have: (n = j) \/ (k < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < j) -> (i_3 <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < n) -> (i_3 <= i_4)))))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 <= i_3))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
}
Prove: i <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36939)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (8ms) (46)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 52):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j_1) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_1 <= i_2)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
}
Prove: j <= x.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (40897)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (6ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 56):
Let x = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(j_2) /\
      is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\ is_sint32(n) /\
      is_sint32(x).
  (* Invariant *)
  Have: (n = j_2) \/ (k_2 < n).
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_2) -> (i_1 <= n))).
  (* Invariant *)
  Have: (n = j_1) \/ (k_1 < n).
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j_1) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) -> (i <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_1 <= i_2)))))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < j) -> (i_1 <= j))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i <= i_2) -> ((i_2 < j) -> ((j <= i_1) ->
      ((i_1 < n) -> (j <= k_3))))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 <= i_1))))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Then *)
  Have: k < n.
  (* Invariant *)
  Have: j <= x.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (20ms) (40999)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/024_0015/024_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/024_0015/024_merged.c, line 61):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/024_0015/024_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0015/024_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/024_0015/024_merged.c, line 62):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/024_0015/024_merged.c:3: Warning: 
  No 'assigns' specification for function 'foo024'.
  Callers assumptions might be imprecise.
