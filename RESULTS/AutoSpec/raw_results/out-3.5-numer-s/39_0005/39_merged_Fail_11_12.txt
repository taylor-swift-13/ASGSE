[kernel] Parsing out/39_0005/39_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_hoo39_loop_invariant_3_preserved (Qed 390ms) (Z3)
[wp] Proved goals:   11 / 12
  Qed:              10
  Alt-Ergo 2.5.4:    1 (20ms)
  Timeout:           1
------------------------------------------------------------
  Function hoo39
------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0005/39_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (17ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0005/39_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0005/39_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0005/39_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0005/39_merged.c, line 18):
Let x = s * s.
Let x_1 = x % (d_8 - 2).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(q_4) /\
      is_sint32(q_5) /\ is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\
      is_sint32(x % (a - 2)) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: (t * x_1) = (t * t).
  (* Invariant *)
  Have: 3 <= d_8.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_5 + (2 * k)) < x_1
  Then { Have: d_8 = d_1. Have: (2 + d_1) = d. }
  Else {
    Have: (d_8 = d_9) /\ (q_5 = q_4).
    If (x % (d_9 - 2)) <= (q_4 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (q_4 = q_3).
      If (q_3 + (2 * k)) <= (1 + d_7 + (x % (d_7 - 2)))
      Then { Have: d_7 = d_2. Have: (2 + d_2) = d. }
      Else {
        Have: (d_7 = d_10) /\ (q_3 = q_2).
        If (x % (d_10 - 2)) <= (q_2 + (2 * k))
        Then {
          Have: (d_10 = d_6) /\ (q_2 = q_1).
          If (2 + d_6 + (x % (d_6 - 2))) <= (q_1 + (2 * k))
          Then {
            Have: (d_6 = d_5) /\ (q_1 = q).
            If (q + (2 * k)) <= (3 + (2 * d_5) + (x % (d_5 - 2)))
            Then { Have: d_5 = d_3. Have: (2 + d_3) = d. }
            Else { Have: d_5 = d_4. Have: (2 + d_4) = d. }
          }
          Else { Have: d_6 = d_4. Have: (2 + d_4) = d. }
        }
        Else { Have: d_10 = d_4. Have: (2 + d_4) = d. }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (q_4 = q_2).
      If (x % (d_10 - 2)) <= (q_2 + (2 * k))
      Then {
        Have: (d_10 = d_6) /\ (q_2 = q_1).
        If (2 + d_6 + (x % (d_6 - 2))) <= (q_1 + (2 * k))
        Then {
          Have: (d_6 = d_5) /\ (q_1 = q).
          If (q + (2 * k)) <= (3 + (2 * d_5) + (x % (d_5 - 2)))
          Then { Have: d_5 = d_3. Have: (2 + d_3) = d. }
          Else { Have: d_5 = d_4. Have: (2 + d_4) = d. }
        }
        Else { Have: d_6 = d_4. Have: (2 + d_4) = d. }
      }
      Else { Have: d_10 = d_4. Have: (2 + d_4) = d. }
    }
  }
}
Prove: (x % (d - 2)) = k.
Prover Z3 4.8.12 returns Timeout (Qed:390ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:390ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0005/39_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0005/39_merged.c, line 19):
Let x = s * s.
Let x_1 = x % (d - 2).
Let x_2 = x % (d_8 - 2).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(r_3) /\
      is_sint32(r_4) /\ is_sint32(r_5) /\ is_sint32(s) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(x) /\ is_sint32(x % (a - 2)) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: (t_1 * x_2) = (t_1 * t_1).
  (* Invariant *)
  Have: 3 <= d_8.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: r_5 != 0.
  If (q_5 + (2 * r_5)) < x_2
  Then {
    Let x_3 = x % d_1.
    Have: (d_8 = d_1) /\ (x_3 = r_5).
    Have: x_3 = t.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (q_5 = q_4) /\ (r_5 = r_4).
    If (x % (d_9 - 2)) <= (q_4 + (2 * r_4))
    Then {
      Have: (d_9 = d_7) /\ (q_4 = q_3) /\ (r_4 = r_3).
      If (q_3 + (2 * r_3)) <= (1 + d_7 + (x % (d_7 - 2)))
      Then {
        Let x_4 = x % d_2.
        Have: (d_7 = d_2) /\ (x_4 = r_3).
        Have: x_4 = t.
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (q_3 = q_2) /\ (r_3 = r_2).
        If (x % (d_10 - 2)) <= (q_2 + (2 * r_2))
        Then {
          Have: (d_10 = d_6) /\ (q_2 = q_1) /\ (r_2 = r_1).
          If (2 + d_6 + (x % (d_6 - 2))) <= (q_1 + (2 * r_1))
          Then {
            Have: (d_6 = d_5) /\ (q_1 = q) /\ (r_1 = r).
            If (q + (2 * r)) <= (3 + (2 * d_5) + (x % (d_5 - 2)))
            Then {
              Let x_5 = x % d_3.
              Have: (d_5 = d_3) /\ (x_5 = r).
              Have: x_5 = t.
              Have: (2 + d_3) = d.
            }
            Else {
              Let x_6 = x % d_4.
              Have: (d_5 = d_4) /\ (x_6 = r).
              Have: x_6 = t.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (x_6 = r_1).
            Have: x_6 = t.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (x_6 = r_2).
          Have: x_6 = t.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (q_4 = q_2) /\ (r_4 = r_2).
      If (x % (d_10 - 2)) <= (q_2 + (2 * r_2))
      Then {
        Have: (d_10 = d_6) /\ (q_2 = q_1) /\ (r_2 = r_1).
        If (2 + d_6 + (x % (d_6 - 2))) <= (q_1 + (2 * r_1))
        Then {
          Have: (d_6 = d_5) /\ (q_1 = q) /\ (r_1 = r).
          If (q + (2 * r)) <= (3 + (2 * d_5) + (x % (d_5 - 2)))
          Then {
            Have: (d_5 = d_3) /\ (x_5 = r).
            Have: x_5 = t.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (x_6 = r).
            Have: x_6 = t.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (x_6 = r_1).
          Have: x_6 = t.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (x_6 = r_2).
        Have: x_6 = t.
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: (t * x_1) = (t * t).
}
Prove: 3 <= d.
Prover Z3 4.8.12 returns Valid (Qed:425ms) (20ms) (61805)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:425ms) (20ms) (735)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0005/39_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0005/39_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0005/39_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/39_0005/39_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/39_0005/39_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/39_0005/39_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo39'.
  Callers assumptions might be imprecise.
