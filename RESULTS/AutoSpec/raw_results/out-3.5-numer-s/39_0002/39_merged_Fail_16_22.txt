[kernel] Parsing out/39_0002/39_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_hoo39_loop_invariant_preserved (Qed 386ms) (Z3)
[wp] [Timeout] typed_hoo39_loop_invariant_4_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo39_loop_invariant_7_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo39_loop_invariant_9_preserved (Qed 996ms) (Z3)
[wp] [Timeout] typed_hoo39_loop_invariant_9_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo39_assert (Qed 11ms) (Z3)
[wp] Proved goals:   16 / 22
  Qed:               8
  Alt-Ergo 2.5.4:    8 (5ms-18ms-65ms)
  Timeout:           6
------------------------------------------------------------
  Function hoo39
------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 16):
Let x = q_2 + (2 * r_3).
Let x_1 = s * s.
Let x_2 = a - 2.
Let x_3 = x_1 % x_2.
Let x_4 = x_1 / a.
Let x_5 = x_1 / x_2.
Let x_6 = x_1 % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(r_3) /\ is_sint32(s) /\
      is_sint32(t) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32((4 * x_5) - (4 * x_4)).
  (* Residual *)
  When: (2 + d_3 + k_2) <= x.
  (* Residual *)
  When: k_2 <= x.
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_6 < a.
  (* Invariant *)
  Have: (3 + x_3) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: r_3 < d_3.
  (* Invariant *)
  Have: (3 + k_2) <= d_3.
  (* Invariant *)
  Have: (d_3 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_3.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= r_3.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= k_2.
  (* Then *)
  Have: d_3 <= s.
  (* Then *)
  Have: r_3 != 0.
  If x <= (3 + k_2 + (2 * d_3))
  Then {
    Have: (d_3 = d_1) /\ (k_2 = k) /\ (q_2 = q) /\ (r_3 = r_1).
    Have: (2 + d_1 + k + r) = (q + (2 * r_1)).
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_3 = d_2) /\ (k_2 = k_1) /\ (q_2 = q_1) /\ (r_3 = r_2).
    Have: (4 + k_1 + r + (2 * d_2)) = (q_1 + (2 * r_2)).
    Have: (2 + d_2) = d.
  }
}
Prove: r < d.
Prover Z3 4.8.12 returns Timeout (Qed:386ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:386ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 16):
Let x = s * s.
Let x_1 = x % d.
Assume {
  Type: is_sint32(d) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 3 <= d.
}
Prove: x_1 < d.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30943)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (87)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 18):
Let x = q_2 + (2 * k).
Let x_1 = s * s.
Let x_2 = a - 2.
Let x_3 = x_1 % x_2.
Let x_4 = x_1 / a.
Let x_5 = x_1 / x_2.
Let x_6 = x_1 % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(k_3) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(t) /\ is_sint32(x_1) /\
      is_sint32(x_6) /\ is_sint32(x_3) /\ is_sint32((4 * x_5) - (4 * x_4)).
  (* Residual *)
  When: (2 + d_3 + k_3) <= x.
  (* Residual *)
  When: k_3 <= x.
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_6 < a.
  (* Invariant *)
  Have: (3 + x_3) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: k < d_3.
  (* Invariant *)
  Have: (3 + k_3) <= d_3.
  (* Invariant *)
  Have: (d_3 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_3.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= k_3.
  (* Then *)
  Have: d_3 <= s.
  (* Then *)
  Have: k != 0.
  If x <= (3 + k_3 + (2 * d_3))
  Then {
    Have: (d_3 = d_1) /\ (k_3 = k_1) /\ (q_2 = q).
    Have: (2 + d_1 + k_1 + r) = (q + (2 * k)).
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_3 = d_2) /\ (k_3 = k_2) /\ (q_2 = q_1).
    Have: (4 + k_2 + r + (2 * d_2)) = (q_1 + (2 * k)).
    Have: (2 + d_2) = d.
  }
  (* Invariant *)
  Have: r < d.
}
Prove: (3 + k) <= d.
Prover Z3 4.8.12 returns Valid (Qed:479ms) (10ms) (43770)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:479ms) (8ms) (152)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 18):
Let x = s * s.
Let x_1 = x % d.
Let x_2 = x % (d - 2).
Assume {
  Type: is_sint32(d) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 3 <= d.
  (* Invariant *)
  Have: x_1 < d.
}
Prove: (3 + x_2) <= d.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (32300)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (135)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 19):
Let x = s * s.
Let x_1 = a - 2.
Let x_2 = x % x_1.
Let x_3 = x / a.
Let x_4 = x / x_1.
Let x_5 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32((4 * x_4) - (4 * x_3)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_5 < a.
  (* Invariant *)
  Have: (3 + x_2) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: k < d_8.
  (* Invariant *)
  Have: (3 + k_10) <= d_8.
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= q_9.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ (q_7 = q).
        Have: (q + (2 * k)) = (k_2 + r).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + (2 * k))
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + (2 * k))
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + (2 * k))
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + (2 * k))
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: r < d.
  (* Invariant *)
  Have: (3 + k) <= d.
}
Prove: (d % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:425ms) (110ms) (275144)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:425ms) (65ms) (1600)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 19):
Let x = s * s.
Let x_1 = x % (d - 2).
Let x_2 = x % d.
Assume {
  Type: is_sint32(d) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: 3 <= d.
  (* Invariant *)
  Have: x_2 < d.
  (* Invariant *)
  Have: (3 + x_1) <= d.
}
Prove: (d % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 20):
Let x = s * s.
Let x_1 = a - 2.
Let x_2 = x % x_1.
Let x_3 = x / a.
Let x_4 = x / x_1.
Let x_5 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32((4 * x_4) - (4 * x_3)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_5 < a.
  (* Invariant *)
  Have: (3 + x_2) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: k < d_8.
  (* Invariant *)
  Have: (3 + k_10) <= d_8.
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= q_9.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ (q_7 = q).
        Have: (q + (2 * k)) = (k_2 + r).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + (2 * k))
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + (2 * k))
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + (2 * k))
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + (2 * k))
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: r < d.
  (* Invariant *)
  Have: (3 + k) <= d.
  (* Invariant *)
  Have: (d % 2) = 0.
}
Prove: 2 <= d.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:513ms) (12ms) (150)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (116ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 22):
Let x = s * s.
Let x_1 = x % (a - 2).
Let x_2 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_2 < a.
  (* Invariant *)
  Have: (3 + x_1) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
}
Prove: 0 <= s.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 23):
Let x = s * s.
Let x_1 = a - 2.
Let x_2 = x % x_1.
Let x_3 = x / a.
Let x_4 = x / x_1.
Let x_5 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32((4 * x_4) - (4 * x_3)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_5 < a.
  (* Invariant *)
  Have: (3 + x_2) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: k < d_8.
  (* Invariant *)
  Have: (3 + k_10) <= d_8.
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= q_9.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ (q_7 = q).
        Have: (q + (2 * k)) = (k_2 + r).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + (2 * k))
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + (2 * k))
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + (2 * k))
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + (2 * k))
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + (2 * k)) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + (2 * k)).
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + (2 * k)).
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: r < d.
  (* Invariant *)
  Have: (3 + k) <= d.
  (* Invariant *)
  Have: (d % 2) = 0.
  (* Invariant *)
  Have: 2 <= d.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:486ms) (20ms) (64355)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:486ms) (20ms) (458)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 23):
Let x = s * s.
Let x_1 = x % (a - 2).
Let x_2 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_2 < a.
  (* Invariant *)
  Have: (3 + x_1) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
}
Prove: 0 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (40889)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (10ms) (217)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 24):
Let x = s * s.
Let x_1 = a - 2.
Let x_2 = x % x_1.
Let x_3 = x / a.
Let x_4 = x / x_1.
Let x_5 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32((4 * x_4) - (4 * x_3)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_5 < a.
  (* Invariant *)
  Have: (3 + x_2) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: k < d_8.
  (* Invariant *)
  Have: (3 + k_10) <= d_8.
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= q_9.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (4 + q_1) = q.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Let x_6 = 2 * k.
        Let x_7 = k_2 + r.
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ ((q + x_6) = x_7) /\
            ((q_7 + x_6) = x_7).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + x_6)
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + x_6)
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
              Have: (4 + q) = q_2.
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
              Have: (8 + q) = q_3.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + x_6)
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + x_6)
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
            Have: (4 + q) = q_2.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
        Have: (8 + q) = q_3.
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: r < d.
  (* Invariant *)
  Have: (3 + k) <= d.
  (* Invariant *)
  Have: (d % 2) = 0.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Timeout (Qed:996ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:996ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 24):
Let x = s * s.
Let x_1 = x % a.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = x / a.
Let x_5 = x / x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32((4 * x_5) - (4 * x_4)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_1 < a.
  (* Invariant *)
  Have: (3 + x_3) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: x_4 <= x_5.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/39_0002/39_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (31ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/39_0002/39_merged.c, line 25):
Let x = s * s.
Let x_1 = x / a.
Let x_2 = a - 2.
Let x_3 = x / x_2.
Let x_4 = x % a.
Let x_5 = x % x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_5) /\ is_sint32((4 * x_3) - (4 * x_1)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_4 < a.
  (* Invariant *)
  Have: (3 + x_5) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: x_1 <= x_3.
}
Prove: 0 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (50912)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (16ms) (290)

------------------------------------------------------------

Goal Assertion (file out/39_0002/39_merged.c, line 59):
Let x = s * s.
Let x_1 = a - 2.
Let x_2 = x % x_1.
Let x_3 = x / a.
Let x_4 = x / x_1.
Let x_5 = x % a.
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(k) /\ is_sint32(q) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(t) /\ is_sint32(x) /\
      is_sint32(x_5) /\ is_sint32(x_2) /\ is_sint32((4 * x_4) - (4 * x_3)).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: x_5 < a.
  (* Invariant *)
  Have: (3 + x_2) <= a.
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= s.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: r < d.
  (* Invariant *)
  Have: (3 + k) <= d.
  (* Invariant *)
  Have: (d % 2) = 0.
  (* Invariant *)
  Have: 2 <= d.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q.
  (* Invariant *)
  Have: 0 <= k.
  If d <= s
  Then { (* Else *) Have: r = 0. }
}
Prove: (t * t) = (k * t).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/39_0002/39_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/39_0002/39_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo39'.
  Callers assumptions might be imprecise.
