[kernel] Parsing out/29_0005/29_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 10 goals scheduled
[wp] [Timeout] typed_hoo29_loop_invariant_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_2_established (Qed 0.82ms) (Z3)
[wp] [Timeout] typed_hoo29_loop_invariant_4_established (Qed 0.94ms) (Z3)
[wp] [Timeout] typed_hoo29_assert (Qed 2ms) (Z3)
[wp] Proved goals:    4 / 10
  Qed:               3
  Alt-Ergo 2.5.4:    1 (14ms)
  Timeout:           6
------------------------------------------------------------
  Function hoo29
------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 13):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = guess_0 - 1.
Let x_2 = n / 2.
Let x_3 = x_2 - 1.
Let x_4 = x - 1.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: n <= (x * x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x_2 * x_2)) -> ((x_3 * x_3) < n)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (((x_2 + (n / x_2)) / 2) != x_2)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((n <= (guess_0 * guess_0)) -> ((x_1 * x_1) < n)).
  (* Invariant *)
  Have: x != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
}
Prove: (x_4 * x_4) < n.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 13):
Let x = n / 2.
Let x_1 = x - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: n <= (x * x).
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: (x_1 * x_1) < n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 14):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = x - 1.
Let x_2 = guess_0 - 1.
Let x_3 = n / 2.
Let x_4 = x_3 - 1.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Goal *)
  When: x != guess_0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x_3 * x_3)) -> ((x_4 * x_4) < n)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (((x_3 + (n / x_3)) / 2) != x_3)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((n <= (guess_0 * guess_0)) -> ((x_2 * x_2) < n)).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((n <= (x * x)) -> ((x_1 * x_1) < n)).
}
Prove: ((x + (n / x)) / 2) != x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 14):
Let x = n / 2.
Let x_1 = x - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: x != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x * x)) -> ((x_1 * x_1) < n)).
}
Prove: ((x + (n / x)) / 2) != x.
Prover Z3 4.8.12 returns Timeout (Qed:0.82ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.82ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/29_0005/29_merged.c, line 16):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = x_1 - 1.
Let x_3 = guess_0 - 1.
Let x_4 = n / 2.
Let x_5 = x_4 - 1.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x_4 * x_4)) -> ((x_5 * x_5) < n)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (((x_4 + (n / x_4)) / 2) != x_4)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((n <= (guess_0 * guess_0)) -> ((x_3 * x_3) < n)).
  (* Invariant *)
  Have: x_1 != guess_0.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((n <= (x_1 * x_1)) -> ((x_2 * x_2) < n)).
  (* Invariant *)
  Have: ((x_1 + (n / x_1)) / 2) != x_1.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (38876)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (14ms) (256)

------------------------------------------------------------

Goal Establishment of Invariant (file out/29_0005/29_merged.c, line 16):
Let x = n / 2.
Let x_1 = x - 1.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x * x)) -> ((x_1 * x_1) < n)).
  (* Invariant *)
  Have: ((x != 0) -> (((x + (n / x)) / 2) != x)).
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.94ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.94ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/29_0005/29_merged.c, line 25):
Let x = guess_0 - 1.
Let x_1 = n / 2.
Let x_2 = x_1 - 1.
Let x_3 = 1 + guess_0.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((n <= (x_1 * x_1)) -> ((x_2 * x_2) < n)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (((x_1 + (n / x_1)) / 2) != x_1)).
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: ((n <= (guess_0 * guess_0)) -> ((x * x) < n)).
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
}
Prove: n < (x_3 * x_3).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/29_0005/29_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/29_0005/29_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo29'.
  Callers assumptions might be imprecise.
