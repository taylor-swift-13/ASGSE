[kernel] Parsing out/27_0001/27_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 10 goals scheduled
[wp] Proved goals:   10 / 10
  Qed:               6
  Alt-Ergo 2.5.4:    4 (7ms-10ms)
------------------------------------------------------------
  Function hoo27
------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 11):
Let x = q * y.
Let x_1 = a + b + x.
Assume {
  Type: is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b) /\ is_sint32(q_1) /\
      is_sint32(q) /\ is_sint32(y) /\ is_sint32(b - 1) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: a < y.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: b != 0.
  If (1 + a) = y
  Then { Have: (1 + q) = q_1. Have: a_1 = 0. }
  Else { Have: q = q_1. Have: (1 + a) = a_1. }
}
Prove: (1 + a + x) = (a_1 + (q_1 * y)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 12):
Let x = q * y.
Let x_1 = a + b + x.
Let x_2 = q_1 * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(q) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(a + b + x - b_1 - x_2).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: a < y.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: b != 0.
  If (1 + a) = y
  Then {
    Let x_3 = 1 + q_2.
    Let x_4 = 1 + a.
    Let x_5 = x_4 * x_3.
    Let x_6 = q_2 * x_4.
    Have: (q = q_2) /\ (x_5 = (1 + a + x_6)) /\
        ((1 + a + b + x_6) = (b_2 + x_5)).
    Have: x_3 = q_1.
    Have: (1 + b_1) = b_2.
  }
  Else { Have: q = q_1. Have: (1 + b_1) = b. }
}
Prove: x_1 < (b_1 + y + x_2).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (50ms) (66546)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (10ms) (263)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 13):
Let x = q_1 * y.
Let x_1 = a_1 + b + x.
Let x_2 = q * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(q) /\ is_sint32(q_2) /\ is_sint32(q_1) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(a_1 + b + x - a - x_2).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: a_1 < y.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a_1.
  (* Then *)
  Have: b != 0.
  If (1 + a_1) = y
  Then {
    Let x_3 = 1 + q_2.
    Let x_4 = 1 + a_1.
    Let x_5 = x_4 * x_3.
    Let x_6 = q_2 * x_4.
    Have: (q_1 = q_2) /\ (x_5 = (1 + a_1 + x_6)) /\
        ((1 + a_1 + b + x_6) = (b_1 + x_5)).
    Have: x_3 = q.
    Have: a = 0.
  }
  Else { Have: q_1 = q. Have: x_4 = a. }
  (* Invariant *)
  Have: a < y.
}
Prove: (a + x_2) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (40ms) (70261)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (7ms) (254)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/27_0001/27_merged.c, line 14):
Let x = q_1 * y.
Let x_1 = a + b_1 + x.
Let x_2 = q * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(b_2) /\ is_sint32(b_1) /\
      is_sint32(q) /\ is_sint32(q_2) /\ is_sint32(q_1) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(a + b_1 + x - b - x_2).
  (* Pre-condition *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: a < y.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: b_1 != 0.
  If (1 + a) = y
  Then {
    Let x_3 = 1 + q_2.
    Let x_4 = 1 + a.
    Let x_5 = x_4 * x_3.
    Let x_6 = q_2 * x_4.
    Have: (q_1 = q_2) /\ (x_5 = (1 + a + x_6)) /\
        ((1 + a + b_1 + x_6) = (b_2 + x_5)).
    Have: x_3 = q.
    Have: (1 + b) = b_2.
  }
  Else { Have: q_1 = q. Have: (1 + b) = b_1. }
  (* Invariant *)
  Have: x_1 < (b + y + x_2).
  (* Invariant *)
  Have: 0 <= b.
}
Prove: (b + x_2) <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (10ms) (263)

------------------------------------------------------------

Goal Establishment of Invariant (file out/27_0001/27_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Assertion (file out/27_0001/27_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/27_0001/27_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/27_0001/27_merged.c:5: Warning: 
  No 'assigns' specification for function 'hoo27'.
  Callers assumptions might be imprecise.
