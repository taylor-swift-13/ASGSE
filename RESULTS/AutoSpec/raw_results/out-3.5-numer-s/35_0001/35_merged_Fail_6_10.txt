[kernel] Parsing out/35_0001/35_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 10 goals scheduled
[wp] [Timeout] typed_hoo35_loop_invariant_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo35_assert (Qed 3ms) (Z3)
[wp] [Timeout] typed_hoo35_loop_invariant_4_preserved (Qed 3ms) (Z3)
[wp] Proved goals:    6 / 10
  Qed:               4
  Alt-Ergo 2.5.4:    2 (10ms-12ms)
  Timeout:           4
------------------------------------------------------------
  Function hoo35
------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 12):
Let x = 1 + guess_0.
Let x_1 = n / 4.
Let x_2 = n / 2.
Let x_3 = 1 + x_2.
Let x_4 = guess_0 + (n / guess_0).
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_5).
  (* Goal *)
  When: 2 <= x_4.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((2 <= n) -> (x_1 <= (x_2 * x_2))).
  (* Invariant *)
  Have: ((2 <= n) -> (n < (x_3 * x_3))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (x_1 <= (guess_0 * guess_0))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (n < (x * x))).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
}
Prove: x_1 <= (x_5 * x_5).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 12):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: 2 <= n.
  (* Pre-condition *)
  Have: 0 < n.
}
Prove: (n / 4) <= (x * x).
Prover Z3 4.8.12 returns Valid (Qed:0.71ms) (10ms) (37298)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.71ms) (12ms) (138)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 13):
Let x = n / 4.
Let x_1 = guess_0 + (n / guess_0).
Let x_2 = x_1 / 2.
Let x_3 = 1 + guess_0.
Let x_4 = n / 2.
Let x_5 = 1 + x_4.
Let x_6 = 1 + x_2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_4) /\ is_sint32(x_2).
  (* Goal *)
  When: 2 <= x_1.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((2 <= n) -> (x <= (x_4 * x_4))).
  (* Invariant *)
  Have: ((2 <= n) -> (n < (x_5 * x_5))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (x <= (guess_0 * guess_0))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (n < (x_3 * x_3))).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: x <= (x_2 * x_2).
}
Prove: n < (x_6 * x_6).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 13):
Let x = n / 2.
Let x_1 = 1 + x.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: 2 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: (n / 4) <= (x * x).
}
Prove: n < (x_1 * x_1).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (38012)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (10ms) (118)

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/35_0001/35_merged.c, line 15):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = 1 + x_1.
Let x_3 = n / 4.
Let x_4 = 1 + guess_0.
Let x_5 = n / 2.
Let x_6 = 1 + x_5.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((2 <= n) -> (x_3 <= (x_5 * x_5))).
  (* Invariant *)
  Have: ((2 <= n) -> (n < (x_6 * x_6))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (x_3 <= (guess_0 * guess_0))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (n < (x_4 * x_4))).
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: ((2 <= x) -> (x_3 <= (x_1 * x_1))).
  (* Invariant *)
  Have: ((2 <= x) -> (n < (x_2 * x_2))).
}
Prove: (-1) <= x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/35_0001/35_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Assertion (file out/35_0001/35_merged.c, line 24):
Let x = 1 + guess_0.
Let x_1 = n / 4.
Let x_2 = guess_0 * guess_0.
Let x_3 = n / 2.
Let x_4 = 1 + x_3.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: ((2 <= n) -> (x_1 <= (x_3 * x_3))).
  (* Invariant *)
  Have: ((2 <= n) -> (n < (x_4 * x_4))).
  (* Invariant *)
  Have: ((0 < guess_0) -> (x_1 <= x_2)).
  (* Invariant *)
  Have: ((0 < guess_0) -> (n < (x * x))).
  (* Invariant *)
  Have: 0 <= guess_0.
}
Prove: x_2 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/35_0001/35_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/35_0001/35_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo35'.
  Callers assumptions might be imprecise.
