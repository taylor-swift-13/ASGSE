[kernel] Parsing out/24_0005/24_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 10 goals scheduled
[wp] [Timeout] typed_hoo24_loop_invariant_preserved (Qed 2ms) (Z3)
[wp] [Timeout] typed_hoo24_loop_invariant_established (Qed 0.54ms) (Z3)
[wp] [Timeout] typed_hoo24_assert (Qed 1ms) (Z3)
[wp] Proved goals:    7 / 10
  Qed:               3
  Alt-Ergo 2.5.4:    4 (4ms-10ms-20ms)
  Timeout:           3
------------------------------------------------------------
  Function hoo24
------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 11):
Let x = n / 2.
Let x_1 = (guess_0 + (n / guess_0)) / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x) + (x * x)).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: n <= ((2 * guess_0) + (guess_0 * guess_0)).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
}
Prove: n <= ((2 * x_1) + (x_1 * x_1)).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 11):
Let x = n / 2.
Assume { Type: is_sint32(n) /\ is_sint32(x). (* Pre-condition *) Have: 0 < n.
}
Prove: n <= ((2 * x) + (x * x)).
Prover Z3 4.8.12 returns Timeout (Qed:0.54ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.54ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 12):
Let x = (guess_0 + (n / guess_0)) / 2.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x_1) + (x_1 * x_1)).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: n <= ((2 * guess_0) + (guess_0 * guess_0)).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: n <= ((2 * x) + (x * x)).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (35127)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (20ms) (233)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 12):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x) + (x * x)).
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.93ms) (10ms) (30471)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.93ms) (4ms) (63)

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/24_0005/24_merged.c, line 14):
Let x = guess_0 + (n / guess_0).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(prev_guess_0) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x_2) + (x_2 * x_2)).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: n <= ((2 * guess_0) + (guess_0 * guess_0)).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= prev_guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
  (* Then *)
  Have: prev_guess_0 != guess_0.
  (* Invariant *)
  Have: n <= ((2 * x_1) + (x_1 * x_1)).
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: 2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (36459)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (10ms) (171)

------------------------------------------------------------

Goal Establishment of Invariant (file out/24_0005/24_merged.c, line 14):
Let x = n / 2.
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x) + (x * x)).
  (* Invariant *)
  Have: x <= n.
}
Prove: 2 <= n.
Prover Z3 4.8.12 returns Valid (Qed:0.84ms) (10ms) (31528)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.84ms) (8ms) (101)

------------------------------------------------------------

Goal Assertion (file out/24_0005/24_merged.c, line 23):
Let x = guess_0 * guess_0.
Let x_1 = n / 2.
Assume {
  Type: is_sint32(guess_0) /\ is_sint32(n) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Invariant *)
  Have: n <= ((2 * x_1) + (x_1 * x_1)).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 2 <= n.
  (* Invariant *)
  Have: n <= ((2 * guess_0) + x).
  (* Invariant *)
  Have: guess_0 <= n.
  (* Invariant *)
  Have: 0 <= guess_0.
  (* Invariant *)
  Have: 0 < guess_0.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/24_0005/24_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/24_0005/24_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo24'.
  Callers assumptions might be imprecise.
