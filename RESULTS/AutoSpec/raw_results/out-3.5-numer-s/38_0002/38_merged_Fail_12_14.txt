[kernel] Parsing out/38_0002/38_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 14 goals scheduled
[wp] [Timeout] typed_hoo38_loop_invariant_3_established (Qed 4ms) (Z3)
[wp] [Timeout] typed_hoo38_loop_invariant_5_preserved (Qed 994ms) (Z3)
[wp] Proved goals:   12 / 14
  Qed:               6
  Alt-Ergo 2.5.4:    2 (35ms-59ms)
  Z3 4.8.12:         4 (10ms-48ms-140ms)
  Timeout:           2
------------------------------------------------------------
  Function hoo38
------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 17):
Let x = s * s.
Let x_1 = 8 * x.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = x % a.
Let x_5 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_5).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_4) + (4 * (a * x_3)) + (a * a * x_5))
          = (x_1 + (4 * (a * x_4)) + (2 * (a * x_5))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((2 * (d_8 * q_9)) + (4 * (d_8 * k)) + x_1)
          = ((8 * k) + (4 * (d_8 * k_10)) + (d_8 * d_8 * q_9)).
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (4 + q_1) = q.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Let x_6 = 2 * k.
        Let x_7 = k_2 + r.
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ ((q + x_6) = x_7) /\
            ((q_7 + x_6) = x_7).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + x_6)
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + x_6)
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
              Have: (4 + q) = q_2.
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
              Have: (8 + q) = q_3.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + x_6)
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + x_6)
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
            Have: (4 + q) = q_2.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
        Have: (8 + q) = q_3.
        Have: (2 + d_4) = d.
      }
    }
  }
}
Prove: ((2 * (d * q)) + (4 * (d * r)) + x_1)
         = ((8 * r) + (4 * (d * k)) + (d * d * q)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1s) (59ms) (761)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 17):
Let x = s * s.
Let x_1 = x % d.
Let x_2 = d - 2.
Let x_3 = x % x_2.
Let x_4 = (4 * (x / x_2)) - (4 * (x / d)).
Assume {
  Type: is_sint32(d) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 3 <= d.
}
Prove: ((8 * x_1) + (4 * (d * x_3)) + (d * d * x_4))
         = ((8 * x) + (4 * (d * x_1)) + (2 * (d * x_4))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (35ms) (526)

------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 18):
Let x = s * s.
Let x_1 = 8 * x.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = x % a.
Let x_5 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_5).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_4) + (4 * (a * x_3)) + (a * a * x_5))
          = (x_1 + (4 * (a * x_4)) + (2 * (a * x_5))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((2 * (d_8 * q_9)) + (4 * (d_8 * k)) + x_1)
          = ((8 * k) + (4 * (d_8 * k_10)) + (d_8 * d_8 * q_9)).
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (4 + q_1) = q.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Let x_6 = 2 * k.
        Let x_7 = k_2 + r.
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ ((q + x_6) = x_7) /\
            ((q_7 + x_6) = x_7).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + x_6)
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + x_6)
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
              Have: (4 + q) = q_2.
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
              Have: (8 + q) = q_3.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + x_6)
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + x_6)
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
            Have: (4 + q) = q_2.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
        Have: (8 + q) = q_3.
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: ((2 * (d * q)) + (4 * (d * r)) + x_1)
          = ((8 * r) + (4 * (d * k)) + (d * d * q)).
}
Prove: (d % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:950ms) (140ms) (354326)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 18):
Let x = s * s.
Let x_1 = x % d.
Let x_2 = d - 2.
Let x_3 = x % x_2.
Let x_4 = (4 * (x / x_2)) - (4 * (x / d)).
Assume {
  Type: is_sint32(d) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 3 <= d.
  (* Invariant *)
  Have: ((8 * x_1) + (4 * (d * x_3)) + (d * d * x_4))
          = ((8 * x) + (4 * (d * x_1)) + (2 * (d * x_4))).
}
Prove: (d % 2) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 19):
Let x = s * s.
Let x_1 = 8 * x.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = x % a.
Let x_5 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_5).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_4) + (4 * (a * x_3)) + (a * a * x_5))
          = (x_1 + (4 * (a * x_4)) + (2 * (a * x_5))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((2 * (d_8 * q_9)) + (4 * (d_8 * k)) + x_1)
          = ((8 * k) + (4 * (d_8 * k_10)) + (d_8 * d_8 * q_9)).
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (4 + q_1) = q.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Let x_6 = 2 * k.
        Let x_7 = k_2 + r.
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ ((q + x_6) = x_7) /\
            ((q_7 + x_6) = x_7).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + x_6)
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + x_6)
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
              Have: (4 + q) = q_2.
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
              Have: (8 + q) = q_3.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + x_6)
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + x_6)
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
            Have: (4 + q) = q_2.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
        Have: (8 + q) = q_3.
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: ((2 * (d * q)) + (4 * (d * r)) + x_1)
          = ((8 * r) + (4 * (d * k)) + (d * d * q)).
  (* Invariant *)
  Have: (d % 2) = 0.
}
Prove: 2 <= d.
Prover Z3 4.8.12 returns Valid (Qed:1s) (20ms) (72271)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 20):
Let x = s * s.
Let x_1 = 8 * x.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = x % a.
Let x_5 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(d) /\ is_sint32(d_1) /\ is_sint32(d_2) /\
      is_sint32(d_3) /\ is_sint32(d_4) /\ is_sint32(d_5) /\ is_sint32(d_6) /\
      is_sint32(d_7) /\ is_sint32(d_8) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(k_2) /\ is_sint32(k_3) /\ is_sint32(k_4) /\ is_sint32(k_5) /\
      is_sint32(k_6) /\ is_sint32(k_7) /\ is_sint32(k_8) /\ is_sint32(k_9) /\
      is_sint32(k_10) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(q_3) /\ is_sint32(q_4) /\ is_sint32(q_5) /\ is_sint32(q_6) /\
      is_sint32(q_7) /\ is_sint32(q_8) /\ is_sint32(q_9) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_5).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_4) + (4 * (a * x_3)) + (a * a * x_5))
          = (x_1 + (4 * (a * x_4)) + (2 * (a * x_5))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: ((2 * (d_8 * q_9)) + (4 * (d_8 * k)) + x_1)
          = ((8 * k) + (4 * (d_8 * k_10)) + (d_8 * d_8 * q_9)).
  (* Invariant *)
  Have: (d_8 % 2) = 0.
  (* Invariant *)
  Have: 2 <= d_8.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= k_10.
  (* Then *)
  Have: d_8 <= s.
  (* Then *)
  Have: k != 0.
  If (q_9 + (2 * k)) < k_10
  Then {
    Have: (d_8 = d_1) /\ (k_10 = k_1) /\ (q_9 = q_1).
    Have: (2 + d_1 + q_1 + (2 * k)) = (k_1 + r).
    Have: (4 + q_1) = q.
    Have: (2 + d_1) = d.
  }
  Else {
    Have: (d_8 = d_9) /\ (k_10 = k_9) /\ (q_9 = q_8).
    If k_9 <= (q_8 + (2 * k))
    Then {
      Have: (d_9 = d_7) /\ (k_9 = k_8) /\ (q_8 = q_7).
      If (q_7 + (2 * k)) <= (1 + d_7 + k_8)
      Then {
        Let x_6 = 2 * k.
        Let x_7 = k_2 + r.
        Have: (d_7 = d_2) /\ (k_8 = k_2) /\ ((q + x_6) = x_7) /\
            ((q_7 + x_6) = x_7).
        Have: (2 + d_2) = d.
      }
      Else {
        Have: (d_7 = d_10) /\ (k_8 = k_7) /\ (q_7 = q_6).
        If k_7 <= (q_6 + x_6)
        Then {
          Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
          If (2 + d_6 + k_6) <= (q_5 + x_6)
          Then {
            Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
            If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
            Then {
              Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
              Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
              Have: (4 + q) = q_2.
              Have: (2 + d_3) = d.
            }
            Else {
              Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
              Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
              Have: (8 + q) = q_3.
              Have: (2 + d_4) = d.
            }
          }
          Else {
            Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
    }
    Else {
      Have: (d_9 = d_10) /\ (k_9 = k_7) /\ (q_8 = q_6).
      If k_7 <= (q_6 + x_6)
      Then {
        Have: (d_10 = d_6) /\ (k_7 = k_6) /\ (q_6 = q_5).
        If (2 + d_6 + k_6) <= (q_5 + x_6)
        Then {
          Have: (d_6 = d_5) /\ (k_6 = k_5) /\ (q_5 = q_4).
          If (q_4 + x_6) <= (3 + k_5 + (2 * d_5))
          Then {
            Have: (d_5 = d_3) /\ (k_5 = k_3) /\ (q_4 = q_2).
            Have: (2 + d_3 + k_3 + r) = (q_2 + x_6).
            Have: (4 + q) = q_2.
            Have: (2 + d_3) = d.
          }
          Else {
            Have: (d_5 = d_4) /\ (k_5 = k_4) /\ (q_4 = q_3).
            Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
            Have: (8 + q) = q_3.
            Have: (2 + d_4) = d.
          }
        }
        Else {
          Have: (d_6 = d_4) /\ (k_6 = k_4) /\ (q_5 = q_3).
          Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
          Have: (8 + q) = q_3.
          Have: (2 + d_4) = d.
        }
      }
      Else {
        Have: (d_10 = d_4) /\ (k_7 = k_4) /\ (q_6 = q_3).
        Have: (4 + k_4 + r + (2 * d_4)) = (q_3 + x_6).
        Have: (8 + q) = q_3.
        Have: (2 + d_4) = d.
      }
    }
  }
  (* Invariant *)
  Have: ((2 * (d * q)) + (4 * (d * r)) + x_1)
          = ((8 * r) + (4 * (d * k)) + (d * d * q)).
  (* Invariant *)
  Have: (d % 2) = 0.
  (* Invariant *)
  Have: 2 <= d.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Timeout (Qed:994ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:994ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 20):
Let x = s * s.
Let x_1 = x % a.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_1) + (4 * (a * x_3)) + (a * a * x_4))
          = ((8 * x) + (4 * (a * x_1)) + (2 * (a * x_4))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
}
Prove: 0 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (50612)

------------------------------------------------------------

Goal Preservation of Invariant (file out/38_0002/38_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (95ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/38_0002/38_merged.c, line 21):
Let x = s * s.
Let x_1 = x % a.
Let x_2 = a - 2.
Let x_3 = x % x_2.
Let x_4 = (4 * (x / x_2)) - (4 * (x / a)).
Assume {
  Type: is_sint32(a) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 3 <= a.
  (* Invariant *)
  Have: ((8 * x_1) + (4 * (a * x_3)) + (a * a * x_4))
          = ((8 * x) + (4 * (a * x_1)) + (2 * (a * x_4))).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: 2 <= a.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (48258)

------------------------------------------------------------

Goal Assertion (file out/38_0002/38_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Loop assigns (file out/38_0002/38_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/38_0002/38_merged.c:4: Warning: 
  No 'assigns' specification for function 'hoo38'.
  Callers assumptions might be imprecise.
