[kernel] Parsing out/003_0012/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0012/003_merged.c:48: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0012/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 60 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_4_preserved (Qed 26ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_7_preserved (Qed 26ms) (Z3)
[wp] Proved goals:   58 / 60
  Qed:              43
  Alt-Ergo 2.5.4:    7 (5ms-16ms-44ms)
  Z3 4.8.12:         8 (10ms-18ms-30ms)
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 14):
Let x = b / 3.
Let x_1 = n + x.
Let x_2 = 3 * x.
Let x_3 = 2 * b.
Let x_4 = -x.
Let x_5 = b - x.
Let x_6 = x_5 % 2.
Let x_7 = x_3 - x_2.
Let x_8 = 2 * x.
Let x_9 = 1 + b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b_1) /\
      is_sint32(b) /\ is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x_5) /\
      is_sint32(x_7) /\ is_sint32(1 + b - x).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x = 0) \/ (x_8 = b).
  (* Invariant *)
  Have: x_8 <= b.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_8 + (x_7 / 3)) = b.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: ((x_3 - x_8) % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < b) -> (x_6 = (i % 2)))).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: x <= b.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Then *)
  Have: b < x_1.
  If tmp_0 != 0
  Then {
    Have: (a_1 + x_2) = x_3.
    Have: (a + x_2) = (1 + x_3).
    Have: (2 + b) = b_1.
  }
  Else {
    Have: (a_2 + x_2) = x_3.
    Have: (a + x_2) = (2 + x_3).
    Have: x_9 = b_1.
  }
}
Prove: ((a + x) = x_9) \/ ((b_1 + x) = x_9).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (45908)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (44ms) (754)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 15):
Let x = b / 3.
Let x_1 = 1 + b.
Let x_2 = n + x.
Let x_3 = 3 * x.
Let x_4 = 2 * b.
Let x_5 = -x.
Let x_6 = b - x.
Let x_7 = x_6 % 2.
Let x_8 = x_4 - x_3.
Let x_9 = 2 * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b_1) /\
      is_sint32(b) /\ is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x_6) /\
      is_sint32(x_8) /\ is_sint32(1 + b - x).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x = 0) \/ (x_9 = b).
  (* Invariant *)
  Have: x_9 <= b.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_9 + (x_8 / 3)) = b.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - x_9) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < b) -> (x_7 = (i % 2)))).
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: x <= b.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Then *)
  Have: b < x_2.
  If tmp_0 != 0
  Then {
    Have: (a_1 + x_3) = x_4.
    Have: (a + x_3) = (1 + x_4).
    Have: (2 + b) = b_1.
  }
  Else {
    Have: (a_2 + x_3) = x_4.
    Have: (a + x_3) = (2 + x_4).
    Have: x_1 = b_1.
  }
  (* Invariant *)
  Have: ((a + x) = x_1) \/ ((b_1 + x) = x_1).
}
Prove: (x + ((a + b_1) / 3)) = x_1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (49159)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 16):
Let x = 3 + a + b.
Let x_1 = x / 3.
Let x_2 = 1 + b.
Let x_3 = 2 + a.
Let x_4 = a + b.
Let x_5 = x_1 - 1.
Let x_6 = x_5 % 2.
Let x_7 = 2 * x_1.
Let x_8 = 2 + b.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_8 = x_7).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: ((b / 3) + x_1) = x_2.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b % 2).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (2 + b + (a / 3)) = x_7.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: ((x_7 - 2) % 3) = 0.
  (* Invariant *)
  Have: x_6 = (a % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: a <= b.
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: x_1 <= n.
  Have: x = (3 * x_1).
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_1 = x_3).
}
Prove: b < x_7.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (35325)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (5ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 17):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: ((b_3 / 3) + x_1) = x_8.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
}
Prove: (a + (3 * (b / 3))) = (2 * b).
Prover Z3 4.8.12 returns Timeout (Qed:26ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:26ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 18):
Let x = b / 3.
Let x_1 = (-3) * x.
Let x_2 = ((3 * b) - (3 * x)) / 3.
Let x_3 = 2 * x_2.
Let x_4 = 3 * x.
Let x_5 = 2 * b.
Let x_6 = 3 * x_2.
Let x_7 = x_6 - 3.
Let x_8 = x_6 - 3 - b_3.
Let x_9 = x_2 - 1.
Let x_10 = x_9 % 2.
Let x_11 = 1 + b_3.
Let x_12 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5 - x_4) /\ is_sint32(x_2) /\ is_sint32(x_9) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_2 = x_11) \/ (x_12 = x_3).
  (* Invariant *)
  Have: x_2 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_12 <= x_3.
  (* Invariant *)
  Have: ((b_3 / 3) + x_2) = x_11.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_2 <= x_11.
  (* Invariant *)
  Have: (2 + b_3 + (x_8 / 3)) = x_3.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_3 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_2) ->
      ((x_7 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_6 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_6.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_13 = 2 + b_1.
    Let x_14 = x_13 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_14)) = (3 + (2 * b_1))) /\
        ((x_14 + ((6 + (3 * b_1) - (3 * x_14)) / 3)) = x_13).
    Have: x_13 = b.
  }
  Else {
    Let x_15 = 1 + b_2.
    Let x_16 = x_15 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_16)) = (2 * b_2)) /\
        ((x_16 + ((3 + (3 * b_2) - (3 * x_16)) / 3)) = x_15).
    Have: x_15 = b.
  }
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_4 + x_2) = x_5).
  (* Invariant *)
  Have: b <= x_3.
}
Prove: x_4 <= (b + x_2).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (51463)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (14ms) (176)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 19):
Let x = b / 3.
Let x_1 = 3 * x.
Let x_2 = (-3) * x.
Let x_3 = ((3 * b) - x_1) / 3.
Let x_4 = 2 * x_3.
Let x_5 = 2 * b.
Let x_6 = 3 * x_3.
Let x_7 = x_6 - 3.
Let x_8 = x_6 - 3 - b_3.
Let x_9 = x_3 - 1.
Let x_10 = x_9 % 2.
Let x_11 = 1 + b_3.
Let x_12 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5 - x_1) /\ is_sint32(x_3) /\ is_sint32(x_9) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_3 = x_11) \/ (x_12 = x_4).
  (* Invariant *)
  Have: x_3 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_12 <= x_4.
  (* Invariant *)
  Have: ((b_3 / 3) + x_3) = x_11.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_3 <= x_11.
  (* Invariant *)
  Have: (2 + b_3 + (x_8 / 3)) = x_4.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_3) ->
      ((x_7 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_6 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_3 <= (1 + n).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_6.
  (* Then *)
  Have: x_3 <= n.
  If tmp_0 != 0
  Then {
    Let x_13 = 2 + b_1.
    Let x_14 = x_13 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_14)) = (3 + (2 * b_1))) /\
        ((x_14 + ((6 + (3 * b_1) - (3 * x_14)) / 3)) = x_13).
    Have: x_13 = b.
  }
  Else {
    Let x_15 = 1 + b_2.
    Let x_16 = x_15 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_16)) = (2 * b_2)) /\
        ((x_16 + ((3 + (3 * b_2) - (3 * x_16)) / 3)) = x_15).
    Have: x_15 = b.
  }
  (* Invariant *)
  Have: (x_3 = b) \/ ((x_1 + x_3) = x_5).
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: x_1 <= (b + x_3).
}
Prove: (x_3 % 3) = (b % 3).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (30ms) (69783)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 20):
Let x = b / 3.
Let x_1 = (-3) * x.
Let x_2 = ((3 * b) - (3 * x)) / 3.
Let x_3 = b % 3.
Let x_4 = 3 * x.
Let x_5 = 2 * x_2.
Let x_6 = 2 * b.
Let x_7 = 3 * x_2.
Let x_8 = x_7 - 3.
Let x_9 = x_7 - 3 - b_3.
Let x_10 = x_2 - 1.
Let x_11 = x_10 % 2.
Let x_12 = 1 + b_3.
Let x_13 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_6 - x_4) /\ is_sint32(x_2) /\ is_sint32(x_10) /\
      is_sint32(x_9).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_2 = x_12) \/ (x_13 = x_5).
  (* Invariant *)
  Have: x_2 = (1 + (x_8 / 3)).
  (* Invariant *)
  Have: x_13 <= x_5.
  (* Invariant *)
  Have: ((b_3 / 3) + x_2) = x_12.
  (* Invariant *)
  Have: (x_10 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_11 = (b_3 % 2).
  (* Invariant *)
  Have: x_2 <= x_12.
  (* Invariant *)
  Have: (2 + b_3 + (x_9 / 3)) = x_5.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: ((x_5 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_9 % 2) = x_11.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_2) ->
      ((x_8 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_7 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_7.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_14 = 2 + b_1.
    Let x_15 = x_14 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_15)) = (3 + (2 * b_1))) /\
        ((x_15 + ((6 + (3 * b_1) - (3 * x_15)) / 3)) = x_14).
    Have: x_14 = b.
  }
  Else {
    Let x_16 = 1 + b_2.
    Let x_17 = x_16 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_17)) = (2 * b_2)) /\
        ((x_17 + ((3 + (3 * b_2) - (3 * x_17)) / 3)) = x_16).
    Have: x_16 = b.
  }
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_4 + x_2) = x_6).
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: x_4 <= (b + x_2).
  (* Invariant *)
  Have: (x_2 % 3) = x_3.
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Timeout (Qed:26ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:26ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 21):
Let x = b / 3.
Let x_1 = (-3) * x.
Let x_2 = ((3 * b) - (3 * x)) / 3.
Let x_3 = 3 * x.
Let x_4 = 2 * x_2.
Let x_5 = 2 * b.
Let x_6 = 3 * x_2.
Let x_7 = x_6 - 3.
Let x_8 = x_6 - 3 - b_3.
Let x_9 = x_2 - 1.
Let x_10 = x_9 % 2.
Let x_11 = 1 + b_3.
Let x_12 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5 - x_3) /\ is_sint32(x_2) /\ is_sint32(x_9) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_2 = x_11) \/ (x_12 = x_4).
  (* Invariant *)
  Have: x_2 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_12 <= x_4.
  (* Invariant *)
  Have: ((b_3 / 3) + x_2) = x_11.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_2 <= x_11.
  (* Invariant *)
  Have: (2 + b_3 + (x_8 / 3)) = x_4.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_2) ->
      ((x_7 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_6 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_6.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_13 = 2 + b_1.
    Let x_14 = x_13 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_14)) = (3 + (2 * b_1))) /\
        ((x_14 + ((6 + (3 * b_1) - (3 * x_14)) / 3)) = x_13).
    Have: x_13 = b.
  }
  Else {
    Let x_15 = 1 + b_2.
    Let x_16 = x_15 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_16)) = (2 * b_2)) /\
        ((x_16 + ((3 + (3 * b_2) - (3 * x_16)) / 3)) = x_15).
    Have: x_15 = b.
  }
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_3 + x_2) = x_5).
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: x_3 <= (b + x_2).
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
}
Prove: (x_2 % 2) = (b % 2).
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (58098)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 22):
Let x = b / 3.
Let x_1 = (-3) * x.
Let x_2 = ((3 * b) - (3 * x)) / 3.
Let x_3 = 3 * x.
Let x_4 = 2 * x_2.
Let x_5 = 2 * b.
Let x_6 = 3 * x_2.
Let x_7 = x_6 - 3.
Let x_8 = x_6 - 3 - b_3.
Let x_9 = x_2 - 1.
Let x_10 = x_9 % 2.
Let x_11 = 1 + b_3.
Let x_12 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5 - x_3) /\ is_sint32(x_2) /\ is_sint32(x_9) /\
      is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_2 = x_11) \/ (x_12 = x_4).
  (* Invariant *)
  Have: x_2 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_12 <= x_4.
  (* Invariant *)
  Have: ((b_3 / 3) + x_2) = x_11.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_2 <= x_11.
  (* Invariant *)
  Have: (2 + b_3 + (x_8 / 3)) = x_4.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_2) ->
      ((x_7 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_6 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_6.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_13 = 2 + b_1.
    Let x_14 = x_13 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_14)) = (3 + (2 * b_1))) /\
        ((x_14 + ((6 + (3 * b_1) - (3 * x_14)) / 3)) = x_13).
    Have: x_13 = b.
  }
  Else {
    Let x_15 = 1 + b_2.
    Let x_16 = x_15 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_16)) = (2 * b_2)) /\
        ((x_16 + ((3 + (3 * b_2) - (3 * x_16)) / 3)) = x_15).
    Have: x_15 = b.
  }
  (* Invariant *)
  Have: (x_2 = b) \/ ((x_3 + x_2) = x_5).
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: x_3 <= (b + x_2).
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = (b % 2).
}
Prove: x_5 <= (x_3 + x_4).
Prover Z3 4.8.12 returns Valid (Qed:32ms) (30ms) (55873)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:32ms) (13ms) (148)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 23):
Let x = 2 * b.
Let x_1 = b / 3.
Let x_2 = 3 * x_1.
Let x_3 = (-3) * x_1.
Let x_4 = ((3 * b) - x_2) / 3.
Let x_5 = 2 * x_4.
Let x_6 = 3 * x_4.
Let x_7 = x_6 - 3.
Let x_8 = x_6 - 3 - b_3.
Let x_9 = x_4 - 1.
Let x_10 = x_9 % 2.
Let x_11 = 1 + b_3.
Let x_12 = 2 + b_3.
Let x_13 = x - x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_13) /\ is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_4 = x_11) \/ (x_12 = x_5).
  (* Invariant *)
  Have: x_4 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_12 <= x_5.
  (* Invariant *)
  Have: ((b_3 / 3) + x_4) = x_11.
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_4 <= x_11.
  (* Invariant *)
  Have: (2 + b_3 + (x_8 / 3)) = x_5.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: ((x_5 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_4) ->
      ((x_7 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_6 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_4 <= (1 + n).
  (* Invariant *)
  Have: x_1 < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_6.
  (* Then *)
  Have: x_4 <= n.
  If tmp_0 != 0
  Then {
    Let x_14 = 2 + b_1.
    Let x_15 = x_14 / 3.
    Have: (b_3 = b_1) /\ ((a + (3 * x_15)) = (3 + (2 * b_1))) /\
        ((x_15 + ((6 + (3 * b_1) - (3 * x_15)) / 3)) = x_14).
    Have: x_14 = b.
  }
  Else {
    Let x_16 = 1 + b_2.
    Let x_17 = x_16 / 3.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * x_17)) = (2 * b_2)) /\
        ((x_17 + ((3 + (3 * b_2) - (3 * x_17)) / 3)) = x_16).
    Have: x_16 = b.
  }
  (* Invariant *)
  Have: (x_4 = b) \/ ((x_2 + x_4) = x).
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: x_2 <= (b + x_4).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (b % 2).
  (* Invariant *)
  Have: x <= (x_2 + x_5).
}
Prove: ((2 * x_1) + (x_13 / 3)) = b.
Prover Z3 4.8.12 returns Valid (Qed:34ms) (20ms) (61215)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (24ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (25ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 26):
Let x = b / 3.
Let x_1 = 2 * x.
Let x_2 = 2 * b.
Let x_3 = (-3) * x.
Let x_4 = x_2 - (3 * x).
Let x_5 = -x.
Let x_6 = b - x.
Let x_7 = 3 * b.
Let x_8 = 3 * x.
Let x_9 = b - 1 - x.
Let x_10 = x_9 % 2.
Let x_11 = x_7 - 3 - b_3 - x_8.
Let x_12 = 1 + b_3 + x.
Let x_13 = 2 + b_3 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_6) /\ is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_12 = b) \/ (x_13 = x_2).
  (* Invariant *)
  Have: x_13 <= x_2.
  (* Invariant *)
  Have: x_12 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_12.
  (* Invariant *)
  Have: (2 + b_3 + x_1 + (x_11 / 3)) = x_2.
  (* Invariant *)
  Have: (x_11 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2 - x_1) % 3) = 0.
  (* Invariant *)
  Have: (x_11 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x) <= b) -> (x_10 = (i % 2)))).
  (* Invariant *)
  Have: x_7 <= (3 + (2 * b_3) + x_8).
  (* Invariant *)
  Have: b <= (1 + n + x).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_8) <= x_7.
  (* Then *)
  Have: b <= (n + x).
  If tmp_0 != 0
  Then {
    Let x_14 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_14 / 3))) = (3 + (2 * b_1))).
    Have: x_14 = b.
  }
  Else {
    Let x_15 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_15 / 3))) = (2 * b_2)).
    Have: x_15 = b.
  }
  (* Invariant *)
  Have: (x = 0) \/ (x_1 = b).
  (* Invariant *)
  Have: (x + ((x_7 - x_8) / 3)) = b.
  (* Invariant *)
  Have: x_1 <= b.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_1 + (x_4 / 3)) = b.
}
Prove: (x_4 % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:48ms) (20ms) (57962)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 29):
Let x = 2 * b.
Let x_1 = b / 3.
Let x_2 = (-3) * x_1.
Let x_3 = x - (3 * x_1).
Let x_4 = 2 * x_1.
Let x_5 = -x_1.
Let x_6 = b - x_1.
Let x_7 = 3 * b.
Let x_8 = 3 * x_1.
Let x_9 = b - 1 - x_1.
Let x_10 = x_9 % 2.
Let x_11 = x_7 - 3 - b_3 - x_8.
Let x_12 = (-2) * x_1.
Let x_13 = 1 + b_3 + x_1.
Let x_14 = 2 + b_3 + x_4.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_6) /\ is_sint32(x_3) /\ is_sint32(x_9) /\ is_sint32(x_11).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_13 = b) \/ (x_14 = x).
  (* Invariant *)
  Have: x_14 <= x.
  (* Invariant *)
  Have: x_13 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_13.
  (* Invariant *)
  Have: (2 + b_3 + x_4 + (x_11 / 3)) = x.
  (* Invariant *)
  Have: (x_11 % 3) = 0.
  (* Invariant *)
  Have: ((x - 2 - x_4) % 3) = 0.
  (* Invariant *)
  Have: (x_11 % 2) = x_10.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x_1) <= b) ->
      (x_10 = (i % 2)))).
  (* Invariant *)
  Have: x_7 <= (3 + (2 * b_3) + x_8).
  (* Invariant *)
  Have: b <= (1 + n + x_1).
  (* Invariant *)
  Have: x_1 < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_8) <= x_7.
  (* Then *)
  Have: b <= (n + x_1).
  If tmp_0 != 0
  Then {
    Let x_15 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_15 / 3))) = (3 + (2 * b_1))).
    Have: x_15 = b.
  }
  Else {
    Let x_16 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_16 / 3))) = (2 * b_2)).
    Have: x_16 = b.
  }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_4 = b).
  (* Invariant *)
  Have: (x_1 + ((x_7 - x_8) / 3)) = b.
  (* Invariant *)
  Have: x_4 <= b.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_4 + (x_3 / 3)) = b.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
}
Prove: ((x - x_4) % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (60305)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (18ms) (213)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 30):
Let x = 2 * b.
Let x_1 = b / 3.
Let x_2 = (-2) * x_1.
Let x_3 = (-3) * x_1.
Let x_4 = x - (3 * x_1).
Let x_5 = 2 * x_1.
Let x_6 = -x_1.
Let x_7 = b - x_1.
Let x_8 = x_7 % 2.
Let x_9 = 3 * b.
Let x_10 = 3 * x_1.
Let x_11 = b - 1 - x_1.
Let x_12 = x_11 % 2.
Let x_13 = x_9 - 3 - b_3 - x_10.
Let x_14 = 1 + b_3 + x_1.
Let x_15 = 2 + b_3 + x_5.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_11) /\ is_sint32(x_13).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_14 = b) \/ (x_15 = x).
  (* Invariant *)
  Have: x_15 <= x.
  (* Invariant *)
  Have: x_14 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_11 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_12 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_14.
  (* Invariant *)
  Have: (2 + b_3 + x_5 + (x_13 / 3)) = x.
  (* Invariant *)
  Have: (x_13 % 3) = 0.
  (* Invariant *)
  Have: ((x - 2 - x_5) % 3) = 0.
  (* Invariant *)
  Have: (x_13 % 2) = x_12.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x_1) <= b) ->
      (x_12 = (i % 2)))).
  (* Invariant *)
  Have: x_9 <= (3 + (2 * b_3) + x_10).
  (* Invariant *)
  Have: b <= (1 + n + x_1).
  (* Invariant *)
  Have: x_1 < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_10) <= x_9.
  (* Then *)
  Have: b <= (n + x_1).
  If tmp_0 != 0
  Then {
    Let x_16 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_16 / 3))) = (3 + (2 * b_1))).
    Have: x_16 = b.
  }
  Else {
    Let x_17 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_17 / 3))) = (2 * b_2)).
    Have: x_17 = b.
  }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_5 = b).
  (* Invariant *)
  Have: (x_1 + ((x_9 - x_10) / 3)) = b.
  (* Invariant *)
  Have: x_5 <= b.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_8 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_5 + (x_4 / 3)) = b.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: ((x - x_5) % 3) = 0.
}
Prove: (x_4 % 2) = x_8.
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (61961)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 31):
Let x = 2 * b.
Let x_1 = b / 3.
Let x_2 = (-3) * x_1.
Let x_3 = x - (3 * x_1).
Let x_4 = -x_1.
Let x_5 = b - x_1.
Let x_6 = x_5 % 2.
Let x_7 = (-2) * x_1.
Let x_8 = 2 * x_1.
Let x_9 = 3 * b.
Let x_10 = x_9 - (3 * x_1).
Let x_11 = 3 * x_1.
Let x_12 = b - 1 - x_1.
Let x_13 = x_12 % 2.
Let x_14 = x_9 - 3 - b_3 - x_11.
Let x_15 = 1 + b_3 + x_1.
Let x_16 = 2 + b_3 + x_8.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5) /\ is_sint32(x_3) /\ is_sint32(x_12) /\ is_sint32(x_14).
  (* Goal *)
  When: (0 <= i) /\ ((i + x_1) < b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_15 = b) \/ (x_16 = x).
  (* Invariant *)
  Have: x_16 <= x.
  (* Invariant *)
  Have: x_15 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_12 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_13 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_15.
  (* Invariant *)
  Have: (2 + b_3 + x_8 + (x_14 / 3)) = x.
  (* Invariant *)
  Have: (x_14 % 3) = 0.
  (* Invariant *)
  Have: ((x - 2 - x_8) % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 2) = x_13.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1 + x_1) <= b) ->
      (x_13 = (i_1 % 2)))).
  (* Invariant *)
  Have: x_9 <= (3 + (2 * b_3) + x_11).
  (* Invariant *)
  Have: b <= (1 + n + x_1).
  (* Invariant *)
  Have: x_1 < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_11) <= x_9.
  (* Then *)
  Have: b <= (n + x_1).
  If tmp_0 != 0
  Then {
    Let x_17 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_17 / 3))) = (3 + (2 * b_1))).
    Have: x_17 = b.
  }
  Else {
    Let x_18 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_18 / 3))) = (2 * b_2)).
    Have: x_18 = b.
  }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_8 = b).
  (* Invariant *)
  Have: (x_1 + (x_10 / 3)) = b.
  (* Invariant *)
  Have: x_8 <= b.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_8 + (x_3 / 3)) = b.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: ((x - x_8) % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = x_6.
}
Prove: (x_10 % 2) = (i % 2).
Prover Z3 4.8.12 returns Valid (Qed:31ms) (20ms) (66151)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 34):
Let x = b / 3.
Let x_1 = 3 * b.
Let x_2 = (-3) * x.
Let x_3 = x_1 - (3 * x).
Let x_4 = 2 * b.
Let x_5 = x_4 - (3 * x).
Let x_6 = -x.
Let x_7 = b - x.
Let x_8 = x_7 % 2.
Let x_9 = (-2) * x.
Let x_10 = 2 * x.
Let x_11 = 3 * x.
Let x_12 = b - 1 - x.
Let x_13 = x_12 % 2.
Let x_14 = x_1 - 3 - b_3 - x_11.
Let x_15 = 1 + b_3 + x.
Let x_16 = 2 + b_3 + x_10.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_7) /\ is_sint32(x_5) /\ is_sint32(x_12) /\ is_sint32(x_14).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_15 = b) \/ (x_16 = x_4).
  (* Invariant *)
  Have: x_16 <= x_4.
  (* Invariant *)
  Have: x_15 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_12 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_13 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_15.
  (* Invariant *)
  Have: (2 + b_3 + x_10 + (x_14 / 3)) = x_4.
  (* Invariant *)
  Have: (x_14 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - 2 - x_10) % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 2) = x_13.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x) <= b) -> (x_13 = (i % 2)))).
  (* Invariant *)
  Have: x_1 <= (3 + (2 * b_3) + x_11).
  (* Invariant *)
  Have: b <= (1 + n + x).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_11) <= x_1.
  (* Then *)
  Have: b <= (n + x).
  If tmp_0 != 0
  Then {
    Let x_17 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_17 / 3))) = (3 + (2 * b_1))).
    Have: x_17 = b.
  }
  Else {
    Let x_18 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_18 / 3))) = (2 * b_2)).
    Have: x_18 = b.
  }
  (* Invariant *)
  Have: (x = 0) \/ (x_10 = b).
  (* Invariant *)
  Have: (x + (x_3 / 3)) = b.
  (* Invariant *)
  Have: x_10 <= b.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_8 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_10 + (x_5 / 3)) = b.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_4 - x_10) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_8.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < b) -> ((x_3 % 2) = (i % 2)))).
}
Prove: b <= x_11.
Prover Z3 4.8.12 returns Valid (Qed:32ms) (10ms) (60909)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 41):
Let x = a / 3.
Let x_1 = 3 * x.
Let x_2 = 3 * a.
Let x_3 = (-3) * x.
Let x_4 = x_2 - x_1.
Let x_5 = -x.
Let x_6 = a - x.
Let x_7 = x_6 % 2.
Let x_8 = 2 * a.
Let x_9 = (-2) * x.
Let x_10 = 2 * x.
Let x_11 = x_8 - x_1.
Let x_12 = a - 1 - x.
Let x_13 = x_12 % 2.
Let x_14 = x_2 - 3 - b_2 - x_1.
Let x_15 = 1 + b_2 + x.
Let x_16 = 2 + b_2 + x_10.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_6) /\ is_sint32(x_11) /\ is_sint32(x_12) /\
      is_sint32(x_14).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_15 = a) \/ (x_16 = x_8).
  (* Invariant *)
  Have: x_16 <= x_8.
  (* Invariant *)
  Have: x_15 = (a + (b_2 / 3)).
  (* Invariant *)
  Have: (x_12 % 3) = 0.
  (* Invariant *)
  Have: (b_2 % 3) = 0.
  (* Invariant *)
  Have: x_13 = (b_2 % 2).
  (* Invariant *)
  Have: a <= x_15.
  (* Invariant *)
  Have: (2 + b_2 + x_10 + (x_14 / 3)) = x_8.
  (* Invariant *)
  Have: (x_14 % 3) = 0.
  (* Invariant *)
  Have: ((x_8 - 2 - x_10) % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 2) = x_13.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x) <= a) -> (x_13 = (i % 2)))).
  (* Invariant *)
  Have: x_2 <= (3 + (2 * b_2) + x_1).
  (* Invariant *)
  Have: a <= (1 + n + x).
  (* Invariant *)
  Have: x < a.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: (3 + b_2 + x_1) <= x_2.
  (* Then *)
  Have: a <= (n + x).
  If tmp_0 != 0
  Then {
    Let x_17 = 1 + a_1.
    Let x_18 = 3 * (x_17 / 3).
    Let x_19 = 2 * a_1.
    Have: (x_17 = a) /\ ((b + x_18) = x_19) /\ ((b_2 + x_18) = x_19).
  }
  Else {
    Let x_20 = 2 + a_2.
    Let x_21 = 3 * (x_20 / 3).
    Let x_22 = 3 + (2 * a_2).
    Have: (x_20 = a) /\ ((b_1 + x_21) = x_22) /\ ((b_2 + x_21) = x_22).
  }
  (* Invariant *)
  Have: (x = 0) \/ (x_10 = a).
  (* Invariant *)
  Have: (x + (x_4 / 3)) = a.
  (* Invariant *)
  Have: (-2) <= a.
  (* Invariant *)
  Have: (x_10 + (x_11 / 3)) = a.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_11 % 3) = 0.
  (* Invariant *)
  Have: (x_11 % 2) = x_7.
  (* Invariant *)
  Have: x_10 <= a.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: ((x_8 - x_10) % 3) = 0.
  (* Invariant *)
  Have: x_7 = (a % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < a) -> ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_1 <= a.
}
Prove: x_1 <= x_8.
Prover Z3 4.8.12 returns Valid (Qed:37ms) (10ms) (41282)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (9ms) (94)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 42):
Let x = b / 3.
Let x_1 = 3 * x.
Let x_2 = 3 * b.
Let x_3 = (-3) * x.
Let x_4 = x_2 - x_1.
Let x_5 = 2 * b.
Let x_6 = x_5 - x_1.
Let x_7 = -x.
Let x_8 = b - x.
Let x_9 = x_8 % 2.
Let x_10 = (-2) * x.
Let x_11 = 2 * x.
Let x_12 = b - 1 - x.
Let x_13 = x_12 % 2.
Let x_14 = x_2 - 3 - b_3 - x_1.
Let x_15 = 1 + b_3 + x.
Let x_16 = 2 + b_3 + x_11.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_8) /\ is_sint32(x_6) /\ is_sint32(x_12) /\ is_sint32(x_14).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_15 = b) \/ (x_16 = x_5).
  (* Invariant *)
  Have: x_16 <= x_5.
  (* Invariant *)
  Have: x_15 = (b + (b_3 / 3)).
  (* Invariant *)
  Have: (x_12 % 3) = 0.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: x_13 = (b_3 % 2).
  (* Invariant *)
  Have: b <= x_15.
  (* Invariant *)
  Have: (2 + b_3 + x_11 + (x_14 / 3)) = x_5.
  (* Invariant *)
  Have: (x_14 % 3) = 0.
  (* Invariant *)
  Have: ((x_5 - 2 - x_11) % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 2) = x_13.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x) <= b) -> (x_13 = (i % 2)))).
  (* Invariant *)
  Have: x_2 <= (3 + (2 * b_3) + x_1).
  (* Invariant *)
  Have: b <= (1 + n + x).
  (* Invariant *)
  Have: x < b.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3 + x_1) <= x_2.
  (* Then *)
  Have: b <= (n + x).
  If tmp_0 != 0
  Then {
    Let x_17 = 2 + b_1.
    Have: (b_3 = b_1) /\ ((a + (3 * (x_17 / 3))) = (3 + (2 * b_1))).
    Have: x_17 = b.
  }
  Else {
    Let x_18 = 1 + b_2.
    Have: (b_3 = b_2) /\ ((a_1 + (3 * (x_18 / 3))) = (2 * b_2)).
    Have: x_18 = b.
  }
  (* Invariant *)
  Have: (x = 0) \/ (x_11 = b).
  (* Invariant *)
  Have: (x + (x_4 / 3)) = b.
  (* Invariant *)
  Have: x_11 <= b.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: x_9 = (b % 2).
  (* Invariant *)
  Have: (-2) <= b.
  (* Invariant *)
  Have: (x_11 + (x_6 / 3)) = b.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: ((x_5 - x_11) % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_9.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < b) -> ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: 0 <= b.
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:35ms) (10ms) (41385)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (7ms) (88)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 43) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 43) (2/2):
Call Result at line 48
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0012/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0012/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
