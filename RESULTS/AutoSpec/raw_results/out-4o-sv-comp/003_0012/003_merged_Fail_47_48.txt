[kernel] Parsing out/003_0012/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0012/003_merged.c:42: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0012/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 48 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_8_preserved (Qed 17ms) (Z3)
[wp] Proved goals:   47 / 48
  Qed:              36
  Alt-Ergo 2.5.4:    5 (5ms-8ms-13ms)
  Z3 4.8.12:         6 (10ms-210ms-1.2s)
  Timeout:           1
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = i % 2.
Let x_2 = x - b_1.
Let x_3 = 2 * i.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_4) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: b_1 <= x_3.
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_1))).
  (* Invariant *)
  Have: x <= (2 * b_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: b_1 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: (x_4 = a) \/ (x_4 = b).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (1.2s) (2120070)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 15):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = i % 2.
Let x_3 = x_1 - b_1.
Let x_4 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_1) \/ (x_4 = b_1).
  (* Invariant *)
  Have: b_1 <= x_4.
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_2))).
  (* Invariant *)
  Have: x_1 <= (2 * b_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (x = a) \/ (x = b).
}
Prove: ((a + b) / 3) = x.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (45941)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 16):
Let x = 3 + a + b.
Let x_1 = x / 3.
Let x_2 = 1 + b.
Let x_3 = 2 + a.
Let x_4 = a + b.
Let x_5 = x_1 - 1.
Let x_6 = 2 * x_1.
Let x_7 = 2 + b.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_7 = x_6).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: ((x_6 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = (a % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: a <= b.
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: x_1 <= n.
  Have: x = (3 * x_1).
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_1 = x_3).
}
Prove: b < x_6.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (34310)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 17):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = 1 + b_3.
Let x_8 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_7) \/ (x_8 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_8 <= x_2.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = (x_6 % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_9 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_9 = (3 * (x_9 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_10 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
}
Prove: b <= (a + x_1).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (43979)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (13ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 18):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = 1 + b_3.
Let x_8 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_7) \/ (x_8 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_8 <= x_2.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = (x_6 % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_9 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_9 = (3 * (x_9 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_10 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= (a + x_1).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (54175)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (9ms) (106)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 21):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 3 * i.
Let x_3 = 1 + i.
Let x_4 = i % 2.
Let x_5 = x_2 - b_3.
Let x_6 = 3 + x_2 - b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x = b_3).
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_4))).
  (* Invariant *)
  Have: x_2 <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_2). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_2). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_3 = b) \/ (x_1 = b).
  (* Invariant *)
  Have: ((3 + x_2) / 3) = x_3.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: i < b.
}
Prove: (x_6 % 3) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 23):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = 1 + i.
Let x_5 = i % 2.
Let x_6 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_2 = b_3).
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_5))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_4 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: ((3 + x) / 3) = x_4.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
}
Prove: (x_3 % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (30ms) (58390)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 24):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 3 * i.
Let x_3 = 3 + x_2 - b.
Let x_4 = 1 + i.
Let x_5 = i % 2.
Let x_6 = x_2 - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x = b_3).
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_5))).
  (* Invariant *)
  Have: x_2 <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_2). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_2). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_4 = b) \/ (x_1 = b).
  (* Invariant *)
  Have: ((3 + x_2) / 3) = x_4.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
}
Prove: (x_3 % 2) = (x_4 % 2).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (48835)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 25):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = 1 + i.
Let x_3 = 2 * i.
Let x_4 = 2 + x_3.
Let x_5 = 3 + x.
Let x_6 = i % 2.
Let x_7 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_3 = b_3).
  (* Invariant *)
  Have: b_3 <= x_3.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i_2 % 2) = x_6))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_2 = b) \/ (x_4 = b).
  (* Invariant *)
  Have: (x_5 / 3) = x_2.
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = (x_2 % 2).
}
Prove: (x_5 % 2) = (i_1 % 2).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (52581)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 28):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 3 + x - b.
Let x_3 = 1 + i.
Let x_4 = 2 * i.
Let x_5 = 2 + x_4.
Let x_6 = i % 2.
Let x_7 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_4 = b_3).
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_6))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_3 = b) \/ (x_5 = b).
  (* Invariant *)
  Have: (x_1 / 3) = x_3.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = (x_3 % 2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((x_1 % 2) = (i_1 % 2)))).
}
Prove: x_1 <= (2 * b).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (20ms) (51180)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 35):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 1 + i.
Let x_3 = 2 * i.
Let x_4 = 2 + x_3.
Let x_5 = i % 2.
Let x_6 = x - b_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_6) /\
      is_sint32(3 + x - a).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_2) \/ (x_3 = b_2).
  (* Invariant *)
  Have: b_2 <= x_3.
  (* Invariant *)
  Have: i <= b_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_5))).
  (* Invariant *)
  Have: x <= (2 * b_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: b_2 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x). Have: (1 + x) = (a + b). }
  Else { Have: (b_2 = b_1) /\ ((a_2 + b_1) = x). Have: (2 + x) = (a + b_1). }
  (* Invariant *)
  Have: (x_2 = a) \/ (x_4 = a).
  (* Invariant *)
  Have: (x_1 / 3) = x_2.
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: a <= x_4.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = (a % 2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((x_1 % 2) = (i_1 % 2)))).
  (* Invariant *)
  Have: (2 * a) <= x_1.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: a <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (38209)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (5ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 36):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 3 + x - b.
Let x_3 = 1 + i.
Let x_4 = 2 * i.
Let x_5 = 2 + x_4.
Let x_6 = i % 2.
Let x_7 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_7) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_4 = b_3).
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_6))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_3 = b) \/ (x_5 = b).
  (* Invariant *)
  Have: (x_1 / 3) = x_3.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = (x_3 % 2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((x_1 % 2) = (i_1 % 2)))).
  (* Invariant *)
  Have: x_1 <= (2 * b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= b.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (38330)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (7ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 37) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 37) (2/2):
Call Result at line 42
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0012/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0012/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
