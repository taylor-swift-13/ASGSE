[kernel] Parsing out/003_0012/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0012/003_merged.c:46: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0012/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 56 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_5_preserved (Qed 23ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_8_preserved (Qed 24ms) (Z3)
[wp] Proved goals:   54 / 56
  Qed:              40
  Alt-Ergo 2.5.4:    7 (4ms-12ms-37ms)
  Z3 4.8.12:         7 (10ms-30ms)
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = i % 2.
Let x_2 = x - b_1.
Let x_3 = 2 * i.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_4) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: b_1 <= x_3.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_1 = (b_1 % 2).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (b_1 + (x_2 / 3)) = x_3.
  (* Invariant *)
  Have: (b_1 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_1))).
  (* Invariant *)
  Have: x <= (2 * b_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: b_1 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: (x_4 = a) \/ (x_4 = b).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (20ms) (48615)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (37ms) (609)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 15):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = i % 2.
Let x_3 = x_1 - b_1.
Let x_4 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_1) \/ (x_4 = b_1).
  (* Invariant *)
  Have: b_1 <= x_4.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_2 = (b_1 % 2).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (b_1 + (x_3 / 3)) = x_4.
  (* Invariant *)
  Have: (b_1 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_2))).
  (* Invariant *)
  Have: x_1 <= (2 * b_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (x = a) \/ (x = b).
}
Prove: ((a + b) / 3) = x.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (52663)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 16):
Let x = 3 + a + b.
Let x_1 = x / 3.
Let x_2 = 1 + b.
Let x_3 = 2 + a.
Let x_4 = a + b.
Let x_5 = x_1 - 1.
Let x_6 = x_5 % 2.
Let x_7 = 2 * x_1.
Let x_8 = 2 + b.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_8 = x_7).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b % 2).
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (2 + b + (a / 3)) = x_7.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: ((x_7 - 2) % 3) = 0.
  (* Invariant *)
  Have: x_6 = (a % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: a <= b.
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: x_1 <= n.
  Have: x = (3 * x_1).
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_1 = x_3).
}
Prove: b < x_7.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (35068)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (4ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 17):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
}
Prove: b <= (a + x_1).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (48092)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (12ms) (125)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 18):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= (a + x_1).
}
Prove: (x_1 % 3) = (b % 3).
Prover Z3 4.8.12 returns Timeout (Qed:23ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:23ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 19):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= (a + x_1).
  (* Invariant *)
  Have: (x_1 % 3) = (b % 3).
}
Prove: (x_1 % 2) = (b % 2).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (82955)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 20):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= (a + x_1).
  (* Invariant *)
  Have: (x_1 % 3) = (b % 3).
  (* Invariant *)
  Have: (x_1 % 2) = (b % 2).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (20ms) (76293)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (10ms) (133)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 21):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * x_1.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_3 - 3 - b_3.
Let x_6 = x_1 - 1.
Let x_7 = x_6 % 2.
Let x_8 = 1 + b_3.
Let x_9 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_1 = x_8) \/ (x_9 = x_2).
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_9 <= x_2.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= x_8.
  (* Invariant *)
  Have: (2 + b_3 + (x_5 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: ((x_2 - 2) % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_7.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x_1) ->
      ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_3 <= (3 + (2 * b_3)).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 3 <= x.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: (3 + b_3) <= x_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Have: (b_3 = b_1) /\ (x_10 = (3 * (x_10 / 3))).
    Have: (1 + a_1) = a.
    Have: (2 + b_1) = b.
  }
  Else {
    Let x_11 = 3 + a_2 + b_2.
    Have: (b_3 = b_2) /\ (x_11 = (3 * (x_11 / 3))).
    Have: (2 + a_2) = a.
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (x_1 = a) \/ (x_1 = b).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= (a + x_1).
  (* Invariant *)
  Have: (x_1 % 3) = (b % 3).
  (* Invariant *)
  Have: (x_1 % 2) = (b % 2).
  (* Invariant *)
  Have: a <= x_2.
}
Prove: (b + (3 * (a / 3))) = (2 * a).
Prover Z3 4.8.12 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (30ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (23ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 24):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = 1 + i.
Let x_5 = b % 3.
Let x_6 = i % 2.
Let x_7 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_2 = b_3).
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_7 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_6))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_4 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: ((3 + x) / 3) = x_4.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (x_4 % 3) = x_5.
  (* Invariant *)
  Have: (x_4 % 2) = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_1 / 3)) = x_3.
}
Prove: (x_1 % 3) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (30ms) (75811)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 25):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = x_1 % 3.
Let x_3 = b % 3.
Let x_4 = 2 * i.
Let x_5 = 2 + x_4.
Let x_6 = 1 + i.
Let x_7 = i % 2.
Let x_8 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_6) /\ is_sint32(x_8) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_4 = b_3).
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_8 / 3)) = x_4.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_7))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_6 = b) \/ (x_5 = b).
  (* Invariant *)
  Have: ((3 + x) / 3) = x_6.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (x_6 % 3) = x_3.
  (* Invariant *)
  Have: (x_6 % 2) = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_1 / 3)) = x_5.
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: x_2 = 0.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (20ms) (59352)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 27):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = 1 + i.
Let x_5 = i % 2.
Let x_6 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_2 = b_3).
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_5 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_6 / 3)) = x_2.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_5))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_4 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: ((3 + x) / 3) = x_4.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_1 / 3)) = x_3.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
}
Prove: (x_3 % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (59321)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (13ms) (215)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 28):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 3 * i.
Let x_3 = 3 + x_2 - b.
Let x_4 = 1 + i.
Let x_5 = x_4 % 2.
Let x_6 = i % 2.
Let x_7 = x_2 - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_7) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x = b_3).
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_6 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_7 / 3)) = x.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_6))).
  (* Invariant *)
  Have: x_2 <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_2). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_2). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_4 = b) \/ (x_1 = b).
  (* Invariant *)
  Have: ((3 + x_2) / 3) = x_4.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: x_5 = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_3 / 3)) = x_1.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
}
Prove: (x_3 % 2) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (60937)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 29):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = 1 + i.
Let x_3 = x_2 % 2.
Let x_4 = 2 * i.
Let x_5 = 2 + x_4.
Let x_6 = 3 + x.
Let x_7 = i % 2.
Let x_8 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_4 = b_3).
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_8 / 3)) = x_4.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_7.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i_2 % 2) = x_7))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_2 = b) \/ (x_5 = b).
  (* Invariant *)
  Have: (x_6 / 3) = x_2.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_1 / 3)) = x_5.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = x_3.
}
Prove: (x_6 % 2) = (i_1 % 2).
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (65336)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 32):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 3 + x - b.
Let x_3 = 1 + i.
Let x_4 = x_3 % 2.
Let x_5 = 2 * i.
Let x_6 = 2 + x_5.
Let x_7 = i % 2.
Let x_8 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_5 = b_3).
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_8 / 3)) = x_5.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_7))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_3 = b) \/ (x_6 = b).
  (* Invariant *)
  Have: (x_1 / 3) = x_3.
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: x_4 = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_2 / 3)) = x_6.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((x_1 % 2) = (i_1 % 2)))).
}
Prove: x_1 <= (2 * b).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (57664)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 39):
Let x = a / 3.
Let x_1 = 3 * x.
Let x_2 = 3 * a.
Let x_3 = (-3) * x.
Let x_4 = x_2 - x_1.
Let x_5 = -x.
Let x_6 = a - x.
Let x_7 = x_6 % 2.
Let x_8 = 2 * a.
Let x_9 = (-2) * x.
Let x_10 = x_8 - x_1.
Let x_11 = 2 * x.
Let x_12 = a - 1 - x.
Let x_13 = x_12 % 2.
Let x_14 = x_2 - 3 - b_2 - x_1.
Let x_15 = 1 + b_2 + x.
Let x_16 = 2 + b_2 + x_11.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_6) /\ is_sint32(x_10) /\ is_sint32(x_12) /\
      is_sint32(x_14).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_15 = a) \/ (x_16 = x_8).
  (* Invariant *)
  Have: x_16 <= x_8.
  (* Invariant *)
  Have: (x_12 % 3) = 0.
  (* Invariant *)
  Have: x_13 = (b_2 % 2).
  (* Invariant *)
  Have: a <= x_15.
  (* Invariant *)
  Have: (2 + b_2 + x_11 + (x_14 / 3)) = x_8.
  (* Invariant *)
  Have: (b_2 % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 3) = 0.
  (* Invariant *)
  Have: ((x_8 - 2 - x_11) % 3) = 0.
  (* Invariant *)
  Have: (x_14 % 2) = x_13.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i + x) <= a) -> (x_13 = (i % 2)))).
  (* Invariant *)
  Have: x_2 <= (3 + (2 * b_2) + x_1).
  (* Invariant *)
  Have: a <= (1 + n + x).
  (* Invariant *)
  Have: x < a.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: (3 + b_2 + x_1) <= x_2.
  (* Then *)
  Have: a <= (n + x).
  If tmp_0 != 0
  Then {
    Let x_17 = 1 + a_1.
    Let x_18 = 3 * (x_17 / 3).
    Let x_19 = 2 * a_1.
    Have: (x_17 = a) /\ ((b + x_18) = x_19) /\ ((b_2 + x_18) = x_19).
  }
  Else {
    Let x_20 = 2 + a_2.
    Let x_21 = 3 * (x_20 / 3).
    Let x_22 = 3 + (2 * a_2).
    Have: (x_20 = a) /\ ((b_1 + x_21) = x_22) /\ ((b_2 + x_21) = x_22).
  }
  (* Invariant *)
  Have: (x = 0) \/ (x_11 = a).
  (* Invariant *)
  Have: (x + (x_4 / 3)) = a.
  (* Invariant *)
  Have: (-2) <= a.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_10 % 2) = x_7.
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: (x_10 % 3) = 0.
  (* Invariant *)
  Have: (a % 3) = 0.
  (* Invariant *)
  Have: ((x_8 - x_11) % 3) = 0.
  (* Invariant *)
  Have: x_7 = (a % 2).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((i + x) < a) -> ((x_4 % 2) = (i % 2)))).
  (* Invariant *)
  Have: x_1 <= a.
}
Prove: x_1 <= x_8.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (20ms) (40766)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (4ms) (89)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0012/003_merged.c, line 40):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 3 + x - b.
Let x_3 = 1 + i.
Let x_4 = x_3 % 2.
Let x_5 = 2 * i.
Let x_6 = 2 + x_5.
Let x_7 = i % 2.
Let x_8 = x - b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (i = b_3) \/ (x_5 = b_3).
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (i % 3) = 0.
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (b_3 + (x_8 / 3)) = x_5.
  (* Invariant *)
  Have: (b_3 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_8 % 2) = x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i_1 % 2) = x_7))).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (x_3 = b) \/ (x_6 = b).
  (* Invariant *)
  Have: (x_1 / 3) = x_3.
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: x_4 = (b % 2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (b + (x_2 / 3)) = x_6.
  (* Invariant *)
  Have: (b % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((x_1 % 2) = (i_1 % 2)))).
  (* Invariant *)
  Have: x_1 <= (2 * b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= b.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (20ms) (39943)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (6ms) (71)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0012/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 41) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0012/003_merged.c, line 41) (2/2):
Call Result at line 46
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0012/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0012/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
