[kernel] Parsing out/003_0007/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0007/003_merged.c:49: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0007/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 62 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_9_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_8_preserved (Qed 20ms) (Z3)
[wp] Proved goals:   60 / 62
  Qed:              47
  Alt-Ergo 2.5.4:   12 (4ms-28ms-81ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 15):
Let x = 3 * i.
Let x_1 = -b.
Let x_2 = x - b.
Let x_3 = i % 2.
Let x_4 = b % 3.
Let x_5 = x_2 % 3.
Let x_6 = i % 3.
Let x_7 = 2 * n.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(2 + b) /\ is_sint32(x_2) /\
      is_sint32(1 + x - b).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: b <= (2 * i).
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_4 = (2 * x_6).
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: x <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x <= (b + x_7).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0).
  (* Invariant *)
  Have: (x_4 + x_5) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b) /\ ((b + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
}
Prove: i <= (1 + b).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (35386)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 16):
Let x = 3 * i.
Let x_1 = -b.
Let x_2 = x - b.
Let x_3 = i % 2.
Let x_4 = b % 3.
Let x_5 = x_2 % 3.
Let x_6 = i % 3.
Let x_7 = 2 * n.
Let x_8 = 2 * i.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + b) /\
      is_sint32(1 + i) /\ is_sint32(x_2) /\ is_sint32(2 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: b <= x_8.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_4 = (2 * x_6).
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: x <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x <= (b + x_7).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0).
  (* Invariant *)
  Have: (x_4 + x_5) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b) /\ ((b + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
}
Prove: b <= (1 + x_8).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (10ms) (35126)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (4ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 18):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = x_1 - b_1.
Let x_3 = i % 2.
Let x_4 = b_1 % 3.
Let x_5 = x_2 % 3.
Let x_6 = i % 3.
Let x_7 = 2 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: b_1 <= (2 * i).
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: b_1 <= x_7.
  (* Invariant *)
  Have: x_4 = (2 * x_6).
  (* Invariant *)
  Have: x_3 = (b_1 % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b_1).
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: x_1 <= (b_1 + x_7).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0).
  (* Invariant *)
  Have: (x_4 + x_5) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: ((x = n) -> ((a + b) = (3 * n))).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: b <= (1 + a + i).
}
Prove: b <= (3 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (45101)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (7ms) (103)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 19):
Let x = 3 * i.
Let x_1 = 1 + i.
Let x_2 = x - b_1.
Let x_3 = i % 2.
Let x_4 = b_1 % 3.
Let x_5 = x_2 % 3.
Let x_6 = i % 3.
Let x_7 = 2 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: b_1 <= (2 * i).
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: b_1 <= x_7.
  (* Invariant *)
  Have: x_4 = (2 * x_6).
  (* Invariant *)
  Have: x_3 = (b_1 % 2).
  (* Invariant *)
  Have: x <= (2 * b_1).
  (* Invariant *)
  Have: 0 <= b_1.
  (* Invariant *)
  Have: x <= (b_1 + x_7).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0).
  (* Invariant *)
  Have: (x_4 + x_5) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: ((x_1 = n) -> ((a + b) = (3 * n))).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: b <= (1 + a + i).
  (* Invariant *)
  Have: b <= (3 + x).
}
Prove: b <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (45252)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (9ms) (117)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 21):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * i.
Let x_3 = x - b_2.
Let x_4 = i % 2.
Let x_5 = b_2 % 3.
Let x_6 = x_3 % 3.
Let x_7 = i % 3.
Let x_8 = 1 + i.
Let x_9 = 3 + x - a.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_8) /\ is_sint32(x_3) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_2.
  (* Invariant *)
  Have: b_2 <= x_2.
  (* Invariant *)
  Have: b_2 <= x.
  (* Invariant *)
  Have: b_2 <= x_1.
  (* Invariant *)
  Have: x_5 = (2 * x_7).
  (* Invariant *)
  Have: x_4 = (b_2 % 2).
  (* Invariant *)
  Have: x <= (2 * b_2).
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: x <= (b_2 + x_1).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0).
  (* Invariant *)
  Have: (x_5 + x_6) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x). Have: (1 + x) = (a + b). }
  Else { Have: (b_2 = b_1) /\ ((a_2 + b_1) = x). Have: (2 + x) = (a + b_1). }
  (* Invariant *)
  Have: a <= (2 + x_2).
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (3 + x) <= (a + x_1).
}
Prove: (x_9 % 3) = (2 * (x_8 % 3)).
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 22):
Let x = 3 * i.
Let x_1 = 3 + x - a.
Let x_2 = 1 + i.
Let x_3 = 2 * n.
Let x_4 = 2 * i.
Let x_5 = x - b_2.
Let x_6 = i % 2.
Let x_7 = b_2 % 3.
Let x_8 = x_5 % 3.
Let x_9 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_2.
  (* Invariant *)
  Have: b_2 <= x_4.
  (* Invariant *)
  Have: b_2 <= x.
  (* Invariant *)
  Have: b_2 <= x_3.
  (* Invariant *)
  Have: x_7 = (2 * x_9).
  (* Invariant *)
  Have: x_6 = (b_2 % 2).
  (* Invariant *)
  Have: x <= (2 * b_2).
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: x <= (b_2 + x_3).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_8 = 0).
  (* Invariant *)
  Have: (x_7 + x_8) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x). Have: (1 + x) = (a + b). }
  Else { Have: (b_2 = b_1) /\ ((a_2 + b_1) = x). Have: (2 + x) = (a + b_1). }
  (* Invariant *)
  Have: a <= (2 + x_4).
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (3 + x) <= (a + x_3).
  (* Invariant *)
  Have: (x_1 % 3) = (2 * (x_2 % 3)).
}
Prove: (x_1 % 2) = (x_2 % 2).
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 23):
Let x = 1 + i.
Let x_1 = 2 * n.
Let x_2 = 3 * i.
Let x_3 = 3 + x_2.
Let x_4 = 2 * i.
Let x_5 = x_2 - b_3.
Let x_6 = i % 2.
Let x_7 = b_3 % 3.
Let x_8 = x_5 % 3.
Let x_9 = i % 3.
Let x_10 = 2 * b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(3 + x_2 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: x_7 = (2 * x_9).
  (* Invariant *)
  Have: x_6 = (b_3 % 2).
  (* Invariant *)
  Have: x_2 <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x_2 <= (b_3 + x_1).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_8 = 0).
  (* Invariant *)
  Have: (x_7 + x_8) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_2). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_2). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_4).
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (b % 3) = (2 * (x % 3)).
  (* Invariant *)
  Have: (x % 2) = (b % 2).
}
Prove: (x_3 <= x_10) \/ (x_10 <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (20ms) (38744)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (6ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 24):
Let x = 3 * i.
Let x_1 = 2 * b.
Let x_2 = 1 + i.
Let x_3 = 1 + b.
Let x_4 = 2 * n.
Let x_5 = 2 * i.
Let x_6 = -b.
Let x_7 = x - b.
Let x_8 = i % 2.
Let x_9 = b % 3.
Let x_10 = x_7 % 3.
Let x_11 = i % 3.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_7) /\ is_sint32(2 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: x_9 = (2 * x_11).
  (* Invariant *)
  Have: x_8 = (b % 2).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x <= (b + x_4).
  (* Invariant *)
  Have: x_10 = x_11.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_10 = 0).
  (* Invariant *)
  Have: (x_9 + x_10) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = x_8.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b) /\ ((b + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: b <= (1 + x_5).
  (* Invariant *)
  Have: b <= (2 + x).
  (* Invariant *)
  Have: b < x_4.
  (* Invariant *)
  Have: (x_3 % 3) = (2 * (x_2 % 3)).
  (* Invariant *)
  Have: (x_2 % 2) = (x_3 % 2).
  (* Invariant *)
  Have: (x < x_1) \/ (x_1 <= (1 + x)).
}
Prove: x < x_1.
Prover Z3 4.8.12 returns Valid (Qed:18ms) (80ms) (193507)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:18ms) (47ms) (827)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 27):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 1 + i.
Let x_3 = 2 * n.
Let x_4 = 2 * i.
Let x_5 = x - b_3.
Let x_6 = i % 2.
Let x_7 = b_3 % 3.
Let x_8 = x_5 % 3.
Let x_9 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_5) /\
      is_sint32(3 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: b_3 <= x_3.
  (* Invariant *)
  Have: x_7 = (2 * x_9).
  (* Invariant *)
  Have: x_6 = (b_3 % 2).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x <= (b_3 + x_3).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_8 = 0).
  (* Invariant *)
  Have: (x_7 + x_8) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = x_6.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_4).
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (b % 3) = (2 * (x_2 % 3)).
  (* Invariant *)
  Have: (x_2 % 2) = (b % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
}
Prove: x_1 <= (b + x_3).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (38956)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (6ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 29):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 2 * n.
Let x_3 = 1 + i.
Let x_4 = x_3 % 3.
Let x_5 = 2 * i.
Let x_6 = x - b_3.
Let x_7 = i % 2.
Let x_8 = b_3 % 3.
Let x_9 = x_6 % 3.
Let x_10 = i % 3.
Let x_11 = 3 + x - b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_6) /\
      is_sint32(x_11).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: x_8 = (2 * x_10).
  (* Invariant *)
  Have: x_7 = (b_3 % 2).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x <= (b_3 + x_2).
  (* Invariant *)
  Have: x_9 = x_10.
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_9 = 0).
  (* Invariant *)
  Have: (x_8 + x_9) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = x_7.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_5).
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (b % 3) = (2 * x_4).
  (* Invariant *)
  Have: (x_3 % 2) = (b % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_1 <= (b + x_2).
}
Prove: (x_11 % 3) = x_4.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (76ms) (855)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 30):
Let x = 3 * i.
Let x_1 = 3 + x - b.
Let x_2 = x_1 % 3.
Let x_3 = 1 + i.
Let x_4 = x_3 % 3.
Let x_5 = 3 + x.
Let x_6 = 2 * n.
Let x_7 = b % 3.
Let x_8 = 2 * i.
Let x_9 = x - b_3.
Let x_10 = i % 2.
Let x_11 = b_3 % 3.
Let x_12 = x_9 % 3.
Let x_13 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_9) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_8.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: b_3 <= x_6.
  (* Invariant *)
  Have: x_11 = (2 * x_13).
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x <= (b_3 + x_6).
  (* Invariant *)
  Have: x_12 = x_13.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_12 = 0).
  (* Invariant *)
  Have: (x_11 + x_12) = 0.
  (* Invariant *)
  Have: (x_9 % 2) = x_10.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_8).
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: x_7 = (2 * x_4).
  (* Invariant *)
  Have: (x_3 % 2) = (b % 2).
  (* Invariant *)
  Have: x_5 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_5 <= (b + x_6).
  (* Invariant *)
  Have: x_2 = x_4.
}
Prove: (x_7 = 0) \/ (x_2 = 0).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (81ms) (965)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 31):
Let x = b % 3.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1 - b.
Let x_3 = x_2 % 3.
Let x_4 = 1 + i.
Let x_5 = x_4 % 3.
Let x_6 = 3 + x_1.
Let x_7 = 2 * n.
Let x_8 = 2 * i.
Let x_9 = x_1 - b_3.
Let x_10 = i % 2.
Let x_11 = b_3 % 3.
Let x_12 = x_9 % 3.
Let x_13 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_8.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: b_3 <= x_7.
  (* Invariant *)
  Have: x_11 = (2 * x_13).
  (* Invariant *)
  Have: x_10 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x_1 <= (b_3 + x_7).
  (* Invariant *)
  Have: x_12 = x_13.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_12 = 0).
  (* Invariant *)
  Have: (x_11 + x_12) = 0.
  (* Invariant *)
  Have: (x_9 % 2) = x_10.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_8).
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x = (2 * x_5).
  (* Invariant *)
  Have: (x_4 % 2) = (b % 2).
  (* Invariant *)
  Have: x_6 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_6 <= (b + x_7).
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: (x = 0) \/ (x_3 = 0).
}
Prove: (x + x_3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:26ms) (20ms) (56162)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (11ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 32):
Let x = b % 3.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1 - b.
Let x_3 = x_2 % 3.
Let x_4 = 1 + i.
Let x_5 = x_4 % 3.
Let x_6 = 3 + x_1.
Let x_7 = 2 * n.
Let x_8 = x_4 % 2.
Let x_9 = 2 * i.
Let x_10 = x_1 - b_3.
Let x_11 = i % 2.
Let x_12 = b_3 % 3.
Let x_13 = x_10 % 3.
Let x_14 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_10) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_9.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: b_3 <= x_7.
  (* Invariant *)
  Have: x_12 = (2 * x_14).
  (* Invariant *)
  Have: x_11 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x_1 <= (b_3 + x_7).
  (* Invariant *)
  Have: x_13 = x_14.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_13 = 0).
  (* Invariant *)
  Have: (x_12 + x_13) = 0.
  (* Invariant *)
  Have: (x_10 % 2) = x_11.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_9).
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x = (2 * x_5).
  (* Invariant *)
  Have: x_8 = (b % 2).
  (* Invariant *)
  Have: x_6 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_6 <= (b + x_7).
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: (x = 0) \/ (x_3 = 0).
  (* Invariant *)
  Have: (x + x_3) = 0.
}
Prove: (x_2 % 2) = x_8.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (20ms) (55132)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (63ms) (801)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 34):
Let x = 3 * i_1.
Let x_1 = 3 + x - b.
Let x_2 = 1 + i_1.
Let x_3 = x_2 % 2.
Let x_4 = b % 3.
Let x_5 = x_1 % 3.
Let x_6 = x_2 % 3.
Let x_7 = 3 + x.
Let x_8 = 2 * n.
Let x_9 = 2 * i_1.
Let x_10 = x - b_3.
Let x_11 = i_1 % 2.
Let x_12 = b_3 % 3.
Let x_13 = x_10 % 3.
Let x_14 = i_1 % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_10) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_1 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_9.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: b_3 <= x_8.
  (* Invariant *)
  Have: x_12 = (2 * x_14).
  (* Invariant *)
  Have: x_11 = (b_3 % 2).
  (* Invariant *)
  Have: x <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x <= (b_3 + x_8).
  (* Invariant *)
  Have: x_13 = x_14.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_13 = 0).
  (* Invariant *)
  Have: (x_12 + x_13) = 0.
  (* Invariant *)
  Have: (x_10 % 2) = x_11.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i_1 <= n.
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i_1 < b.
  (* Invariant *)
  Have: b <= (2 + x_9).
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: b <= x_8.
  (* Invariant *)
  Have: x_4 = (2 * x_6).
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: x_7 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_7 <= (b + x_8).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0).
  (* Invariant *)
  Have: (x_4 + x_5) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = x_3.
}
Prove: (i <= b) /\ ((b + i) <= x_7).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (20ms) (55847)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (16ms) (205)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 35):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1.
Let x_3 = 3 + x_1 - b.
Let x_4 = x % 2.
Let x_5 = b % 3.
Let x_6 = x_3 % 3.
Let x_7 = x % 3.
Let x_8 = 2 * n.
Let x_9 = 2 * i.
Let x_10 = x_1 - b_3.
Let x_11 = i % 2.
Let x_12 = b_3 % 3.
Let x_13 = x_10 % 3.
Let x_14 = i % 3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_10) /\ is_sint32(x_3).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x_9.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: b_3 <= x_8.
  (* Invariant *)
  Have: x_12 = (2 * x_14).
  (* Invariant *)
  Have: x_11 = (b_3 % 2).
  (* Invariant *)
  Have: x_1 <= (2 * b_3).
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: x_1 <= (b_3 + x_8).
  (* Invariant *)
  Have: x_13 = x_14.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_13 = 0).
  (* Invariant *)
  Have: (x_12 + x_13) = 0.
  (* Invariant *)
  Have: (x_10 % 2) = x_11.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= n.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x_9).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: b <= x_8.
  (* Invariant *)
  Have: x_5 = (2 * x_7).
  (* Invariant *)
  Have: x_4 = (b % 2).
  (* Invariant *)
  Have: x_2 <= (2 * b).
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: x_2 <= (b + x_8).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0).
  (* Invariant *)
  Have: (x_5 + x_6) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = x_4.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) ->
      ((i_2 <= b) /\ ((b + i_2) <= x_2)))).
}
Prove: x = i_1.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (20ms) (57927)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0007/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0007/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0007/003_merged.c, line 44) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0007/003_merged.c, line 44) (2/2):
Call Result at line 49
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0007/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0007/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
