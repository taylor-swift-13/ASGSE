[kernel] Parsing out/003_0002/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0002/003_merged.c:42: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0002/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 48 goals scheduled
[wp] Proved goals:   48 / 48
  Qed:              36
  Alt-Ergo 2.5.4:    9 (0.60ms-7ms-17ms)
  Z3 4.8.12:         3 (10ms-90ms-250ms)
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = 2 * i.
Let x_2 = 2 * b_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_1 <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: i < (a + b).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (37087)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (7ms) (74)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 15):
Let x = 3 * i.
Let x_1 = 2 * i.
Let x_2 = 2 * b.
Let x_3 = -b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + b) /\
      is_sint32(1 + i) /\ is_sint32(x - b) /\ is_sint32(2 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_1 <= (b + n).
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: b <= (1 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (34128)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (0.60ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 17):
Let x = 2 * i.
Let x_1 = 3 * i.
Let x_2 = 2 * b_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x_1 - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: (x_1 <= x_2) \/ (x_2 <= x_1).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_1 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: i < (a + b).
  (* Invariant *)
  Have: b <= (2 + x).
}
Prove: (b <= a) \/ (a <= b).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (36072)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (5ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 18):
Let x = 2 * b.
Let x_1 = 3 * i.
Let x_2 = 2 * i.
Let x_3 = -b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(2 + b) /\ is_sint32(x_1 - b) /\
      is_sint32(1 + x_1 - b).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_1 <= x) \/ (x <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_1 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_2 <= (b + n).
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x < x_1) \/ (x_1 <= (1 + x)).
}
Prove: i <= (1 + b).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (34676)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (5ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 21):
Let x = 3 * i_1.
Let x_1 = 3 + x.
Let x_2 = 2 * b.
Let x_3 = 2 * i_1.
Let x_4 = 2 * b_3.
Let x_5 = 1 + i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_5) /\ is_sint32(x - b_3) /\
      is_sint32(3 + x - b).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_3 <= x_3.
  (* Invariant *)
  Have: (x <= x_4) \/ (x_4 <= x).
  (* Invariant *)
  Have: i_1 <= b_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 <= i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 = i_1))).
  (* Invariant *)
  Have: x_3 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i_1 + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: b <= (2 + x_3).
  (* Invariant *)
  Have: (x_1 <= x_2) \/ (x_2 <= x_1).
  (* Invariant *)
  Have: i_1 < b.
}
Prove: i <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (37208)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 22):
Let x = 1 + i_1.
Let x_1 = 3 * i_1.
Let x_2 = 3 + x_1.
Let x_3 = 2 * b.
Let x_4 = 2 * i_1.
Let x_5 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1 - b_3) /\
      is_sint32(3 + x_1 - b).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (x_1 <= x_5) \/ (x_5 <= x_1).
  (* Invariant *)
  Have: i_1 <= b_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 <= i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 = i_1))).
  (* Invariant *)
  Have: x_4 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i_1 + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: b <= (2 + x_4).
  (* Invariant *)
  Have: (x_2 <= x_3) \/ (x_3 <= x_2).
  (* Invariant *)
  Have: i_1 < b.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_1) -> ((0 <= i_5) -> (i_5 <= x))).
}
Prove: ((3 + x_1 - (3 * i)) % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (45499)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (16ms) (195)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 24):
Let x = 3 * i.
Let x_1 = 1 + i.
Let x_2 = 3 + x.
Let x_3 = 2 * b.
Let x_4 = 2 * i.
Let x_5 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x - b_3) /\
      is_sint32(3 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (x <= x_5) \/ (x_5 <= x).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_4 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= (2 + x_4).
  (* Invariant *)
  Have: (x_2 <= x_3) \/ (x_3 <= x_2).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((3 + x - (3 * i_4)) % 3) = 0))).
}
Prove: exists i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (x_1 = i_4))).
Prover Z3 4.8.12 returns Valid (Qed:18ms) (250ms) (280951)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 26):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 2 * b.
Let x_3 = 2 * i.
Let x_4 = b + n.
Let x_5 = -b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + b) /\
      is_sint32(x) /\ is_sint32(x_1 - b) /\ is_sint32(2 + x_1 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (x_1 <= x_2) \/ (x_2 <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= (1 + x_3).
  (* Invariant *)
  Have: (x_1 < x_2) \/ (x_2 <= (1 + x_1)).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x = i_4))).
}
Prove: x_3 < x_4.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (36220)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (6ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 27):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 2 * b.
Let x_3 = i + n.
Let x_4 = 2 * i.
Let x_5 = -b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(2 + b) /\ is_sint32(x_1 - b) /\
      is_sint32(1 + x_1 - b).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: (x_1 <= x_2) \/ (x_2 <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_4 <= (b + n).
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x_2 < x_1) \/ (x_1 <= (1 + x_2)).
  (* Invariant *)
  Have: i <= (1 + b).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x = i_4))).
}
Prove: b < x_3.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (36542)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (5ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 28):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 1 + i.
Let x_3 = 3 * i.
Let x_4 = 3 + x_3.
Let x_5 = 2 * b.
Let x_6 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_3 - b_3) /\
      is_sint32(3 + x_3 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: (x_3 <= x_6) \/ (x_6 <= x_3).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_3 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_3). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_3). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x_4 <= x_5) \/ (x_5 <= x_4).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_3 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x_2 = i_4))).
  (* Invariant *)
  Have: x_1 <= (b + n).
  (* Invariant *)
  Have: b <= (1 + i + n).
}
Prove: (0 <= b) /\ (b <= x_4).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (20ms) (40004)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (17ms) (174)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 33):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = 1 + i.
Let x_5 = 2 * b.
Let x_6 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x - b_3) /\
      is_sint32(3 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: (x <= x_6) \/ (x_6 <= x).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_2 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: (x_1 <= x_5) \/ (x_5 <= x_1).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_4))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x_4 = i_4))).
  (* Invariant *)
  Have: x_3 <= (b + n).
  (* Invariant *)
  Have: b <= (1 + i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
}
Prove: exists i_5 : Z. 0 <= i_5.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (32159)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 33):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:0.78ms) (10ms) (23846)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0002/003_merged.c, line 37) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0002/003_merged.c, line 37) (2/2):
Call Result at line 42
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0002/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0002/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
