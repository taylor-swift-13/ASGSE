[kernel] Parsing out/003_0002/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0002/003_merged.c:46: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0002/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 56 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_5_preserved (Qed 22ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_10_preserved (Qed 31ms) (Z3)
[wp] Proved goals:   54 / 56
  Qed:              40
  Alt-Ergo 2.5.4:   11
  Z3 4.8.12:         3 (10ms-163ms-470ms)
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = 2 * i.
Let x_2 = x - b_1.
Let x_3 = i % 2.
Let x_4 = 2 * b_1.
Let x_5 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_1) \/ (x_1 = b_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: x_3 = (b_1 % 2).
  (* Invariant *)
  Have: (x <= x_4) \/ (x_4 <= x).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_1 <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: ((a + b) = x_5) \/ ((1 + a + i) = b) \/ ((1 + b + i) = a).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (470ms) (1365108)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 15):
Let x = a + b.
Let x_1 = 1 + i.
Let x_2 = 3 * i.
Let x_3 = 2 * i.
Let x_4 = x_2 - b_1.
Let x_5 = i % 2.
Let x_6 = 2 * b_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x_3.
  (* Invariant *)
  Have: x_5 = (b_1 % 2).
  (* Invariant *)
  Have: (x_2 <= x_6) \/ (x_6 <= x_2).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_2 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_3 <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_2.
    Have: (1 + x_2) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_2.
    Have: (2 + x_2) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (x = x_1) \/ ((1 + a + i) = b) \/ ((1 + b + i) = a).
}
Prove: i < x.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (42662)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (8ms) (94)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 16):
Let x = 2 * i.
Let x_1 = 1 + x.
Let x_2 = 3 * i.
Let x_3 = -b.
Let x_4 = x_2 - b.
Let x_5 = i % 2.
Let x_6 = 2 * b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + b) /\
      is_sint32(1 + i) /\ is_sint32(x_4) /\ is_sint32(2 + x_2 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b) \/ (x = b).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: x_5 = (b % 2).
  (* Invariant *)
  Have: (x_2 <= x_6) \/ (x_6 <= x_2).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_2 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x <= (b + n).
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (i = (-1)) \/ (i = b) \/ (x_1 = b).
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (35659)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 18):
Let x = 2 * i.
Let x_1 = a + b.
Let x_2 = 1 + i.
Let x_3 = 3 * i.
Let x_4 = x_3 - b_1.
Let x_5 = i % 2.
Let x_6 = 2 * b_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_1) \/ (x = b_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: x_5 = (b_1 % 2).
  (* Invariant *)
  Have: (x_3 <= x_6) \/ (x_6 <= x_3).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_3 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_3.
    Have: (1 + x_3) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_3.
    Have: (2 + x_3) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (x_1 = x_2) \/ ((1 + a + i) = b) \/ ((1 + b + i) = a).
  (* Invariant *)
  Have: i < x_1.
  (* Invariant *)
  Have: b <= (2 + x).
}
Prove: (x_2 % 2) = (b % 2).
Prover Z3 4.8.12 returns Timeout (Qed:22ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:22ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 19):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = a + b.
Let x_3 = 3 * i.
Let x_4 = x_3 - b_1.
Let x_5 = i % 2.
Let x_6 = 2 * b_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_1) \/ (x_1 = b_1).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: x_5 = (b_1 % 2).
  (* Invariant *)
  Have: (x_3 <= x_6) \/ (x_6 <= x_3).
  (* Invariant *)
  Have: i <= b_1.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_3 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_1 <= (b_1 + n).
  (* Invariant *)
  Have: b_1 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_3.
    Have: (1 + x_3) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_3.
    Have: (2 + x_3) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (x_2 = x) \/ ((1 + a + i) = b) \/ ((1 + b + i) = a).
  (* Invariant *)
  Have: i < x_2.
  (* Invariant *)
  Have: b <= (2 + x_1).
  (* Invariant *)
  Have: (x % 2) = (b % 2).
}
Prove: (b <= a) \/ (a <= b).
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (38085)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (0.80ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 20):
Let x = 2 * b.
Let x_1 = 3 * i.
Let x_2 = 2 + b.
Let x_3 = 1 + i.
Let x_4 = 2 * i.
Let x_5 = 1 + b.
Let x_6 = -b.
Let x_7 = x_1 - b.
Let x_8 = i % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_7) /\
      is_sint32(1 + x_1 - b).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b) \/ (x_4 = b).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_4.
  (* Invariant *)
  Have: x_8 = (b % 2).
  (* Invariant *)
  Have: (x_1 <= x) \/ (x <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: (x_7 % 2) = x_8.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x_1 - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_4 <= (b + n).
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (i = (-1)) \/ (x_4 = b) \/ (x_5 = i).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x_2 % 2) = (x_3 % 2).
  (* Invariant *)
  Have: (x < x_1) \/ (x_1 <= (1 + x)).
}
Prove: i <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (36556)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (5ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 23):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 2 * b.
Let x_3 = 1 + i.
Let x_4 = x_3 % 2.
Let x_5 = 2 * i.
Let x_6 = 2 + x_5.
Let x_7 = x - b_3.
Let x_8 = i % 2.
Let x_9 = 2 * b_3.
Let x_10 = 3 + x - b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_7) /\
      is_sint32(x_10).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_3) \/ (x_5 = b_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: x_8 = (b_3 % 2).
  (* Invariant *)
  Have: (x <= x_9) \/ (x_9 <= x).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_7 % 2) = x_8.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_5 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i = (-1)) \/ (x_3 = b) \/ (x_6 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: x_4 = (b % 2).
  (* Invariant *)
  Have: (x_1 <= x_2) \/ (x_2 <= x_1).
  (* Invariant *)
  Have: i < b.
}
Prove: (x_10 % 2) = x_4.
Prover Z3 4.8.12 returns Timeout (Qed:31ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:31ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 24):
Let x = 3 * i_1.
Let x_1 = 3 + x - b.
Let x_2 = 1 + i_1.
Let x_3 = x_2 % 2.
Let x_4 = 3 + x.
Let x_5 = 2 * b.
Let x_6 = 2 * i_1.
Let x_7 = 2 + x_6.
Let x_8 = x - b_3.
Let x_9 = i_1 % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i_1 = 0) \/ (i_1 = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_3 <= x_6.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x <= x_10) \/ (x_10 <= x).
  (* Invariant *)
  Have: i_1 <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 <= i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 = i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 = i_1))).
  (* Invariant *)
  Have: x_6 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i_1 + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i_1 = (-1)) \/ (x_2 = b) \/ (x_7 = b).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: (x_4 <= x_5) \/ (x_5 <= x_4).
  (* Invariant *)
  Have: i_1 < b.
  (* Invariant *)
  Have: (x_1 % 2) = x_3.
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (39368)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (4ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 25):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1 - b.
Let x_3 = x % 2.
Let x_4 = 3 + x_1.
Let x_5 = 2 * b.
Let x_6 = 2 * i.
Let x_7 = 2 + x_6.
Let x_8 = x_1 - b_3.
Let x_9 = i % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_6.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x_1 <= x_10) \/ (x_10 <= x_1).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i) -> (i_3 = i))).
  (* Invariant *)
  Have: x_6 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i = (-1)) \/ (x = b) \/ (x_7 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: (x_4 <= x_5) \/ (x_5 <= x_4).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x))).
}
Prove: x = i_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (70ms) (184066)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:22ms) (39ms) (545)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 26):
Let x = 1 + i_1.
Let x_1 = 3 * i_1.
Let x_2 = 3 + x_1 - b.
Let x_3 = x % 2.
Let x_4 = 3 + x_1.
Let x_5 = 2 * b.
Let x_6 = 2 * i_1.
Let x_7 = 2 + x_6.
Let x_8 = x_1 - b_3.
Let x_9 = i_1 % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: (i_1 = 0) \/ (i_1 = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_3 <= x_6.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x_1 <= x_10) \/ (x_10 <= x_1).
  (* Invariant *)
  Have: i_1 <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 <= i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 = i_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 = i_1))).
  (* Invariant *)
  Have: x_6 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i_1 + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x_1).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i_1 = (-1)) \/ (x = b) \/ (x_7 = b).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: (x_4 <= x_5) \/ (x_5 <= x_4).
  (* Invariant *)
  Have: i_1 < b.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_1) -> ((0 <= i_5) -> (i_5 <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i_1) -> ((0 <= i_5) -> (x = i_5))).
}
Prove: ((3 + x_1 - (3 * i)) % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:24ms) (70ms) (196436)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (39ms) (623)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 28):
Let x = 3 * i.
Let x_1 = 1 + i.
Let x_2 = 3 + x - b.
Let x_3 = x_1 % 2.
Let x_4 = 3 + x.
Let x_5 = 2 * b.
Let x_6 = 2 * i.
Let x_7 = 2 + x_6.
Let x_8 = x - b_3.
Let x_9 = i % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_6.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x <= x_10) \/ (x_10 <= x).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 <= i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (((x - (3 * i_4)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_6 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i = (-1)) \/ (x_1 = b) \/ (x_7 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_3 = (b % 2).
  (* Invariant *)
  Have: (x_4 <= x_5) \/ (x_5 <= x_4).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_2 % 2) = x_3.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (i_4 <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (x_1 = i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) ->
      (((3 + x - (3 * i_4)) % 3) = 0))).
}
Prove: exists i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (x_1 = i_4))).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (70ms) (185700)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (39ms) (516)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 30):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = -b.
Let x_3 = 2 + x_1 - b.
Let x_4 = x % 2.
Let x_5 = 2 * b.
Let x_6 = 1 + b.
Let x_7 = 2 * i.
Let x_8 = 1 + x_7.
Let x_9 = b + n.
Let x_10 = x_1 - b.
Let x_11 = i % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_6) /\
      is_sint32(x) /\ is_sint32(x_10) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b) \/ (x_7 = b).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: x_11 = (b % 2).
  (* Invariant *)
  Have: (x_1 <= x_5) \/ (x_5 <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: (x_10 % 2) = x_11.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_7 <= x_9.
  (* Invariant *)
  Have: b <= (i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (i = (-1)) \/ (i = b) \/ (x_8 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_8.
  (* Invariant *)
  Have: x_4 = (x_6 % 2).
  (* Invariant *)
  Have: (x_1 < x_5) \/ (x_5 <= (1 + x_1)).
  (* Invariant *)
  Have: (x_3 % 2) = x_4.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (x = i_5))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x = i_4))).
}
Prove: x_7 < x_9.
Prover Z3 4.8.12 returns Valid (Qed:25ms) (10ms) (38909)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:25ms) (6ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 31):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = -b.
Let x_3 = 1 + x_1 - b.
Let x_4 = x % 2.
Let x_5 = 1 + b.
Let x_6 = 2 * b.
Let x_7 = 2 + b.
Let x_8 = 2 * i.
Let x_9 = i + n.
Let x_10 = x_1 - b.
Let x_11 = i % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_10) /\ is_sint32(x_3).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b) \/ (x_8 = b).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b <= x_8.
  (* Invariant *)
  Have: x_11 = (b % 2).
  (* Invariant *)
  Have: (x_1 <= x_6) \/ (x_6 <= x_1).
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: (x_10 % 2) = x_11.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_8 <= (b + n).
  (* Invariant *)
  Have: b <= x_9.
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (i = (-1)) \/ (x_8 = b) \/ (x_5 = i).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (x_7 % 2) = x_4.
  (* Invariant *)
  Have: (x_6 < x_1) \/ (x_1 <= (1 + x_6)).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (x_3 % 2) = x_4.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (x = i_5))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_1 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x = i_4))).
}
Prove: b < x_9.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (39225)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (1ms) (59)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 32):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 1 + i.
Let x_3 = 3 * i.
Let x_4 = 3 + x_3 - b.
Let x_5 = x_2 % 2.
Let x_6 = 3 + x_3.
Let x_7 = 2 * b.
Let x_8 = x_3 - b_3.
Let x_9 = i % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_2) /\ is_sint32(x_8) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_3) \/ (x = b_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x_3 <= x_10) \/ (x_10 <= x_3).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x_3 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x_3).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_3). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_3). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i = (-1)) \/ (x_2 = b) \/ (x_1 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: x_5 = (b % 2).
  (* Invariant *)
  Have: (x_6 <= x_7) \/ (x_7 <= x_6).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_4 % 2) = x_5.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (x_2 = i_5))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x_3 - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x_2 = i_4))).
  (* Invariant *)
  Have: x_1 <= (b + n).
  (* Invariant *)
  Have: b <= (1 + i + n).
}
Prove: (0 <= b) /\ (b <= x_6).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (46838)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (22ms) (276)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 37):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 2 * i.
Let x_3 = 2 + x_2.
Let x_4 = 1 + i.
Let x_5 = 3 + x - b.
Let x_6 = x_4 % 2.
Let x_7 = 2 * b.
Let x_8 = x - b_3.
Let x_9 = i % 2.
Let x_10 = 2 * b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_8) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (i = 0) \/ (i = b_3) \/ (x_2 = b_3).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: x_9 = (b_3 % 2).
  (* Invariant *)
  Have: (x <= x_10) \/ (x_10 <= x).
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: (x_8 % 2) = x_9.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (((x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: x_2 <= (b_3 + n).
  (* Invariant *)
  Have: b_3 <= (i + n).
  (* Invariant *)
  Have: (0 <= b_3) /\ (b_3 <= x).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (i = (-1)) \/ (x_4 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: x_6 = (b % 2).
  (* Invariant *)
  Have: (x_1 <= x_7) \/ (x_7 <= x_1).
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: (x_5 % 2) = x_6.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_4))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (x_4 = i_5))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (((3 + x - (3 * i_5)) % 3) = 0))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 <= i) -> (x_4 = i_4))).
  (* Invariant *)
  Have: x_3 <= (b + n).
  (* Invariant *)
  Have: b <= (1 + i + n).
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
}
Prove: exists i_5 : Z. 0 <= i_5.
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (34421)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 37):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:0.73ms) (10ms) (23846)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0002/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0002/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0002/003_merged.c, line 41) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0002/003_merged.c, line 41) (2/2):
Call Result at line 46
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0002/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0002/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
