[kernel] Parsing out/0021_0006/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0006/0021_merged.c:53: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0006/0021_merged.c:31: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0006/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 54 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_established (Qed 0.78ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_10_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_13_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_21_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0021_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   49 / 54
  Qed:              35
  Alt-Ergo 2.5.4:   14
  Timeout:           5
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 16):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Goal *)
  When: (j <= i) /\ (i < k) /\ (j < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
}
Prove: 0 <= i.
Prover Z3 4.8.12 returns Timeout (Qed:0.78ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.78ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 19):
Let x = 2 * i_1.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_1) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
}
Prove: (2 * i) < j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (43450)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 20):
Let x = 2 * i_2.
Let x_1 = 2 * i_3.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i) /\ (i_1 < n) /\ (i <= i_2) /\ (i_2 < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < n) -> (0 <= i_4))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_5,i_4 : Z. ((0 <= i_5) -> ((i_5 < i_3) -> ((i_3 <= i_4) ->
      ((i_4 < n) -> (i_5 < i_4))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < n) -> (x_1 <= i_4))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. (0 <= i_4) /\ (i_4 < i_3) /\ ((2 * i_4) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((j <= i_4) -> ((i_4 < n) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. (0 <= i_4) /\ (i_4 < i_2) /\ ((2 * i_4) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_2) -> ((0 <= i_4) -> ((2 * i_4) < j))).
}
Prove: i < i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (39090)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 21):
Let x = 2 * i_1.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_1) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i_1) -> ((i_1 < i_3) -> ((0 <= i_4) ->
      ((i_3 < j) -> (i_4 < i_3))))).
}
Prove: (2 * i) < j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (45178)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (10ms) (82)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 22):
Let x = 2 * i.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i).
  (* Goal *)
  When: (j <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i) -> ((i < i_3) -> ((0 <= i_4) ->
      ((i_3 < j) -> (i_4 < i_3))))).
}
Prove: (2 + x) <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (39793)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (6ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 22):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Goal *)
  When: (j <= i) /\ (i < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: ((j < k) ->
      (forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (0 <= i_1))))).
}
Prove: 0 <= i.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (168ms) (2385)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 24):
Let x = 2 * i_1.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_1) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((i_4 <= i_1) -> ((i_1 < i_3) -> ((0 <= i_4) ->
      ((i_3 < j) -> (i_4 < i_3))))).
}
Prove: (2 * i) < j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (45178)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (12ms) (82)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 25):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < n) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 < i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (x_1 <= i_2))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\ ((2 * i_2) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_2 : Z. (0 <= i_2) /\ (i_2 < i) /\ ((2 * i_2) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> ((2 * i_2) < j))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((i_3 <= i) -> ((i < i_2) -> ((0 <= i_3) ->
      ((i_2 < j) -> (i_3 < i_2))))).
}
Prove: (2 + x) <= j.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (42539)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (4ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 25):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (0 <= i))).
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 36):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (0 <= i_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i <= i_1) ->
      ((i_1 < n) -> (i_2 < i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (x <= i_1))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 39):
Let x = 2 * i.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i < n) /\ (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (38005)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (7ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 40):
Let x = 2 * i.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (38728)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (3ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 41):
Let x = 2 * i.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (38728)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 43):
Let x = 2 * i_1.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_1) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (38736)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 43):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 < i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (33929)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (21)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 44):
Let x = 2 * i_1.
Let x_1 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + j).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((i_2 <= i_3) ->
      ((i_3 < n) -> (i_4 < i_3))))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_2) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < n))).
  (* Invariant *)
  Have: forall i_3 : Z. (0 <= i_3) /\ (i_3 < i_1) /\ ((2 * i_3) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: (0 <= i) /\ (i < i_1) /\ ((2 * i) < n).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (41869)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (75)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 44):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 < i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: (0 <= i) /\ (i < i_1) /\ ((2 * i) < n).
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 45):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < n) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((i_1 <= i_2) ->
      ((i_2 < n) -> (i_3 < i_2))))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (x_1 <= i_2))).
  (* Invariant *)
  Have: x_1 <= j_1.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. (0 <= i_2) /\ (i_2 < i_1) /\ ((2 * i_2) < n).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_2 : Z. (0 <= i_2) /\ (i_2 < i) /\ ((2 * i_2) < n).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
}
Prove: x <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (2ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0006/0021_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0006/0021_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0006/0021_merged.c, line 61):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (0 <= i_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((i <= i_1) ->
      ((i_1 < k) -> (i_2 < i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (x <= i_1))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= i.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0021_0006/0021_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0006/0021_merged.c, line 49) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0006/0021_merged.c, line 49) (2/2):
Call Result at line 53
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0006/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0006/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
