[kernel] Parsing out/0021_0008/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0008/0021_merged.c:63: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0008/0021_merged.c:40: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0008/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 70 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_2_established (Qed 0.83ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_6_established (Qed 0.62ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] Proved goals:   66 / 70
  Qed:              43
  Alt-Ergo 2.5.4:   18 (3ms-249ms-4.2s)
  Z3 4.8.12:         5 (170ms-408ms-810ms)
  Timeout:           4
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 16):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (x <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (x <= i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
}
Prove: k = j.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (270ms) (313465)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 17):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(1 + i).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (i_1 <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (x <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) ->
      ((i_1 <= k) /\ (x <= i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= j.
}
Prove: (2 + x) = j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (170ms) (294448)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 17):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
}
Prove: j = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.83ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.83ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 18):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: n <= 2147483646. }
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 19):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 1 + i.
Let x_3 = j / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: (2 * x_3) = j.
  (* Invariant *)
  Have: x_3 <= k.
  (* Invariant *)
  Have: x_3 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_3 <= i_1) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (-1) <= j.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (i_1 <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_3) -> (i_1 <= x_3))).
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) -> (x <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) ->
      ((i_1 <= k) /\ (x <= i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= x_1.
}
Prove: (x_1 / 2) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (42555)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (15ms) (212)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 21):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i : Z. ((i < n) -> ((x_1 <= i) -> (i = n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> ((2 * i) <= n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> ((2 * i) <= j_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> ((2 * i) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i : Z. ((j_1 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (i <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < n) -> (j <= (2 + i)))).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < n) ->
      ((i <= n) /\ (j <= (2 + i))))).
  (* Invariant *)
  Have: forall i : Z. ((i < n) -> ((x <= (1 + i)) -> (i = n))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= x) -> ((2 * i) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
}
Prove: x < j.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (40084)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (8ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 21):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: 0 < n.
Prover Z3 4.8.12 returns Timeout (Qed:0.62ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.62ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 22):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (i < n) /\ (x <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (190ms) (404672)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 22):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 25):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (41193)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 26):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (i_1 <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: x <= (1 + k).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) ->
      ((i_1 <= k) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x <= (1 + i_1)) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (41850)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 27):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
}
Prove: (2 * i) < j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (41864)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (9ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 28):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (42563)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 29):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (i_1 <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: x <= (1 + k).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) ->
      ((i_1 <= k) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x <= (1 + i_1)) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (42563)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 30):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: (2 * i) < j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (42577)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 31):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (i < n) /\ (x <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (600ms) (684736)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 31):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (181ms) (2178)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 32):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_1 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: x <= (1 + n).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= (1 + i_1)) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: (2 * i) <= j.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 33):
Let x = j / 2.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x - 1).
  (* Goal *)
  When: (0 <= i) /\ (i < x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (i_1 = k))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: x_1 < k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x_1 <= i_1) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> ((2 * i_1) < k))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (i_1 <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_1) -> (i_1 <= x_1))).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: x <= (1 + k).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (j <= (2 + i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) ->
      ((i_1 <= k) /\ (j <= (2 + i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < k) -> ((x <= (1 + i_1)) -> (i_1 = k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= x) ->
      ((2 * i_1) <= j))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 2 <= j.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < j) -> ((x <= i_1) -> (i_1 = j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (42563)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 48):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (39502)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 49):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (40120)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 50):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (40120)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 51):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (40120)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (7ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 52):
Let x = 2 * i.
Let x_1 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(1 + j).
  (* Goal *)
  When: (i <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) ->
      ((i_2 <= n) /\ (x <= i_2)))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (810ms) (505198)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 52):
Let x = j / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i < n) /\ (x <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x) = j.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: (-1) <= j.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
}
Prove: false.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (4.2s) (93943)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 53):
Let x = 2 * i_1.
Let x_1 = j_1 / 2.
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: (2 * x_1) = j_1.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((x_1 <= i_2) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (i_2 <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_1) -> (i_2 <= x_1))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) ->
      ((i_2 <= n) /\ (x <= i_2)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (i_2 = n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) ->
      ((i_2 <= n) /\ (x <= i_2)))).
}
Prove: (2 * i) <= x_2.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 54):
Let x = 1 + j.
Let x_1 = 2 * i.
Let x_2 = j_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: (2 * x_2) = j_1.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((x_2 <= i_1) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> ((2 * i_1) <= j_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (-1) <= j_1.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (i_1 <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> (i_1 <= x_2))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (x_1 <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      ((i_1 <= n) /\ (x_1 <= i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < n) -> (i_1 = n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= j))).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) -> (x_1 <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      ((i_1 <= n) /\ (x_1 <= i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= x))).
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (41125)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (3ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0008/0021_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0008/0021_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0008/0021_merged.c, line 71):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0008/0021_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0008/0021_merged.c, line 58) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0008/0021_merged.c, line 58) (2/2):
Call Result at line 63
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0008/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0008/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
