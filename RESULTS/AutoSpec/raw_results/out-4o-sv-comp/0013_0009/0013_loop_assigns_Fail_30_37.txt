[kernel] Parsing out/0013_0009/0013_loop_assigns.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/0013_0009/0013_loop_assigns.c:15: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 37 goals scheduled
[wp] [Timeout] typed_foo0013_loop_invariant_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_3_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_3_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_4_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_7_established (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_10_established (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo0013_loop_invariant_13_established (Qed 4ms) (Z3)
[wp] Proved goals:   30 / 37
  Qed:              26
  Alt-Ergo 2.5.4:    4 (0.70ms-4ms-6ms)
  Timeout:           7
------------------------------------------------------------
  Function foo0013
------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 25):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i < n.
  (* Then *)
  Have: j < (3 * k).
}
Prove: k <= j.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 27):
Let x = i + (2 * n).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(1 + k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: (-2147483648) <= i.
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < k) -> (i_2 <= x))).
  (* Invariant *)
  Have: (-2147483648) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= 2147483646.
}
Prove: (2 + k) <= j.
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (3s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 27):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i < n.
  (* Then *)
  Have: j < (3 * k).
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
}
Prove: k < j.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 28):
Let x = i + (2 * n).
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(1 + k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: (-2147483648) <= i.
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < k) -> (i_2 <= x))).
  (* Invariant *)
  Have: (-2147483648) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: (2 + k) <= j.
}
Prove: k < x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 28):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 31):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: i <= n.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 32):
Let x = i + (2 * n).
Let x_1 = 1 + k.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: (-2147483648) <= i.
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < k) -> (i_2 <= x))).
  (* Invariant *)
  Have: (-2147483648) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: (2 + k) <= j.
  (* Invariant *)
  Have: k < x.
}
Prove: i <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (34937)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (0.70ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 34):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
}
Prove: i < n.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 35):
Let x = 1 + k.
Let x_1 = i_1 + (2 * n).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(l) /\ is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1) /\
      is_sint32(x).
  (* Goal *)
  When: (i_1 <= i) /\ (i <= k).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_2 < n.
  (* Then *)
  Have: j < (3 * i_1).
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 <= 2147483647.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: (-2147483648) <= i_1.
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: k <= x_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < k) -> (i_3 <= x_1))).
  (* Invariant *)
  Have: (-2147483648) <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: (2 + k) <= j.
  (* Invariant *)
  Have: k < x_1.
  (* Invariant *)
  Have: i_1 <= x.
}
Prove: i <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 36):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 37):
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i_1 < n.
  (* Then *)
  Have: j < (3 * i).
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i <= 2147483647.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: (-2147483648) <= i.
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (3s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (3s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 38):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 38):
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(l) /\
      is_sint32(m) /\ is_sint32(n) /\ is_sint32(n_1).
  (* Pre-condition *)
  Have: ((-2147483647) <= n_1) /\ (n_1 <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= m) /\ (m <= 2147483646).
  (* Pre-condition *)
  Have: ((-2147483647) <= l) /\ (l <= 2147483646).
  (* Pre-condition *)
  Have: (3 * n_1) <= (l + m).
  (* Then *)
  Have: i < n.
  (* Then *)
  Have: j < (3 * k).
  (* Invariant *)
  Have: k <= j.
  (* Invariant *)
  Have: k <= 2147483647.
  (* Invariant *)
  Have: k < j.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: k < n.
  (* Invariant *)
  Have: (-2147483648) <= k.
  (* Invariant *)
  Have: (2 * k) <= j.
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (32663)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (55)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0013_0009/0013_loop_assigns.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0013_0009/0013_loop_assigns.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/0013_0009/0013_loop_assigns.c, line 18) (1/4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0013_0009/0013_loop_assigns.c, line 18) (2/4):
Effect at line 22
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Loop assigns (file out/0013_0009/0013_loop_assigns.c, line 18) (3/4):
Effect at line 43
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/0013_0009/0013_loop_assigns.c, line 18) (4/4):
Effect at line 43
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Loop assigns (file out/0013_0009/0013_loop_assigns.c, line 41):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/0013_0009/0013_loop_assigns.c:11: Warning: 
  No 'assigns' specification for function 'foo0013'.
  Callers assumptions might be imprecise.
