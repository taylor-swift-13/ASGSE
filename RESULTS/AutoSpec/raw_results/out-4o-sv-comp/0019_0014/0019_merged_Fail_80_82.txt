[kernel] Parsing out/0019_0014/0019_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 82 goals scheduled
[wp] [Timeout] typed_foo0019_loop_invariant_12_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo0019_loop_invariant_13_established (Qed 3ms) (Z3)
[wp] Proved goals:   80 / 82
  Qed:              63
  Alt-Ergo 2.5.4:   17
  Timeout:           2
------------------------------------------------------------
  Function foo0019
------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 14):
Let x = (-2) * k.
Let x_1 = 2 * n.
Let x_2 = x_1 - (2 * k).
Let x_3 = x_2 / 2.
Let x_4 = 2 + x_1 - (2 * k).
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\ is_sint32(x_2) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_3) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_3) -> (0 <= k))).
  (* Then *)
  Have: n < (2 * k).
}
Prove: (k + (x_4 / 2)) = (1 + n).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34048)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (15ms) (180)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 22):
Let x = (-2) * k.
Let x_1 = 2 * n.
Let x_2 = 2 + x_1 - (2 * k).
Let x_3 = k + (x_2 / 2).
Let x_4 = 1 + n.
Let x_5 = x_1 - (2 * k).
Let x_6 = x_5 / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_6) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x_5 % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_6) -> (0 <= k))).
  (* Then *)
  Have: n < (2 * k).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
}
Prove: (x_2 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (34410)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (16ms) (229)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 23):
Let x = (-2) * k.
Let x_1 = 2 * n.
Let x_2 = 2 + x_1 - (2 * k).
Let x_3 = x_2 / 2.
Let x_4 = k + x_3.
Let x_5 = 1 + n.
Let x_6 = x_1 - (2 * k).
Let x_7 = x_6 / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\ is_sint32(x_6) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < x_3).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_7) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x_6 % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_7) -> (0 <= k))).
  (* Then *)
  Have: n < (2 * k).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: k <= x_5.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (32561)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (2ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 37):
Let x = (2 * n) - (2 * k).
Let x_1 = x / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_1) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (0 <= k))).
  (* Else *)
  Have: (2 * k) <= n.
}
Prove: (n / 2) <= k.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 38):
Let x = n / 2.
Let x_1 = (2 * n) - (2 * k).
Let x_2 = x_1 / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_2) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_2) -> (0 <= k))).
  (* Else *)
  Have: (2 * k) <= n.
  (* Invariant *)
  Have: x <= k.
}
Prove: x < k.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 40):
Let x = n / 2.
Let x_1 = 2 * j.
Let x_2 = (2 * n) - x_1 - (2 * k).
Let x_3 = x_2 / 2.
Let x_4 = k + x + x_3.
Let x_5 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x_2) /\ is_sint32(n - x_3).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_3) = n.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Else *)
  Have: (x_1 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x + x_3) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: n <= x_4.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (k + x_3) <= n.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (j + x_3) <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      ((0 <= (k + i)) /\ ((k + (2 * i)) < n)))).
  (* Invariant *)
  Have: (k + x_1) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x.
}
Prove: n < x_4.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (36356)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 40):
Let x = n / 2.
Let x_1 = (2 * n) - (2 * k).
Let x_2 = x_1 / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_2) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_2) -> (0 <= k))).
  (* Else *)
  Have: (2 * k) <= n.
  (* Invariant *)
  Have: x < k.
}
Prove: n <= (k + x + x_2).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (33592)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (12ms) (183)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 42):
Let x = n / 2.
Let x_1 = (2 * n) - (2 * j) - (2 * k).
Let x_2 = x_1 / 2.
Let x_3 = k + x + x_2.
Let x_4 = 2 * j.
Let x_5 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x_1) /\ is_sint32(n - x_2).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_2) = n.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Else *)
  Have: (x_4 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x + x_2) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x < x_5.
  (* Invariant *)
  Have: n <= x_3.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (k + x_2) <= n.
  (* Invariant *)
  Have: j <= x.
  (* Invariant *)
  Have: (j + x_2) <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      ((0 <= (k + i)) /\ ((k + (2 * i)) < n)))).
  (* Invariant *)
  Have: (k + x_4) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x.
  (* Invariant *)
  Have: n < x_3.
}
Prove: k <= (1 + n).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35157)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 44):
Let x = 1 + n.
Let x_1 = n / 2.
Let x_2 = (2 * n) - (2 * j) - (2 * k).
Let x_3 = x_2 / 2.
Let x_4 = k + x_1 + x_3.
Let x_5 = 2 * j.
Let x_6 = k + x_3.
Let x_7 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x_2) /\ is_sint32(n - x_3).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_3) = n.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Else *)
  Have: (x_5 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_1 + x_3) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_7 <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_1 <= x_7.
  (* Invariant *)
  Have: x_1 < x_7.
  (* Invariant *)
  Have: n <= x_4.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_6 <= n.
  (* Invariant *)
  Have: j <= x_1.
  (* Invariant *)
  Have: (j + x_3) <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      ((0 <= (k + i)) /\ ((k + (2 * i)) < n)))).
  (* Invariant *)
  Have: (k + x_5) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_1.
  (* Invariant *)
  Have: n < x_4.
  (* Invariant *)
  Have: k <= x.
}
Prove: x_6 <= x.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (35271)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 50):
Let x = i / 2.
Let x_1 = k_1 + x.
Let x_2 = x_1 / 2.
Let x_3 = k + x_2.
Let x_4 = -k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k - 1) /\
      is_sint32(k_1 - k) /\ is_sint32(1 + k_1 - k) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: x_1 <= 2147483647.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (2 * x) = i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: x_2 < k_1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= k_1.
  (* Invariant *)
  Have: k_1 <= x_3.
  (* Invariant *)
  Have: k <= x_1.
  (* Invariant *)
  Have: k <= k_1.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1) < k_1) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_5 = k + i_1 in ((0 <= i_1) -> ((x_5 < k_1) ->
      ((0 <= x_5) /\ ((k + (2 * i_1)) < x_1)))).
  (* Invariant *)
  Have: (2 * k_1) <= (i + (2 * k)).
  (* Then *)
  Have: k_1 < x_3.
  (* Invariant *)
  Have: k <= (1 + k_1 + x).
  (* Invariant *)
  Have: k <= (1 + k_1).
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (34558)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 50):
Let x = i / 2.
Let x_1 = k + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: x_1 <= 2147483647.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: (2 * x) = i.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x) -> (0 <= k))).
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: x_1 <= i.
  (* Invariant *)
  Have: (x_1 / 2) < k.
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (33251)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (14ms) (204)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 55):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_8.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      ((0 <= (k + i_1)) /\ ((k + (2 * i_1)) < n)))).
  (* Invariant *)
  Have: (k + x_7) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
}
Prove: (2 + i) <= k.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38279)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (23ms) (267)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 56):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_8.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      ((0 <= (k + i_1)) /\ ((k + (2 * i_1)) < n)))).
  (* Invariant *)
  Have: (k + x_7) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> ((2 + i_1) <= k))).
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (36452)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 56):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 57):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_8.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      ((0 <= (k + i_1)) /\ ((k + (2 * i_1)) < n)))).
  (* Invariant *)
  Have: (k + x_7) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> ((2 + i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> (0 < k))).
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37034)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (8ms) (37)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 57):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 58):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_8.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      ((0 <= (k + i_1)) /\ ((k + (2 * i_1)) < n)))).
  (* Invariant *)
  Have: (k + x_7) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> ((2 + i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> (0 < k))).
}
Prove: (0 < (i + k)) /\ ((k + (2 * i)) <= n).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (38701)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (8ms) (98)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 59):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_8.
  (* Invariant *)
  Have: x_5 < x_8.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (i_1 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->
      ((0 <= (k + i_1)) /\ ((k + (2 * i_1)) < n)))).
  (* Invariant *)
  Have: (k + x_7) <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> ((2 + i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) -> (0 < k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= j) ->
      ((0 < (k + i_1)) /\ ((k + (2 * i_1)) <= n)))).
}
Prove: (2 + i) <= k.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (40447)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (24ms) (236)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 59):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 60):
Let x = (2 * n) - (2 * j) - (2 * k).
Let x_1 = x / 2.
Let x_2 = j + x_1.
Let x_3 = k + x_1.
Let x_4 = 1 + n.
Let x_5 = n / 2.
Let x_6 = k + x_5 + x_1.
Let x_7 = 2 * j.
Let x_8 = k + x_7.
Let x_9 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x) /\ is_sint32(n - x_1).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_1) = n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Else *)
  Have: (x_7 + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_5 + x_1) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: x_5 <= x_9.
  (* Invariant *)
  Have: x_5 < x_9.
  (* Invariant *)
  Have: n <= x_6.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: j <= x_5.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      ((0 <= (k + i)) /\ ((k + (2 * i)) < n)))).
  (* Invariant *)
  Have: x_8 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_5.
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: k <= x_4.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) -> ((2 + i) <= k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) -> (0 < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) ->
      ((0 < (k + i)) /\ ((k + (2 * i)) <= n)))).
}
Prove: x_8 < n.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (37672)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (6ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 61):
Let x = 2 * j.
Let x_1 = k + x.
Let x_2 = (2 * n) - x - (2 * k).
Let x_3 = x_2 / 2.
Let x_4 = j + x_3.
Let x_5 = k + x_3.
Let x_6 = 1 + n.
Let x_7 = n / 2.
Let x_8 = k + x_7 + x_3.
Let x_9 = j + k.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(k - 1) /\
      is_sint32(1 + j) /\ is_sint32(x_2) /\ is_sint32(n - x_3).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (j + k + x_3) = n.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Else *)
  Have: (x + (2 * k)) <= n.
  (* Invariant *)
  Have: (x_7 + x_3) < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_9 <= n.
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: x_7 <= x_9.
  (* Invariant *)
  Have: x_7 < x_9.
  (* Invariant *)
  Have: n <= x_8.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: x_5 <= n.
  (* Invariant *)
  Have: j <= x_7.
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) -> (i < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < j) ->
      ((0 <= (k + i)) /\ ((k + (2 * i)) < n)))).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < x_7.
  (* Invariant *)
  Have: n < x_8.
  (* Invariant *)
  Have: k <= x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_4 < n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) -> ((2 + i) <= k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) -> (0 < k))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= j) ->
      ((0 < (k + i)) /\ ((k + (2 * i)) <= n)))).
  (* Invariant *)
  Have: x_1 < n.
}
Prove: 0 < k.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (37769)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 61):
Let x = (2 * n) - (2 * k).
Let x_1 = x / 2.
Let x_2 = n / 2.
Assume {
  Type: is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483647.
  (* Invariant *)
  Have: (k + x_1) = n.
  (* Invariant *)
  Have: k <= n.
  (* Invariant *)
  Have: (x % 2) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_1) -> (0 <= k))).
  (* Else *)
  Have: (2 * k) <= n.
  (* Invariant *)
  Have: x_2 < k.
  (* Invariant *)
  Have: n <= (k + x_2 + x_1).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_1 <= n.
}
Prove: 0 <= k.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (31839)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (4ms) (19)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 64):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0019_0014/0019_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0019_0014/0019_merged.c, line 65):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/0019_0014/0019_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0019_0014/0019_merged.c, line 66):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/0019_0014/0019_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo0019'.
  Callers assumptions might be imprecise.
