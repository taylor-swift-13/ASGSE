[kernel] Parsing out/0018_0002/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0002/0018_merged.c:41: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0002/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 29ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_5_preserved (Qed 31ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_5_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_12_established (Qed 5ms) (Z3)
[wp] Proved goals:   35 / 40
  Qed:              27
  Alt-Ergo 2.5.4:    3 (12ms-34ms-49ms)
  Z3 4.8.12:         5 (10ms-18ms-20ms)
  Timeout:           5
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 17):
Let x = to_uint32(2 + i).
Let x_1 = a * (j_3 - i).
Let x_2 = i % 2.
Let x_3 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\ is_uint32(x_1).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_1 / (1 + i)) = x_1.
  (* Invariant *)
  Have: (x_1 / a) = (1 + x_1).
  (* Invariant *)
  Have: x_1 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_3 = 1) <-> (x_2 = 1).
  (* Invariant *)
  Have: (x_3 = 0) <-> (x_2 = 0).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (x_3 = 0)) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: (((x_2 = 0) -> (x_3 = 0))) \/ (((x_2 = 1) -> (x_3 = 1))).
  (* Invariant *)
  Have: (i + x_1) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x % 2) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
}
Prove: x <= j.
Prover Z3 4.8.12 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 18):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = a * (j_3 - i).
Let x_3 = i % 2.
Let x_4 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_2 / (1 + i)) = x_2.
  (* Invariant *)
  Have: (x_2 / a) = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_4 = 1) <-> (x_3 = 1).
  (* Invariant *)
  Have: (x_4 = 0) <-> (x_3 = 0).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: (((x_3 = 0) -> (x_4 = 0))) \/ (((x_3 = 1) -> (x_4 = 1))).
  (* Invariant *)
  Have: (i + x_2) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (39915)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j_1 - i.
Let x_3 = a * x_2.
Let x_4 = i % 2.
Let x_5 = j_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_3 / (1 + i)) = x_3.
  (* Invariant *)
  Have: (x_3 / a) = (1 + x_3).
  (* Invariant *)
  Have: x_3 <= a.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_5 = 1) <-> (x_4 = 1).
  (* Invariant *)
  Have: (x_5 = 0) <-> (x_4 = 0).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_5 = 0)) \/ ((x_4 = 1) /\ (x_5 = 1)).
  (* Invariant *)
  Have: (((x_4 = 0) -> (x_5 = 0))) \/ (((x_4 = 1) -> (x_5 = 1))).
  (* Invariant *)
  Have: (i + x_3) = (a + j_1).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (to_uint32(1 + a) * (j - x)) = to_uint32(to_uint32(x_2) + x_3).
Prover Z3 4.8.12 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 21):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + a).
Let x_3 = x_2 * (j - x).
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 / (1 + i)) = x_5.
  (* Invariant *)
  Have: (x_5 / a) = (1 + x_5).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_7 = 1) <-> (x_6 = 1).
  (* Invariant *)
  Have: (x_7 = 0) <-> (x_6 = 0).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: (((x_6 = 0) -> (x_7 = 0))) \/ (((x_6 = 1) -> (x_7 = 1))).
  (* Invariant *)
  Have: (i + x_5) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_4) + x_5).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (x_3 / x_2) = (1 + x_3).
Prover Z3 4.8.12 returns Timeout (Qed:31ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:31ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 21):
Let x = i % 2.
Assume {
  Type: is_uint32(i) /\ is_sint32(flag_0).
  If flag_0 != 0
  Then { Have: i = 0. }
  Else { Have: i = 1. }
  (* Invariant *)
  Have: i <= 1.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
}
Prove: (0 / 0) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 22):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = x * (j - x_1).
Let x_3 = x_2 / x.
Let x_4 = x_1 % 2.
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Let x_8 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_3 - 1).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (x_6 / (1 + i)) = x_6.
  (* Invariant *)
  Have: (x_6 / a) = (1 + x_6).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_8 = 1) <-> (x_7 = 1).
  (* Invariant *)
  Have: (x_8 = 0) <-> (x_7 = 0).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: (((x_7 = 0) -> (x_8 = 0))) \/ (((x_7 = 1) -> (x_8 = 1))).
  (* Invariant *)
  Have: (i + x_6) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = (1 + to_uint32(to_uint32(x_5) + x_6)).
  If to_uint32(x_4) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: x_3 = (1 + x_2).
}
Prove: x_3 = (1 + (x_2 / (1 + x_1))).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (40773)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 23):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = x * (j - x_1).
Let x_3 = x_1 % 2.
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 / (1 + i)) = x_5.
  (* Invariant *)
  Have: (x_5 / a) = (1 + x_5).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_7 = 1) <-> (x_6 = 1).
  (* Invariant *)
  Have: (x_7 = 0) <-> (x_6 = 0).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: (((x_6 = 0) -> (x_7 = 0))) \/ (((x_6 = 1) -> (x_7 = 1))).
  (* Invariant *)
  Have: (i + x_5) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_2 = to_uint32(to_uint32(x_4) + x_5)) /\ ((x_2 / (1 + x_1)) = x_2).
  If to_uint32(x_3) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_2 / x) = (1 + x_2).
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (40960)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (49ms) (713)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 24):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = x * (j - x_1).
Let x_3 = x_1 % 2.
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 / (1 + i)) = x_5.
  (* Invariant *)
  Have: (x_5 / a) = (1 + x_5).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_7 = 1) <-> (x_6 = 1).
  (* Invariant *)
  Have: (x_7 = 0) <-> (x_6 = 0).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: (((x_6 = 0) -> (x_7 = 0))) \/ (((x_6 = 1) -> (x_7 = 1))).
  (* Invariant *)
  Have: (i + x_5) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(to_uint32(x_4) + x_5).
  If to_uint32(x_3) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_2 / (1 + x_1)) = x_2.
  (* Invariant *)
  Have: (x_2 / x) = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: 0 < j.
Prover Z3 4.8.12 returns Valid (Qed:36ms) (20ms) (41077)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 28):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = x * (j - x_1).
Let x_3 = x_1 % 2.
Let x_4 = j_3 - i.
Let x_5 = a * x_4.
Let x_6 = i % 2.
Let x_7 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_5 / (1 + i)) = x_5.
  (* Invariant *)
  Have: (x_5 / a) = (1 + x_5).
  (* Invariant *)
  Have: x_5 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_7 = 1) <-> (x_6 = 1).
  (* Invariant *)
  Have: (x_7 = 0) <-> (x_6 = 0).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_7 = 0)) \/ ((x_6 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: (((x_6 = 0) -> (x_7 = 0))) \/ (((x_6 = 1) -> (x_7 = 1))).
  (* Invariant *)
  Have: (i + x_5) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(to_uint32(x_4) + x_5).
  If to_uint32(x_3) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x_2 / (1 + x_1)) = x_2.
  (* Invariant *)
  Have: (x_2 / x) = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_2.
}
Prove: (x_3 = 1) <-> ((j % 2) = 1).
Prover Z3 4.8.12 returns Valid (Qed:34ms) (10ms) (42996)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (41ms) (852)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 28):
Assume {
  Type: is_sint32(flag_0).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 / 0) = 1.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = to_uint32(1 + a).
Let x_4 = x_3 * (j - x).
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Let x_8 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (x_6 / (1 + i)) = x_6.
  (* Invariant *)
  Have: (x_6 / a) = (1 + x_6).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_8 = 1) <-> (x_7 = 1).
  (* Invariant *)
  Have: (x_8 = 0) <-> (x_7 = 0).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: (((x_7 = 0) -> (x_8 = 0))) \/ (((x_7 = 1) -> (x_8 = 1))).
  (* Invariant *)
  Have: (i + x_6) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (x_4 / (1 + x)) = x_4.
  (* Invariant *)
  Have: (x_4 / x_3) = (1 + x_4).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_1 = 1) <-> (x_2 = 1).
}
Prove: (x_1 = 0) <-> (x_2 = 0).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (43162)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = j % 2.
Let x_3 = to_uint32(1 + a).
Let x_4 = x_3 * (j - x).
Let x_5 = j_3 - i.
Let x_6 = a * x_5.
Let x_7 = i % 2.
Let x_8 = j_3 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4).
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j_3.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (x_6 / (1 + i)) = x_6.
  (* Invariant *)
  Have: (x_6 / a) = (1 + x_6).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (x_8 = 1) <-> (x_7 = 1).
  (* Invariant *)
  Have: (x_8 = 0) <-> (x_7 = 0).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: (((x_7 = 0) -> (x_8 = 0))) \/ (((x_7 = 1) -> (x_8 = 1))).
  (* Invariant *)
  Have: (i + x_6) = (a + j_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (x_4 / (1 + x)) = x_4.
  (* Invariant *)
  Have: (x_4 / x_3) = (1 + x_4).
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (x_1 = 1) <-> (x_2 = 1).
  (* Invariant *)
  Have: (x_1 = 0) <-> (x_2 = 0).
}
Prove: ((x_2 = 0) /\ (x_1 = 0)) \/ ((x_2 = 1) /\ (x_1 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:47ms) (20ms) (43409)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:47ms) (12ms) (175)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0002/0018_merged.c, line 35):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = 1 + i.
Let x_3 = to_uint32(x_2).
Let x_4 = x_3 % 2.
Let x_5 = 1 + b.
Let x_6 = to_uint32(x_5).
Let x_7 = x_3 - x.
Let x_8 = -j.
Let x_9 = b + i - j.
Let x_10 = i % 2.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_9) /\ is_uint32(to_uint32(1 + b + i - j) * x_7).
  (* Residual *)
  When: to_uint32(x_1) != 0.
  (* Invariant *)
  Have: (0 / 0) = 1.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: ((j - i) * x_9) = b.
  (* Invariant *)
  Have: (b / x_9) = x_5.
  (* Invariant *)
  Have: (b / x_2) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_6 * x_7) = b.
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (b / (1 + x)) = b.
  (* Invariant *)
  Have: (b / x_6) = x_5.
  (* Invariant *)
  Have: b <= x_6.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: (x_1 = 1) <-> (x_4 = 1).
  (* Invariant *)
  Have: (x_1 = 0) <-> (x_4 = 0).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_1 = 0)) \/ ((x_4 = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: (((x_1 = 0) -> (x_4 = 0))) \/ (((x_1 = 1) -> (x_4 = 1))).
}
Prove: (x_6 + x_3) = (b + x).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (40570)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0002/0018_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0002/0018_merged.c, line 36) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0002/0018_merged.c, line 36) (2/2):
Call Result at line 41
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0002/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0002/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
