[kernel] Parsing out/0021_0010/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0010/0021_merged.c:51: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0010/0021_merged.c:31: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0010/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 50 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_2_established (Qed 0.53ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_3_established (Qed 0.86ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_4_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_5_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_6_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_10_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   43 / 50
  Qed:              29
  Alt-Ergo 2.5.4:    9
  Z3 4.8.12:         5 (250ms-712ms-2.0s)
  Timeout:           7
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 17):
Assume {
  Type: is_sint32(j) /\ is_sint32(n).
  (* Pre-condition *)
  Have: n <= 2147483646.
}
Prove: j <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.53ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 18):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(1 + i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < n) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (x_1 <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (x_1 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((j_1 < n) /\ ((2 * i_2) <= j_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < n) -> (x_1 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
}
Prove: i < j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39283)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 18):
Assume {
  Type: is_sint32(j) /\ is_sint32(n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j <= n.
}
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:0.86ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.86ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 19):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_1) /\ is_sint32(1 + i).
  (* Goal *)
  When: (i_2 < k) /\ (i < i_2).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < k) -> (x_1 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < k) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: i < j.
}
Prove: (2 + x) <= j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (500ms) (424578)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 19):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Goal *)
  When: (0 <= i) /\ (i < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= k.
}
Prove: 0 <= j.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 20):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_2) /\ is_sint32(1 + i).
  (* Goal *)
  When: (i_1 < k) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < j) -> (x_1 <= j))).
}
Prove: x_1 <= i_1.
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 21):
Let x = 2 * i_2.
Let x_1 = 2 + x.
Let x_2 = 2 * i_3.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(1 + i_2).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < n) -> (0 <= i_4))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < n) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < n) -> (x_2 <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
      ((j_1 < n) /\ ((2 * i_4) <= j_1)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < n) -> (x_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((j <= i_4) -> ((i_4 < n) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_2 < j.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 < i_4) -> ((i_4 < j) -> (x_1 <= j))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 < i_4) -> ((i_4 < j) -> (x_1 <= i_4))).
}
Prove: (i < j) /\ ((2 * i_1) <= i).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 22):
Let x = 2 * i_1.
Let x_1 = 2 + x.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < n) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < j) -> (x_1 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < j) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (forall i_4 : Z. (i_4 < j) /\ ((2 * i_3) <= i_4)))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (42034)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (9ms) (36)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 23):
Let x = 2 * i_1.
Let x_1 = 2 + x.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(1 + i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < n) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i_1 < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < j) -> (x_1 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 < i_3) -> ((i_3 < j) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) ->
      (forall i_4 : Z. (i_4 < j) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i_1) -> ((0 <= i_3) -> ((2 * i_3) <= j))).
}
Prove: (2 * i) <= j.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (42678)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 24):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(1 + i).
  (* Goal *)
  When: (0 <= i_2) /\ (i_2 <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      ((j_1 < n) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < j) -> (x_1 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < j) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (forall i_4 : Z. (i_4 < j) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((2 * i_3) <= j))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (250ms) (311597)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 25):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_2) /\ is_sint32(1 + i).
  (* Goal *)
  When: (j <= i_1) /\ (i_1 < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= j.
  (* Invariant *)
  Have: i < j.
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < j) -> (x_1 <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i < i_3) -> ((i_3 < j) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (forall i_4 : Z. (i_4 < j) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> ((2 * i_3) <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> false)).
}
Prove: x_1 <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (43200)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (5ms) (38)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 25):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Goal *)
  When: (j <= i) /\ (i < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < k) -> (0 <= j))).
}
Prove: 0 <= i.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 26):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < k) -> (0 <= j))).
  (* Invariant *)
  Have: forall i : Z. ((j <= i) -> ((i < k) -> (0 <= i))).
}
Prove: 0 <= j.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (135ms) (2193)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 37):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < n) -> (0 <= i_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < n) -> (x <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < n) -> (x <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. (i_2 < n) /\ ((2 * i_1) <= i_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((j < n) /\ ((2 * i_1) <= j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) -> (x <= i_1))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (310ms) (270701)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 39):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Goal *)
  When: (i <= i_2) /\ (i_2 < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < k) -> (x_1 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < k) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < k.
}
Prove: x <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (39513)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (4ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 40):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (i_1 < k) /\ (j < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < k) -> (x <= x_1))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (40269)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 41):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (i_1 < k) /\ (j < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_2 <= i_3) -> ((i_3 < k) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_2 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j_1 < k) /\ ((2 * i_3) <= j_1)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < k) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < k) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < k) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < k.
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < k) -> (x <= x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < k) -> ((j < i_3) -> (x <= i_3))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (40887)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (3ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 42):
Let x = 2 * i_2.
Let x_1 = 1 + j.
Let x_2 = 2 * i_3.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_2 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((j_2 <= i_4) -> ((i_4 < n) -> (0 <= i_4))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: i_3 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < n) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < n) -> (x_2 <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
      ((j_1 < n) /\ ((2 * i_4) <= j_1)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((j_1 <= i_4) -> ((i_4 < n) -> (x_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((j <= i_4) -> ((i_4 < n) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < n) -> (x <= x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < n) -> ((j < i_4) -> (x <= i_4))).
}
Prove: (i < n) /\ ((2 * i_1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:11ms) (2.0s) (3630833)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 42):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(n) /\
      is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: j_1 <= n.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((j_1 <= i_3) -> ((i_3 < n) -> (0 <= i_3))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x <= j))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> ((2 * i_3) <= n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      ((j < n) /\ ((2 * i_3) <= j)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: (i < n) /\ ((2 * i_1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (520ms) (218489)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 43):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(j_2) /\ is_sint32(k) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_2 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((j_2 <= i_2) -> ((i_2 < k) -> (0 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_2.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < k) -> (x_2 <= j_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < k) -> (x_2 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. (i_3 < k) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= k))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((j_1 < k) /\ ((2 * i_2) <= j_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((j_1 <= i_2) -> ((i_2 < k) -> (x_2 <= i_2))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < k.
  (* Invariant *)
  Have: x_2 <= k.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < k) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (i_3 < k) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < k.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < k) -> (x <= x_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < k) -> ((j < i_2) -> (x <= i_2))).
}
Prove: x <= x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (6ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0010/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0010/0021_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0010/0021_merged.c, line 59):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j_1) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: j_1 <= k.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((j_1 <= i_1) -> ((i_1 < k) -> (0 <= i_1))).
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < k) -> (x <= j))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < k) -> (x <= i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (forall i_2 : Z. (i_2 < k) /\ ((2 * i_1) <= i_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= k))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((j < k) /\ ((2 * i_1) <= j)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < k) -> (x <= i_1))).
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= i.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0021_0010/0021_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0010/0021_merged.c, line 47) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0010/0021_merged.c, line 47) (2/2):
Call Result at line 51
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0010/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0010/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
