[kernel] Parsing out/0018_0005/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0005/0018_merged.c:38: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0005/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_3_preserved (Qed 24ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 32ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_5_preserved (Qed 45ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_6_preserved (Qed 28ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_7_preserved (Qed 28ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_7_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_11_preserved (Qed 28ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_12_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_14_preserved (Qed 35ms) (Z3)
[wp] Proved goals:   25 / 34
  Qed:              23
  Alt-Ergo 2.5.4:    1 (33ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           9
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 17):
Let x = i % 2.
Let x_1 = -i.
Let x_2 = j - i.
Let x_3 = a * x_2.
Let x_4 = x_3 / (j + (if (x = 0) then 2 else 1) - i).
Let x_5 = to_uint32(2 + i) % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_4).
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: x_4 = (x_3 / (if (j = i) then 1 else x_2)).
  (* Invariant *)
  Have: x_4 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j + x_4).
  (* Invariant *)
  Have: ((x = 0) -> ((i / 2) < j)).
  (* Invariant *)
  Have: ((x = 0) -> (2 <= j)).
  (* Invariant *)
  Have: ((x = 0) /\ (i <= j)) \/ ((x != 0) /\ (i <= (1 + j))).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_5 = 0) \/ (x_5 = 1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (36649)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = -i.
Let x_4 = j_1 - i.
Let x_5 = a * x_4.
Let x_6 = x_5 / (j_1 + (if (x_2 = 0) then 2 else 1) - i).
Let x_7 = j - x.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: x_6 = (x_5 / (if (j_1 = i) then 1 else x_4)).
  (* Invariant *)
  Have: x_6 <= a.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_1 + x_6).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((i / 2) < j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (2 <= j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) /\ (i <= j_1)) \/ ((x_2 != 0) /\ (i <= (1 + j_1))).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: ((to_uint32(1 + a) * x_7) / (if (x = j) then 1 else x_7))
         = to_uint32(to_uint32(x_4) + x_6).
Prover Z3 4.8.12 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = -x.
Let x_3 = j - x.
Let x_4 = to_uint32(1 + a) * x_3.
Let x_5 = x_4 / (if (x = j) then 1 else x_3).
Let x_6 = -i.
Let x_7 = j_3 - i.
Let x_8 = a * x_7.
Let x_9 = i % 2.
Let x_10 = x_8 / (j_3 + (if (x_9 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\ is_uint32(x_5).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_9 = 1).
  (* Invariant *)
  Have: x_10 = (x_8 / (if (j_3 = i) then 1 else x_7)).
  (* Invariant *)
  Have: x_10 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_10.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_10).
  (* Invariant *)
  Have: ((x_9 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (i <= j_3)) \/ ((x_9 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_5 = to_uint32(to_uint32(x_7) + x_10).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (x_4 / (j + (if (x_1 = 0) then 2 else 1) - x)) = x_5.
Prover Z3 4.8.12 returns Timeout (Qed:32ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:32ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 21):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = -x_1.
Let x_3 = j - x_1.
Let x_4 = x * x_3.
Let x_5 = x_1 % 2.
Let x_6 = x_4 / (j + (if (x_5 = 0) then 2 else 1) - x_1).
Let x_7 = -i.
Let x_8 = j_3 - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j_3 + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j_3 = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j_3)) \/ ((x_10 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  If to_uint32(x_5) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 / (if (x_1 = j) then 1 else x_3)).
}
Prove: x_6 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:45ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:45ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 22):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = -x_1.
Let x_3 = j - x_1.
Let x_4 = x * x_3.
Let x_5 = x_1 % 2.
Let x_6 = x_4 / (j + (if (x_5 = 0) then 2 else 1) - x_1).
Let x_7 = -i.
Let x_8 = j_3 - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j_3 + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j_3 = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j_3)) \/ ((x_10 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  If to_uint32(x_5) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 / (if (x_1 = j) then 1 else x_3)).
  (* Invariant *)
  Have: x_6 <= x.
}
Prove: 0 < j.
Prover Z3 4.8.12 returns Timeout (Qed:28ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:28ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 23):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = -x_1.
Let x_3 = j - x_1.
Let x_4 = x * x_3.
Let x_5 = x_1 % 2.
Let x_6 = x_4 / (j + (if (x_5 = 0) then 2 else 1) - x_1).
Let x_7 = -i.
Let x_8 = j_3 - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j_3 + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j_3 = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j_3)) \/ ((x_10 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  If to_uint32(x_5) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 / (if (x_1 = j) then 1 else x_3)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 < j.
}
Prove: 0 < x_1.
Prover Z3 4.8.12 returns Timeout (Qed:28ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:28ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 23):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 27):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(2 + i).
Let x_2 = -x_1.
Let x_3 = j - x_1.
Let x_4 = x * x_3.
Let x_5 = x_1 % 2.
Let x_6 = x_4 / (j + (if (x_5 = 0) then 2 else 1) - x_1).
Let x_7 = -i.
Let x_8 = j_3 - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j_3 + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j_3 = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j_3)) \/ ((x_10 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  If to_uint32(x_5) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: x_6 = (x_4 / (if (x_1 = j) then 1 else x_3)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 <= x_6.
}
Prove: x_1 <= (j + x_6).
Prover Z3 4.8.12 returns Timeout (Qed:28ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:28ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 28):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + a).
Let x_3 = -x.
Let x_4 = x_1 - x.
Let x_5 = x_2 * x_4.
Let x_6 = x_5 / (2 + x_1 - x).
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Goal *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j)) \/ ((x_10 != 0) /\ (i <= (1 + j))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  (* Invariant *)
  Have: (x_5 / (if (x_1 = x) then 1 else x_4)) = x_6.
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x <= (x_1 + x_6).
}
Prove: (x / 2) < x_1.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 29):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + a).
Let x_3 = -x.
Let x_4 = x_1 - x.
Let x_5 = x_2 * x_4.
Let x_6 = x_5 / (2 + x_1 - x).
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Goal *)
  When: (x % 2) = 0.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j)) \/ ((x_10 != 0) /\ (i <= (1 + j))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  (* Invariant *)
  Have: (x_5 / (if (x_1 = x) then 1 else x_4)) = x_6.
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x <= (x_1 + x_6).
  (* Invariant *)
  Have: (x / 2) < x_1.
}
Prove: 2 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (40645)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (33ms) (669)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + a).
Let x_3 = -x.
Let x_4 = j - x.
Let x_5 = x_2 * x_4.
Let x_6 = x_5 / (j + (if (x_1 = 0) then 2 else 1) - x).
Let x_7 = -i.
Let x_8 = j_3 - i.
Let x_9 = a * x_8.
Let x_10 = i % 2.
Let x_11 = x_9 / (j_3 + (if (x_10 = 0) then 2 else 1) - i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_uint32(j_2) /\ is_uint32(j_3) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_6).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: x_11 = (x_9 / (if (j_3 = i) then 1 else x_8)).
  (* Invariant *)
  Have: x_11 <= a.
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= x_11.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: i <= (j_3 + x_11).
  (* Invariant *)
  Have: ((x_10 = 0) -> ((i / 2) < j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) -> (2 <= j_3)).
  (* Invariant *)
  Have: ((x_10 = 0) /\ (i <= j_3)) \/ ((x_10 != 0) /\ (i <= (1 + j_3))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(to_uint32(x_8) + x_11).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: x_6 = (x_5 / (if (x = j) then 1 else x_4)).
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x <= (j + x_6).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((x / 2) < j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> (2 <= j)).
}
Prove: ((x_1 = 0) /\ (x <= j)) \/ ((x_1 != 0) /\ (x <= (1 + j))).
Prover Z3 4.8.12 returns Timeout (Qed:35ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:35ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0005/0018_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0005/0018_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0005/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0005/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
