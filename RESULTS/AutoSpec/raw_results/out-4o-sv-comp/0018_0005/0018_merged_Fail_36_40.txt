[kernel] Parsing out/0018_0005/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0005/0018_merged.c:41: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0005/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_preserved (Qed 11ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_8_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_8_established (Qed 3ms) (Z3)
[wp] Proved goals:   36 / 40
  Qed:              28
  Alt-Ergo 2.5.4:    7 (7ms-30ms-64ms)
  Z3 4.8.12:         1 (20ms)
  Timeout:           4
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 17):
Let x = i % 2.
Let x_1 = -i.
Let x_2 = j - i.
Let x_3 = b + i - j.
Let x_4 = to_uint32(2 + i).
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_3).
  (* Residual *)
  When: to_uint32(x_4 % 2) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: (x_2 * x_3) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_2)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_4 <= to_uint32(1 + i).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 18):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = -i.
Let x_4 = j_1 - i.
Let x_5 = b + i - j_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_5).
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_4 * x_5) = b.
  (* Invariant *)
  Have: (b / (if (j_1 = i) then 1 else x_4)) = b.
  (* Invariant *)
  Have: (b / (j_1 + (if (x_2 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x = j. }
  Else { Have: to_uint32(1 + i) = j. }
  (* Invariant *)
  Have: x <= j.
}
Prove: (x_1 = 0) \/ (x_1 = 1).
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (38366)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = -i.
Let x_4 = j_1 - i.
Let x_5 = b + i - j_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_5).
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: (x_4 * x_5) = b.
  (* Invariant *)
  Have: (b / (if (j_1 = i) then 1 else x_4)) = b.
  (* Invariant *)
  Have: (b / (j_1 + (if (x_2 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: x = j. }
  Else { Have: to_uint32(1 + i) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (to_uint32(1 + b) * (j - x)) = b.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 21):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + i).
Let x_3 = x_2 - x.
Let x_4 = i % 2.
Let x_5 = -i.
Let x_6 = j - i.
Let x_7 = -j.
Let x_8 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_8) /\ is_uint32(to_uint32(1 + b + i - j) * x_3).
  (* Residual *)
  When: to_uint32(x_1) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 * x_8) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_6)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_4 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_4 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (to_uint32(1 + b) * x_3) = b.
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: (b / (if (x = x_2) then 1 else x_3)) = b.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (38ms) (712)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 22):
Let x = to_uint32(2 + i).
Let x_1 = -x.
Let x_2 = j - x.
Let x_3 = x % 2.
Let x_4 = i % 2.
Let x_5 = -i.
Let x_6 = j_1 - i.
Let x_7 = -j_1.
Let x_8 = b + i - j_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_8) /\
      is_uint32(to_uint32(1 + b + i - j_1) * x_2).
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_6 * x_8) = b.
  (* Invariant *)
  Have: (b / (if (j_1 = i) then 1 else x_6)) = b.
  (* Invariant *)
  Have: (b / (j_1 + (if (x_4 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_4 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (to_uint32(1 + b) * x_2) = b.
  If to_uint32(x_3) = 0
  Then { Have: x = j. }
  Else { Have: to_uint32(1 + i) = j. }
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (b / (if (x = j) then 1 else x_2)) = b.
}
Prove: (b / (j + (if (x_3 = 0) then 2 else 1) - x)) = b.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (64ms) (975)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 23):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(1 + i).
Let x_2 = -x.
Let x_3 = x_1 - x.
Let x_4 = x % 2.
Let x_5 = to_uint32(1 + b).
Let x_6 = i % 2.
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = -j.
Let x_10 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\ is_uint32(to_uint32(1 + b + i - j) * x_3).
  (* Residual *)
  When: to_uint32(x_4) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_8 * x_10) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_8)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_6 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_6 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_5 * x_3) = b.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (b / (x_1 + (if (x_4 = 0) then 2 else 1) - x)) = b.
  (* Invariant *)
  Have: (b / (if (x = x_1) then 1 else x_3)) = b.
}
Prove: b <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (110ms) (263057)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (49ms) (734)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 24):
Let x = to_uint32(1 + b).
Let x_1 = to_uint32(2 + i).
Let x_2 = -x_1.
Let x_3 = j - x_1.
Let x_4 = x_1 % 2.
Let x_5 = i % 2.
Let x_6 = -i.
Let x_7 = j_1 - i.
Let x_8 = -j_1.
Let x_9 = b + i - j_1.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_9) /\
      is_uint32(to_uint32(1 + b + i - j_1) * x_3).
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: (x_7 * x_9) = b.
  (* Invariant *)
  Have: (b / (if (j_1 = i) then 1 else x_7)) = b.
  (* Invariant *)
  Have: (b / (j_1 + (if (x_5 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j_1 <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_5 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x_3) = b.
  If to_uint32(x_4) = 0
  Then { Have: x_1 = j. }
  Else { Have: to_uint32(1 + i) = j. }
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (b / (j + (if (x_4 = 0) then 2 else 1) - x_1)) = b.
  (* Invariant *)
  Have: (b / (if (x_1 = j) then 1 else x_3)) = b.
  (* Invariant *)
  Have: b <= x.
}
Prove: (j + x) = (b + x_1).
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 24):
Assume { Type: is_sint32(flag_0). (* Residual *) When: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 25):
Let x = to_uint32(1 + b).
Let x_1 = -x.
Let x_2 = to_uint32(2 + i).
Let x_3 = x_2 % 2.
Let x_4 = b - x.
Let x_5 = b + x_2.
Let x_6 = i % 2.
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = -j.
Let x_10 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\
      is_uint32(x_2 + to_uint32(b + to_uint32(x_8))
        - to_uint32(1 + b + i - j)).
  (* Residual *)
  When: to_uint32(x_3) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_8 * x_10) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_8)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_6 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_6 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x + to_uint32(1 + i)) = x_5.
  (* Invariant *)
  Have: x <= b.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: (x * x_4) = b.
  (* Invariant *)
  Have: (b / (if (x = b) then 1 else x_4)) = b.
  (* Invariant *)
  Have: (b / (b + (if (x_3 = 0) then 2 else 1) - x)) = b.
  (* Invariant *)
  Have: b <= x.
}
Prove: x < x_5.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (41579)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (33ms) (480)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 26):
Let x = to_uint32(1 + b).
Let x_1 = to_uint32(2 + i).
Let x_2 = b + x_1.
Let x_3 = -x.
Let x_4 = x_1 % 2.
Let x_5 = b - x.
Let x_6 = i % 2.
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = -j.
Let x_10 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\
      is_uint32(x_1 + to_uint32(b + to_uint32(x_8))
        - to_uint32(1 + b + i - j)).
  (* Residual *)
  When: to_uint32(x_4) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_8 * x_10) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_8)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_6 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_6 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x + to_uint32(1 + i)) = x_2.
  (* Invariant *)
  Have: x <= b.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x * x_5) = b.
  (* Invariant *)
  Have: (b / (if (x = b) then 1 else x_5)) = b.
  (* Invariant *)
  Have: (b / (b + (if (x_4 = 0) then 2 else 1) - x)) = b.
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: x < x_2.
}
Prove: 0 < x_1.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (10ms) (35861)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (7ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(1 + b).
Let x_2 = b + x.
Let x_3 = -x_1.
Let x_4 = x % 2.
Let x_5 = b - x_1.
Let x_6 = i % 2.
Let x_7 = -i.
Let x_8 = j - i.
Let x_9 = -j.
Let x_10 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\
      is_uint32(x + to_uint32(b + to_uint32(x_8)) - to_uint32(1 + b + i - j)).
  (* Residual *)
  When: to_uint32(x_4) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: (x_8 * x_10) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_8)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_6 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_6 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_1 + to_uint32(1 + i)) = x_2.
  (* Invariant *)
  Have: x_1 <= b.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: (x_1 * x_5) = b.
  (* Invariant *)
  Have: (b / (if (x_1 = b) then 1 else x_5)) = b.
  (* Invariant *)
  Have: (b / (b + (if (x_4 = 0) then 2 else 1) - x_1)) = b.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: x_1 < x_2.
  (* Invariant *)
  Have: 0 < x.
}
Prove: x_1 <= (2 * b).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (36052)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (7ms) (86)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 33):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = 1 + b.
Let x_3 = to_uint32(x_2).
Let x_4 = b + x.
Let x_5 = -x_3.
Let x_6 = b - x_3.
Let x_7 = i % 2.
Let x_8 = -i.
Let x_9 = j - i.
Let x_10 = -j.
Let x_11 = b + i - j.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\
      is_uint32(x + to_uint32(b + to_uint32(x_9)) - to_uint32(1 + b + i - j)).
  (* Residual *)
  When: to_uint32(x_1) != 0.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_7 = 1).
  (* Invariant *)
  Have: (x_9 * x_11) = b.
  (* Invariant *)
  Have: (b / (if (j = i) then 1 else x_9)) = b.
  (* Invariant *)
  Have: (b / (j + (if (x_7 = 0) then 2 else 1) - i)) = b.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: ((x_7 = 0) -> ((i / 2) < i)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (2 <= i)).
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_3 + to_uint32(1 + i)) = x_4.
  (* Invariant *)
  Have: x_3 <= b.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: (x_3 * x_6) = b.
  (* Invariant *)
  Have: (b / (if (x_3 = b) then 1 else x_6)) = b.
  (* Invariant *)
  Have: (b / (b + (if (x_1 = 0) then 2 else 1) - x_3)) = b.
  (* Invariant *)
  Have: b <= x_3.
  (* Invariant *)
  Have: x_3 < x_4.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= (2 * b).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((x_3 + (x / 2)) < x_4)).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((2 + x_3) <= x_4)).
}
Prove: (x_1 = 0) \/ ((x_1 != 0) /\ (x_3 <= x_2)).
Prover Z3 4.8.12 returns Valid (Qed:17ms) (10ms) (36327)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (8ms) (82)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0005/0018_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0005/0018_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0005/0018_merged.c, line 36) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0005/0018_merged.c, line 36) (2/2):
Call Result at line 41
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0005/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0005/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
