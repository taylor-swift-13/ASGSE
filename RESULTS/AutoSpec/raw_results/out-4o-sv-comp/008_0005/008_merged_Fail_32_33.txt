[kernel] Parsing out/008_0005/008_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 33 goals scheduled
[wp] [Timeout] typed_foo008_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] Proved goals:   32 / 33
  Qed:              24
  Alt-Ergo 2.5.4:    5 (5ms-192ms-329ms)
  Z3 4.8.12:         3 (160ms-210ms)
  Timeout:           1
------------------------------------------------------------
  Function foo008
------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 17):
Let x = cnt_0 + res_0.
Let x_1 = 1 + res_0.
Assume {
  Type: is_sint32(a) /\ is_sint32(cnt_0) /\ is_sint32(res_0) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x_1) /\ is_sint32(cnt_0 + res_0 - a).
  (* Pre-condition *)
  Have: a <= 999999.
  (* Pre-condition *)
  Have: (a <= x) /\ (x <= (1000000 + a)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((a + i) <= x) -> (i = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: a <= res_0.
  (* Invariant *)
  Have: forall i : Z. let x_2 = a + i in ((0 <= i) -> ((x_2 <= x) ->
      (x_2 = res_0))).
  (* Invariant *)
  Have: forall i : Z. let x_2 = a + i in ((0 <= i) -> ((x_2 <= res_0) ->
      (x_2 = res_0))).
  (* Then *)
  Have: 0 < cnt_0.
}
Prove: a <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (32695)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (5ms) (16)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 20):
Let x = 1 + res_1.
Let x_1 = cnt_0 + res_1.
Let x_2 = i + res_0.
Assume {
  Type: is_sint32(cnt_0) /\ is_sint32(res_1) /\ is_sint32(res_0) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x) /\
      is_sint32(cnt_0 + res_1 - res_0).
  (* Goal *)
  When: (0 <= i) /\ (x_2 <= x_1).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (res_0 <= x_1) /\ (x_1 <= (1000000 + res_0)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((res_0 + i_1) <= x_1) ->
      (i_1 = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: res_0 <= res_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x_1) -> (x_3 = res_1))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= res_1) -> (x_3 = res_1))).
  (* Then *)
  Have: 0 < cnt_0.
  (* Invariant *)
  Have: res_0 <= x.
}
Prove: x_2 = x.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (210ms) (305495)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 20):
Assume {
  Type: is_sint32(b) /\ is_sint32(res_0).
  (* Goal *)
  When: (i <= b) /\ (0 <= i).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (0 <= b) /\ (b <= 1000000).
}
Prove: i = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 21):
Let x = cnt_0 + res_0.
Let x_1 = 1 + res_0.
Assume {
  Type: is_sint32(cnt_0) /\ is_sint32(res_0) /\ is_sint32(res_1) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x_1) /\
      is_sint32(cnt_0 + res_0 - res_1).
  (* Goal *)
  When: (0 <= i) /\ ((i + res_1) <= x).
  (* Pre-condition *)
  Have: res_1 <= 999999.
  (* Pre-condition *)
  Have: (res_1 <= x) /\ (x <= (1000000 + res_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((res_1 + i_1) <= x) -> (i_1 = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: res_1 <= res_0.
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= x) -> (x_2 = res_0))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= res_0) -> (x_2 = res_0))).
  (* Then *)
  Have: 0 < cnt_0.
  (* Invariant *)
  Have: res_1 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= x) -> (x_2 = x_1))).
}
Prove: i = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (160ms) (237566)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 21):
Assume {
  Type: is_sint32(b) /\ is_sint32(res_0).
  (* Goal *)
  When: (i <= b) /\ (0 <= i).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (0 <= b) /\ (b <= 1000000).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= b) -> ((0 <= i_1) -> (i_1 = 0))).
}
Prove: i = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (155ms) (2192)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 22):
Let x = cnt_0 + res_0.
Let x_1 = 1 + res_0.
Assume {
  Type: is_sint32(cnt_0) /\ is_sint32(res_0) /\ is_sint32(res_1) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x_1) /\
      is_sint32(cnt_0 + res_0 - res_1).
  (* Goal *)
  When: (0 <= i) /\ ((i + res_1) <= x).
  (* Pre-condition *)
  Have: res_1 <= 999999.
  (* Pre-condition *)
  Have: (res_1 <= x) /\ (x <= (1000000 + res_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((res_1 + i_1) <= x) -> (i_1 = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: res_1 <= res_0.
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= x) -> (x_2 = res_0))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= res_0) -> (x_2 = res_0))).
  (* Then *)
  Have: 0 < cnt_0.
  (* Invariant *)
  Have: res_1 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_2 = res_1 + i_1 in ((0 <= i_1) ->
      ((x_2 <= x) -> (x_2 = x_1))).
}
Prove: i = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (190ms) (237566)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 22):
Assume {
  Type: is_sint32(b) /\ is_sint32(res_0).
  (* Goal *)
  When: (i <= b) /\ (0 <= i).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (0 <= b) /\ (b <= 1000000).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= b) -> ((0 <= i_1) -> (i_1 = 0))).
}
Prove: i = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (168ms) (2192)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 23):
Let x = cnt_0 + res_1.
Let x_1 = 1 + res_1.
Let x_2 = i + res_0.
Assume {
  Type: is_sint32(cnt_0) /\ is_sint32(res_1) /\ is_sint32(res_0) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x_1) /\
      is_sint32(cnt_0 + res_1 - res_0).
  (* Goal *)
  When: (0 <= i) /\ (x_2 <= x_1).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (res_0 <= x) /\ (x <= (1000000 + res_0)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((res_0 + i_1) <= x) -> (i_1 = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: res_0 <= res_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x) -> (x_3 = res_1))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= res_1) -> (x_3 = res_1))).
  (* Then *)
  Have: 0 < cnt_0.
  (* Invariant *)
  Have: res_0 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x) -> (x_3 = x_1))).
}
Prove: x_2 = x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (305ms) (4055)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 24):
Let x = 1 + res_1.
Let x_1 = cnt_0 + res_1.
Let x_2 = i + res_0.
Assume {
  Type: is_sint32(cnt_0) /\ is_sint32(res_1) /\ is_sint32(res_0) /\
      is_sint32(cnt_0 - 1) /\ is_sint32(x) /\
      is_sint32(cnt_0 + res_1 - res_0).
  (* Goal *)
  When: (0 <= i) /\ (x_2 <= x).
  (* Pre-condition *)
  Have: res_0 <= 999999.
  (* Pre-condition *)
  Have: (res_0 <= x_1) /\ (x_1 <= (1000000 + res_0)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((res_0 + i_1) <= x_1) ->
      (i_1 = 0))).
  (* Invariant *)
  Have: 0 <= cnt_0.
  (* Invariant *)
  Have: res_0 <= res_1.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x_1) -> (x_3 = res_1))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= res_1) -> (x_3 = res_1))).
  (* Then *)
  Have: 0 < cnt_0.
  (* Invariant *)
  Have: res_0 <= x.
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x_1) -> (x_3 = x))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_3 = res_0 + i_1 in ((0 <= i_1) ->
      ((x_3 <= x) -> (x_3 = x))).
}
Prove: x_2 = x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (329ms) (4117)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/008_0005/008_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/008_0005/008_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Loop assigns (file out/008_0005/008_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/008_0005/008_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo008'.
  Callers assumptions might be imprecise.
