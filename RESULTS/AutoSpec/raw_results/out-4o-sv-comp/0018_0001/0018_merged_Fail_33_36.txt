[kernel] Parsing out/0018_0001/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0001/0018_merged.c:39: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0001/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_14_preserved (Qed 24ms) (Z3)
[wp] Proved goals:   33 / 36
  Qed:              22
  Alt-Ergo 2.5.4:    9 (7ms-20ms-29ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           3
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 17):
Let x = 2 * a.
Let x_1 = 1 + x.
Let x_2 = x_1 % 2.
Let x_3 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_1).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x < j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((2 + x) = j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> (x_3 = 0)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_2 = 0)) \/ ((x_3 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_1 = j)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (x_3 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (1 + (2 * to_uint32(1 + a))) = to_uint32(3 + x).
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 20):
Let x = to_uint32(1 + a).
Let x_1 = 1 + (2 * x).
Let x_2 = 2 * a.
Let x_3 = 1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_3) /\ is_uint32(x_1).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_2 < j)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((2 + x_2) = j)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = 0)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_4 = 0)) \/ ((x_5 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_3 = j)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_5 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_2).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = to_uint32(3 + x_2).
}
Prove: to_uint32(b + to_uint32(j - 1 - x_2)) <= x.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (40587)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (18ms) (288)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 21):
Let x = to_uint32(1 + a).
Let x_1 = 1 + (2 * x).
Let x_2 = 2 * a.
Let x_3 = 1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = j_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_3) /\ is_uint32(x_1).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_2 < j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((2 + x_2) = j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = 0)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_4 = 0)) \/ ((x_5 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_3 = j_1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_5 != 0)).
  (* Invariant *)
  Have: j_1 <= (1 + b + x_2).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = to_uint32(3 + x_2).
  If to_uint32(x_1 % 2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: to_uint32(b + to_uint32(j_1 - 1 - x_2)) <= x.
}
Prove: x < j.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (44680)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 22):
Let x = to_uint32(1 + a).
Let x_1 = 1 + (2 * x).
Let x_2 = 2 * a.
Let x_3 = 1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = j_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_3) /\ is_uint32(x_1).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_2 < j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((2 + x_2) = j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_5 = 0)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_4 = 0)) \/ ((x_5 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_3 = j_1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_5 != 0)).
  (* Invariant *)
  Have: j_1 <= (1 + b + x_2).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = to_uint32(3 + x_2).
  If to_uint32(x_1 % 2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: to_uint32(b + to_uint32(j_1 - 1 - x_2)) <= x.
  (* Invariant *)
  Have: x < j.
}
Prove: 0 < j.
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (35023)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (21ms) (291)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 26):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j - 1 - (2 * a))).
Let x_2 = 1 + (2 * x).
Let x_3 = 2 * a.
Let x_4 = 1 + x_3.
Let x_5 = x_4 % 2.
Let x_6 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_4) /\ is_uint32(x_2).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_3 < j)).
  (* Invariant *)
  Have: ((x_5 = 0) -> ((2 + x_3) = j)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = 0)).
  (* Invariant *)
  Have: ((x_6 = 0) /\ (x_5 = 0)) \/ ((x_6 = 1) /\ (x_5 = 1)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_4 = j)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_6 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(3 + x_3).
  If to_uint32(x_2 % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < j_1.
  (* Invariant *)
  Have: 0 < j_1.
}
Prove: 0 <= (x + x_1).
Prover Z3 4.8.12 returns Valid (Qed:20ms) (10ms) (37112)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:20ms) (29ms) (433)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 27):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j - 1 - (2 * a))).
Let x_2 = to_uint32(2 + j).
Let x_3 = 2 * x.
Let x_4 = 1 + x_3.
Let x_5 = 2 * a.
Let x_6 = 1 + x_5.
Let x_7 = x_6 % 2.
Let x_8 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4).
  (* Goal *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_5 < j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((2 + x_5) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_7 = 0)) \/ ((x_8 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_6 = j)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_5).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(3 + x_5).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= (x + x_1).
}
Prove: x_3 < x_2.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39997)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (20ms) (316)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 28):
Let x = to_uint32(1 + a).
Let x_1 = 2 * x.
Let x_2 = to_uint32(2 + j).
Let x_3 = to_uint32(b + to_uint32(j - 1 - (2 * a))).
Let x_4 = 1 + x_1.
Let x_5 = 2 * a.
Let x_6 = 1 + x_5.
Let x_7 = x_6 % 2.
Let x_8 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4).
  (* Goal *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_5 < j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((2 + x_5) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_7 = 0)) \/ ((x_8 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_6 = j)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_5).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(3 + x_5).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= (x + x_3).
  (* Invariant *)
  Have: x_1 < x_2.
}
Prove: (2 + x_1) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (40124)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (21ms) (311)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 28):
Assume {
  Type: is_sint32(flag_0).
  (* Goal *)
  When: ((if (flag_0 = 0) then 1 else 0) % 2) = 0.
}
Prove: flag_0 != 0.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 29):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j - 1 - (2 * a))).
Let x_2 = 2 * x.
Let x_3 = 2 + x_2.
Let x_4 = 1 + x_2.
Let x_5 = 2 * a.
Let x_6 = 1 + x_5.
Let x_7 = x_6 % 2.
Let x_8 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_6) /\ is_uint32(x_4) /\ is_uint32(x_3).
  (* Goal *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_5 < j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((2 + x_5) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_7 = 0)) \/ ((x_8 = 1) /\ (x_7 = 1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_6 = j)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_5).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(3 + x_5).
  Have: x_3 = to_uint32(2 + j).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= (x + x_1).
}
Prove: (x_3 % 2) = 0.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (42630)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (24ms) (393)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 29):
Assume { Type: is_sint32(flag_0). (* Invariant *) Have: flag_0 != 0. }
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 30):
Let x = to_uint32(1 + a).
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = x_2 % 2.
Let x_4 = j % 2.
Let x_5 = to_uint32(b + to_uint32(j_1 - 1 - (2 * a))).
Let x_6 = 2 * a.
Let x_7 = 1 + x_6.
Let x_8 = x_7 % 2.
Let x_9 = j_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_2).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_6 < j_1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> ((2 + x_6) = j_1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_8 = 0)) \/ ((x_9 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_7 = j_1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: j_1 <= (1 + b + x_6).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(3 + x_6).
  If to_uint32(x_3) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= (x + x_5).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_1 < j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((2 + x_1) = j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
}
Prove: ((x_4 = 0) /\ (x_3 = 0)) \/ ((x_4 = 1) /\ (x_3 = 1)).
Prover Z3 4.8.12 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 30):
Let x = (if (flag_0 = 0) then 1 else 0) % 2.
Assume { Type: is_sint32(flag_0). (* Invariant *) Have: x != 0. }
Prove: x = 1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30208)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (10ms) (132)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 31):
Let x = to_uint32(1 + j).
Let x_1 = to_uint32(1 + a).
Let x_2 = 1 + (2 * x_1).
Let x_3 = to_uint32(b + to_uint32(j - 1 - (2 * a))).
Let x_4 = 2 * a.
Let x_5 = 1 + x_4.
Let x_6 = x_5 % 2.
Let x_7 = j % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_2).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_4 < j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> ((2 + x_4) = j)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (x_7 = 0)).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_6 = 0)) \/ ((x_7 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_5 = j)).
  (* Invariant *)
  Have: ((x_6 != 0) -> (x_7 != 0)).
  (* Invariant *)
  Have: j <= (1 + b + x_4).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(3 + x_4).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 <= (x_1 + x_3).
  (* Invariant *)
  Have: ((x % 2) = 1) /\ ((x_2 % 2) = 1).
}
Prove: x_2 = x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (45626)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (27ms) (466)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 31):
Assume {
  Type: is_sint32(flag_0).
  (* Invariant *)
  Have: ((if (flag_0 = 0) then 1 else 0) % 2) = 1.
}
Prove: flag_0 = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (29702)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (75)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 33):
Let x = to_uint32(1 + a).
Let x_1 = 2 * x.
Let x_2 = 1 + x_1.
Let x_3 = x_2 % 2.
Let x_4 = j % 2.
Let x_5 = to_uint32(b + to_uint32(j_1 - 1 - (2 * a))).
Let x_6 = 2 * a.
Let x_7 = 1 + x_6.
Let x_8 = x_7 % 2.
Let x_9 = j_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_2).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_6 < j_1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> ((2 + x_6) = j_1)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_8 = 0)) \/ ((x_9 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_7 = j_1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: j_1 <= (1 + b + x_6).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(3 + x_6).
  If to_uint32(x_3) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= (x + x_5).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_1 < j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((2 + x_1) = j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_3 = 0)) \/ ((x_4 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_2 = j)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_4 != 0)).
}
Prove: j <= (1 + x_1 + x_5).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (43706)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 34) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 34) (2/2):
Call Result at line 39
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
