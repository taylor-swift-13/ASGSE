[kernel] Parsing out/0018_0001/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0001/0018_merged.c:36: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0001/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_preserved (Qed 6ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 37ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_10_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_11_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_12_preserved (Qed 29ms) (Z3)
[wp] Proved goals:   25 / 30
  Qed:              21
  Alt-Ergo 2.5.4:    2 (60ms)
  Z3 4.8.12:         2 (20ms)
  Timeout:           5
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 17):
Let x = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x != 0) -> ((j % 2) != 0)).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: to_uint32(a + to_uint32(j - i)) = to_uint32(1 + a).
Prover Z3 4.8.12 returns Timeout (Qed:6ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:6ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 19):
Let x = to_uint32(b + to_uint32(j - i)).
Let x_1 = to_uint32(1 + a).
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x = x_1)).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (20ms) (41688)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 20):
Let x = to_uint32(b + to_uint32(j_1 - i)).
Let x_1 = to_uint32(1 + a).
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_uint32(j_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j_1 = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j_1 % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j_1 <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(to_uint32(2 + i) % 2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x = x_1)).
  (* Invariant *)
  Have: x <= x_1.
}
Prove: x_1 < j.
Prover Z3 4.8.12 returns Timeout (Qed:37ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:37ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 21):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j_1 - i)).
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_uint32(j_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j_1 = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j_1 % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j_1 <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(to_uint32(2 + i) % 2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = x)).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < j.
}
Prove: 0 < j.
Prover Z3 4.8.12 returns Valid (Qed:31ms) (10ms) (36269)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:31ms) (61ms) (992)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 25):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j - i)).
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j_1) /\ is_uint32(j) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_2 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_2 != 0) -> ((j % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(to_uint32(2 + i) % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = x)).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < j_1.
  (* Invariant *)
  Have: 0 < j_1.
}
Prove: 0 <= (x + x_1).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (36427)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (59ms) (977)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 26):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j - i)).
Let x_2 = to_uint32(2 + j).
Let x_3 = i % 2.
Let x_4 = i_1 % 2.
Let x_5 = to_uint32(2 + i).
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  (* Goal *)
  When: (x_5 % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_3 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_3 != 0) -> ((j % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = x)).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: 0 <= (x + x_1).
}
Prove: x_5 <= x_2.
Prover Z3 4.8.12 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 27):
Let x = to_uint32(2 + i).
Let x_1 = to_uint32(2 + j).
Let x_2 = to_uint32(1 + a).
Let x_3 = to_uint32(b + to_uint32(j - i)).
Let x_4 = i % 2.
Let x_5 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_sint32(flag_0) /\ is_sint32(tmp_0).
  (* Goal *)
  When: (x % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_5 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i <= j)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_4 != 0) -> ((j % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_3 = x_2)).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_2 < x_1.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: 0 <= (x_2 + x_3).
  (* Invariant *)
  Have: x <= x_1.
}
Prove: (1 + x) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 28):
Let x = to_uint32(1 + a).
Let x_1 = to_uint32(b + to_uint32(j_1 - i)).
Let x_2 = to_uint32(2 + i).
Let x_3 = x_2 % 2.
Let x_4 = i % 2.
Let x_5 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(i_1) /\
      is_uint32(j) /\ is_uint32(j_1) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0).
  (* Goal *)
  When: x_3 != 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: ((x_5 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (i_1 = 0)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (i_1 = 1)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (0 < i_1)).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (b = a)).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (j_1 = i)).
  (* Invariant *)
  Have: ((x_4 != 0) -> ((j_1 % 2) != 0)).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (j_1 <= (b + i))).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_3) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_1 = x)).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= (x + x_1).
}
Prove: x_2 = j.
Prover Z3 4.8.12 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 30):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + a).
Let x_3 = to_uint32(b + to_uint32(j_1 - i)).
Let x_4 = i % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_sint32(tmp_0).
  (* Invariant *)
  Have: b <= a.
  (* Invariant *)
  Have: a < j_1.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= (a + b).
  (* Invariant *)
  Have: ((x_4 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (j_1 = i)).
  (* Invariant *)
  Have: ((x_4 != 0) -> ((j_1 % 2) != 0)).
  (* Invariant *)
  Have: j_1 <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= (x_2 + x_3).
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((1 + x) = j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> (x = j)).
  (* Invariant *)
  Have: ((x_1 != 0) -> ((j % 2) != 0)).
}
Prove: j <= (x + x_3).
Prover Z3 4.8.12 returns Valid (Qed:19ms) (20ms) (42221)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 31) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
