[kernel] Parsing out/0018_0001/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0001/0018_merged.c:41: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0001/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 40 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 21ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_6_established (Qed 1ms) (Z3)
[wp] Proved goals:   38 / 40
  Qed:              28
  Alt-Ergo 2.5.4:    4 (11ms-27ms-59ms)
  Z3 4.8.12:         6 (10ms-23ms-60ms)
  Timeout:           2
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 17):
Let x = i % 2.
Let x_1 = j % 2.
Let x_2 = 2 * b.
Let x_3 = -i.
Let x_4 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_4).
  (* Invariant *)
  Have: (1 + x_2 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: ((j - i) * x_4) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_2).
  (* Invariant *)
  Have: ((x = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x = 0) -> (x_1 = 0)).
  (* Invariant *)
  Have: ((x = 0) /\ (x_1 = 0)) \/ ((x = 1) /\ (x_1 = 1)).
  (* Invariant *)
  Have: ((x != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x != 0) -> (x_1 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (1 + (2 * to_uint32(1 + b + j - i))) = to_uint32(2 + i).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (50ms) (97906)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (24ms) (495)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 20):
Let x = -i.
Let x_1 = to_uint32(1 + b + j - i).
Let x_2 = 1 + (2 * x_1).
Let x_3 = i % 2.
Let x_4 = j % 2.
Let x_5 = 2 * b.
Let x_6 = j - i.
Let x_7 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (1 + x_5 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_6 * x_7) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_5).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (x_4 = 0)).
  (* Invariant *)
  Have: ((x_3 = 0) /\ (x_4 = 0)) \/ ((x_3 = 1) /\ (x_4 = 1)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_3 != 0) -> (x_4 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(2 + i).
  If to_uint32(x_2 % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
}
Prove: (x_1 * (j_1 - 1 - (2 * x_1))) = to_uint32(b + to_uint32(x_6)).
Prover Z3 4.8.12 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 21):
Let x = -i.
Let x_1 = to_uint32(1 + b + j - i).
Let x_2 = 1 + (2 * x_1).
Let x_3 = x_1 * (j_1 - 1 - (2 * x_1)).
Let x_4 = j - i.
Let x_5 = i % 2.
Let x_6 = j % 2.
Let x_7 = 2 * b.
Let x_8 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j_1) /\ is_uint32(j) /\
      is_sint32(tmp_0) /\ is_uint32(x_8) /\ is_uint32(x_2) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (1 + x_7 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_4 * x_8) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_7).
  (* Invariant *)
  Have: ((x_5 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = 0)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_6 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(b + to_uint32(x_4)).
  Have: x_2 = to_uint32(2 + i).
  If to_uint32(x_2 % 2) = 0
  Then { Have: to_uint32(2 + j) = j_1. }
  Else { Have: to_uint32(1 + j) = j_1. }
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (20ms) (47488)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 22):
Let x = -i.
Let x_1 = to_uint32(1 + b + j_1 - i).
Let x_2 = x_1 * (j - 1 - (2 * x_1)).
Let x_3 = 1 + (2 * x_1).
Let x_4 = j_1 - i.
Let x_5 = i % 2.
Let x_6 = j_1 % 2.
Let x_7 = 2 * b.
Let x_8 = b + j_1 - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_uint32(j_1) /\
      is_sint32(tmp_0) /\ is_uint32(x_8) /\ is_uint32(x_3) /\ is_uint32(x_2).
  (* Invariant *)
  Have: (1 + x_7 + (2 * j_1)) = (3 * i).
  (* Invariant *)
  Have: (x_4 * x_8) = b.
  (* Invariant *)
  Have: i <= j_1.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j_1).
  (* Invariant *)
  Have: i <= (j_1 + x_7).
  (* Invariant *)
  Have: ((x_5 = 0) -> ((1 + i) = j_1)).
  (* Invariant *)
  Have: ((x_5 = 0) -> (x_6 = 0)).
  (* Invariant *)
  Have: ((x_5 = 0) /\ (x_6 = 0)) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (j_1 = i)).
  (* Invariant *)
  Have: ((x_5 != 0) -> (x_6 != 0)).
  (* Invariant *)
  Have: j_1 <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(b + to_uint32(x_4)).
  Have: x_3 = to_uint32(2 + i).
  If to_uint32(x_3 % 2) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: x_2 <= x_1.
}
Prove: (j + x_2) = (1 + (3 * x_1)).
Prover Z3 4.8.12 returns Valid (Qed:25ms) (60ms) (180411)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 22):
Assume { Type: is_sint32(flag_0). }
Prove: flag_0 = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 23):
Let x = -i.
Let x_1 = j - i.
Let x_2 = to_uint32(b + to_uint32(x_1)).
Let x_3 = to_uint32(1 + b + j - i).
Let x_4 = -x_2.
Let x_5 = 2 * x_3.
Let x_6 = 1 + x_5.
Let x_7 = i % 2.
Let x_8 = j % 2.
Let x_9 = 2 * b.
Let x_10 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\ is_uint32(1 + (3 * x_3) - x_2).
  (* Invariant *)
  Have: (1 + x_9 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_1 * x_10) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_9).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(2 + i).
  If to_uint32(x_6 % 2) = 0
  Then { Have: (to_uint32(2 + j) + x_2) = (1 + (3 * x_3)). }
  Else { Have: (to_uint32(1 + j) + x_2) = (1 + (3 * x_3)). }
  (* Invariant *)
  Have: (x_3 * (x_3 - x_2)) = x_2.
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: x_2 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:19ms) (10ms) (35802)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:19ms) (59ms) (999)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 24):
Let x = -i.
Let x_1 = j - i.
Let x_2 = to_uint32(b + to_uint32(x_1)).
Let x_3 = to_uint32(1 + b + j - i).
Let x_4 = 2 * x_3.
Let x_5 = -x_2.
Let x_6 = 1 + x_4.
Let x_7 = i % 2.
Let x_8 = j % 2.
Let x_9 = 2 * b.
Let x_10 = b + j - i.
Let x_11 = 3 * x_3.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_10) /\ is_uint32(x_6) /\ is_uint32(1 + x_11 - x_2).
  (* Invariant *)
  Have: (1 + x_9 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_1 * x_10) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_9).
  (* Invariant *)
  Have: ((x_7 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_7 = 0) -> (x_8 = 0)).
  (* Invariant *)
  Have: ((x_7 = 0) /\ (x_8 = 0)) \/ ((x_7 = 1) /\ (x_8 = 1)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_7 != 0) -> (x_8 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = to_uint32(2 + i).
  If to_uint32(x_6 % 2) = 0
  Then { Have: (to_uint32(2 + j) + x_2) = (1 + x_11). }
  Else { Have: (to_uint32(1 + j) + x_2) = (1 + x_11). }
  (* Invariant *)
  Have: (x_3 * (x_3 - x_2)) = x_2.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_2 <= x_4.
}
Prove: x_2 <= x_11.
Prover Z3 4.8.12 returns Valid (Qed:22ms) (10ms) (36158)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 28):
Let x = -i.
Let x_1 = j - i.
Let x_2 = to_uint32(b + to_uint32(x_1)).
Let x_3 = to_uint32(1 + b + j - i).
Let x_4 = 3 * x_3.
Let x_5 = 2 * x_3.
Let x_6 = -x_2.
Let x_7 = 1 + x_5.
Let x_8 = i % 2.
Let x_9 = j % 2.
Let x_10 = 2 * b.
Let x_11 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(1 + x_4 - x_2).
  (* Invariant *)
  Have: (1 + x_10 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_1 * x_11) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_10).
  (* Invariant *)
  Have: ((x_8 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_7 = to_uint32(2 + i).
  If to_uint32(x_7 % 2) = 0
  Then { Have: (to_uint32(2 + j) + x_2) = (1 + x_4). }
  Else { Have: (to_uint32(1 + j) + x_2) = (1 + x_4). }
  (* Invariant *)
  Have: (x_3 * (x_3 - x_2)) = x_2.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_4.
}
Prove: 0 <= (x_3 + x_2).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (39765)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 30):
Let x = -i.
Let x_1 = j - i.
Let x_2 = to_uint32(b + to_uint32(x_1)).
Let x_3 = to_uint32(1 + b + j - i).
Let x_4 = 3 * x_3.
Let x_5 = 2 * x_3.
Let x_6 = -x_2.
Let x_7 = 1 + x_5.
Let x_8 = i % 2.
Let x_9 = j % 2.
Let x_10 = 2 * b.
Let x_11 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_11) /\ is_uint32(x_7) /\ is_uint32(1 + x_4 - x_2).
  (* Goal *)
  When: (x_7 % 2) = 0.
  (* Invariant *)
  Have: (1 + x_10 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_1 * x_11) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_10).
  (* Invariant *)
  Have: ((x_8 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_8 = 0) -> (x_9 = 0)).
  (* Invariant *)
  Have: ((x_8 = 0) /\ (x_9 = 0)) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_8 != 0) -> (x_9 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_7 = to_uint32(2 + i).
  Have: (to_uint32(2 + j) + x_2) = (1 + x_4).
  (* Invariant *)
  Have: (x_3 * (x_3 - x_2)) = x_2.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: 0 <= (x_3 + x_2).
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: (1 + x_2) = x_3.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (43523)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (11ms) (147)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 32):
Let x = -i.
Let x_1 = to_uint32(1 + b + j - i).
Let x_2 = 2 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = 3 * x_1.
Let x_6 = j - i.
Let x_7 = to_uint32(b + to_uint32(x_6)).
Let x_8 = -x_7.
Let x_9 = 1 + x_5 - x_7.
Let x_10 = x_9 % 2.
Let x_11 = i % 2.
Let x_12 = j % 2.
Let x_13 = 2 * b.
Let x_14 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_14) /\ is_uint32(x_3) /\ is_uint32(x_9).
  (* Invariant *)
  Have: (1 + x_13 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_6 * x_14) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_13).
  (* Invariant *)
  Have: ((x_11 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_11 = 0) -> (x_12 = 0)).
  (* Invariant *)
  Have: ((x_11 = 0) /\ (x_12 = 0)) \/ ((x_11 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: ((x_11 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_11 != 0) -> (x_12 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(2 + i).
  If to_uint32(x_4) = 0
  Then { Have: (to_uint32(2 + j) + x_7) = (1 + x_5). }
  Else { Have: (to_uint32(1 + j) + x_7) = (1 + x_5). }
  (* Invariant *)
  Have: (x_1 * (x_1 - x_7)) = x_7.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: x_7 <= x_2.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: 0 <= (x_1 + x_7).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + x_7) = x_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_10 = 0)).
}
Prove: ((x_4 = 0) /\ (x_10 = 0)) \/ ((x_4 = 1) /\ (x_10 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:29ms) (20ms) (52738)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 33):
Let x = -i.
Let x_1 = to_uint32(1 + b + j - i).
Let x_2 = 2 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = 3 * x_1.
Let x_5 = j - i.
Let x_6 = to_uint32(b + to_uint32(x_5)).
Let x_7 = -x_6.
Let x_8 = 1 + x_4 - x_6.
Let x_9 = i % 2.
Let x_10 = j % 2.
Let x_11 = 2 * b.
Let x_12 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_12) /\ is_uint32(x_3) /\ is_uint32(x_8).
  (* Invariant *)
  Have: (1 + x_11 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_5 * x_12) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_11).
  (* Invariant *)
  Have: ((x_9 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_9 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((x_9 = 0) /\ (x_10 = 0)) \/ ((x_9 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_9 != 0) -> (x_10 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(2 + i).
  Have: (to_uint32(1 + j) + x_6) = (1 + x_4).
  (* Invariant *)
  Have: (x_1 * (x_1 - x_6)) = x_6.
  (* Invariant *)
  Have: x_6 <= x_1.
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: ((x_3 % 2) = 1) /\ ((x_8 % 2) = 1).
}
Prove: x_6 = x_1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (48912)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0001/0018_merged.c, line 35):
Let x = -i.
Let x_1 = to_uint32(1 + b + j - i).
Let x_2 = 2 * x_1.
Let x_3 = 1 + x_2.
Let x_4 = x_3 % 2.
Let x_5 = 3 * x_1.
Let x_6 = j - i.
Let x_7 = to_uint32(b + to_uint32(x_6)).
Let x_8 = -x_7.
Let x_9 = 1 + x_5 - x_7.
Let x_10 = x_9 % 2.
Let x_11 = i % 2.
Let x_12 = j % 2.
Let x_13 = 2 * b.
Let x_14 = b + j - i.
Assume {
  Type: is_uint32(b) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_14) /\ is_uint32(x_3) /\ is_uint32(x_9).
  (* Invariant *)
  Have: (1 + x_13 + (2 * j)) = (3 * i).
  (* Invariant *)
  Have: (x_6 * x_14) = b.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: b < i.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: i <= (b + j).
  (* Invariant *)
  Have: i <= (j + x_13).
  (* Invariant *)
  Have: ((x_11 = 0) -> ((1 + i) = j)).
  (* Invariant *)
  Have: ((x_11 = 0) -> (x_12 = 0)).
  (* Invariant *)
  Have: ((x_11 = 0) /\ (x_12 = 0)) \/ ((x_11 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: ((x_11 != 0) -> (j = i)).
  (* Invariant *)
  Have: ((x_11 != 0) -> (x_12 != 0)).
  (* Invariant *)
  Have: j <= (b + i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(2 + i).
  If to_uint32(x_4) = 0
  Then { Have: (to_uint32(2 + j) + x_7) = (1 + x_5). }
  Else { Have: (to_uint32(1 + j) + x_7) = (1 + x_5). }
  (* Invariant *)
  Have: (x_1 * (x_1 - x_7)) = x_7.
  (* Invariant *)
  Have: x_7 <= x_1.
  (* Invariant *)
  Have: x_7 <= x_2.
  (* Invariant *)
  Have: x_7 <= x_5.
  (* Invariant *)
  Have: 0 <= (x_1 + x_7).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((1 + x_7) = x_1)).
  (* Invariant *)
  Have: ((x_4 = 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: ((x_4 = 0) /\ (x_10 = 0)) \/ ((x_4 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_7 = x_1)).
  (* Invariant *)
  Have: ((x_4 != 0) -> (x_10 != 0)).
}
Prove: x_1 <= (2 * x_7).
Prover Z3 4.8.12 returns Valid (Qed:28ms) (20ms) (45052)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (15ms) (279)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0001/0018_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 36) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0001/0018_merged.c, line 36) (2/2):
Call Result at line 41
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0001/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
