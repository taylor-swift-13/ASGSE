[kernel] Parsing out/003_0008/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0008/003_merged.c:52: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0008/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 68 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_7_preserved (Qed 27ms) (Z3)
[wp] Proved goals:   67 / 68
  Qed:              55
  Alt-Ergo 2.5.4:   11 (4ms-15ms)
  Z3 4.8.12:         1 (470ms)
  Timeout:           1
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (39639)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (9ms) (119)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 15):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
}
Prove: (i < a) /\ (i < b).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (40023)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (11ms) (125)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 16):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
  (* Invariant *)
  Have: (i < a) /\ (i < b).
}
Prove: ((1 + a + i) = b) \/ ((1 + b + i) = a).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (470ms) (807456)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 17):
Let x = 3 * i_1.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i_1) /\ is_sint32(x - b_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i_1) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i_1 <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i_1 = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < a) /\ (i_1 < b).
  (* Invariant *)
  Have: ((1 + a + i_1) = b) \/ ((1 + b + i_1) = a).
}
Prove: (i <= a) /\ (i <= b).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (40505)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (14ms) (168)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 18):
Let x = 3 * i_1.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i_1) /\ is_sint32(x - b_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i_1) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i_1 <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i_1 = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < a) /\ (i_1 < b).
  (* Invariant *)
  Have: ((1 + a + i_1) = b) \/ ((1 + b + i_1) = a).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= a) /\ (i_2 <= b)))).
}
Prove: (3 * i) <= (a + b).
Prover Z3 4.8.12 returns Valid (Qed:26ms) (10ms) (40996)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:26ms) (8ms) (88)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 19):
Let x = 3 * i_1.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i_1) /\ is_sint32(x - b_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i_1) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i_1 <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (i_1 = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < a) /\ (i_1 < b).
  (* Invariant *)
  Have: ((1 + a + i_1) = b) \/ ((1 + b + i_1) = a).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= a) /\ (i_2 <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((3 * i_2) <= (a + b)))).
}
Prove: (i <= a) /\ (i <= b).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (10ms) (42138)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (12ms) (170)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 20):
Let x = a + b.
Let x_1 = 3 * i_1.
Let x_2 = 2 * n.
Let x_3 = 2 * b_1.
Let x_4 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1 - b_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i_1) /\ (b_1 <= x_1).
  (* Invariant *)
  Have: (i_1 <= b_1) /\ (b_1 <= x_4).
  (* Invariant *)
  Have: (i_1 = b_1) \/ (x_4 = b_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_1 <= x_2.
  (* Invariant *)
  Have: (x_1 <= x_3) \/ (x_3 <= x_1).
  (* Invariant *)
  Have: x_1 <= (b_1 + x_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x_1)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < a) /\ (i_1 < b).
  (* Invariant *)
  Have: ((1 + a + i_1) = b) \/ ((1 + b + i_1) = a).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= a) /\ (i_2 <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((3 * i_2) <= x))).
}
Prove: x = (3 * i).
Prover Z3 4.8.12 returns Timeout (Qed:27ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:27ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 21):
Let x = a + b.
Let x_1 = 3 * i_1.
Let x_2 = 2 * n.
Let x_3 = 2 * b_1.
Let x_4 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1 - b_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i_1) /\ (b_1 <= x_1).
  (* Invariant *)
  Have: (i_1 <= b_1) /\ (b_1 <= x_4).
  (* Invariant *)
  Have: (i_1 = b_1) \/ (x_4 = b_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x_1)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_1 <= x_2.
  (* Invariant *)
  Have: (x_1 <= x_3) \/ (x_3 <= x_1).
  (* Invariant *)
  Have: x_1 <= (b_1 + x_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_1) /\ ((b_1 + i_2) <= x_1)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < a) /\ (i_1 < b).
  (* Invariant *)
  Have: ((1 + a + i_1) = b) \/ ((1 + b + i_1) = a).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= a) /\ (i_2 <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> ((3 * i_2) <= x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) -> (x = (3 * i_2)))).
}
Prove: (3 + (3 * i)) = x.
Prover Z3 4.8.12 returns Valid (Qed:30ms) (20ms) (42584)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (12ms) (172)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 22):
Let x = a + b.
Let x_1 = 3 * i.
Let x_2 = 2 * n.
Let x_3 = 2 * b_1.
Let x_4 = 2 * i.
Let x_5 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_5) /\ is_sint32(x_1 - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x_1).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_4).
  (* Invariant *)
  Have: (i = b_1) \/ (x_4 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_2.
  (* Invariant *)
  Have: (x_1 <= x_3) \/ (x_3 <= x_1).
  (* Invariant *)
  Have: x_1 <= (b_1 + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x_1)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x_1.
    Have: (1 + x_1) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x_1.
    Have: (2 + x_1) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
  (* Invariant *)
  Have: (i < a) /\ (i < b).
  (* Invariant *)
  Have: ((1 + a + i) = b) \/ ((1 + b + i) = a).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= a) /\ (i_1 <= b)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> ((3 * i_1) <= x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x = (3 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((3 + (3 * i_1)) = x))).
}
Prove: exists i_1 : Z. (x = (3 * i_1)) /\ (0 <= i_1) /\ (i_1 <= x_5).
Prover Z3 4.8.12 returns Valid (Qed:36ms) (10ms) (42809)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (12ms) (141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 31):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1.
Let x_3 = 2 * i.
Let x_4 = 2 + x_3.
Let x_5 = 2 * n.
Let x_6 = 2 * b_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1 - b_2) /\
      is_sint32(3 + x_1 - a).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_2) /\ (0 <= i) /\ (b_2 <= x_1).
  (* Invariant *)
  Have: (i <= b_2) /\ (b_2 <= x_3).
  (* Invariant *)
  Have: (i = b_2) \/ (x_3 = b_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_2 <= x_5.
  (* Invariant *)
  Have: (x_1 <= x_6) \/ (x_6 <= x_1).
  (* Invariant *)
  Have: x_1 <= (b_2 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x_1)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x_1). Have: (1 + x_1) = (a + b). }
  Else {
    Have: (b_2 = b_1) /\ ((a_2 + b_1) = x_1).
    Have: (2 + x_1) = (a + b_1).
  }
  (* Invariant *)
  Have: (0 <= a) /\ ((-1) <= i) /\ (a <= x_2).
  (* Invariant *)
  Have: (i < a) /\ (a <= x_4).
  (* Invariant *)
  Have: (x = a) \/ (x_4 = a).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= a) /\ ((a + i_1) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
}
Prove: x_2 <= (a + x_5).
Prover Z3 4.8.12 returns Valid (Qed:35ms) (20ms) (41520)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:35ms) (6ms) (49)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 34):
Let x = 2 * n.
Let x_1 = 3 * i.
Let x_2 = 2 * i.
Let x_3 = 3 + (2 * b_3).
Let x_4 = 1 + b_3.
Let x_5 = 2 + b_3.
Let x_6 = 2 * b.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(i - 1) /\ is_sint32(x_1 - b) /\
      is_sint32(x_1 - 3 - b_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i) /\ (0 <= b_3) /\ ((3 + b_3) <= x_1).
  (* Invariant *)
  Have: (i <= x_4) /\ (x_5 <= x_2).
  (* Invariant *)
  Have: (x_4 = i) \/ (x_5 = x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) -> (i_1 < i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((1 + i_1) = i))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = 2 + i_1 in ((0 <= i_1) -> ((x_7 <= i) ->
      (x_7 = i))).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: (x_3 <= x_1) \/ (x_1 <= x_3).
  (* Invariant *)
  Have: x_1 <= (3 + b_3 + x).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x_1)))).
  (* Then *)
  Have: i <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: (i <= b) /\ (b <= x_2).
  (* Invariant *)
  Have: (i = b) \/ (x_2 = b).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b) /\ ((b + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: b <= x.
}
Prove: (x_1 <= x_6) \/ (x_6 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:41ms) (20ms) (41741)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (5ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 37):
Let x = 3 * i.
Let x_1 = 2 * b.
Let x_2 = 2 * n.
Let x_3 = 2 * i.
Let x_4 = 3 + (2 * b_3).
Let x_5 = 1 + b_3.
Let x_6 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(i - 1) /\ is_sint32(x - b) /\
      is_sint32(x - 3 - b_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i) /\ (0 <= b_3) /\ ((3 + b_3) <= x).
  (* Invariant *)
  Have: (i <= x_5) /\ (x_6 <= x_3).
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = x_3).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) -> (i_1 < i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((1 + i_1) = i))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = 2 + i_1 in ((0 <= i_1) -> ((x_7 <= i) ->
      (x_7 = i))).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: (x_4 <= x) \/ (x <= x_4).
  (* Invariant *)
  Have: x <= (3 + b_3 + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x)))).
  (* Then *)
  Have: i <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x).
  (* Invariant *)
  Have: (i <= b) /\ (b <= x_3).
  (* Invariant *)
  Have: (i = b) \/ (x_3 = b).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b) /\ ((b + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x <= x_1) \/ (x_1 <= x).
}
Prove: x <= (b + x_2).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (41951)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (4ms) (50)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 42):
Let x = 3 * i_1.
Let x_1 = 2 * n.
Let x_2 = 2 * b.
Let x_3 = 2 * i_1.
Let x_4 = 3 + (2 * b_3).
Let x_5 = 1 + b_3.
Let x_6 = 2 + b_3.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(i_1 - 1) /\ is_sint32(x - b) /\
      is_sint32(x - 3 - b_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i_1) /\ (0 <= b_3) /\ ((3 + b_3) <= x).
  (* Invariant *)
  Have: (i_1 <= x_5) /\ (x_6 <= x_3).
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_6 = x_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) ->
      ((i_2 <= b_3) /\ ((3 + b_3 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) -> (i_2 < i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) ->
      ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_7 = 2 + i_2 in ((0 <= i_2) -> ((x_7 <= i_1) ->
      (x_7 = i_1))).
  (* Invariant *)
  Have: i_1 <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: (x_4 <= x) \/ (x <= x_4).
  (* Invariant *)
  Have: x <= (3 + b_3 + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((3 + b_3 + i_2) <= x)))).
  (* Then *)
  Have: i_1 <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x).
  (* Invariant *)
  Have: (i_1 <= b) /\ (b <= x_3).
  (* Invariant *)
  Have: (i_1 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b) /\ ((b + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b + x_1).
}
Prove: (i <= b) /\ ((b + i) <= x).
Prover Z3 4.8.12 returns Valid (Qed:40ms) (10ms) (44291)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (15ms) (199)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0008/003_merged.c, line 47) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0008/003_merged.c, line 47) (2/2):
Call Result at line 52
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0008/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0008/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
