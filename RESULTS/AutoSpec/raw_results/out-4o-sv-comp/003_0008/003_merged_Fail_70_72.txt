[kernel] Parsing out/003_0008/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0008/003_merged.c:54: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0008/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 72 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_3_preserved (Qed 29ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_7_preserved (Qed 29ms) (Z3)
[wp] Proved goals:   70 / 72
  Qed:              57
  Alt-Ergo 2.5.4:   12
  Z3 4.8.12:         1 (310ms)
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 14):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (x + (i % 2)) = x_2.
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
}
Prove: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (10ms) (40054)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:23ms) (9ms) (124)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 15):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (x + (i % 2)) = x_2.
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
}
Prove: (i < a) /\ (i < b).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (41234)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (10ms) (131)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 16):
Let x = 3 * i.
Let x_1 = 2 * n.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_4) /\ is_sint32(x - b_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_1) /\ (0 <= i) /\ (b_1 <= x).
  (* Invariant *)
  Have: (i <= b_1) /\ (b_1 <= x_3).
  (* Invariant *)
  Have: (x + (i % 2)) = x_2.
  (* Invariant *)
  Have: (i = b_1) \/ (x_3 = b_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_1 <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b_1 + x_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_1) /\ ((b_1 + i_1) <= x)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (a_1 + b_1) = x.
    Have: (1 + x) = (a + b_1).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + b_1) = x.
    Have: (2 + x) = (a + b_1).
    Have: (1 + b_1) = b.
  }
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b) /\ ((-1) <= i).
  (* Invariant *)
  Have: (i < a) /\ (i < b).
}
Prove: (a + (x_4 % 2)) = b.
Prover Z3 4.8.12 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 17):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = i + x_1.
Let x_3 = 3 * i.
Let x_4 = 2 * n.
Let x_5 = 2 * b_3.
Let x_6 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3 - b_3) /\
      is_sint32(b - x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i) /\ (b_3 <= x_3).
  (* Invariant *)
  Have: (i <= b_3) /\ (b_3 <= x_6).
  (* Invariant *)
  Have: (x_3 + (i % 2)) = x_5.
  (* Invariant *)
  Have: (i = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_3)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (x_3 <= x_5) \/ (x_5 <= x_3).
  (* Invariant *)
  Have: x_3 <= (b_3 + x_4).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_3)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_3 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_3 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i).
  (* Invariant *)
  Have: (i < b) /\ (x_2 < b).
}
Prove: (x_1 = x) \/ (x_2 = (-1)).
Prover Z3 4.8.12 returns Valid (Qed:23ms) (310ms) (737621)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 18):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = i_1 + x_1.
Let x_3 = 3 * i_1.
Let x_4 = 2 * n.
Let x_5 = 2 * b_3.
Let x_6 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_3).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_6).
  (* Invariant *)
  Have: (x_3 + (i_1 % 2)) = x_5.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (x_3 <= x_5) \/ (x_5 <= x_3).
  (* Invariant *)
  Have: x_3 <= (b_3 + x_4).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_3)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_3 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_3 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_2 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_2 = (-1)).
}
Prove: (i <= b) /\ ((i + x_1) <= b).
Prover Z3 4.8.12 returns Valid (Qed:24ms) (10ms) (47064)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:24ms) (21ms) (245)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 19):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = i_1 + x_1.
Let x_3 = 3 * i_1.
Let x_4 = 2 * n.
Let x_5 = 2 * b_3.
Let x_6 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_3).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_6).
  (* Invariant *)
  Have: (x_3 + (i_1 % 2)) = x_5.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_6 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_4.
  (* Invariant *)
  Have: (x_3 <= x_5) \/ (x_5 <= x_3).
  (* Invariant *)
  Have: x_3 <= (b_3 + x_4).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_3)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_3 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_3 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_2 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_2 = (-1)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b) /\ ((i_2 + x_1) <= b)))).
}
Prove: ((3 * i) + x_1) <= (2 * b).
Prover Z3 4.8.12 returns Valid (Qed:27ms) (20ms) (43999)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:27ms) (7ms) (98)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 20):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * b.
Let x_3 = i_1 + x_1.
Let x_4 = 3 * i_1.
Let x_5 = 2 * n.
Let x_6 = 2 * b_3.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_4).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_7).
  (* Invariant *)
  Have: (x_4 + (i_1 % 2)) = x_6.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_7 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (x_4 <= x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: x_4 <= (b_3 + x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_4 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_4 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_3 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_3 = (-1)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b) /\ ((i_2 + x_1) <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) <= x_2))).
}
Prove: ((3 * i) + x_1) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 21):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * b.
Let x_3 = i_1 + x_1.
Let x_4 = 3 * i_1.
Let x_5 = 2 * n.
Let x_6 = 2 * b_3.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_4).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_7).
  (* Invariant *)
  Have: (x_4 + (i_1 % 2)) = x_6.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_7 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (x_4 <= x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: x_4 <= (b_3 + x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_4 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_4 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_3 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_3 = (-1)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b) /\ ((i_2 + x_1) <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) = x_2))).
}
Prove: (i <= b) /\ ((i + x_1) <= b).
Prover Z3 4.8.12 returns Valid (Qed:33ms) (10ms) (45679)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:33ms) (20ms) (257)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 22):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * b.
Let x_3 = i_1 + x_1.
Let x_4 = 3 * i_1.
Let x_5 = 2 * n.
Let x_6 = 2 * b_3.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_4).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_7).
  (* Invariant *)
  Have: (x_4 + (i_1 % 2)) = x_6.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_7 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (x_4 <= x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: x_4 <= (b_3 + x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_4 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_4 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_3 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_3 = (-1)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b) /\ ((i_2 + x_1) <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) = x_2))).
}
Prove: ((3 * i) + x_1) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:34ms) (10ms) (44691)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:34ms) (24ms) (294)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 23):
Let x = 1 + i_1.
Let x_1 = x % 2.
Let x_2 = 2 * b.
Let x_3 = i_1 + x_1.
Let x_4 = 3 * i_1.
Let x_5 = 2 * n.
Let x_6 = 2 * b_3.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4 - b_3) /\
      is_sint32(b - x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i_1) /\ (b_3 <= x_4).
  (* Invariant *)
  Have: (i_1 <= b_3) /\ (b_3 <= x_7).
  (* Invariant *)
  Have: (x_4 + (i_1 % 2)) = x_6.
  (* Invariant *)
  Have: (i_1 = b_3) \/ (x_7 = b_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (x_4 <= x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: x_4 <= (b_3 + x_5).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b_3) /\ ((b_3 + i_2) <= x_4)))).
  (* Then *)
  Have: i_1 < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_4 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_4 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i_1).
  (* Invariant *)
  Have: (i_1 < b) /\ (x_3 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_3 = (-1)).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_2 <= b) /\ ((i_2 + x_1) <= b)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (((3 * i_2) + x_1) = x_2))).
}
Prove: (3 + (3 * i) + x_1) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:43ms) (10ms) (45910)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:43ms) (17ms) (298)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 24):
Let x = 1 + i.
Let x_1 = x % 2.
Let x_2 = 2 * b.
Let x_3 = i + x_1.
Let x_4 = 3 * i.
Let x_5 = 2 * n.
Let x_6 = 2 * b_3.
Let x_7 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4 - b_3) /\
      is_sint32(b - x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_3) /\ (0 <= i) /\ (b_3 <= x_4).
  (* Invariant *)
  Have: (i <= b_3) /\ (b_3 <= x_7).
  (* Invariant *)
  Have: (x_4 + (i % 2)) = x_6.
  (* Invariant *)
  Have: (i = b_3) \/ (x_7 = b_3).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_4)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_3 <= x_5.
  (* Invariant *)
  Have: (x_4 <= x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: x_4 <= (b_3 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_3) /\ ((b_3 + i_1) <= x_4)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (b_3 = b_1) /\ ((a + x_1) = (1 + b_1)) /\
        ((x_4 + x_1) = (1 + (2 * b_1))).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (b_3 = b_2) /\ ((1 + a_1 + x_1) = b_2) /\
        ((1 + x_4 + x_1) = (2 * b_2)).
    Have: (1 + b_2) = b.
  }
  (* Invariant *)
  Have: (0 <= b) /\ (x_1 <= b) /\ ((-1) <= i).
  (* Invariant *)
  Have: (i < b) /\ (x_3 < b).
  (* Invariant *)
  Have: (x_1 = x) \/ (x_3 = (-1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b) /\ ((i_1 + x_1) <= b)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((3 * i_1) + x_1) <= x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (((3 * i_1) + x_1) = x_2))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((3 + (3 * i_1) + x_1) = x_2))).
}
Prove: exists i_1 : Z. (((3 * i_1) + x_1) = x_2) /\ (0 <= i_1) /\ (i_1 <= x).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (45398)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (22ms) (273)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 33):
Let x = 1 + i.
Let x_1 = 3 * i.
Let x_2 = 3 + x_1.
Let x_3 = 2 * i.
Let x_4 = 2 + x_3.
Let x_5 = 2 * n.
Let x_6 = 2 * b_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1 - b_2) /\
      is_sint32(3 + x_1 - a).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 <= b_2) /\ (0 <= i) /\ (b_2 <= x_1).
  (* Invariant *)
  Have: (i <= b_2) /\ (b_2 <= x_3).
  (* Invariant *)
  Have: (x_1 + (i % 2)) = x_6.
  (* Invariant *)
  Have: (i = b_2) \/ (x_3 = b_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: b_2 <= x_5.
  (* Invariant *)
  Have: (x_1 <= x_6) \/ (x_6 <= x_1).
  (* Invariant *)
  Have: x_1 <= (b_2 + x_5).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= b_2) /\ ((b_2 + i_1) <= x_1)))).
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x_1). Have: (1 + x_1) = (a + b). }
  Else {
    Have: (b_2 = b_1) /\ ((a_2 + b_1) = x_1).
    Have: (2 + x_1) = (a + b_1).
  }
  (* Invariant *)
  Have: (0 <= a) /\ ((-1) <= i) /\ (a <= x_2).
  (* Invariant *)
  Have: (i < a) /\ (a <= x_4).
  (* Invariant *)
  Have: ((2 * a) + (x % 2)) = x_2.
  (* Invariant *)
  Have: (x = a) \/ (x_4 = a).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      ((i_1 <= a) /\ ((a + i_1) <= x_2)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 <= x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (x = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
}
Prove: x_2 <= (a + x_5).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (42070)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (6ms) (53)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 36):
Let x = 2 * n.
Let x_1 = 3 * i.
Let x_2 = 2 * i.
Let x_3 = 2 * b.
Let x_4 = 3 + (2 * b_3).
Let x_5 = 1 + b_3.
Let x_6 = 2 + b_3.
Let x_7 = i - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_7) /\ is_sint32(x_1 - b) /\
      is_sint32(x_1 - 3 - b_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i) /\ (0 <= b_3) /\ ((3 + b_3) <= x_1).
  (* Invariant *)
  Have: (i <= x_5) /\ (x_6 <= x_2).
  (* Invariant *)
  Have: (x_1 + (x_7 % 2)) = x_4.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) -> (i_1 < i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((1 + i_1) = i))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_8 = 2 + i_1 in ((0 <= i_1) -> ((x_8 <= i) ->
      (x_8 = i))).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: (x_4 <= x_1) \/ (x_1 <= x_4).
  (* Invariant *)
  Have: x_1 <= (3 + b_3 + x).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x_1)))).
  (* Then *)
  Have: i <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x_1).
  (* Invariant *)
  Have: (i <= b) /\ (b <= x_2).
  (* Invariant *)
  Have: (x_1 + (i % 2)) = x_3.
  (* Invariant *)
  Have: (i = b) \/ (x_2 = b).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b) /\ ((b + i_1) <= x_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: b <= x.
}
Prove: (x_1 <= x_3) \/ (x_3 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (10ms) (42202)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (6ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 39):
Let x = 3 * i.
Let x_1 = 2 * b.
Let x_2 = 2 * n.
Let x_3 = 2 * i.
Let x_4 = 3 + (2 * b_3).
Let x_5 = 1 + b_3.
Let x_6 = 2 + b_3.
Let x_7 = i - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_7) /\ is_sint32(x - b) /\
      is_sint32(x - 3 - b_3).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i) /\ (0 <= b_3) /\ ((3 + b_3) <= x).
  (* Invariant *)
  Have: (i <= x_5) /\ (x_6 <= x_3).
  (* Invariant *)
  Have: (x + (x_7 % 2)) = x_4.
  (* Invariant *)
  Have: (x_5 = i) \/ (x_6 = x_3).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) -> (i_1 < i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      ((1 + i_1) = i))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_8 = 2 + i_1 in ((0 <= i_1) -> ((x_8 <= i) ->
      (x_8 = i))).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x_2.
  (* Invariant *)
  Have: (x_4 <= x) \/ (x <= x_4).
  (* Invariant *)
  Have: x <= (3 + b_3 + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b_3) /\ ((3 + b_3 + i_1) <= x)))).
  (* Then *)
  Have: i <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x).
  (* Invariant *)
  Have: (i <= b) /\ (b <= x_3).
  (* Invariant *)
  Have: (x + (i % 2)) = x_1.
  (* Invariant *)
  Have: (i = b) \/ (x_3 = b).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      ((i_1 <= b) /\ ((b + i_1) <= x)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 <= i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((1 + i_1) = i))).
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x <= x_1) \/ (x_1 <= x).
}
Prove: x <= (b + x_2).
Prover Z3 4.8.12 returns Valid (Qed:37ms) (20ms) (42412)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 44):
Let x = 3 * i_1.
Let x_1 = 2 * n.
Let x_2 = 2 * b.
Let x_3 = 2 * i_1.
Let x_4 = 3 + (2 * b_3).
Let x_5 = 1 + b_3.
Let x_6 = 2 + b_3.
Let x_7 = i_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i_1) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(x_7) /\ is_sint32(x - b) /\
      is_sint32(x - 3 - b_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (0 < i_1) /\ (0 <= b_3) /\ ((3 + b_3) <= x).
  (* Invariant *)
  Have: (i_1 <= x_5) /\ (x_6 <= x_3).
  (* Invariant *)
  Have: (x + (x_7 % 2)) = x_4.
  (* Invariant *)
  Have: (x_5 = i_1) \/ (x_6 = x_3).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) ->
      ((i_2 <= b_3) /\ ((3 + b_3 + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) -> (i_2 < i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= i_1) ->
      ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. let x_8 = 2 + i_2 in ((0 <= i_2) -> ((x_8 <= i_1) ->
      (x_8 = i_1))).
  (* Invariant *)
  Have: i_1 <= (1 + n).
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Invariant *)
  Have: (x_4 <= x) \/ (x <= x_4).
  (* Invariant *)
  Have: x <= (3 + b_3 + x_1).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b_3) /\ ((3 + b_3 + i_2) <= x)))).
  (* Then *)
  Have: i_1 <= n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((3 + a + b_1) = x). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((3 + a_1 + b_2) = x). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: (0 <= b) /\ (b <= x).
  (* Invariant *)
  Have: (i_1 <= b) /\ (b <= x_3).
  (* Invariant *)
  Have: (x + (i_1 % 2)) = x_2.
  (* Invariant *)
  Have: (i_1 = b) \/ (x_3 = b).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      ((i_2 <= b) /\ ((b + i_2) <= x)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 <= i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 = i_1))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((1 + i_2) = i_1))).
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: (x <= x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: x <= (b + x_1).
}
Prove: (i <= b) /\ ((b + i) <= x).
Prover Z3 4.8.12 returns Valid (Qed:43ms) (20ms) (46664)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:43ms) (15ms) (195)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0008/003_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0008/003_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0008/003_merged.c, line 49) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0008/003_merged.c, line 49) (2/2):
Call Result at line 54
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0008/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0008/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
