[kernel] Parsing out/003_0001/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0001/003_merged.c:27: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0001/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              12
  Alt-Ergo 2.5.4:    4 (4ms-6ms)
  Z3 4.8.12:         2 (10ms)
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 15):
Let x = 3 * i.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(1 + i) /\ is_sint32(2 + b) /\ is_sint32(x - b).
  (* Residual *)
  When: tmp_0 != 0.
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: b <= (2 * i).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: b <= x.
  (* Then *)
  Have: i < n.
}
Prove: i <= (1 + b).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (31999)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (4ms) (18)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 16):
Let x = 3 * i.
Let x_1 = 2 * i.
Let x_2 = -b.
Assume {
  Type: is_sint32(b) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + b) /\
      is_sint32(1 + i) /\ is_sint32(x - b) /\ is_sint32(2 + x - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= b.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b.
  (* Invariant *)
  Have: b <= x.
  (* Then *)
  Have: i < n.
}
Prove: b <= (1 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (31937)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (4ms) (19)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 18):
Let x = 2 * i.
Let x_1 = 3 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(1 + i) /\ is_sint32(x_1 - b_3) /\
      is_sint32(3 + x_1 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x).
}
Prove: exists i_3 : Z. 0 <= i_3.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (10ms) (28054)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 18):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:0.68ms) (10ms) (23846)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 20):
Let x = 2 * i.
Let x_1 = 3 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(1 + i) /\ is_sint32(x_1 - b_2) /\
      is_sint32(3 + x_1 - a).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= b_2.
  (* Invariant *)
  Have: b_2 <= x.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_2.
  (* Invariant *)
  Have: b_2 <= x_1.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_2 = b) /\ ((a_1 + b) = x_1). Have: (1 + x_1) = (a + b). }
  Else {
    Have: (b_2 = b_1) /\ ((a_2 + b_1) = x_1).
    Have: (2 + x_1) = (a + b_1).
  }
  (* Invariant *)
  Have: a <= (2 + x).
  (* Invariant *)
  Have: i < a.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: a <= (3 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (34786)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (6ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0001/003_merged.c, line 21):
Let x = 2 * i.
Let x_1 = 3 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(tmp_0) /\ is_sint32(1 + i) /\ is_sint32(x_1 - b_3) /\
      is_sint32(3 + x_1 - b).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= b_3.
  (* Invariant *)
  Have: b_3 <= x.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= b_3.
  (* Invariant *)
  Have: b_3 <= x_1.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (b_3 = b_1) /\ ((a + b_1) = x_1). Have: (2 + b_1) = b. }
  Else { Have: (b_3 = b_2) /\ ((a_1 + b_2) = x_1). Have: (1 + b_2) = b. }
  (* Invariant *)
  Have: i < b.
  (* Invariant *)
  Have: b <= (2 + x).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= b.
}
Prove: b <= (3 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (34919)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (5ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0001/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0001/003_merged.c, line 22) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0001/003_merged.c, line 22) (2/2):
Call Result at line 27
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0001/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0001/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
