[kernel] Parsing out/0021_0001/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0001/0021_merged.c:36: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0001/0021_merged.c:15: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0001/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/0021_0001/0021_merged.c:15: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 27 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_6_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_8_established (Qed 4ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_11_established (Qed 3ms) (Z3)
[wp] [Timeout] typed_foo0021_assert_missing_return (Qed 2ms) (Z3)
[wp] Proved goals:   22 / 27
  Qed:              11
  Alt-Ergo 2.5.4:    9
  Z3 4.8.12:         2 (110ms-320ms)
  Timeout:           5
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 20):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 23):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (i_5 = i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (j <= (2 * i_4)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: (2 * i) <= n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (37936)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 23):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: (2 * i) <= n.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30552)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (3ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 24):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (i_5 = i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (j <= (2 * i_4)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (37950)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 24):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= n))).
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (31096)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (2ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 25):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (i_5 = i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (j <= (2 * i_4)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: i <= j.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (110ms) (159174)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 25):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
}
Prove: i < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 26):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (i_5 = i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (j <= (2 * i_4)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 <= j))).
}
Prove: (2 * i) < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (4ms) (31)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 26):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 < x))).
}
Prove: (2 * i) < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (17)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 27):
Let x = 2 * i_2.
Let x_1 = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_2) -> (i_5 = i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (j <= (2 * i_4)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 <= j))).
}
Prove: x_1 = (2 * i).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 27):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 < x))).
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 28):
Let x = 1 + j.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> (i_4 = i_1))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 < j))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((2 * i_4) = j))).
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) -> (j <= (2 * i_3)))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 <= j))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (x = (2 * i_4)))).
}
Prove: exists i_4 : Z. ((i_4 <= i) -> ((0 <= i_4) -> (j < (2 * i_4)))).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (320ms) (243461)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 28):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) <= n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> ((2 * i_1) < n))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) -> (i_1 < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
}
Prove: exists i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i <= i_1))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (427ms) (13343)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 29):
Let x = 1 + j.
Let x_1 = 2 * i.
Let x_2 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < x_2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i_1) -> (i_5 = i_1))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((2 * i_5) <= n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((2 * i_5) < n))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 < j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> ((2 * i_5) = j))).
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) -> (j <= (2 * i_3)))).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) -> (i_5 <= j))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (x = (2 * i_5)))).
  (* Invariant *)
  Have: ((i_4 <= i) -> ((0 <= i_4) -> (j < (2 * i_4)))).
}
Prove: x_1 <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (24)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 30):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) -> (i_2 < x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: ((i_1 <= i) -> ((0 <= i_1) -> (i <= i_1))).
}
Prove: 0 <= i.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0001/0021_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0001/0021_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0001/0021_merged.c, line 44):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Else *)
  Have: n <= i.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0021_0001/0021_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0001/0021_merged.c, line 32) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0001/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0001/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
