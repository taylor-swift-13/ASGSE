[kernel] Parsing out/0021_0002/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0002/0021_merged.c:57: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0002/0021_merged.c:36: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0002/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 62 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_established (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_2_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo0021_assert_missing_return (Qed 3ms) (Z3)
[wp] Proved goals:   58 / 62
  Qed:              37
  Alt-Ergo 2.5.4:   13
  Z3 4.8.12:         8 (120ms-250ms-440ms)
  Timeout:           4
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 16):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(x_1) /\ is_sint32(1 + i).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_6 : Z. (i_6 < 0) \/ (k <= i_6).
  (* Invariant *)
  Have: x_1 <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> (i_6 = i_1))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) <= k))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) < k))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < k) -> (i_6 < x_1))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < k.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (i_1 <= i_4))).
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: i < k.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) <= k))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) < k))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < k) -> (i_6 < j))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) = j))).
  (* Invariant *)
  Have: ((i_5 <= i) -> ((0 <= i_5) -> (j <= (2 * i_5)))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= j.
}
Prove: (2 + x) = j.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (260ms) (253118)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 16):
Assume {
  Type: is_sint32(j) /\ is_sint32(k).
  (* Pre-condition *)
  Have: k <= 2147483646.
}
Prove: j = 0.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 17):
Assume { Type: is_sint32(n). (* Pre-condition *) Have: n <= 2147483646. }
Prove: 0 <= n.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 19):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = 1 + i.
Let x_3 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_3))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= (1 + x)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> (x_2 = i_7))).
  (* Invariant *)
  Have: (i < i_6) \/ (i_6 < 0).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= x_1.
}
Prove: x_2 = i_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (1.4s) (59836)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 20):
Let x = 1 + i_1.
Let x_1 = 2 * i_1.
Let x_2 = 2 + x_1.
Let x_3 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_3))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= (1 + x_1)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> (x = i_7))).
  (* Invariant *)
  Have: (i_1 < i_6) \/ (i_6 < 0).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i_1) -> ((0 <= i_7) -> (x = i_7))).
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (10ms) (39173)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 22):
Let x = 1 + i_1.
Let x_1 = 2 * i_1.
Let x_2 = 2 + x_1.
Let x_3 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_3))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= (1 + x_1)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> (x = i_7))).
  (* Invariant *)
  Have: (i_1 < i_6) \/ (i_6 < 0).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i_1) -> ((0 <= i_7) -> (x = i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i_1) -> ((0 <= i_7) -> (i_7 <= x))).
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (39711)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (2ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 24):
Let x = 1 + i_1.
Let x_1 = 2 * i_1.
Let x_2 = 2 + x_1.
Let x_3 = 1 + x_1.
Let x_4 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_4) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_4 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_4))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= x_3))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> (x = i_7))).
  (* Invariant *)
  Have: (i_1 < i_6) \/ (i_6 < 0).
  (* Invariant *)
  Have: (-1) <= i_1.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i_1) -> ((0 <= i_7) -> (x = i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i_1) -> ((0 <= i_7) -> (i_7 <= x))).
}
Prove: i <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39845)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (6ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 24):
Assume {
  Type: is_sint32(n).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 27):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_3))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= (1 + x_1)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> (x = i_7))).
  (* Invariant *)
  Have: (i < i_6) \/ (i_6 < 0).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i) -> ((0 <= i_7) -> (x = i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i) -> ((0 <= i_7) -> (i_7 <= x))).
}
Prove: x = i_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (1.5s) (60154)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 28):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. (i_6 < 0) \/ (n <= i_6).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> (i_6 = i_1))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 < x_3))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (i_1 <= i_4))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 <= (1 + x_1)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> (x = i_6))).
  (* Invariant *)
  Have: (i < i_5) \/ (i_5 < 0).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) -> (x = i_6))).
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) -> (i_6 <= x))).
}
Prove: exists i_6 : Z. ((0 <= i_6) -> ((i_6 <= x) -> (i < i_6))).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (300ms) (254893)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 29):
Let x = 1 + i.
Let x_1 = 2 * i.
Let x_2 = 2 + x_1.
Let x_3 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_3) /\
      is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_3 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> (i_7 = i_1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_3))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (i_1 <= i_4))).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= (1 + x_1)))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> (x = i_7))).
  (* Invariant *)
  Have: (i < i_5) \/ (i_5 < 0).
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= x_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i) -> ((0 <= i_7) -> (x = i_7))).
  (* Invariant *)
  Have: forall i_7 : Z. ((i_7 <= i) -> ((0 <= i_7) -> (i_7 <= x))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= x) -> (i < i_6))).
}
Prove: exists i_7 : Z. ((0 <= i_7) -> ((i_7 <= x) -> (i < i_7))).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (220ms) (264643)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 44):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_6 <= i_1) -> ((0 <= i_6) -> (j <= (2 * i_6)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: (2 * i) <= n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39164)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 44):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (n <= i_4).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> (i_4 = i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 < x))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
}
Prove: (2 * i) <= n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (34189)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 45):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_6 <= i_1) -> ((0 <= i_6) -> (j <= (2 * i_6)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (39178)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 45):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (n <= i_4).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> (i_4 = i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 < x))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
}
Prove: (2 * i) < n.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34203)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (4ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 46):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_6 <= i_1) -> ((0 <= i_6) -> (j <= (2 * i_6)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
}
Prove: i <= j.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (440ms) (214413)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 46):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < k).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (k <= i_4).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> (i_4 = i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) < k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (i_4 < x))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < k.
}
Prove: i < x.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (120ms) (168450)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 47):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(1 + j).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_6 <= i_1) -> ((0 <= i_6) -> (j <= (2 * i_6)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= j))).
}
Prove: (2 * i) < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 47):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (n <= i_4).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> (i_4 = i_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) <= n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) -> ((2 * i_4) < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) -> (i_4 < x))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
}
Prove: (2 * i) < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (22)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 48):
Let x = 2 * i_2.
Let x_1 = 1 + j.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> (i_7 = i_2))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) -> (i_2 <= i_3))).
  (* Invariant *)
  Have: ((i_4 <= i_2) -> ((0 <= i_4) -> (i_2 <= i_4))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((0 <= i_5) -> (i_2 <= i_5))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_6 <= i_1) -> ((0 <= i_6) -> (j <= (2 * i_6)))).
  (* Invariant *)
  Have: (2 * i_1) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= j))).
}
Prove: x_1 = (2 * i).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (8ms) (83)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 48):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (k <= i_4).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> (i_4 = i))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((2 * i_4) <= k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((2 * i_4) < k))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < k) -> (i_4 < x))).
  (* Invariant *)
  Have: ((i_2 <= i) -> ((0 <= i_2) -> (i <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i) -> ((0 <= i_3) -> (i <= i_3))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < k.
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (150ms) (189151)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 49):
Let x = 1 + j.
Let x_1 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. (i_6 < 0) \/ (n <= i_6).
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> (i_6 = i_1))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) -> ((2 * i_6) < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 < x_1))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (i_1 <= i_4))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) <= n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) < n))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 < j))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> ((2 * i_6) = j))).
  (* Invariant *)
  Have: ((i_5 <= i) -> ((0 <= i_5) -> (j <= (2 * i_5)))).
  (* Invariant *)
  Have: (2 * i) <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) -> (i_6 <= j))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) -> (x = (2 * i_6)))).
}
Prove: exists i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) -> (j < (2 * i_6)))).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (210ms) (238319)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 49):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (k <= i_3).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < k) -> (i_3 < x))).
  (* Invariant *)
  Have: ((i_1 <= i) -> ((0 <= i_1) -> (i <= i_1))).
  (* Invariant *)
  Have: ((i_2 <= i) -> ((0 <= i_2) -> (i <= i_2))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < k.
}
Prove: exists i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) -> (i <= i_3))).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (300ms) (254031)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 50):
Let x = 1 + j.
Let x_1 = 2 * i.
Let x_2 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\
      is_sint32(x_2) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 2147483646.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. (i_7 < 0) \/ (n <= i_7).
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> (i_7 = i_1))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < x_2))).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) -> (i_1 <= i_2))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((0 <= i_3) -> (i_1 <= i_3))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: ((i_4 <= i_1) -> ((0 <= i_4) -> (i_1 <= i_4))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) <= n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) < n))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 < j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> ((2 * i_7) = j))).
  (* Invariant *)
  Have: ((i_5 <= i) -> ((0 <= i_5) -> (j <= (2 * i_5)))).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) -> (i_7 <= j))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i) -> (x = (2 * i_7)))).
  (* Invariant *)
  Have: ((i_6 <= i) -> ((0 <= i_6) -> (j < (2 * i_6)))).
}
Prove: x_1 <= x.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (40481)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (4ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0002/0021_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0002/0021_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0002/0021_merged.c, line 65):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (k <= i_3).
  (* Invariant *)
  Have: x <= k.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 = i))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) <= k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < k))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < k) -> (i_3 < x))).
  (* Invariant *)
  Have: ((i_1 <= i) -> ((0 <= i_1) -> (i <= i_1))).
  (* Invariant *)
  Have: ((i_2 <= i) -> ((0 <= i_2) -> (i <= i_2))).
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: k <= i.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0021_0002/0021_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0002/0021_merged.c, line 53) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0002/0021_merged.c, line 53) (2/2):
Call Result at line 57
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0002/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0002/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
