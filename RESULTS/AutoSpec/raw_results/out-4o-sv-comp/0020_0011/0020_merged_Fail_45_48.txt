[kernel] Parsing out/0020_0011/0020_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 48 goals scheduled
[wp] [Timeout] typed_foo0020_loop_invariant_15_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_foo0020_loop_invariant_22_established (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo0020_loop_invariant_23_established (Qed 4ms) (Z3)
[wp] Proved goals:   45 / 48
  Qed:              40
  Alt-Ergo 2.5.4:    3 (5ms-7ms-11ms)
  Z3 4.8.12:         2 (10ms)
  Timeout:           3
------------------------------------------------------------
  Function foo0020
------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 23):
Let x = 1 + i.
Let x_1 = x * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_2 = 2000 * i.
Let x_3 = 4000 * i.
Let x_4 = 10000 * i.
Let x_5 = 10000 + x_4.
Let x_6 = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_6) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x_6 = x_2) \/ (x_6 = x_3) \/ (x_6 = x_4).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: (x_1 = (2000 + x_2)) \/ (x_1 = (4000 + x_3)) \/ (x_1 = x_5).
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:17ms) (20ms) (33965)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:17ms) (11ms) (195)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 25):
Let x = 10000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(1 + i) /\ is_sint32(10000 + x).
  (* Residual *)
  When: v != 1.
  (* Residual *)
  When: v != 0.
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: (-1) <= i.
Prover Z3 4.8.12 returns Valid (Qed:15ms) (10ms) (31053)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (5ms) (17)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (17ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 45):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = 2000 * i.
Let x_2 = 10000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: (x = x_1) \/ (x = (4000 * i)) \/ (x = x_2).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
}
Prove: i <= x.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (31677)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (35)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 48):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = i + k.
Let x_2 = 4000 * i.
Let x_3 = -x.
Let x_4 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_5 = 2000 * i.
Let x_6 = 10000 * i.
Let x_7 = -k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(v) /\
      is_sint32(k - 1) /\ is_sint32(x_4) /\ is_sint32(x_4 - k) /\
      is_sint32(1 + x_4 - k).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: (x_4 = x_5) \/ (x_4 = x_2) \/ (x_4 = x_6).
  (* Invariant *)
  Have: x_4 = x.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: ((i + k - x) *
         (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))) = k.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= (2 * k).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: ((3999 * k) + x_2) <= (4000 * x).
  (* Then *)
  Have: x < x_1.
}
Prove: (1
        + ((i + k - 1 - x) *
           (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))))
         = k.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 52):
Let x = 4000 * i.
Let x_1 = -j.
Let x_2 = (i - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_3 = 1 + x_2.
Let x_4 = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_5 = 1 + j + x_2.
Let x_6 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_7 = 2000 * i.
Let x_8 = 10000 * i.
Let x_9 = (n - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(v) /\
      is_sint32(1 + j) /\ is_sint32(x_6) /\ is_sint32(x_9) /\
      is_sint32(1 + x_9).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: (x_6 = x_7) \/ (x_6 = x) \/ (x_6 = x_8).
  (* Invariant *)
  Have: x_6 = x_4.
  (* Invariant *)
  Have: x_6 <= x_8.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: ((i - j) *
         (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))) = x_3.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: j <= x_3.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: x <= (1 + (4000 * j) + x_2).
  (* Then *)
  Have: j < i.
}
Prove: j < x_2.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (10653)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 55):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 55):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_2 = 2000 * i.
Let x_3 = 10000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_1 = (4000 * i)) \/ (x_1 = x_3).
  (* Invariant *)
  Have: x_1 = x.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i <= x.
}
Prove: 0 < x.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0011/0020_merged.c, line 56):
Let x = -j.
Let x_1 = (i - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_2 = 4000 * i.
Let x_3 = 4000 * j.
Let x_4 = 1 + x_1.
Let x_5 = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_6 = 1 + j + x_1.
Let x_7 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_8 = 2000 * i.
Let x_9 = 10000 * i.
Let x_10 = (n - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(v) /\
      is_sint32(1 + j) /\ is_sint32(x_7) /\ is_sint32(x_10) /\
      is_sint32(1 + x_10).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x_5 <= x_7.
  (* Invariant *)
  Have: (x_7 = x_8) \/ (x_7 = x_2) \/ (x_7 = x_9).
  (* Invariant *)
  Have: x_7 = x_5.
  (* Invariant *)
  Have: x_7 <= x_9.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_8 <= x_7.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: i <= x_6.
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: ((i - j) *
         (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))) = x_4.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: j <= x_4.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: x_2 <= (1 + x_3 + x_1).
  (* Then *)
  Have: j < i.
  (* Invariant *)
  Have: j < x_1.
  (* Invariant *)
  Have: (-1) <= j.
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: x_2 <= (4000 + x_3 + x_1).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (10739)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0011/0020_merged.c, line 56):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_2 = 2000 * i.
Let x_3 = 10000 * i.
Let x_4 = 4000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: (x_1 = x_2) \/ (x_1 = x_4) \/ (x_1 = x_3).
  (* Invariant *)
  Have: x_1 = x.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: x_4 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0020_0011/0020_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0020_0011/0020_merged.c, line 57):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/0020_0011/0020_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo0020'.
  Callers assumptions might be imprecise.
