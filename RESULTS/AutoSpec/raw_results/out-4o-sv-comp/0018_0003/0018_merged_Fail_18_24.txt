[kernel] Parsing out/0018_0003/0018_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0018_0003/0018_merged.c:33: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0018_0003/0018_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_foo0018_loop_invariant_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_2_preserved (Qed 25ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_3_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_4_preserved (Qed 32ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_5_preserved (Qed 35ms) (Z3)
[wp] [Timeout] typed_foo0018_loop_invariant_9_preserved (Qed 9ms) (Z3)
[wp] Proved goals:   18 / 24
  Qed:              17
  Alt-Ergo 2.5.4:    1 (17ms)
  Timeout:           6
------------------------------------------------------------
  Function foo0018
------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 17):
Let x = i % 2.
Let x_1 = i_1 % 2.
Let x_2 = to_uint32(2 + i).
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(a * (j - i)).
  (* Goal *)
  When: (x_2 % 2) = 0.
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_1.
  (* Invariant *)
  Have: ((x_1 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: ((x = 0) -> (i <= j)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x.
  (* Invariant *)
  Have: ((x != 0) -> (i <= (1 + j))).
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x = 0) -> ((1 + (2 * a)) = j)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_2 <= to_uint32(2 + j).
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 18):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(a * (j_3 - i)).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_3.
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_2.
  (* Invariant *)
  Have: ((x_2 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + (2 * a)) = j_3)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
}
Prove: (if (flag_0 = 0) then 1 else 0) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:25ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:25ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 19):
Let x = to_uint32(2 + i).
Let x_1 = 1 + j.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(a * (j - i)).
  (* Invariant *)
  Have: (i % 2) = 1.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x % 2) = 1.
}
Prove: x <= (1 + to_uint32(x_1)).
Prover Z3 4.8.12 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 20):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = i % 2.
Let x_3 = i_1 % 2.
Let x_4 = j_1 - i.
Let x_5 = a * x_4.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_uint32(x_5).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: ((x_3 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_3.
  (* Invariant *)
  Have: ((x_3 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: ((x_2 = 0) -> (i <= j_1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_2.
  (* Invariant *)
  Have: ((x_2 != 0) -> (i <= (1 + j_1))).
  (* Invariant *)
  Have: 0 < j_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_2 = 0) -> ((1 + (2 * a)) = j_1)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  If to_uint32(x_1) = 0
  Then { Have: to_uint32(2 + j_1) = j. }
  Else { Have: to_uint32(1 + j_1) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_1.
  (* Invariant *)
  Have: ((x_1 != 0) -> (x <= (1 + j))).
}
Prove: (to_uint32(1 + a) * (j - x)) = to_uint32(to_uint32(x_4) + x_5).
Prover Z3 4.8.12 returns Timeout (Qed:32ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:32ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 21):
Let x = to_uint32(2 + i).
Let x_1 = x % 2.
Let x_2 = to_uint32(1 + a) * (j - x).
Let x_3 = j_3 - i.
Let x_4 = a * x_3.
Let x_5 = i % 2.
Let x_6 = i_1 % 2.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(i_1) /\ is_uint32(j) /\
      is_uint32(j_1) /\ is_uint32(j_2) /\ is_uint32(j_3) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_uint32(x_4) /\
      is_uint32(x_2).
  If flag_0 != 0
  Then { Have: i_1 = 0. }
  Else { Have: i_1 = 1. }
  (* Invariant *)
  Have: ((x_6 = 0) -> (i_1 <= 1)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_6.
  (* Invariant *)
  Have: ((x_6 != 0) -> (i_1 <= 2)).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i_1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (i <= j_3)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_5.
  (* Invariant *)
  Have: ((x_5 != 0) -> (i <= (1 + j_3))).
  (* Invariant *)
  Have: 0 < j_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: ((x_5 = 0) -> ((1 + (2 * a)) = j_3)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (0 < i).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = to_uint32(to_uint32(x_3) + x_4).
  If to_uint32(x_1) = 0
  Then { Have: j_3 = j_1. Have: to_uint32(2 + j_1) = j. }
  Else { Have: j_3 = j_2. Have: to_uint32(1 + j_2) = j. }
  (* Invariant *)
  Have: ((x_1 = 0) -> (x <= j)).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 1 else 0) = x_1.
  (* Invariant *)
  Have: ((x_1 != 0) -> (x <= (1 + j))).
}
Prove: 0 < j.
Prover Z3 4.8.12 returns Timeout (Qed:35ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:35ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 25):
Let x = 2 * a.
Let x_1 = to_uint32(3 + x).
Let x_2 = to_uint32(2 + i).
Let x_3 = to_uint32(1 + a).
Let x_4 = x_3 * (x_1 - x_2).
Let x_5 = 1 + x - i.
Let x_6 = a * x_5.
Let x_7 = 1 + x.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_sint32(flag_0) /\
      is_sint32(tmp_0) /\ is_uint32(x_7) /\ is_uint32(x_6) /\ is_uint32(x_4).
  (* Goal *)
  When: (x_2 % 2) = 0.
  (* Invariant *)
  Have: i <= x_7.
  (* Invariant *)
  Have: (i % 2) = 0.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = to_uint32(to_uint32(x_5) + x_6).
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: flag_0 != 0.
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: (1 + (2 * x_3)) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0018_0003/0018_merged.c, line 27):
Let x = 1 + j.
Let x_1 = to_uint32(x).
Let x_2 = to_uint32(2 + i).
Let x_3 = to_uint32(1 + a) * (x_1 - x_2).
Let x_4 = j - i.
Let x_5 = a * x_4.
Assume {
  Type: is_uint32(a) /\ is_uint32(i) /\ is_uint32(j) /\ is_sint32(tmp_0) /\
      is_uint32(x_5) /\ is_uint32(x_3).
  (* Invariant *)
  Have: (i % 2) = 1.
  (* Invariant *)
  Have: i <= x.
  (* Invariant *)
  Have: 0 < j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_3 = to_uint32(to_uint32(x_4) + x_5).
  (* Invariant *)
  Have: (x_2 % 2) = 1.
  (* Invariant *)
  Have: x_2 <= (1 + x_1).
  (* Invariant *)
  Have: 0 < x_1.
}
Prove: 0 < x_2.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (34357)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (17ms) (394)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0018_0003/0018_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/0018_0003/0018_merged.c, line 28) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0018_0003/0018_merged.c, line 28) (2/2):
Call Result at line 33
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0018_0003/0018_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0018_0003/0018_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo0018'.
  Callers assumptions might be imprecise.
