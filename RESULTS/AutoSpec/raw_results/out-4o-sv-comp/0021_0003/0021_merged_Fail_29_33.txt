[kernel] Parsing out/0021_0003/0021_merged.c (with preprocessing)
[kernel:typing:no-proto] out/0021_0003/0021_merged.c:40: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:CERT:MSC:37] out/0021_0003/0021_merged.c:15: Warning: 
  Body of function foo0021 falls-through. Adding a return statement
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/0021_0003/0021_merged.c:10: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/0021_0003/0021_merged.c:15: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 33 goals scheduled
[wp] [Timeout] typed_foo0021_loop_invariant_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_3_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo0021_loop_invariant_7_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_foo0021_assert_missing_return (Qed 1ms) (Z3)
[wp] Proved goals:   29 / 33
  Qed:              18
  Alt-Ergo 2.5.4:    7
  Z3 4.8.12:         4 (240ms-360ms)
  Timeout:           4
------------------------------------------------------------
  Function foo0021
------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 20):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
}
Prove: x <= n.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 22):
Let x = 2 * i.
Let x_1 = 2 * i_1.
Let x_2 = 1 + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_1 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i_1 <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (x_1 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (x_1 <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
}
Prove: i <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (38973)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 22):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
}
Prove: 0 <= i.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 25):
Let x = 1 + j.
Let x_1 = 2 * i.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Goal *)
  When: (i_1 < n) /\ (j < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x_2 <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (x_1 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i <= x.
}
Prove: x_1 <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (10ms) (39504)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (3ms) (34)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 26):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (i <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x_2 <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: x <= i_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (984ms) (45220)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 26):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (i <= i_1) /\ (i_1 < n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= 2147483646.
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 27):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= j).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x_2 <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
}
Prove: x <= i_1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (360ms) (295454)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 27):
Let x = 2 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (x <= i_2))).
}
Prove: false.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (260ms) (242512)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 28):
Let x = 2 * i_1.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x_2 <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) -> (x <= i_3))).
}
Prove: i < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:15ms) (6ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 28):
Let x = 2 * i_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i_1 <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (x <= i_2).
}
Prove: i < n.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (5ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 29):
Let x = 2 * i_2.
Let x_1 = 1 + j.
Let x_2 = 2 * i_3.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(i_3) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i_2).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_3 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: i_3 <= 2147483646.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_3 <= i_4) -> ((i_4 < n) -> (x_2 <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. (i_4 < 0) \/ (x_2 <= i_4).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_3) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: i_2 <= j.
  (* Invariant *)
  Have: i_2 < n.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_4 : Z. ((j <= i_4) -> ((i_4 < n) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((i_2 <= i_4) -> ((i_4 < n) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < j) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> (i_4 < n))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) ->
      (forall i_5 : Z. (i_5 < n) /\ ((2 * i_4) <= i_5)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((2 * i_4) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i_2 <= x_1.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 < n) -> ((j < i_4) -> (x <= i_4))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= j) -> (x <= i_4))).
}
Prove: (i < n) /\ ((2 * i_1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:16ms) (310ms) (330126)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 29):
Let x = 2 * i_2.
Assume {
  Type: is_sint32(i_2) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(x).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < i_2).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
}
Prove: (i < n) /\ ((2 * i_1) <= i).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (240ms) (224135)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 30):
Let x = 2 * i_1.
Let x_1 = 1 + j.
Let x_2 = 2 * i_2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(i_2) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i < i_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_2 <= i_3) -> ((i_3 < n) -> (x_2 <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. (i_3 < 0) \/ (x_2 <= i_3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: i_1 <= j.
  (* Invariant *)
  Have: i_1 < n.
  (* Invariant *)
  Have: i_1 <= 2147483646.
  (* Invariant *)
  Have: forall i_3 : Z. ((j <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_1 <= i_3) -> ((i_3 < n) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> (i_3 < n))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (forall i_4 : Z. (i_4 < n) /\ ((2 * i_3) <= i_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) -> ((2 * i_3) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i_1 <= x_1.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 < n) -> ((j < i_3) -> (x <= i_3))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= j) -> (x <= i_3))).
}
Prove: (2 * i) <= j.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 31):
Let x = 2 * i.
Let x_1 = 1 + j.
Let x_2 = 2 * i_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\
      is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: x_2 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i_1 <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_1 <= i_2) -> ((i_2 < n) -> (x_2 <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. (i_2 < 0) \/ (x_2 <= i_2).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: j <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: i <= j.
  (* Invariant *)
  Have: i < n.
  (* Invariant *)
  Have: i <= 2147483646.
  (* Invariant *)
  Have: forall i_2 : Z. ((j <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i <= i_2) -> ((i_2 < n) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 < n))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (forall i_3 : Z. (i_3 < n) /\ ((2 * i_2) <= i_3)))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) < j))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: j < n.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 < n) -> ((j < i_2) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= j) -> (x <= i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> ((2 * i_2) <= j))).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (10ms) (40919)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0021_0003/0021_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0021_0003/0021_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion 'missing_return' (file out/0021_0003/0021_merged.c, line 48):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Pre-condition *)
  Have: k <= 2147483646.
  (* Else *)
  Have: n <= i.
}
Prove: false.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/0021_0003/0021_merged.c, line 35) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0021_0003/0021_merged.c, line 35) (2/2):
Call Result at line 40
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/0021_0003/0021_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/0021_0003/0021_merged.c:10: Warning: 
  No 'assigns' specification for function 'foo0021'.
  Callers assumptions might be imprecise.
