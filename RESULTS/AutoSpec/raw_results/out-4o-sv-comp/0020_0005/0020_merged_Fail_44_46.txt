[kernel] Parsing out/0020_0005/0020_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 46 goals scheduled
[wp] [Timeout] typed_foo0020_loop_invariant_13_established (Qed 5ms) (Z3)
[wp] [Timeout] typed_foo0020_loop_invariant_15_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   44 / 46
  Qed:              41
  Alt-Ergo 2.5.4:    2 (4ms-9ms)
  Z3 4.8.12:         1 (10ms)
  Timeout:           2
------------------------------------------------------------
  Function foo0020
------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 25):
Let x = 1 + i.
Let x_1 = x * (if (v = 0) then 4000 else 10000).
Let x_2 = 10000 * i.
Let x_3 = 10000 + x_2.
Let x_4 = 4000 * i.
Let x_5 = i * (if (v = 0) then 4000 else 10000).
Let x_6 = 2000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x) /\
      is_sint32(x_5) /\ is_sint32(x_1).
  (* Residual *)
  When: v != 1.
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((2 <= v) -> (x_5 = x_2)).
  (* Invariant *)
  Have: ((v = 0) -> (x_5 = x_4)).
  (* Invariant *)
  Have: ((v != 0) -> (x_5 = x_2)).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: ((2 <= v) -> (x_1 = x_3)).
  (* Invariant *)
  Have: ((v = 0) -> (x_1 = (4000 + x_4))).
  (* Invariant *)
  Have: ((v != 0) -> (x_1 = x_3)).
}
Prove: (2000 + x_6) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (34039)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (9ms) (196)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 27):
Let x = 2000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(1 + i) /\
      is_sint32(2000 + x).
  (* Pre-condition *)
  Have: n <= 1.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: (-1) <= i.
Prover Z3 4.8.12 returns Valid (Qed:16ms) (20ms) (30543)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:16ms) (4ms) (13)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 45):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 45):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = 2000 * i.
Let x_2 = 10000 * i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(v) /\ is_sint32(x).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((2 <= v) -> (x = x_2)).
  (* Invariant *)
  Have: ((v = 1) -> (x = x_1)).
  (* Invariant *)
  Have: ((v = 0) -> (x = (4000 * i))).
  (* Invariant *)
  Have: ((v != 0) -> ((v != 1) -> (x = x_2))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
}
Prove: i < x.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 47):
Let x = i * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_1 = i + k.
Let x_2 = -x.
Let x_3 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_4 = 2000 * i.
Let x_5 = 10000 * i.
Let x_6 = -k.
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\ is_sint32(v) /\
      is_sint32(k - 1) /\ is_sint32(x_3) /\ is_sint32(x_3 - k) /\
      is_sint32(1 + x_3 - k).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((2 <= v) -> (x_3 = x_5)).
  (* Invariant *)
  Have: ((v = 1) -> (x_3 = x_4)).
  (* Invariant *)
  Have: ((v = 0) -> (x_3 = (4000 * i))).
  (* Invariant *)
  Have: ((v != 0) -> ((v != 1) -> (x_3 = x_5))).
  (* Invariant *)
  Have: x <= x_3.
  (* Invariant *)
  Have: x_3 = x.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= i.
  (* Else *)
  Have: n <= i.
  (* Invariant *)
  Have: i < x.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: ((i + k - x) *
         (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))) = k.
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((k + i_1) < x) -> (i_1 < k))).
  (* Invariant *)
  Have: 0 <= k.
  (* Invariant *)
  Have: k <= x.
  (* Invariant *)
  Have: 0 < k.
  (* Then *)
  Have: x < x_1.
}
Prove: (1
        + ((i + k - 1 - x) *
           (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000))))
         = k.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 50):
Let x = -j.
Let x_1 = (i_1 - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_2 = i_1 *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_3 = n * (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Let x_4 = 2000 * i_1.
Let x_5 = 10000 * i_1.
Let x_6 = (n - 1 - j) *
    (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)).
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(n) /\ is_sint32(v) /\
      is_sint32(1 + j) /\ is_sint32(x_3) /\ is_sint32(x_6) /\
      is_sint32(1 + x_6).
  (* Goal *)
  When: (0 <= i) /\ (i <= j).
  (* Pre-condition *)
  Have: n <= 1.
  (* Pre-condition *)
  Have: 0 <= v.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: ((2 <= v) -> (x_3 = x_5)).
  (* Invariant *)
  Have: ((v = 1) -> (x_3 = x_4)).
  (* Invariant *)
  Have: ((v = 0) -> (x_3 = (4000 * i_1))).
  (* Invariant *)
  Have: ((v != 0) -> ((v != 1) -> (x_3 = x_5))).
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: n <= i_1.
  (* Invariant *)
  Have: i_1 < x_2.
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: i_1 <= (j + x_1).
  (* Invariant *)
  Have: x_2 = (1 + j + x_1).
  (* Invariant *)
  Have: ((i_1 - j) *
         (if (v = 0) then 4000 else (if (v = 1) then 2000 else 10000)))
          = (1 + x_1).
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Then *)
  Have: j < i_1.
}
Prove: i < x_1.
Prover Z3 4.8.12 returns Valid (Qed:12ms) (10ms) (10709)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/0020_0005/0020_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/0020_0005/0020_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/0020_0005/0020_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/0020_0005/0020_merged.c, line 55):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/0020_0005/0020_merged.c:6: Warning: 
  No 'assigns' specification for function 'foo0020'.
  Callers assumptions might be imprecise.
