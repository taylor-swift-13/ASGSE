[kernel] Parsing out/003_0005/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0005/003_merged.c:48: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0005/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 60 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_7_preserved (Qed 47ms) (Z3)
[wp] Proved goals:   59 / 60
  Qed:              40
  Alt-Ergo 2.5.4:   14 (1ms-60ms-153ms)
  Z3 4.8.12:         5 (10ms-18ms-20ms)
  Timeout:           1
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 14):
Let x = i + n.
Let x_1 = 3 * i.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Let x_4 = 4 * i.
Let x_5 = x_2 - x_1.
Let x_6 = 2 * n.
Let x_7 = -i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(b_1 - i) /\ is_sint32(x_5) /\ is_sint32(1 + b_1 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_1 <= x_6.
  (* Invariant *)
  Have: (i = 0) \/ (x_3 = b_1).
  (* Invariant *)
  Have: (x_1 <= b_1) \/ (b_1 <= x_1).
  (* Invariant *)
  Have: x_2 <= (x_6 + x_1).
  (* Invariant *)
  Have: (x_5 % 3) = (b_1 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i + i_3) <= b_1) ->
      ((x_1 = i_3) \/ ((i_3 + (6 * i)) = (3 * b_1))))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_8 = i + i_3 in ((0 <= i_3) -> ((x_8 <= b_1) ->
      (x_8 = b_1))).
  (* Invariant *)
  Have: forall i_3 : Z. let x_8 = i + i_3 in ((0 <= i_3) -> ((x_8 < b_1) ->
      (x_8 <= b_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i + i_3) < b_1) ->
      (if (x_1 < b_1) then (i_3 <= x_3) else ((i_3 + x_4) <= x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i + i_3) < b_1) ->
      ((x_4 = b_1) \/ ((5 * i) = x_2)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_3 <= b_1).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i <= b_1) /\ (x_1 <= x_2).
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: b_1 < x.
  If tmp_0 != 0
  Then {
    Have: (a_1 + x_1) = x_2.
    Have: (a + x_1) = (1 + x_2).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + x_1) = x_2.
    Have: (a + x_1) = (2 + x_2).
    Have: (1 + b_1) = b.
  }
}
Prove: (i + ((a + b) / 3)) = (1 + b_1).
Prover Z3 4.8.12 returns Valid (Qed:36ms) (43353)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:36ms) (67ms) (1112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 15):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 3 * x_1.
Let x_3 = x_2 - 3.
Let x_4 = x_1 - 1.
Let x_5 = i + x_1.
Let x_6 = 2 * x_1.
Let x_7 = 3 * i.
Let x_8 = 2 * i.
Let x_9 = x_6 - 2 - i.
Let x_10 = i + x_1 - 1.
Let x_11 = 2 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_10) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x_11).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_8 < x_1) \/ (x_1 <= (1 + x_8)).
  (* Invariant *)
  Have: x_6 <= (2 + i + x_11).
  (* Invariant *)
  Have: (x_9 % 3) = (x_10 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((x_7 = i_3) \/ ((3 + i_3 + x_7) = x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_1 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_8) <= x_1) then (i_3 <= x_8) else ((2 + i_3 + x_8) <= x_6)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      ((x_1 = (1 + x_7)) \/ ((2 + x_7) = x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x) /\ ((2 + i) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
}
Prove: b <= x_11.
Prover Z3 4.8.12 returns Valid (Qed:45ms) (20ms) (49627)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:45ms) (12ms) (153)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 16):
Let x = 2 * n.
Let x_1 = a + b.
Let x_2 = x_1 / 3.
Let x_3 = 3 * x_2.
Let x_4 = x_3 - 3.
Let x_5 = x_2 - 1.
Let x_6 = i + x_2.
Let x_7 = 2 * x_2.
Let x_8 = 3 * i.
Let x_9 = 2 * i.
Let x_10 = x_7 - 2 - i.
Let x_11 = i + x_2 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_2 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x).
  (* Invariant *)
  Have: (i = 0) \/ (x_2 = (1 + i)).
  (* Invariant *)
  Have: (x_9 < x_2) \/ (x_2 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i + x).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_2) ->
      ((x_8 = i_3) \/ ((3 + i_3 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_2) -> (x_2 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) -> (i_3 < x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) ->
      (if ((2 + x_9) <= x_2) then (i_3 <= x_9) else ((2 + i_3 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) ->
      ((x_2 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_2).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x_1) /\ ((2 + i) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x.
}
Prove: ((a + x_2) = b) \/ ((b + x_2) = a).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:40ms) (153ms) (1914)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 17):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i.
Let x_9 = 2 * i.
Let x_10 = x_7 - 2 - i.
Let x_11 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((x_8 = i_3) \/ ((3 + i_3 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_1 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_3 <= x_9) else ((2 + i_3 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
}
Prove: (b <= a) \/ (a <= b).
Prover Z3 4.8.12 returns Valid (Qed:41ms) (10ms) (41962)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (1ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 18):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i.
Let x_9 = 2 * i.
Let x_10 = x_7 - 2 - i.
Let x_11 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((x_8 = i_3) \/ ((3 + i_3 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_1 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_3 <= x_9) else ((2 + i_3 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:54ms) (20ms) (56053)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:54ms) (13ms) (146)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 20):
Let x = 2 * n.
Let x_1 = a + b.
Let x_2 = x_1 / 3.
Let x_3 = 3 * x_2.
Let x_4 = x_3 - 3.
Let x_5 = x_2 - 1.
Let x_6 = i + x_2.
Let x_7 = 2 * x_2.
Let x_8 = 3 * i.
Let x_9 = 2 * i.
Let x_10 = x_7 - 2 - i.
Let x_11 = i + x_2 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_2 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x).
  (* Invariant *)
  Have: (i = 0) \/ (x_2 = (1 + i)).
  (* Invariant *)
  Have: (x_9 < x_2) \/ (x_2 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i + x).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_2) ->
      ((x_8 = i_3) \/ ((3 + i_3 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_2) -> (x_2 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) -> (i_3 < x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) ->
      (if ((2 + x_9) <= x_2) then (i_3 <= x_9) else ((2 + i_3 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) ->
      ((x_2 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_2).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x_1) /\ ((2 + i) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: ((a + x_2) = b) \/ ((b + x_2) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x.
}
Prove: (b % 3) = (a % 3).
Prover Z3 4.8.12 returns Timeout (Qed:47ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:47ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 21):
Let x = 2 * n.
Let x_1 = a + b.
Let x_2 = x_1 / 3.
Let x_3 = 3 * x_2.
Let x_4 = x_3 - 3.
Let x_5 = x_2 - 1.
Let x_6 = i_1 + x_2.
Let x_7 = 2 * x_2.
Let x_8 = 3 * i_1.
Let x_9 = 2 * i_1.
Let x_10 = x_7 - 2 - i_1.
Let x_11 = i_1 + x_2 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_2 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_2 = (1 + i_1)).
  (* Invariant *)
  Have: (x_9 < x_2) \/ (x_2 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i_1 + x).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_2) ->
      ((x_8 = i_4) \/ ((3 + i_4 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_2) -> (x_2 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_2) -> (i_4 < x_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_2) ->
      (if ((2 + x_9) <= x_2) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_2) ->
      ((x_2 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_2).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x_1) /\ ((2 + i_1) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\
        ((i_1 + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i_1 + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: ((a + x_2) = b) \/ ((b + x_2) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
}
Prove: ((a + i) = (2 * b)) \/ ((b + i) = (2 * a)).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:48ms) (109ms) (1259)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 22):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i_1 + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i_1.
Let x_9 = 2 * i_1.
Let x_10 = x_7 - 2 - i_1.
Let x_11 = i_1 + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_8 = i_4) \/ ((3 + i_4 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i_1) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\
        ((i_1 + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i_1 + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
}
Prove: (3 * i) <= x.
Prover Z3 4.8.12 returns Valid (Qed:58ms) (10ms) (52348)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:58ms) (10ms) (132)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 23):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i_1 + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i_1.
Let x_9 = 2 * i_1.
Let x_10 = x_7 - 2 - i_1.
Let x_11 = i_1 + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_8 = i_4) \/ ((3 + i_4 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i_1) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\
        ((i_1 + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i_1 + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
}
Prove: x = (3 * i).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:51ms) (99ms) (1207)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 24):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i.
Let x_9 = 2 * i.
Let x_10 = x_7 - 2 - i.
Let x_11 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_8 = i_4) \/ ((3 + i_4 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\ ((i + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x = (3 * i_4)))).
}
Prove: (x % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:50ms) (20ms) (55746)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:50ms) (87ms) (993)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 25):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = 3 * x_1.
Let x_4 = x_3 - 3.
Let x_5 = x_1 - 1.
Let x_6 = i_1 + x_1.
Let x_7 = 2 * x_1.
Let x_8 = 3 * i_1.
Let x_9 = 2 * i_1.
Let x_10 = x_7 - 2 - i_1.
Let x_11 = i_1 + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_11) /\ is_sint32(x_10).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_4 / 3)).
  (* Invariant *)
  Have: x_6 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_7 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: (x_10 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_8 = i_4) \/ ((3 + i_4 + x_8) = x_3)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_8)) \/ ((2 + x_8) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_6) /\ (3 <= x) /\ ((2 + i_1) <= x_7).
  (* Invariant *)
  Have: (x_4 % 3) = 0.
  (* Invariant *)
  Have: (x_4 % 2) = (x_5 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_12 = 3 + a_1 + b_1.
    Let x_13 = x_12 / 3.
    Have: ((2 + b_1) = b) /\ (x_12 = (3 * x_13)) /\
        ((i_1 + x_13) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_14 = 1 + b_2.
    Let x_15 = 3 + a_2 + b_2.
    Let x_16 = x_15 / 3.
    Have: (x_14 = b) /\ (x_15 = (3 * x_16)) /\ ((i_1 + x_16) = x_14).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x = (3 * i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((x % 3) = 0))).
}
Prove: (3 * i) <= x.
Prover Z3 4.8.12 returns Valid (Qed:55ms) (20ms) (51564)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:55ms) (12ms) (141)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 27):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = a + x_1.
Let x_4 = b + x_1.
Let x_5 = 3 * x_1.
Let x_6 = x_5 - 3.
Let x_7 = x_1 - 1.
Let x_8 = i_1 + x_1.
Let x_9 = 2 * x_1.
Let x_10 = 3 * i_1.
Let x_11 = 2 * i_1.
Let x_12 = x_9 - 2 - i_1.
Let x_13 = i_1 + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_7) /\ is_sint32(x_13) /\ is_sint32(x_12).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_6 / 3)).
  (* Invariant *)
  Have: x_8 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_11 < x_1) \/ (x_1 <= (1 + x_11)).
  (* Invariant *)
  Have: x_9 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: (x_12 % 3) = (x_13 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_10 = i_4) \/ ((3 + i_4 + x_10) = x_5)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_11) <= x_1) then (i_4 <= x_11)
       else ((2 + i_4 + x_11) <= x_9)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_10)) \/ ((2 + x_10) = x_9)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_8) /\ (3 <= x) /\ ((2 + i_1) <= x_9).
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = (x_7 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_14 = 3 + a_1 + b_1.
    Let x_15 = x_14 / 3.
    Have: ((2 + b_1) = b) /\ (x_14 = (3 * x_15)) /\
        ((i_1 + x_15) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_16 = 1 + b_2.
    Let x_17 = 3 + a_2 + b_2.
    Let x_18 = x_17 / 3.
    Have: (x_16 = b) /\ (x_17 = (3 * x_18)) /\ ((i_1 + x_18) = x_16).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_3 = b) \/ (x_4 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x = (3 * i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((x % 3) = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> ((3 * i_4) <= x))).
}
Prove: if (b < a) then ((a + i) <= x_4) else ((b + i) <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:64ms) (150ms) (372423)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:64ms) (92ms) (922)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 28):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = b + x_1.
Let x_3 = a + x_1.
Let x_4 = x % 3.
Let x_5 = 2 * n.
Let x_6 = 3 * x_1.
Let x_7 = x_6 - 3.
Let x_8 = x_1 - 1.
Let x_9 = i + x_1.
Let x_10 = 2 * x_1.
Let x_11 = 3 * i.
Let x_12 = 2 * i.
Let x_13 = x_10 - 2 - i.
Let x_14 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_8) /\ is_sint32(x_14) /\ is_sint32(x_13).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_7 / 3)).
  (* Invariant *)
  Have: x_9 <= (1 + x_5).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_12 < x_1) \/ (x_1 <= (1 + x_12)).
  (* Invariant *)
  Have: x_10 <= (2 + i + x_5).
  (* Invariant *)
  Have: (x_13 % 3) = (x_14 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_11 = i_4) \/ ((3 + i_4 + x_11) = x_6)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_12) <= x_1) then (i_4 <= x_12)
       else ((2 + i_4 + x_12) <= x_10)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_11)) \/ ((2 + x_11) = x_10)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_9) /\ (3 <= x) /\ ((2 + i) <= x_10).
  (* Invariant *)
  Have: (x_7 % 3) = 0.
  (* Invariant *)
  Have: (x_7 % 2) = (x_8 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_15 = 3 + a_1 + b_1.
    Let x_16 = x_15 / 3.
    Have: ((2 + b_1) = b) /\ (x_15 = (3 * x_16)) /\ ((i + x_16) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_17 = 1 + b_2.
    Let x_18 = 3 + a_2 + b_2.
    Let x_19 = x_18 / 3.
    Have: (x_17 = b) /\ (x_18 = (3 * x_19)) /\ ((i + x_19) = x_17).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (x_3 = b) \/ (x_2 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = (2 * b)) \/ ((b + i_4) = (2 * a))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x = (3 * i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x_4 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      (if (b < a) then ((a + i_4) <= x_2) else ((b + i_4) <= x_3)))).
}
Prove: x_4 = 0.
Prover Z3 4.8.12 returns Valid (Qed:69ms) (20ms) (58255)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 29):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = x % 3.
Let x_3 = b + x_1.
Let x_4 = a + x_1.
Let x_5 = 2 * b.
Let x_6 = 2 * a.
Let x_7 = 2 * n.
Let x_8 = 3 * x_1.
Let x_9 = x_8 - 3.
Let x_10 = x_1 - 1.
Let x_11 = i + x_1.
Let x_12 = 2 * x_1.
Let x_13 = 3 * i.
Let x_14 = 2 * i.
Let x_15 = x_12 - 2 - i.
Let x_16 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_10) /\ is_sint32(x_16) /\
      is_sint32(x_15).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_9 / 3)).
  (* Invariant *)
  Have: x_11 <= (1 + x_7).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_14 < x_1) \/ (x_1 <= (1 + x_14)).
  (* Invariant *)
  Have: x_12 <= (2 + i + x_7).
  (* Invariant *)
  Have: (x_15 % 3) = (x_16 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      ((x_13 = i_4) \/ ((3 + i_4 + x_13) = x_8)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_1 = (1 + i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_14) <= x_1) then (i_4 <= x_14)
       else ((2 + i_4 + x_14) <= x_12)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      ((x_1 = (1 + x_13)) \/ ((2 + x_13) = x_12)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_11) /\ (3 <= x) /\ ((2 + i) <= x_12).
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (x_9 % 2) = (x_10 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_17 = 3 + a_1 + b_1.
    Let x_18 = x_17 / 3.
    Have: ((2 + b_1) = b) /\ (x_17 = (3 * x_18)) /\ ((i + x_18) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_19 = 1 + b_2.
    Let x_20 = 3 + a_2 + b_2.
    Let x_21 = x_20 / 3.
    Have: (x_19 = b) /\ (x_20 = (3 * x_21)) /\ ((i + x_21) = x_19).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: (x_4 = b) \/ (x_3 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) ->
      (((a + i_4) = x_5) \/ ((b + i_4) = x_6)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x = (3 * i_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x_2 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      (if (b < a) then ((a + i_4) <= x_3) else ((b + i_4) <= x_4)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> (x_2 = 0))).
}
Prove: (x_4 = x_5) \/ (x_3 = x_6).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:68ms) (86ms) (1058)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 30):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = a + x_1.
Let x_3 = 2 * b.
Let x_4 = b + x_1.
Let x_5 = 2 * a.
Let x_6 = x % 3.
Let x_7 = 2 * n.
Let x_8 = 3 * x_1.
Let x_9 = x_8 - 3.
Let x_10 = x_1 - 1.
Let x_11 = i + x_1.
Let x_12 = 2 * x_1.
Let x_13 = 3 * i.
Let x_14 = 2 * i.
Let x_15 = x_12 - 2 - i.
Let x_16 = i + x_1 - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_10) /\ is_sint32(x_16) /\
      is_sint32(x_15).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_9 / 3)).
  (* Invariant *)
  Have: x_11 <= (1 + x_7).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_14 < x_1) \/ (x_1 <= (1 + x_14)).
  (* Invariant *)
  Have: x_12 <= (2 + i + x_7).
  (* Invariant *)
  Have: (x_15 % 3) = (x_16 % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((x_13 = i_3) \/ ((3 + i_3 + x_13) = x_8)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_1 = (1 + i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_14) <= x_1) then (i_3 <= x_14)
       else ((2 + i_3 + x_14) <= x_12)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      ((x_1 = (1 + x_13)) \/ ((2 + x_13) = x_12)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_11) /\ (3 <= x) /\ ((2 + i) <= x_12).
  (* Invariant *)
  Have: (x_9 % 3) = 0.
  (* Invariant *)
  Have: (x_9 % 2) = (x_10 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_17 = 3 + a_1 + b_1.
    Let x_18 = x_17 / 3.
    Have: ((2 + b_1) = b) /\ (x_17 = (3 * x_18)) /\ ((i + x_18) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_19 = 1 + b_2.
    Let x_20 = 3 + a_2 + b_2.
    Let x_21 = x_20 / 3.
    Have: (x_19 = b) /\ (x_20 = (3 * x_21)) /\ ((i + x_21) = x_19).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_7.
  (* Invariant *)
  Have: (x_2 = b) \/ (x_4 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_7.
  (* Invariant *)
  Have: (b % 3) = (a % 3).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) ->
      (((a + i_3) = x_3) \/ ((b + i_3) = x_5)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) -> ((3 * i_3) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) -> (x = (3 * i_3)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) -> (x_6 = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> ((3 * i_3) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      (if (b < a) then ((a + i_3) <= x_4) else ((b + i_3) <= x_2)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_6 = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      ((x_2 = x_3) \/ (x_4 = x_5)))).
}
Prove: exists i_3 : Z. (x_4 = (a + (2 * i_3))) /\ (0 <= i_3) /\ (i_3 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:73ms) (20ms) (65689)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:73ms) (79ms) (1029)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 31):
Let x = i_1 + i.
Let x_1 = 1 + b_1.
Let x_2 = 4 * i_1.
Let x_3 = 1 + b + b_1.
Let x_4 = 2 * i_1.
Let x_5 = 2 * i.
Let x_6 = 2 * b_1.
Let x_7 = 2 + x_6.
Let x_8 = (-2) * i_1.
Let x_9 = -i.
Let x_10 = 2 * b.
Let x_11 = 1 + b_1 + x_10 - i - x_4.
Let x_12 = x_11 % 3.
Let x_13 = i + x_4.
Let x_14 = 1 + b_1 + x_10.
Let x_15 = 1 + b + b_1 - i - x_4.
Let x_16 = 2 * n.
Let x_17 = i + n.
Let x_18 = 3 * i.
Let x_19 = 4 * i.
Let x_20 = x_6 - x_18.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b_1 - i) /\
      is_sint32(x_20) /\ is_sint32(1 + b_1 - i) /\ is_sint32(x_15).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b_1 <= x_16.
  (* Invariant *)
  Have: (i = 0) \/ (x_5 = b_1).
  (* Invariant *)
  Have: (x_18 <= b_1) \/ (b_1 <= x_18).
  (* Invariant *)
  Have: x_6 <= (x_16 + x_18).
  (* Invariant *)
  Have: (x_20 % 3) = (b_1 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      ((x_18 = i_4) \/ ((i_4 + (6 * i)) = (3 * b_1))))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i + i_4 in ((0 <= i_4) ->
      ((x_21 <= b_1) -> (x_21 = b_1))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i + i_4 in ((0 <= i_4) -> ((x_21 < b_1) ->
      (x_21 <= b_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) < b_1) ->
      (if (x_18 < b_1) then (i_4 <= x_5) else ((i_4 + x_19) <= x_6)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) < b_1) ->
      ((x_19 = b_1) \/ ((5 * i) = x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_5 <= b_1).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i <= b_1) /\ (x_18 <= x_6).
  (* Invariant *)
  Have: b_1 <= x_17.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b_1 < x_17.
  If tmp_0 != 0
  Then { Have: ((1 + i) = i_1) /\ ((a + x_18) = x_6). Have: (2 + b_1) = b. }
  Else { Have: (i = i_1) /\ ((a_1 + (3 * i_1)) = x_6). Have: x_1 = b. }
  (* Invariant *)
  Have: (i + (x_11 / 3)) = x_1.
  (* Invariant *)
  Have: b <= x_16.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x = x_1).
  (* Invariant *)
  Have: (b_1 < x_13) \/ (x_13 <= x_1).
  (* Invariant *)
  Have: (b + b_1) < (i + x_4 + x_16).
  (* Invariant *)
  Have: (x_15 % 3) = (b % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) ->
      (((b + i + x_4) = (1 + b_1 + i_4)) \/
       ((i_4 + x_5 + x_2) = (2 + b + x_6))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) ->
      ((i + x_4 + (3 * i_4)) <= x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) ->
      ((i + x_4 + (3 * i_4)) = x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) -> (x_12 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      ((i + x_4 + (3 * i_4)) <= x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      (if (x_13 <= b_1) then (i_4 <= x_4) else ((i_4 + x_4 + x_5) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) -> (x_12 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      (((i + x_2) = x_3) \/ ((b + x_4 + x_5) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x <= x_1).
}
Prove: (0 <= b) /\ (i <= x_1) /\ (x_13 <= x_3).
Prover Z3 4.8.12 returns Valid (Qed:60ms) (20ms) (54737)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:60ms) (21ms) (313)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 32):
Let x = 1 + b.
Let x_1 = 2 * i.
Let x_2 = i_1 + x_1.
Let x_3 = 1 + b_1 + b.
Let x_4 = i + i_1.
Let x_5 = 4 * i.
Let x_6 = 2 * i_1.
Let x_7 = 2 * b.
Let x_8 = 2 + x_7.
Let x_9 = (-2) * i.
Let x_10 = -i_1.
Let x_11 = 2 * b_1.
Let x_12 = 1 + b + x_11 - i_1 - x_1.
Let x_13 = x_12 % 3.
Let x_14 = 1 + b + x_11.
Let x_15 = 1 + b_1 + b - i_1 - x_1.
Let x_16 = 2 * n.
Let x_17 = i_1 + n.
Let x_18 = 3 * i_1.
Let x_19 = 4 * i_1.
Let x_20 = x_7 - x_18.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b - i_1) /\
      is_sint32(x_20) /\ is_sint32(1 + b - i_1) /\ is_sint32(x_15).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b <= x_16.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_6 = b).
  (* Invariant *)
  Have: (x_18 <= b) \/ (b <= x_18).
  (* Invariant *)
  Have: x_7 <= (x_16 + x_18).
  (* Invariant *)
  Have: (x_20 % 3) = (b % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((x_18 = i_4) \/ ((i_4 + (6 * i_1)) = (3 * b))))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i_1 + i_4 in ((0 <= i_4) ->
      ((x_21 <= b) -> (x_21 = b))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i_1 + i_4 in ((0 <= i_4) -> ((x_21 < b) ->
      (x_21 <= b))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      (if (x_18 < b) then (i_4 <= x_6) else ((i_4 + x_19) <= x_7)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      ((x_19 = b) \/ ((5 * i_1) = x_7)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x_6 <= b).
  (* Invariant *)
  Have: (0 <= b) /\ (i_1 <= b) /\ (x_18 <= x_7).
  (* Invariant *)
  Have: b <= x_17.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b < x_17.
  If tmp_0 != 0
  Then { Have: ((1 + i_1) = i) /\ ((a + x_18) = x_7). Have: (2 + b) = b_1. }
  Else { Have: (i_1 = i) /\ ((a_1 + (3 * i)) = x_7). Have: x = b_1. }
  (* Invariant *)
  Have: (i_1 + (x_12 / 3)) = x.
  (* Invariant *)
  Have: b_1 <= x_16.
  (* Invariant *)
  Have: (i = 0) \/ (x_4 = x).
  (* Invariant *)
  Have: (b < x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: (b_1 + b) < (i_1 + x_1 + x_16).
  (* Invariant *)
  Have: (x_15 % 3) = (b_1 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) ->
      (((b_1 + i_1 + x_1) = (1 + b + i_4)) \/
       ((i_4 + x_6 + x_5) = (2 + b_1 + x_7))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) ->
      ((i_1 + x_1 + (3 * i_4)) <= x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) ->
      ((i_1 + x_1 + (3 * i_4)) = x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) -> (x_13 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((i_1 + x_1 + (3 * i_4)) <= x_14))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (if (x_2 <= b) then (i_4 <= x_1) else ((i_4 + x_1 + x_6) <= x_8)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) -> (x_13 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (((i_1 + x_5) = x_3) \/ ((b_1 + x_1 + x_6) = x_8)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_4 <= x).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i_1 <= x) /\ (x_2 <= x_3).
}
Prove: x_13 = 0.
Prover Z3 4.8.12 returns Valid (Qed:80ms) (20ms) (54989)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 33):
Let x = (-2) * i.
Let x_1 = -i_1.
Let x_2 = 2 * b_1.
Let x_3 = 1 + b + x_2 - i_1 - (2 * i).
Let x_4 = 1 + b.
Let x_5 = 2 * i.
Let x_6 = i_1 + x_5.
Let x_7 = 1 + b_1 + b.
Let x_8 = i + i_1.
Let x_9 = 4 * i.
Let x_10 = 2 * i_1.
Let x_11 = 2 * b.
Let x_12 = 2 + x_11.
Let x_13 = 1 + b + x_2.
Let x_14 = 1 + b_1 + b - i_1 - x_5.
Let x_15 = 2 * n.
Let x_16 = i_1 + n.
Let x_17 = 3 * i_1.
Let x_18 = 4 * i_1.
Let x_19 = x_11 - x_17.
Let x_20 = 1 + b - i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b - i_1) /\
      is_sint32(x_19) /\ is_sint32(x_20) /\ is_sint32(x_14).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b <= x_15.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_10 = b).
  (* Invariant *)
  Have: (x_17 <= b) \/ (b <= x_17).
  (* Invariant *)
  Have: x_11 <= (x_15 + x_17).
  (* Invariant *)
  Have: (x_19 % 3) = (b % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((x_17 = i_4) \/ ((i_4 + (6 * i_1)) = (3 * b))))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i_1 + i_4 in ((0 <= i_4) ->
      ((x_21 <= b) -> (x_21 = b))).
  (* Invariant *)
  Have: forall i_4 : Z. let x_21 = i_1 + i_4 in ((0 <= i_4) -> ((x_21 < b) ->
      (x_21 <= b))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      (if (x_17 < b) then (i_4 <= x_10) else ((i_4 + x_18) <= x_11)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      ((x_18 = b) \/ ((5 * i_1) = x_11)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x_10 <= b).
  (* Invariant *)
  Have: (0 <= b) /\ (i_1 <= b) /\ (x_17 <= x_11).
  (* Invariant *)
  Have: b <= x_16.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b < x_16.
  If tmp_0 != 0
  Then { Have: ((1 + i_1) = i) /\ ((a + x_17) = x_11). Have: (2 + b) = b_1. }
  Else { Have: (i_1 = i) /\ ((a_1 + (3 * i)) = x_11). Have: x_4 = b_1. }
  (* Invariant *)
  Have: (i_1 + (x_3 / 3)) = x_4.
  (* Invariant *)
  Have: b_1 <= x_15.
  (* Invariant *)
  Have: (i = 0) \/ (x_8 = x_4).
  (* Invariant *)
  Have: (b < x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: (b_1 + b) < (i_1 + x_5 + x_15).
  (* Invariant *)
  Have: (x_14 % 3) = (b_1 % 3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x_4) ->
      (((b_1 + i_1 + x_5) = (1 + b + i_4)) \/
       ((i_4 + x_10 + x_9) = (2 + b_1 + x_11))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x_4) ->
      ((i_1 + x_5 + (3 * i_4)) <= x_13))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x_4) ->
      ((i_1 + x_5 + (3 * i_4)) = x_13))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((i_1 + x_5 + (3 * i_4)) <= x_13))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (if (x_6 <= b) then (i_4 <= x_5) else ((i_4 + x_5 + x_10) <= x_12)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (((i_1 + x_9) = x_7) \/ ((b_1 + x_5 + x_10) = x_12)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_8 <= x_4).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i_1 <= x_4) /\ (x_6 <= x_7).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
}
Prove: (x_3 % 2) = (x_20 % 2).
Prover Z3 4.8.12 returns Valid (Qed:69ms) (20ms) (54044)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (56ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (68ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (55ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 39):
Let x = 3 * i.
Let x_1 = 3 + x.
Let x_2 = 1 + i.
Let x_3 = i_2 + i.
Let x_4 = 2 * i.
Let x_5 = 2 + x_4.
Let x_6 = 3 * i_2.
Let x_7 = 2 * i_2.
Let x_8 = 2 + x_4 - i_2.
Let x_9 = 1 + i_2 + i.
Let x_10 = 2 * n.
Let x_11 = i + i_1.
Let x_12 = 3 * i_1.
Let x_13 = 2 * i_1.
Let x_14 = x_4 - i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x_2) /\
      is_sint32(x_11) /\ is_sint32(x_9) /\ is_sint32(x_14) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= 0) -> ((0 <= i_5) -> (i_5 = 0))).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: x_11 <= x_10.
  (* Invariant *)
  Have: (i_1 = 0) \/ (i_1 = i).
  (* Invariant *)
  Have: (x_13 <= i) \/ (i <= x_13).
  (* Invariant *)
  Have: x_4 <= (i_1 + x_10).
  (* Invariant *)
  Have: (x_14 % 3) = (x_11 % 3).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      ((x_12 = i_5) \/ ((i_5 + x_12) = x)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 = i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (if (x_13 < i) then (i_5 <= x_13) else ((i_5 + x_13) <= x_4)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      ((x_12 = i) \/ (x_12 = x_4)))).
  (* Invariant *)
  Have: (i_1 <= i) /\ (0 <= i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i_1 <= x_4) /\ (0 <= x_11).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then { Have: (x_11 = b) /\ ((a + x_12) = (2 * b)). Have: (1 + i_1) = i_2. }
  Else { Have: ((a_1 + b_1) = x) /\ (x_3 = b_1) /\ (x_11 = b_1). }
  (* Invariant *)
  Have: (x_1 / 3) = x_2.
  (* Invariant *)
  Have: x_3 < x_10.
  (* Invariant *)
  Have: (i_2 = 0) \/ (x_2 = i_2).
  (* Invariant *)
  Have: (i < x_7) \/ (x_7 <= x_2).
  (* Invariant *)
  Have: x_5 <= (i_2 + x_10).
  (* Invariant *)
  Have: (x_8 % 3) = (x_9 % 3).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x_2) ->
      ((x_6 = i_5) \/ ((i_5 + x_6) = x_1)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 <= x_2) -> (x_2 = i_5))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_2))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (if (x_7 <= i) then (i_5 <= x_7) else ((i_5 + x_7) <= x_5)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      ((x_2 = x_6) \/ (x_5 = x_6)))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= x_2).
  (* Invariant *)
  Have: ((-1) <= i) /\ ((-1) <= x_3) /\ (i_2 <= x_5).
  (* Invariant *)
  Have: (x_1 % 3) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = (x_2 % 2).
}
Prove: exists i_5 : Z. 0 <= i_5.
Prover Z3 4.8.12 returns Valid (Qed:89ms) (10ms) (37427)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 39):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (20ms) (23846)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0005/003_merged.c, line 43) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0005/003_merged.c, line 43) (2/2):
Call Result at line 48
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0005/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0005/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
