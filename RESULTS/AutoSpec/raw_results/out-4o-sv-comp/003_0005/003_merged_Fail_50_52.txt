[kernel] Parsing out/003_0005/003_merged.c (with preprocessing)
[kernel:typing:no-proto] out/003_0005/003_merged.c:44: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/003_0005/003_merged.c:7: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 52 goals scheduled
[wp] [Timeout] typed_foo003_loop_invariant_3_preserved (Qed 38ms) (Z3)
[wp] [Timeout] typed_foo003_loop_invariant_11_preserved (Qed 39ms) (Z3)
[wp] Proved goals:   50 / 52
  Qed:              36
  Alt-Ergo 2.5.4:    9 (6ms-24ms-75ms)
  Z3 4.8.12:         5
  Timeout:           2
------------------------------------------------------------
  Function foo003
------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 14):
Let x = i + n.
Let x_1 = 3 * i.
Let x_2 = 2 * b_1.
Let x_3 = 2 * i.
Let x_4 = 2 * n.
Let x_5 = -i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(b_1 - i) /\ is_sint32(x_2 - x_1) /\ is_sint32(1 + b_1 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: b_1 <= x_4.
  (* Invariant *)
  Have: (i = 0) \/ (x_3 = b_1).
  (* Invariant *)
  Have: (x_1 <= b_1) \/ (b_1 <= x_1).
  (* Invariant *)
  Have: x_2 <= (x_4 + x_1).
  (* Invariant *)
  Have: forall i_3 : Z. let x_6 = i + i_3 in ((0 <= i_3) -> ((x_6 < b_1) ->
      (x_6 <= b_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((i + i_3) < b_1) ->
      (if (x_1 < b_1) then (i_3 <= x_3) else ((i_3 + (4 * i)) <= x_2)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_3 <= b_1).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i <= b_1) /\ (x_1 <= x_2).
  (* Invariant *)
  Have: b_1 <= x.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: b_1 < x.
  If tmp_0 != 0
  Then {
    Have: (a_1 + x_1) = x_2.
    Have: (a + x_1) = (1 + x_2).
    Have: (2 + b_1) = b.
  }
  Else {
    Have: (a_2 + x_1) = x_2.
    Have: (a + x_1) = (2 + x_2).
    Have: (1 + b_1) = b.
  }
}
Prove: (i + ((a + b) / 3)) = (1 + b_1).
Prover Z3 4.8.12 returns Valid (Qed:21ms) (10ms) (37831)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:21ms) (17ms) (423)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 15):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = (3 * x_1) - 3.
Let x_3 = x_1 - 1.
Let x_4 = i + x_1.
Let x_5 = 2 * x_1.
Let x_6 = 2 * i.
Let x_7 = 2 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_5 - 2 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_2 / 3)).
  (* Invariant *)
  Have: x_4 <= (1 + x_7).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_6 < x_1) \/ (x_1 <= (1 + x_6)).
  (* Invariant *)
  Have: x_5 <= (2 + i + x_7).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_6) <= x_1) then (i_3 <= x_6) else ((2 + i_3 + x_6) <= x_5)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_4) /\ (3 <= x) /\ ((2 + i) <= x_5).
  (* Invariant *)
  Have: (x_2 % 3) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = (x_3 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
}
Prove: b <= x_7.
Prover Z3 4.8.12 returns Valid (Qed:30ms) (20ms) (44006)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (11ms) (130)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 16):
Let x = 2 * n.
Let x_1 = a + b.
Let x_2 = x_1 / 3.
Let x_3 = (3 * x_2) - 3.
Let x_4 = x_2 - 1.
Let x_5 = i + x_2.
Let x_6 = 2 * x_2.
Let x_7 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_4) /\ is_sint32(i + x_2 - 1) /\
      is_sint32(x_6 - 2 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_2 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x).
  (* Invariant *)
  Have: (i = 0) \/ (x_2 = (1 + i)).
  (* Invariant *)
  Have: (x_7 < x_2) \/ (x_2 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i + x).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) -> (i_3 < x_2))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_2) ->
      (if ((2 + x_7) <= x_2) then (i_3 <= x_7) else ((2 + i_3 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_2).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x_1) /\ ((2 + i) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x.
}
Prove: ((a + x_2) = b) \/ ((b + x_2) = a).
Prover Z3 4.8.12 returns Timeout (Qed:38ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:38ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 17):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = (3 * x_1) - 3.
Let x_4 = x_1 - 1.
Let x_5 = i + x_1.
Let x_6 = 2 * x_1.
Let x_7 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_6 - 2 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_7 < x_1) \/ (x_1 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i + x_2).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_7) <= x_1) then (i_3 <= x_7) else ((2 + i_3 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x) /\ ((2 + i) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
}
Prove: (b <= a) \/ (a <= b).
Prover Z3 4.8.12 returns Valid (Qed:30ms) (10ms) (39124)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (6ms) (47)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 18):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = (3 * x_1) - 3.
Let x_4 = x_1 - 1.
Let x_5 = i + x_1.
Let x_6 = 2 * x_1.
Let x_7 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_6 - 2 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_7 < x_1) \/ (x_1 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i + x_2).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_7) <= x_1) then (i_3 <= x_7) else ((2 + i_3 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x) /\ ((2 + i) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
}
Prove: a <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:28ms) (10ms) (49158)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:28ms) (8ms) (127)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 20):
Let x = 2 * n.
Let x_1 = a + b.
Let x_2 = x_1 / 3.
Let x_3 = (3 * x_2) - 3.
Let x_4 = x_2 - 1.
Let x_5 = i_1 + x_2.
Let x_6 = 2 * x_2.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_2) /\ is_sint32(x_4) /\ is_sint32(i_1 + x_2 - 1) /\
      is_sint32(x_6 - 2 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_2 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_2 = (1 + i_1)).
  (* Invariant *)
  Have: (x_7 < x_2) \/ (x_2 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i_1 + x).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_2) -> (i_4 < x_2))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_2) ->
      (if ((2 + x_7) <= x_2) then (i_4 <= x_7) else ((2 + i_4 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_2).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x_1) /\ ((2 + i_1) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_2 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_2 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i_1 + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i_1 + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x.
  (* Invariant *)
  Have: ((a + x_2) = b) \/ ((b + x_2) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x.
}
Prove: (3 * i) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:30ms) (20ms) (44237)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:30ms) (11ms) (124)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 21):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = (3 * x_1) - 3.
Let x_4 = x_1 - 1.
Let x_5 = i + x_1.
Let x_6 = 2 * x_1.
Let x_7 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_6 - 2 - i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x_2).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_7 < x_1) \/ (x_1 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i + x_2).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_7) <= x_1) then (i_4 <= x_7) else ((2 + i_4 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x) /\ ((2 + i) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
}
Prove: (x % 3) = 0.
Prover Z3 4.8.12 returns Valid (Qed:32ms) (20ms) (49461)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 22):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = (3 * x_1) - 3.
Let x_4 = x_1 - 1.
Let x_5 = i_1 + x_1.
Let x_6 = 2 * x_1.
Let x_7 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(i_1 + x_1 - 1) /\
      is_sint32(x_6 - 2 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_3 / 3)).
  (* Invariant *)
  Have: x_5 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_7 < x_1) \/ (x_1 <= (1 + x_7)).
  (* Invariant *)
  Have: x_6 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_7) <= x_1) then (i_4 <= x_7) else ((2 + i_4 + x_7) <= x_6)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_5) /\ (3 <= x) /\ ((2 + i_1) <= x_6).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
  (* Invariant *)
  Have: (x_3 % 2) = (x_4 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_8 = 3 + a_1 + b_1.
    Let x_9 = x_8 / 3.
    Have: ((2 + b_1) = b) /\ (x_8 = (3 * x_9)) /\ ((i_1 + x_9) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_10 = 1 + b_2.
    Let x_11 = 3 + a_2 + b_2.
    Let x_12 = x_11 / 3.
    Have: (x_10 = b) /\ (x_11 = (3 * x_12)) /\ ((i_1 + x_12) = x_10).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: ((a + x_1) = b) \/ ((b + x_1) = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((x % 3) = 0))).
}
Prove: (3 * i) <= x.
Prover Z3 4.8.12 returns Valid (Qed:37ms) (10ms) (44004)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:37ms) (7ms) (119)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 24):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = 2 * n.
Let x_3 = a + x_1.
Let x_4 = b + x_1.
Let x_5 = (3 * x_1) - 3.
Let x_6 = x_1 - 1.
Let x_7 = i_1 + x_1.
Let x_8 = 2 * x_1.
Let x_9 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(i_1 + x_1 - 1) /\
      is_sint32(x_8 - 2 - i_1).
  (* Goal *)
  When: (0 <= i) /\ (i < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_5 / 3)).
  (* Invariant *)
  Have: x_7 <= (1 + x_2).
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_1 = (1 + i_1)).
  (* Invariant *)
  Have: (x_9 < x_1) \/ (x_1 <= (1 + x_9)).
  (* Invariant *)
  Have: x_8 <= (2 + i_1 + x_2).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_9) <= x_1) then (i_4 <= x_9) else ((2 + i_4 + x_9) <= x_8)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < x_1).
  (* Invariant *)
  Have: (0 < x_7) /\ (3 <= x) /\ ((2 + i_1) <= x_8).
  (* Invariant *)
  Have: (x_5 % 3) = 0.
  (* Invariant *)
  Have: (x_5 % 2) = (x_6 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_10 = 3 + a_1 + b_1.
    Let x_11 = x_10 / 3.
    Have: ((2 + b_1) = b) /\ (x_10 = (3 * x_11)) /\
        ((i_1 + x_11) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_12 = 1 + b_2.
    Let x_13 = 3 + a_2 + b_2.
    Let x_14 = x_13 / 3.
    Have: (x_12 = b) /\ (x_13 = (3 * x_14)) /\ ((i_1 + x_14) = x_12).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: (x_3 = b) \/ (x_4 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_2.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((x % 3) = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> ((3 * i_4) <= x))).
}
Prove: if (b < a) then ((a + i) <= x_4) else ((b + i) <= x_3).
Prover Z3 4.8.12 returns Timeout (Qed:39ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:39ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 25):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = b + x_1.
Let x_3 = a + x_1.
Let x_4 = x % 3.
Let x_5 = 2 * n.
Let x_6 = (3 * x_1) - 3.
Let x_7 = x_1 - 1.
Let x_8 = i + x_1.
Let x_9 = 2 * x_1.
Let x_10 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_7) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_9 - 2 - i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: x_1 = (1 + (x_6 / 3)).
  (* Invariant *)
  Have: x_8 <= (1 + x_5).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_10 < x_1) \/ (x_1 <= (1 + x_10)).
  (* Invariant *)
  Have: x_9 <= (2 + i + x_5).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) -> (i_4 < x_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((2 + i_4) <= x_1) ->
      (if ((2 + x_10) <= x_1) then (i_4 <= x_10)
       else ((2 + i_4 + x_10) <= x_9)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_8) /\ (3 <= x) /\ ((2 + i) <= x_9).
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = (x_7 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_11 = 3 + a_1 + b_1.
    Let x_12 = x_11 / 3.
    Have: ((2 + b_1) = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_13 = 1 + b_2.
    Let x_14 = 3 + a_2 + b_2.
    Let x_15 = x_14 / 3.
    Have: (x_13 = b) /\ (x_14 = (3 * x_15)) /\ ((i + x_15) = x_13).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (x_3 = b) \/ (x_2 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= x_1) -> (x_4 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) -> ((3 * i_4) <= x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->
      (if (b < a) then ((a + i_4) <= x_2) else ((b + i_4) <= x_3)))).
}
Prove: x_4 = 0.
Prover Z3 4.8.12 returns Valid (Qed:42ms) (20ms) (51964)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:42ms) (75ms) (895)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 26):
Let x = a + b.
Let x_1 = x / 3.
Let x_2 = x % 3.
Let x_3 = b + x_1.
Let x_4 = a + x_1.
Let x_5 = 2 * n.
Let x_6 = (3 * x_1) - 3.
Let x_7 = x_1 - 1.
Let x_8 = i + x_1.
Let x_9 = 2 * x_1.
Let x_10 = 2 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(n) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_7) /\ is_sint32(i + x_1 - 1) /\
      is_sint32(x_9 - 2 - i).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: x_1 = (1 + (x_6 / 3)).
  (* Invariant *)
  Have: x_8 <= (1 + x_5).
  (* Invariant *)
  Have: (i = 0) \/ (x_1 = (1 + i)).
  (* Invariant *)
  Have: (x_10 < x_1) \/ (x_1 <= (1 + x_10)).
  (* Invariant *)
  Have: x_9 <= (2 + i + x_5).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) -> (i_3 < x_1))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= x_1) ->
      (if ((2 + x_10) <= x_1) then (i_3 <= x_10)
       else ((2 + i_3 + x_10) <= x_9)))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < x_1).
  (* Invariant *)
  Have: (0 < x_8) /\ (3 <= x) /\ ((2 + i) <= x_9).
  (* Invariant *)
  Have: (x_6 % 3) = 0.
  (* Invariant *)
  Have: (x_6 % 2) = (x_7 % 2).
  (* Invariant *)
  Have: x_1 <= (1 + n).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: x_1 <= n.
  If tmp_0 != 0
  Then {
    Let x_11 = 3 + a_1 + b_1.
    Let x_12 = x_11 / 3.
    Have: ((2 + b_1) = b) /\ (x_11 = (3 * x_12)) /\ ((i + x_12) = (1 + b_1)).
    Have: (1 + a_1) = a.
  }
  Else {
    Let x_13 = 1 + b_2.
    Let x_14 = 3 + a_2 + b_2.
    Let x_15 = x_14 / 3.
    Have: (x_13 = b) /\ (x_14 = (3 * x_15)) /\ ((i + x_15) = x_13).
    Have: (2 + a_2) = a.
  }
  (* Invariant *)
  Have: b <= x_5.
  (* Invariant *)
  Have: (x_4 = b) \/ (x_3 = a).
  (* Invariant *)
  Have: (b <= a) \/ (a <= b).
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) -> ((3 * i_3) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) -> (x_2 = 0))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> ((3 * i_3) <= x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) ->
      (if (b < a) then ((a + i_3) <= x_3) else ((b + i_3) <= x_4)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x_1) -> (x_2 = 0))).
}
Prove: exists i_3 : Z. (x_3 = (a + (2 * i_3))) /\ (0 <= i_3) /\ (i_3 <= x_1).
Prover Z3 4.8.12 returns Valid (Qed:41ms) (50ms) (187769)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (63ms) (865)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 27):
Let x = i_1 + i.
Let x_1 = 1 + b_1.
Let x_2 = (-2) * i_1.
Let x_3 = -i.
Let x_4 = 2 * b.
Let x_5 = 1 + b_1 + x_4 - i - (2 * i_1).
Let x_6 = x_5 % 3.
Let x_7 = 2 * i_1.
Let x_8 = i + x_7.
Let x_9 = 2 * i.
Let x_10 = 2 * b_1.
Let x_11 = 1 + b_1 + x_4.
Let x_12 = 2 * n.
Let x_13 = i + n.
Let x_14 = 3 * i.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b_1 - i) /\
      is_sint32(x_10 - x_14) /\ is_sint32(1 + b_1 - i) /\
      is_sint32(1 + b + b_1 - i - x_7).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b_1 <= x_12.
  (* Invariant *)
  Have: (i = 0) \/ (x_9 = b_1).
  (* Invariant *)
  Have: (x_14 <= b_1) \/ (b_1 <= x_14).
  (* Invariant *)
  Have: x_10 <= (x_12 + x_14).
  (* Invariant *)
  Have: forall i_4 : Z. let x_15 = i + i_4 in ((0 <= i_4) -> ((x_15 < b_1) ->
      (x_15 <= b_1))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) < b_1) ->
      (if (x_14 < b_1) then (i_4 <= x_9) else ((i_4 + (4 * i)) <= x_10)))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_9 <= b_1).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i <= b_1) /\ (x_14 <= x_10).
  (* Invariant *)
  Have: b_1 <= x_13.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b_1 < x_13.
  If tmp_0 != 0
  Then { Have: ((1 + i) = i_1) /\ ((a + x_14) = x_10). Have: (2 + b_1) = b. }
  Else { Have: (i = i_1) /\ ((a_1 + (3 * i_1)) = x_10). Have: x_1 = b. }
  (* Invariant *)
  Have: (i + (x_5 / 3)) = x_1.
  (* Invariant *)
  Have: b <= x_12.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x = x_1).
  (* Invariant *)
  Have: (b_1 < x_8) \/ (x_8 <= x_1).
  (* Invariant *)
  Have: (b + b_1) < (i + x_7 + x_12).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) ->
      ((i + x_7 + (3 * i_4)) <= x_11))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= x_1) -> (x_6 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      ((i + x_7 + (3 * i_4)) <= x_11))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) ->
      (if (x_8 <= b_1) then (i_4 <= x_7)
       else ((i_4 + x_7 + x_9) <= (2 + x_10))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i + i_4) <= b_1) -> (x_6 = 0))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x <= x_1).
}
Prove: (0 <= b) /\ (i <= x_1) /\ (x_8 <= (1 + b + b_1)).
Prover Z3 4.8.12 returns Valid (Qed:39ms) (10ms) (44792)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:39ms) (22ms) (250)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 28):
Let x = 1 + b.
Let x_1 = 2 * i.
Let x_2 = i_1 + x_1.
Let x_3 = i + i_1.
Let x_4 = (-2) * i.
Let x_5 = -i_1.
Let x_6 = 2 * b_1.
Let x_7 = 1 + b + x_6 - i_1 - x_1.
Let x_8 = x_7 % 3.
Let x_9 = 2 * i_1.
Let x_10 = 2 * b.
Let x_11 = 1 + b + x_6.
Let x_12 = 2 * n.
Let x_13 = i_1 + n.
Let x_14 = 3 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b - i_1) /\
      is_sint32(x_10 - x_14) /\ is_sint32(1 + b - i_1) /\
      is_sint32(1 + b_1 + b - i_1 - x_1).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b <= x_12.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_9 = b).
  (* Invariant *)
  Have: (x_14 <= b) \/ (b <= x_14).
  (* Invariant *)
  Have: x_10 <= (x_12 + x_14).
  (* Invariant *)
  Have: forall i_4 : Z. let x_15 = i_1 + i_4 in ((0 <= i_4) -> ((x_15 < b) ->
      (x_15 <= b))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      (if (x_14 < b) then (i_4 <= x_9) else ((i_4 + (4 * i_1)) <= x_10)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x_9 <= b).
  (* Invariant *)
  Have: (0 <= b) /\ (i_1 <= b) /\ (x_14 <= x_10).
  (* Invariant *)
  Have: b <= x_13.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b < x_13.
  If tmp_0 != 0
  Then { Have: ((1 + i_1) = i) /\ ((a + x_14) = x_10). Have: (2 + b) = b_1. }
  Else { Have: (i_1 = i) /\ ((a_1 + (3 * i)) = x_10). Have: x = b_1. }
  (* Invariant *)
  Have: (i_1 + (x_7 / 3)) = x.
  (* Invariant *)
  Have: b_1 <= x_12.
  (* Invariant *)
  Have: (i = 0) \/ (x_3 = x).
  (* Invariant *)
  Have: (b < x_2) \/ (x_2 <= x).
  (* Invariant *)
  Have: (b_1 + b) < (i_1 + x_1 + x_12).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) ->
      ((i_1 + x_1 + (3 * i_4)) <= x_11))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x) -> (x_8 = 0))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((i_1 + x_1 + (3 * i_4)) <= x_11))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (if (x_2 <= b) then (i_4 <= x_1) else ((i_4 + x_1 + x_9) <= (2 + x_10))))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) -> (x_8 = 0))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_3 <= x).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i_1 <= x) /\ (x_2 <= (1 + b_1 + b)).
}
Prove: x_8 = 0.
Prover Z3 4.8.12 returns Valid (Qed:39ms) (10ms) (45185)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 29):
Let x = (-2) * i.
Let x_1 = -i_1.
Let x_2 = 2 * b_1.
Let x_3 = 1 + b + x_2 - i_1 - (2 * i).
Let x_4 = 1 + b.
Let x_5 = 2 * i.
Let x_6 = i_1 + x_5.
Let x_7 = i + i_1.
Let x_8 = 2 * i_1.
Let x_9 = 2 * b.
Let x_10 = 1 + b + x_2.
Let x_11 = 2 * n.
Let x_12 = i_1 + n.
Let x_13 = 3 * i_1.
Let x_14 = 1 + b - i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b_1) /\ is_sint32(b) /\
      is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(b - i_1) /\
      is_sint32(x_9 - x_13) /\ is_sint32(x_14) /\
      is_sint32(1 + b_1 + b - i_1 - x_5).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: b <= x_11.
  (* Invariant *)
  Have: (i_1 = 0) \/ (x_8 = b).
  (* Invariant *)
  Have: (x_13 <= b) \/ (b <= x_13).
  (* Invariant *)
  Have: x_9 <= (x_11 + x_13).
  (* Invariant *)
  Have: forall i_4 : Z. let x_15 = i_1 + i_4 in ((0 <= i_4) -> ((x_15 < b) ->
      (x_15 <= b))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) < b) ->
      (if (x_13 < b) then (i_4 <= x_8) else ((i_4 + (4 * i_1)) <= x_9)))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (x_8 <= b).
  (* Invariant *)
  Have: (0 <= b) /\ (i_1 <= b) /\ (x_13 <= x_9).
  (* Invariant *)
  Have: b <= x_12.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Then *)
  Have: b < x_12.
  If tmp_0 != 0
  Then { Have: ((1 + i_1) = i) /\ ((a + x_13) = x_9). Have: (2 + b) = b_1. }
  Else { Have: (i_1 = i) /\ ((a_1 + (3 * i)) = x_9). Have: x_4 = b_1. }
  (* Invariant *)
  Have: (i_1 + (x_3 / 3)) = x_4.
  (* Invariant *)
  Have: b_1 <= x_11.
  (* Invariant *)
  Have: (i = 0) \/ (x_7 = x_4).
  (* Invariant *)
  Have: (b < x_6) \/ (x_6 <= x_4).
  (* Invariant *)
  Have: (b_1 + b) < (i_1 + x_5 + x_11).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= x_4) ->
      ((i_1 + x_5 + (3 * i_4)) <= x_10))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      ((i_1 + x_5 + (3 * i_4)) <= x_10))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> (((i_1 + i_4) <= b) ->
      (if (x_6 <= b) then (i_4 <= x_5) else ((i_4 + x_5 + x_8) <= (2 + x_9))))).
  (* Invariant *)
  Have: (0 <= i) /\ (x_7 <= x_4).
  (* Invariant *)
  Have: (0 <= b_1) /\ (i_1 <= x_4) /\ (x_6 <= (1 + b_1 + b)).
  (* Invariant *)
  Have: (x_3 % 3) = 0.
}
Prove: (x_3 % 2) = (x_14 % 2).
Prover Z3 4.8.12 returns Valid (Qed:38ms) (20ms) (66821)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (32ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (50ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (33ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 35):
Let x = 3 + (3 * i).
Let x_1 = 1 + i.
Let x_2 = i_2 + i.
Let x_3 = 2 * i.
Let x_4 = 2 + x_3.
Let x_5 = 2 * i_2.
Let x_6 = 2 * n.
Let x_7 = i + i_1.
Let x_8 = 2 * i_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(i) /\ is_sint32(n) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_7) /\ is_sint32(1 + i_2 + i) /\ is_sint32(x_3 - i_1) /\
      is_sint32(2 + x_3 - i_2).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: 0 <= i_3.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: (i_1 = 0) \/ (i_1 = i).
  (* Invariant *)
  Have: (x_8 <= i) \/ (i <= x_8).
  (* Invariant *)
  Have: x_3 <= (i_1 + x_6).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) -> (i_5 <= i))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (if (x_8 < i) then (i_5 <= x_8) else ((i_5 + x_8) <= x_3)))).
  (* Invariant *)
  Have: (i_1 <= i) /\ (0 <= i_1).
  (* Invariant *)
  Have: (0 <= i) /\ (i_1 <= x_3) /\ (0 <= x_7).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: 0 <= i_4.
  (* Then *)
  Have: i < n.
  If tmp_0 != 0
  Then {
    Have: (x_7 = b) /\ ((a + (3 * i_1)) = (2 * b)).
    Have: (1 + i_1) = i_2.
  }
  Else { Have: ((a_1 + b_1) = (3 * i)) /\ (x_2 = b_1) /\ (x_7 = b_1). }
  (* Invariant *)
  Have: (x / 3) = x_1.
  (* Invariant *)
  Have: x_2 < x_6.
  (* Invariant *)
  Have: (i_2 = 0) \/ (x_1 = i_2).
  (* Invariant *)
  Have: (i < x_5) \/ (x_5 <= x_1).
  (* Invariant *)
  Have: x_4 <= (i_2 + x_6).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) -> (i_5 <= x_1))).
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (if (x_5 <= i) then (i_5 <= x_5) else ((i_5 + x_5) <= x_4)))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 <= x_1).
  (* Invariant *)
  Have: ((-1) <= i) /\ ((-1) <= x_2) /\ (i_2 <= x_4).
  (* Invariant *)
  Have: (x % 3) = 0.
  (* Invariant *)
  Have: (x % 2) = (x_1 % 2).
}
Prove: exists i_5 : Z. 0 <= i_5.
Prover Z3 4.8.12 returns Valid (Qed:53ms) (10ms) (33008)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 35):
Assume {
  Type: is_sint32(n).
  (* Pre-condition *)
  Have: n <= 999999.
  (* Invariant *)
  Have: 0 <= n.
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.12 returns Valid (Qed:0.77ms) (23846)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/003_0005/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/003_0005/003_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Loop assigns (file out/003_0005/003_merged.c, line 39) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/003_0005/003_merged.c, line 39) (2/2):
Call Result at line 44
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/003_0005/003_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/003_0005/003_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo003'.
  Callers assumptions might be imprecise.
