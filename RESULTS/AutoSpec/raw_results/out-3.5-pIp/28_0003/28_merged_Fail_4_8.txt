[kernel] Parsing out/28_0003/28_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] [Timeout] typed_main28_assert_2 (Qed 0.90ms) (Z3)
[wp] [Timeout] typed_main28_assert (Qed 1ms) (Z3)
[wp] [Timeout] typed_main28_assert_3 (Qed 1ms) (Z3)
[wp] [Timeout] typed_main28_call_LimitInt32Fun_requires_2 (Qed 0.94ms) (Alt-Ergo)
[wp] Proved goals:    4 / 8
  Qed:               1
  Alt-Ergo 2.5.4:    3 (6ms-14ms-20ms)
  Timeout:           4
------------------------------------------------------------
  Function LimitInt32Fun
------------------------------------------------------------

Goal Post-condition (file out/28_0003/28_merged.c, line 16) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a].
Let x_3 = m[a_1].
Let x_4 = m[a_2].
Assume {
  Type: is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: x_2 < x_3.
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_4 = x_2.
Prover Z3 4.8.12 returns Valid (Qed:14ms) (40ms) (226592)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:14ms) (17ms) (277)

------------------------------------------------------------

Goal Post-condition (file out/28_0003/28_merged.c, line 17) in 'LimitInt32Fun':
Let a = shiftfield_F1___LimitInt32_bound(pIp_0).
Let x = Mint_3[a].
Let a_1 = shiftfield_F1___LimitInt32_in(pIp_0).
Let x_1 = Mint_3[a_1].
Let a_2 = shiftfield_F1___LimitInt32_value(pIp_0).
Let m = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)] <- Mint_0[a_2]].
Let x_2 = m[a_1].
Let x_3 = m[a].
Let x_4 = m[a_2].
Assume {
  Type: is_sint32(Mint_1[a]) /\ is_sint32(Mint_2[a]) /\
      is_sint32(Mint_2[a_1]) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ framed(Mptr_0) /\ linked(Malloc_0).
  (* Goal *)
  When: (x_2 <= x_3) /\ (0 <= (x_3 + x_2)).
  (* Pre-condition *)
  Have: 0 <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x < x_1
  Then { Have: Mint_3 = Mint_4. Have: Mint_4[a_2 <- Mint_4[a]] = Mint_0. }
  Else {
    Have: Mint_3 = Mint_2.
    If (Mint_2[a] + Mint_2[a_1]) < 0
    Then { Have: Mint_2 = Mint_1. Have: Mint_1[a_2 <- -Mint_1[a]] = Mint_0. }
    Else { Have: Mint_2 = Mint_5. Have: Mint_5[a_2 <- Mint_5[a_1]] = Mint_0.
    }
  }
}
Prove: x_4 = x_2.
Prover Z3 4.8.12 returns Valid (Qed:13ms) (50ms) (228099)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (20ms) (325)

------------------------------------------------------------
------------------------------------------------------------
  Function main28
------------------------------------------------------------

Goal Assertion (file out/28_0003/28_merged.c, line 47):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Let x_2 = Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x_2 = x))) /\
      (((x_1 <= x) -> ((0 <= (x + x_1)) -> (x_2 = x_1)))).
}
Prove: x_2 = 50.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/28_0003/28_merged.c, line 48):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Let x_2 = Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x = 50))) /\
      (((x_1 <= x) -> ((0 <= (x + x_1)) -> (x_1 = 50)))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = 50.
}
Prove: x_2 = 50.
Prover Z3 4.8.12 returns Timeout (Qed:0.90ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.90ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/28_0003/28_merged.c, line 49):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Let x_1 = Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x < x_1) -> (x = 50))) /\
      (((x_1 <= x) -> ((0 <= (x + x_1)) -> (x_1 = 50)))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = 50.
  (* Assertion *)
  Have: Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]] = 50.
}
Prove: x_1 = 100.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/28_0003/28_merged.c, line 50):
Let x = Mint_0[shiftfield_F1___LimitInt32_bound(pIp_0)].
Assume {
  Type: is_sint32(x).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'LimitInt32Fun' *)
  Have: (((x <= 99) -> (x = 50))) /\
      ((((-100) <= x) -> ((100 <= x) -> false))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_value(pIp_0)] = 50.
  (* Assertion *)
  Have: Mint_0[Mptr_0[shiftfield_F1___LimitInt32_ret(pIp_0)]] = 50.
  (* Assertion *)
  Have: Mint_0[shiftfield_F1___LimitInt32_in(pIp_0)] = 100.
}
Prove: x = 50.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (40ms) (164435)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (6ms) (31)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/28_0003/28_merged.c, line 14) in 'LimitInt32Fun'' in 'main28' at call 'LimitInt32Fun' (file out/28_0003/28_merged.c, line 45)
:
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/28_0003/28_merged.c, line 15) in 'LimitInt32Fun'' in 'main28' at call 'LimitInt32Fun' (file out/28_0003/28_merged.c, line 45)
:
Assume { (* Heap *) Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0). }
Prove: valid_rw(Malloc_0, pIp_0, 4).
Prover Z3 4.8.12 returns Unknown (Qed:0.94ms)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.94ms) (8s)

------------------------------------------------------------
[wp:pedantic-assigns] out/28_0003/28_merged.c:19: Warning: 
  No 'assigns' specification for function 'LimitInt32Fun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/28_0003/28_merged.c:40: Warning: 
  No 'assigns' specification for function 'main28'.
  Callers assumptions might be imprecise.
