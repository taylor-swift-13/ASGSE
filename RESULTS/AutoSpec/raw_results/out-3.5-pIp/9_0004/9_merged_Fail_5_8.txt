[kernel] Parsing out/9_0004/9_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] [Timeout] typed_main9_assert (Qed 0.98ms) (Z3)
[wp] [Timeout] typed_main9_assert_4 (Qed 1ms) (Z3)
[wp] [Timeout] typed_main9_call_ThrABAutoChooseFun_requires (Qed 0.98ms) (Alt-Ergo)
[wp] Proved goals:    5 / 8
  Qed:               1
  Alt-Ergo 2.5.4:    4 (3ms-10ms-20ms)
  Timeout:           3
------------------------------------------------------------
  Function ThrABAutoChooseFun
------------------------------------------------------------

Goal Post-condition (file out/9_0004/9_merged.c, line 21) in 'ThrABAutoChooseFun':
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let a_2 = shift_sint32(a_1, 0).
Let x = Mint_1[a_2].
Let x_1 = Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)].
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (Mint_0[a_2] = 1) /\ (Mint_0[shift_sint32(a_1, 1)] = 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x = 1
  Then {
    Have: Mint_1 = Mint_2.
    If Mint_2[shift_sint32(a_1, 1)] = 1
    Then {
      Have: Mint_2 = Mint_3.
      Have: Mint_3[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 204] = Mint_0.
    }
    Else {
      Have: Mint_2 = Mint_4.
      If Mint_4[a_2] = 0
      Then {
        Have: Mint_4 = Mint_5.
        If Mint_5[shift_sint32(a_1, 1)] = 1
        Then {
          Have: Mint_5 = Mint_6.
          Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
              Mint_0.
        }
        Else {
          Have: Mint_5 = Mint_7.
          Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] =
              Mint_0.
        }
      }
      Else {
        Have: Mint_4 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
  }
  Else {
    Have: Mint_1 = Mint_4.
    If Mint_4[a_2] = 0
    Then {
      Have: Mint_4 = Mint_5.
      If Mint_5[shift_sint32(a_1, 1)] = 1
      Then {
        Have: Mint_5 = Mint_6.
        Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
            Mint_0.
      }
      Else {
        Have: Mint_5 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
    Else {
      Have: Mint_4 = Mint_7.
      Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
    }
  }
}
Prove: x_1 = 204.
Prover Z3 4.8.12 returns Valid (Qed:43ms) (20ms) (100382)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:43ms) (4ms) (109)

------------------------------------------------------------

Goal Post-condition (file out/9_0004/9_merged.c, line 22) in 'ThrABAutoChooseFun':
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let a_2 = shift_sint32(a_1, 0).
Let x = Mint_1[a_2].
Let x_1 = Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)].
Assume {
  Type: is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (Mint_0[a_2] = 0) /\ (Mint_0[shift_sint32(a_1, 1)] = 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x = 1
  Then {
    Have: Mint_1 = Mint_2.
    If Mint_2[shift_sint32(a_1, 1)] = 1
    Then {
      Have: Mint_2 = Mint_3.
      Have: Mint_3[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 204] = Mint_0.
    }
    Else {
      Have: Mint_2 = Mint_4.
      If Mint_4[a_2] = 0
      Then {
        Have: Mint_4 = Mint_5.
        If Mint_5[shift_sint32(a_1, 1)] = 1
        Then {
          Have: Mint_5 = Mint_6.
          Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
              Mint_0.
        }
        Else {
          Have: Mint_5 = Mint_7.
          Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] =
              Mint_0.
        }
      }
      Else {
        Have: Mint_4 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
  }
  Else {
    Have: Mint_1 = Mint_4.
    If Mint_4[a_2] = 0
    Then {
      Have: Mint_4 = Mint_5.
      If Mint_5[shift_sint32(a_1, 1)] = 1
      Then {
        Have: Mint_5 = Mint_6.
        Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
            Mint_0.
      }
      Else {
        Have: Mint_5 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
    Else {
      Have: Mint_4 = Mint_7.
      Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
    }
  }
}
Prove: x_1 = 51.
Prover Z3 4.8.12 returns Valid (Qed:41ms) (30ms) (151276)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:41ms) (13ms) (181)

------------------------------------------------------------

Goal Post-condition (file out/9_0004/9_merged.c, line 23) in 'ThrABAutoChooseFun':
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let a_2 = shift_sint32(a_1, 0).
Let x = Mint_1[a_2].
Let x_1 = Mint_0[a_2].
Let x_2 = Mint_0[shift_sint32(a_1, 1)].
Let x_3 = Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)].
Assume {
  Type: is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Heap *)
  Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: ((x_1 != 0) \/ (x_2 != 1)) /\ ((x_1 != 1) \/ (x_2 != 1)).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, pIp_0, 4).
  If x = 1
  Then {
    Have: Mint_1 = Mint_2.
    If Mint_2[shift_sint32(a_1, 1)] = 1
    Then {
      Have: Mint_2 = Mint_3.
      Have: Mint_3[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 204] = Mint_0.
    }
    Else {
      Have: Mint_2 = Mint_4.
      If Mint_4[a_2] = 0
      Then {
        Have: Mint_4 = Mint_5.
        If Mint_5[shift_sint32(a_1, 1)] = 1
        Then {
          Have: Mint_5 = Mint_6.
          Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
              Mint_0.
        }
        Else {
          Have: Mint_5 = Mint_7.
          Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] =
              Mint_0.
        }
      }
      Else {
        Have: Mint_4 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
  }
  Else {
    Have: Mint_1 = Mint_4.
    If Mint_4[a_2] = 0
    Then {
      Have: Mint_4 = Mint_5.
      If Mint_5[shift_sint32(a_1, 1)] = 1
      Then {
        Have: Mint_5 = Mint_6.
        Have: Mint_6[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 51] =
            Mint_0.
      }
      Else {
        Have: Mint_5 = Mint_7.
        Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
      }
    }
    Else {
      Have: Mint_4 = Mint_7.
      Have: Mint_7[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a) <- 0] = Mint_0.
    }
  }
}
Prove: x_3 = 0.
Prover Z3 4.8.12 returns Valid (Qed:46ms) (30ms) (102153)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:46ms) (20ms) (305)

------------------------------------------------------------
------------------------------------------------------------
  Function main9
------------------------------------------------------------

Goal Assertion (file out/9_0004/9_merged.c, line 56):
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let x = Mint_0[shift_sint32(a_1, 0)].
Let x_1 = Mint_0[shift_sint32(a_1, 1)].
Let x_2 = Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)].
Assume {
  Type: is_sint32(x_2) /\
      is_sint32(Mint_0[shiftfield_F1_TAG_UPS_2MS_wPulse(a)]) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'ThrABAutoChooseFun' *)
  Have: (((x = 0) -> ((x_1 = 1) -> (x_2 = 51)))) /\
      (((x = 1) -> ((x_1 = 1) -> (x_2 = 204)))) /\
      ((((x != 0) \/ (x_1 != 1)) -> (((x != 1) \/ (x_1 != 1)) -> (x_2 = 0)))).
}
Prove: x_2 = 51.
Prover Z3 4.8.12 returns Timeout (Qed:0.98ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------

Goal Assertion (file out/9_0004/9_merged.c, line 57):
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let x = Mint_0[shift_sint32(a_1, 0)].
Let x_1 = Mint_0[shift_sint32(a_1, 1)].
Assume {
  Type: is_sint32(Mint_0[shiftfield_F1_TAG_UPS_2MS_wPulse(a)]) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Call 'ThrABAutoChooseFun' *)
  Have: (((x = 1) -> ((x_1 = 1) -> false))) /\
      ((((x != 0) \/ (x_1 != 1)) -> (((x != 1) \/ (x_1 != 1)) -> false))).
  (* Assertion *)
  Have: Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)] = 51.
}
Prove: x = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (12471)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (3ms) (18)

------------------------------------------------------------

Goal Assertion (file out/9_0004/9_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Assertion (file out/9_0004/9_merged.c, line 59):
Let a = shiftfield_F2___ThrABAutoChoose_mThrDistribute(pIp_0).
Let a_1 = shiftfield_F1_TAG_UPS_2MS_stateFlag(a).
Let a_2 = shiftfield_F1_TAG_UPS_2MS_wPulse(a).
Let x = Mint_1[a_2].
Let x_1 = Mint_0[a_2].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(pIp_0.base) <= 0.
  (* Assertion *)
  Have: Mint_0[shiftfield_F1_TAG_UPS_2MS_flgABChoose(a)] = 51.
  (* Assertion *)
  Have: Mint_0[shift_sint32(a_1, 0)] = 0.
  (* Assertion *)
  Have: Mint_0[shift_sint32(a_1, 1)] = 1.
}
Prove: x_1 = x.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/9_0004/9_merged.c, line 20) in 'ThrABAutoChooseFun'' in 'main9' at call 'ThrABAutoChooseFun' (file out/9_0004/9_merged.c, line 54)
:
Assume { (* Heap *) Type: (region(pIp_0.base) <= 0) /\ linked(Malloc_0). }
Prove: valid_rw(Malloc_0, pIp_0, 4).
Prover Z3 4.8.12 returns Unknown (Qed:0.98ms)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.98ms) (8s)

------------------------------------------------------------
[wp:pedantic-assigns] out/9_0004/9_merged.c:25: Warning: 
  No 'assigns' specification for function 'ThrABAutoChooseFun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/9_0004/9_merged.c:48: Warning: 
  No 'assigns' specification for function 'main9'.
  Callers assumptions might be imprecise.
