[kernel] Parsing out/binary_search_0003/binary_search_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 17 goals scheduled
[wp] [Timeout] typed_binarysearch_loop_invariant_established (Qed 0.92ms) (Z3)
[wp] [Timeout] typed_binarysearch_loop_invariant_3_preserved (Qed 20ms) (Z3)
[wp] [Timeout] typed_binarysearch_loop_invariant_4_preserved (Qed 20ms) (Z3)
[wp] Proved goals:   14 / 17
  Qed:               8
  Alt-Ergo 2.6.2:    6 (10ms-13ms-18ms)
  Timeout:           3
------------------------------------------------------------
  Function binarysearch
------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 8):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i : Z. ((high_1 <= i) -> ((i < high_2) ->
      (x < Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= low_1) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < low_1) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
}
Prove: low_0 < high_0.
Prover Z3 4.8.6 returns Valid (Qed:20ms) (20ms) (104497)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (11ms) (177)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 8):
Assume { Type: is_sint32(high_0). }
Prove: 0 <= high_0.
Prover Z3 4.8.6 returns Timeout (Qed:0.92ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.92ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 9):
Let x_1 = (high_0 + low_0) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(low_0) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Residual *)
  When: x <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= n.
  (* Invariant *)
  Have: forall i : Z. ((high_0 <= i) -> ((i < n) ->
      (x < Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: low_0 < x_1.
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (101380)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (12ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 10):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (high_0 <= i) /\ (i < high_2).
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_1 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_2.
}
Prove: x < Mint_0[shift_sint32(a, i)].
Prover Z3 4.8.6 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 11):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= low_0).
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_1 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_0 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
}
Prove: Mint_0[shift_sint32(a, i)] < x.
Prover Z3 4.8.6 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 12):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i < low_0).
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_1 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_0 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
}
Prove: Mint_0[shift_sint32(a, i)] < x.
Prover Z3 4.8.6 returns Valid (Qed:23ms) (20ms) (87142)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:23ms) (18ms) (154)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 13):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (high_0 <= i) /\ (i < high_2).
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_1 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_0 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
}
Prove: x < Mint_0[shift_sint32(a, i)].
Prover Z3 4.8.6 returns Valid (Qed:28ms) (20ms) (88111)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:28ms) (13ms) (145)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 14):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= low_0).
  (* Invariant *)
  Have: 0 <= high_2.
  (* Invariant *)
  Have: low_1 < high_1.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_1 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_1) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((high_0 <= i_1) -> ((i_1 < high_2) ->
      (x < Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= low_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < low_0) ->
      (Mint_0[shift_sint32(a, i_1)] < x))).
}
Prove: Mint_0[shift_sint32(a, i)] < x.
Prover Z3 4.8.6 returns Valid (Qed:21ms) (20ms) (88149)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (13ms) (148)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0003/binary_search_merged.c, line 15):
Let x_1 = high_0 + low_0.
Let x_2 = x_1 / 2.
Let x_3 = Mint_0[shift_sint32(a, x_2)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Residual *)
  When: x_3 < x.
  (* Invariant *)
  Have: 0 <= high_1.
  (* Invariant *)
  Have: low_0 < high_0.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: forall i : Z. ((high_0 <= i) -> ((i < high_1) ->
      (x < Mint_0[shift_sint32(a, i)]))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < low_0) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
  (* Invariant *)
  Have: x_2 < high_0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_2) ->
      (Mint_0[shift_sint32(a, i)] < x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < x_2) ->
      (Mint_0[shift_sint32(a, i)] < x))).
}
Prove: (-3) <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:19ms) (20ms) (82913)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (10ms) (29)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0003/binary_search_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Loop assigns (file out/binary_search_0003/binary_search_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/binary_search_0003/binary_search_merged.c:1: Warning: 
  No 'assigns' specification for function 'binarysearch'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/binary_search_0003/binary_search_merged.c:33: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
