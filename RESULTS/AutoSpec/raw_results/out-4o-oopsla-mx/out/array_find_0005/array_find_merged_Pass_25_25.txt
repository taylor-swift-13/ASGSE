[kernel] Parsing out/array_find_0005/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] Proved goals:   25 / 25
  Qed:              14
  Alt-Ergo 2.6.2:   10 (5ms-11ms-14ms)
  Z3 4.8.6:          1 (50ms)
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 7) in 'array_find':
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 8) in 'array_find':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(arr_0, -1)]).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: n <= i_1.
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      (Mint_0[shift_sint32(arr_0, i_2)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (84262)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (8ms) (71)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 9) in 'array_find':
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(arr_0, array_find_0)]).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(arr_0, i_1)] = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: 0 <= i.
  If i < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(arr_0, array_find_0)] = x.
    Have: i = array_find_0.
  }
  Else { Have: array_find_0 = (-1). }
}
Prove: (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
        (Mint_0[shift_sint32(arr_0, i_3)] != x)))) <-> (array_find_0 = (-1)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (13ms) (181)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 10) in 'array_find':
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(i) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(arr_0, array_find_0)]).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(arr_0, i_1)] = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: 0 <= i.
  If i < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(arr_0, array_find_0)] = x.
    Have: i = array_find_0.
  }
  Else { Have: array_find_0 = (-1). }
}
Prove: (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
        (Mint_0[shift_sint32(arr_0, i_3)] != x)))) <-> (array_find_0 = (-1)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (14ms) (181)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 11) in 'array_find':
Let x = Mint_0[shift_sint32(arr_0, array_find_0)].
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (array_find_0 != (-1)) /\ (0 <= i) /\ (i < array_find_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(arr_0, i_1)] = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < array_find_0) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = array_find_0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: 0 <= array_find_0.
  Have: array_find_0 < n.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (12ms) (57)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 12) in 'array_find':
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 13) in 'array_find':
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 14) in 'array_find':
Let x = Mint_0[shift_sint32(arr_0, array_find_0)].
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: array_find_0 < n.
  (* Goal *)
  When: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < n) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i) -> ((i < n) -> (Mint_0[shift_sint32(arr_0, i)] = x))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < array_find_0) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(arr_0, i_1)] = x))).
  (* Invariant *)
  Have: 0 <= array_find_0.
}
Prove: array_find_0 = (-1).
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (84340)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (11ms) (53)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0005/array_find_merged.c, line 15) in 'array_find':
Let x = Mint_0[shift_sint32(arr_0, i)].
Let x_1 = Mint_0[shift_sint32(arr_0, -1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: n <= i_1.
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      (Mint_0[shift_sint32(arr_0, i_2)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: x = x_1.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (84497)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (12ms) (75)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0005/array_find_merged.c, line 22):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      (Mint_0[shift_sint32(arr_0, i_2)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (30ms) (214166)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (9ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0005/array_find_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0005/array_find_merged.c, line 23):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      (Mint_0[shift_sint32(arr_0, i_2)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (85778)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (12ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0005/array_find_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0005/array_find_merged.c, line 24):
Let x_1 = Mint_0[shift_sint32(arr_0, i)].
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(arr_0, i_1)] = x))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
}
Prove: exists i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
    ((x_2 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (100ms) (773370)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (12ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0005/array_find_merged.c, line 24):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
}
Prove: exists i : Z. ((0 <= i) -> ((i < n) ->
    (Mint_0[shift_sint32(arr_0, i)] = x))).
Prover Z3 4.8.6 returns Valid (Qed:0.96ms) (50ms) (479048)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0005/array_find_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0005/array_find_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0005/array_find_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (1/4):
Effect at line 28
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (2/4):
Effect at line 28
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (3/4):
Effect at line 30
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (4/4):
Effect at line 33
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file out/array_find_0005/array_find_merged.c, line 40):
Let x = arr_0[index_0].
Assume {
  Type: is_sint32(index_0) /\ is_sint32(x).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'array_find' *)
  Have: ((forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] != 3)))) <->
         (index_0 = (-1))) /\
      (((0 <= index_0) -> ((index_0 <= 4) -> (x = 3)))) /\
      (((index_0 != (-1)) -> ((x = 3) /\ (0 <= index_0) /\ (index_0 <= 4)))) /\
      (((forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] != 3)))) ->
       (index_0 = (-1)))) /\
      (((index_0 != (-1)) ->
       (forall i : Z. ((0 <= i) -> ((i < index_0) -> (arr_0[i] != 3)))))) /\
      (((index_0 = (-1)) ->
       (forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] != 3)))))) /\
      (((exists i : Z. (arr_0[i] = 3) /\ (0 <= i) /\ (i <= 4)) ->
       ((x = 3) /\ (index_0 <= 4)))) /\
      ((index_0 = (-1)) \/ ((x = 3) /\ (0 <= index_0) /\ (index_0 <= 4))).
}
Prove: index_0 = 2.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (36601)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (5ms) (60)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0005/array_find_merged.c, line 5) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0005/array_find_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0005/array_find_merged.c, line 6) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0005/array_find_merged.c, line 39)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0005/array_find_merged.c:37: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
