[kernel] Parsing out/12_0006/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0006/12_merged.c:32: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0006/12_merged.c:58: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0006/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0006/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 45 goals scheduled
[wp] Proved goals:   45 / 45
  Qed:              37
  Alt-Ergo 2.6.2:    6 (4ms-17ms)
  Z3 4.8.6:          2 (20ms-60ms)
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 12):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = 2 * x_3.
Let x_5 = (x_1 * (1 + t - t_1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else x_3)) = t_1.
  (* Invariant *)
  Have: t_1 <= x_4.
  (* Invariant *)
  Have: x_3 <= t_1.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 <= t_1)).
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (x_5 + (if (flag_0 = 0) then 0 else x_5)) = t_2.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (60ms) (780362)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 14):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = t_1 - 1 - t.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = 2 * x_3.
Let x_5 = (x_1 * (1 + t_1 - t)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(t_1 + x_3 - t) /\
      is_sint32(x_5 + (if (flag_0 = 0) then 0 else x_5)).
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else x_3)) = t.
  (* Invariant *)
  Have: t <= x_4.
  (* Invariant *)
  Have: x_3 <= t.
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_4 <= t)).
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Let x_6 = t + (2 * x_5).
    Have: (x_6 = (2 * t_1)) /\ (x_6 = (t_2 + t_1)).
  }
  Else { Have: x_5 = t_1. }
}
Prove: ((2 * t) + x_5 + (if (flag_0 = 0) then 0 else x_5))
         <= ((2 * t_1) + x_4).
Prover Z3 4.8.6 returns Valid (Qed:13ms) (10ms) (42288)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (12ms) (112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 16):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = (x_1 * (1 + t_1 - t)) / 2.
Let x_3 = 2 * x_2.
Let x_4 = t + x_3.
Let x_5 = 2 * t_1.
Let x_6 = t_1 - 1 - t.
Let x_7 = (x_1 * x_6) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_3) /\
      is_sint32(t_1 + x_7 - t) /\ is_sint32(t + x_3 - t_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x_7) = t.
  (* Invariant *)
  Have: x_7 <= t.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_4 <= x_5.
}
Prove: (t + x_2) = (t_1 + x_7).
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (39229)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (9ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 19):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * (1 + t - t_1).
Let x_3 = x_2 / 2.
Let x_4 = 2 * x_3.
Let x_5 = t_1 + x_4.
Let x_6 = 2 * t.
Let x_7 = t - 1 - t_1.
Let x_8 = (x_1 * x_7) / 2.
Let x_9 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_7) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(t_1 + x_3 - t) /\ is_sint32(t_1 + x_4 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x_8) = t_1.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: (t_1 + x_3) = (t + x_8).
  (* Invariant *)
  Have: x_3 <= t.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (-1) <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (37719)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (17ms) (1591)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 49):
Let x_1 = y % 2.
Let x_2 = a * (1 + a).
Let x_3 = x_2 / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + y) /\ is_sint32(x_3) /\
      is_sint32(x_3 + (if (flag_0 = 0) then 0 else x_3)).
  (* Residual *)
  When: tmp_0_0 != 0.
  (* Invariant *)
  Have: (flag_0 != 0) \/ ((-1) <= x_2).
  (* Invariant *)
  Have: (flag_0 = 0) \/ ((-1) <= x_2).
  (* Invariant *)
  Have: 0 <= a.
  If flag_0 != 0
  Then { Have: x = 2. }
  Else { Have: x = 1. }
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: y <= (2 + x).
  (* Invariant *)
  Have: y <= 4.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: y <= x.
}
Prove: y <= (1 + x).
Prover Z3 4.8.6 returns Valid (Qed:25ms) (10ms) (35365)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:25ms) (4ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 50):
Let x = y % 2.
Let x_1 = a * (1 + a).
Assume {
  Type: is_sint32(a) /\ is_sint32(y) /\ is_sint32(2 + y) /\
      is_sint32(x_1 / 2).
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: y <= 3.
  (* Invariant *)
  Have: y <= 4.
  (* Invariant *)
  Have: (x = 0) \/ (x = 1).
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: y <= 1.
}
Prove: y <= 2.
Prover Z3 4.8.6 returns Valid (Qed:20ms) (10ms) (33362)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (8ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 51):
Let x_1 = 2 + x.
Let x_2 = y_3 % 2.
Let x_3 = a * (1 + a).
Let x_4 = x_3 / 2.
Let x_5 = y % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(x_4) /\
      is_sint32(x_4 + (if (flag_0 = 0) then 0 else x_4)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ ((-1) <= x_3).
  (* Invariant *)
  Have: (flag_0 = 0) \/ ((-1) <= x_3).
  (* Invariant *)
  Have: 0 <= a.
  If flag_0 != 0
  Then { Have: x = 2. }
  Else { Have: x = 1. }
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: y_3 <= x_1.
  (* Invariant *)
  Have: y_3 <= 4.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Then *)
  Have: y_3 <= x.
  If tmp_0_0 != 0
  Then { Have: y_3 = y_1. Have: (1 + y_1) = y. }
  Else { Have: y_3 = y_2. Have: (2 + y_2) = y. }
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: y <= 4.
}
Prove: (x_5 = 0) \/ (x_5 = 1).
Prover Z3 4.8.6 returns Valid (Qed:32ms) (20ms) (38898)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 52):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 53):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0006/12_merged.c, line 54):
Let x_1 = y % 2.
Let x_2 = 2 + x.
Let x_3 = y_3 % 2.
Let x_4 = a * (1 + a).
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(x_5) /\
      is_sint32(x_5 + (if (flag_0 = 0) then 0 else x_5)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ ((-1) <= x_4).
  (* Invariant *)
  Have: (flag_0 = 0) \/ ((-1) <= x_4).
  (* Invariant *)
  Have: 0 <= a.
  If flag_0 != 0
  Then { Have: x = 2. }
  Else { Have: x = 1. }
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x <= 2.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: y_3 <= x_2.
  (* Invariant *)
  Have: y_3 <= 4.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Then *)
  Have: y_3 <= x.
  If tmp_0_0 != 0
  Then { Have: y_3 = y_1. Have: (1 + y_1) = y. }
  Else { Have: y_3 = y_2. Have: (2 + y_2) = y. }
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: y <= 4.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
}
Prove: 0 <= y.
Prover Z3 4.8.6 returns Valid (Qed:26ms) (10ms) (38148)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:26ms) (12ms) (193)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0006/12_merged.c, line 54):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion (file out/12_0006/12_merged.c, line 63):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0006/12_merged.c, line 26) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0006/12_merged.c, line 26) (2/2):
Call Result at line 32
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0006/12_merged.c, line 55) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0006/12_merged.c, line 55) (2/2):
Call Result at line 58
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0006/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0006/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0006/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
