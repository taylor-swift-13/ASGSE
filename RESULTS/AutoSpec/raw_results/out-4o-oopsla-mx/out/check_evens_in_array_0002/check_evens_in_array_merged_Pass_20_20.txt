[kernel] Parsing out/check_evens_in_array_0002/check_evens_in_array_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] Proved goals:   20 / 20
  Qed:              10
  Alt-Ergo 2.6.2:   10 (11ms-20ms)
------------------------------------------------------------
  Function areElementsEven
------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 7) in 'areElementsEven':
Assume {
  Type: is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      ((Mint_0[shift_sint32(a, i_1)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  Have: n <= p.
}
Prove: (Mint_0[shift_sint32(a, i)] % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (20ms) (77138)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (13ms) (75)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 8) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        ((Mint_0[shift_sint32(a, i)] % 2) = 0)))) <->
    (areElementsEven_0 = 1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (18ms) (173)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 9) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        ((Mint_0[shift_sint32(a, i)] % 2) = 0)))) <->
    (areElementsEven_0 = 1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (13ms) (173)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 10) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        ((Mint_0[shift_sint32(a, i)] % 2) = 0)))) <->
    (areElementsEven_0 = 1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (11ms) (173)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 11) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        ((Mint_0[shift_sint32(a, i)] % 2) = 0)))) <->
    (areElementsEven_0 = 1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (18ms) (173)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 12) in 'areElementsEven':
Let x = Mint_0[shift_sint32(a, p)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  Have: p < n.
  (* Then *)
  Have: (x % 2) != 0.
}
Prove: exists i : Z. ((Mint_0[shift_sint32(a, i)] % 2) != 0) /\ (0 <= i) /\
    (i < n).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (77806)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (13ms) (69)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 13) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (exists i : Z. ((Mint_0[shift_sint32(a, i)] % 2) != 0) /\ (0 <= i) /\
        (i < n)) <-> (areElementsEven_0 = 0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (18ms) (172)

------------------------------------------------------------

Goal Post-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 14) in 'areElementsEven':
Assume {
  Type: is_sint32(areElementsEven_0) /\ is_sint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      ((Mint_0[shift_sint32(a, i)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: (Mint_0[shift_sint32(a, p)] % 2) != 0.
    Have: areElementsEven_0 = 0.
  }
  Else { Have: areElementsEven_0 = 1. }
}
Prove: (exists i : Z. ((Mint_0[shift_sint32(a, i)] % 2) != 0) /\ (0 <= i) /\
        (i < n)) <-> (areElementsEven_0 = 0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (20ms) (172)

------------------------------------------------------------

Goal Preservation of Invariant (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 21):
Let x = Mint_0[shift_sint32(a, p)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      ((Mint_0[shift_sint32(a, i_1)] % 2) = 0))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: (x % 2) = 0.
}
Prove: (Mint_0[shift_sint32(a, i)] % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (20ms) (126951)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (16ms) (120)

------------------------------------------------------------

Goal Establishment of Invariant (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Loop assigns (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'areElementsEven' (1/3):
Effect at line 25
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Assigns nothing in 'areElementsEven' (2/3):
Effect at line 27
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'areElementsEven' (3/3):
Effect at line 31
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 37):
Assume {
  Type: is_sint32(res_0).
  (* Initializer *)
  Init: arr_0[0] = 2.
  (* Initializer *)
  Init: arr_0[1] = 4.
  (* Initializer *)
  Init: arr_0[2] = 6.
  (* Initializer *)
  Init: arr_0[3] = 8.
  (* Initializer *)
  Init: arr_0[4] = 10.
  (* Call 'areElementsEven' *)
  Have: ((forall i : Z. ((0 <= i) -> ((i <= 4) -> ((arr_0[i] % 2) = 0)))) <->
         (res_0 = 1)) /\
      ((exists i : Z. ((arr_0[i] % 2) != 0) /\ (0 <= i) /\ (i <= 4)) <->
       (res_0 = 0)) /\
      (((res_0 = 1) ->
       (forall i : Z. ((0 <= i) -> ((i <= 4) -> ((arr_0[i] % 2) = 0)))))) /\
      (((res_0 = 0) ->
       (exists i : Z. ((arr_0[i] % 2) != 0) /\ (0 <= i) /\ (i <= 4)))).
}
Prove: res_0 = 1.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (30ms) (204166)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (20ms) (331)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 4) in 'areElementsEven'' in 'main' at initialization of 'res' (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 36)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 5) in 'areElementsEven'' in 'main' at initialization of 'res' (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 36)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 6) in 'areElementsEven'' in 'main' at initialization of 'res' (file out/check_evens_in_array_0002/check_evens_in_array_merged.c, line 36)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/check_evens_in_array_0002/check_evens_in_array_merged.c:34: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
