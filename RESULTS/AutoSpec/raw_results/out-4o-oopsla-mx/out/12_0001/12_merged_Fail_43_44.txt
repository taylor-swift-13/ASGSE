[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0001/12_merged.c:38: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0001/12_merged.c:55: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/12_0001/12_merged.c:54: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 44 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_preserved (Qed 15ms) (Z3)
[wp] Proved goals:   43 / 44
  Qed:              37
  Alt-Ergo 2.6.2:    6 (5ms-11ms-19ms)
  Timeout:           1
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 12):
Let x = -t_1.
Let x_1 = t - 1 - t_1.
Let x_2 = (1 + flag_0) * x_1.
Let x_3 = t - t_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Invariant *)
  Have: ((x_1 * (if (flag_0 = 0) then 1 else x_3)) = 0) /\ ((x_2 / 2) = t_1).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (t_1 = 0).
  (* Invariant *)
  Have: ((flag_0 * x_1) + ((2 - flag_0) * x_1)) = t_1.
  (* Invariant *)
  Have: (x_2 + (((t - 2 - t_1) * x_1) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_3 * x_1) / 2) = t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t <= (1 + (2 * t_1)).
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (t + (x_3 * (if (flag_0 = 0) then 1 else (1 + t - t_1)))) = t_2.
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 13):
Let x = t - 1.
Let x_1 = x * (1 + flag_0).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(2 * t) /\ is_sint32(x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((t * x) = 0) /\ ((x_1 / 2) = 0).
  (* Invariant *)
  Have: ((flag_0 * x) + (x * (2 - flag_0))) = 0.
  (* Invariant *)
  Have: (x_1 + (((t - 2) * x) / 2)) = 0.
  (* Invariant *)
  Have: t <= 1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t * (1 + t)) = t.
}
Prove: (t / 2) = t.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (10ms) (34621)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (11ms) (125)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = t - 1.
Let x_1 = x * (1 + flag_0).
Let x_2 = 2 - flag_0.
Let x_3 = 2 * t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_3) /\ is_sint32(x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((t * x) = 0) /\ ((x_1 / 2) = 0).
  (* Invariant *)
  Have: ((flag_0 * x) + (x * x_2)) = 0.
  (* Invariant *)
  Have: (x_1 + (((t - 2) * x) / 2)) = 0.
  (* Invariant *)
  Have: t <= 1.
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (t * (1 + t)) = t.
  (* Invariant *)
  Have: (t / 2) = t.
}
Prove: ((flag_0 * t) + (t * x_2)) = x_3.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (10ms) (10223)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (5ms) (165)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = t * (1 + t).
Let x_1 = flag_0 * t.
Let x_2 = 2 - flag_0.
Let x_3 = t * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = 2 * t.
Let x_6 = t + x.
Let x_7 = t - 1.
Let x_8 = 1 + flag_0.
Let x_9 = x_7 * x_8.
Let x_10 = t * x_7.
Let x_11 = -t.
Let x_12 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_7) /\ is_sint32(x_4) /\ is_sint32(x_1 + x_3 - t) /\
      is_sint32(x_1 + x_3 - x) /\ is_sint32(x_1 + x_3 - t - x).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_1 + x_10 + x_3) = x_6.
  (* Invariant *)
  Have: ((flag_0 * x_7) + (x_7 * x_2)) = 0.
  (* Invariant *)
  Have: (x_9 + (((t - 2) * x_7) / 2)) = 0.
  (* Invariant *)
  Have: (x_10 / 2) = 0.
  (* Invariant *)
  Have: x_4 = x_6.
  (* Invariant *)
  Have: (t + x + (x_9 / 2)) = x_4.
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: t <= 1.
  (* Invariant *)
  Have: (x_5 + x) <= (1 + x_1 + x_3).
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = x_5.
  (* Invariant *)
  Have: x_4 = (2 * x).
  (* Invariant *)
  Have: (x / 2) = x.
}
Prove: (t * x_8) = x_4.
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (35879)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (11ms) (259)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = 1 + flag_0.
Let x_1 = t * x.
Let x_2 = 2 - flag_0.
Let x_3 = t * (1 + t).
Let x_4 = 2 * t.
Let x_5 = t + x_3.
Let x_6 = t - 1.
Let x_7 = x_6 * x.
Let x_8 = t * x_6.
Let x_9 = -t.
Let x_10 = -x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_6) /\ is_sint32(x_1) /\ is_sint32(x_1 - t) /\
      is_sint32(x_1 - x_3) /\ is_sint32(x_1 - t - x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_8 + x_1) = x_5.
  (* Invariant *)
  Have: ((flag_0 * x_6) + (x_6 * x_2)) = 0.
  (* Invariant *)
  Have: (x_7 + (((t - 2) * x_6) / 2)) = 0.
  (* Invariant *)
  Have: (x_8 / 2) = 0.
  (* Invariant *)
  Have: x_1 = x_5.
  (* Invariant *)
  Have: x_1 = (t + x_3 + (x_7 / 2)).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: t <= 1.
  (* Invariant *)
  Have: (x_4 + x_3) <= (1 + x_1).
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_1 = (2 * x_3).
  (* Invariant *)
  Have: (x_3 / 2) = x_3.
  (* Invariant *)
  Have: x_1 = ((flag_0 * t) + (t * x_2)).
}
Prove: x_3 = x_1.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (20ms) (37127)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (19ms) (397)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 29):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = 2 * x_3.
Let x_5 = a * x.
Let x_6 = x_5 / 2.
Let x_7 = 1 + a + x_6.
Let x_8 = 2 * a.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2) /\ is_sint32(x_3 - 1 - a).
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_6 = x_8.
  (* Invariant *)
  Have: x_6 = (a + ((a * (a - 1)) / 2)).
  (* Invariant *)
  Have: (2 + x_8 + x_6) <= x_4.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_3 = (1 + a + (a / 2)).
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: x_8 < x_3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: a < x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 = (1 + a + x_3).
  (* Invariant *)
  Have: x_2 = (2 + x_8).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a < x_2.
}
Prove: (-1) <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:16ms) (10ms) (37197)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (11ms) (79)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 30):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = 2 * x_3.
Let x_5 = a * x.
Let x_6 = x_5 / 2.
Let x_7 = 1 + a + x_6.
Let x_8 = 2 * a.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2) /\ is_sint32(x_3 - 1 - a).
  (* Invariant *)
  Have: x_3 = (1 + x_6).
  (* Invariant *)
  Have: x_6 = x_8.
  (* Invariant *)
  Have: x_6 = (a + ((a * (a - 1)) / 2)).
  (* Invariant *)
  Have: (2 + x_8 + x_6) <= x_4.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_3 = (1 + a + (a / 2)).
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: x_8 < x_3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: a < x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 = (1 + a + x_3).
  (* Invariant *)
  Have: x_2 = (2 + x_8).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: (-2) <= a.
Prover Z3 4.8.6 returns Valid (Qed:16ms) (10ms) (37189)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (8ms) (79)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
