[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0001/12_merged.c:34: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0001/12_merged.c:51: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/12_0001/12_merged.c:50: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 36 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_7_preserved (Qed 14ms) (Z3)
[wp] Proved goals:   35 / 36
  Qed:              29
  Alt-Ergo 2.6.2:    4 (8ms-16ms)
  Z3 4.8.6:          2 (20ms-90ms)
  Timeout:           1
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 12):
Let x = -t_1.
Let x_1 = t - 1 - t_1.
Let x_2 = (1 + flag_0) * x_1.
Let x_3 = x_2 / 2.
Let x_4 = t - t_1.
Let x_5 = (x_4 * x_1) / 2.
Let x_6 = (x_4 * (1 + t - t_1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_4) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (x_5 + (if (flag_0 = 0) then 0 else x_5)) = t_1.
  (* Invariant *)
  Have: (x_5 + (if (flag_0 = 0) then 0 else x_3)) = t_1.
  (* Invariant *)
  Have: t_1 <= (2 * x_3).
  (* Invariant *)
  Have: x_5 = x_3.
  (* Invariant *)
  Have: x_3 <= t_1.
  (* Invariant *)
  Have: t <= (1 + (2 * t_1)).
  (* Invariant *)
  Have: t <= (1 + t_1 + x_3).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (x_6 + (if (flag_0 = 0) then 0 else x_6)) = t_2.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (90ms) (1554304)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 13):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = (x_1 * (1 + t_1 - t)) / 2.
Let x_3 = 2 * x_2.
Let x_4 = t_1 - 1 - t.
Let x_5 = (1 + flag_0) * x_4.
Let x_6 = x_5 / 2.
Let x_7 = (x_1 * x_4) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(t_1 + x_6 - t) /\ is_sint32(t + x_3 - t_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x_7) = t.
  (* Invariant *)
  Have: (x_6 + x_7) = t.
  (* Invariant *)
  Have: t <= (2 * x_6).
  (* Invariant *)
  Have: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= t.
  (* Invariant *)
  Have: t_1 <= (1 + (2 * t)).
  (* Invariant *)
  Have: t_1 <= (1 + t + x_6).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t + x_3) = (2 * t_1).
}
Prove: (t + x_2) = (t_1 + x_6).
Prover Z3 4.8.6 returns Valid (Qed:14ms) (10ms) (48198)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (8ms) (319)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = (x_1 * (1 + t_1 - t)) / 2.
Let x_3 = t_1 - 1 - t.
Let x_4 = (1 + flag_0) * x_3.
Let x_5 = x_4 / 2.
Let x_6 = 2 * t.
Let x_7 = (x_1 * x_3) / 2.
Let x_8 = 2 * x_5.
Let x_9 = t_1 + x_5 - t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_5) /\ is_sint32(x_9) /\
      is_sint32(x_2 + (if (flag_0 = 0) then 0 else x_9)).
  (* Invariant *)
  Have: (x_7 + (if (flag_0 = 0) then 0 else x_7)) = t.
  (* Invariant *)
  Have: (x_7 + (if (flag_0 = 0) then 0 else x_5)) = t.
  (* Invariant *)
  Have: t <= x_8.
  (* Invariant *)
  Have: x_7 = x_5.
  (* Invariant *)
  Have: x_5 <= t.
  (* Invariant *)
  Have: t_1 <= (1 + x_6).
  (* Invariant *)
  Have: t_1 <= (1 + t + x_5).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (x_5 + x_2) = t_1. }
  Else { Have: x_2 = t_1. }
  (* Invariant *)
  Have: (flag_0 = 0) \/ ((t + x_2) = (t_1 + x_5)).
}
Prove: (x_6 + x_2 + (if (flag_0 = 0) then 0 else x_9)) <= ((2 * t_1) + x_8).
Prover Z3 4.8.6 returns Valid (Qed:14ms) (10ms) (47197)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (13ms) (798)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * (1 + t - t_1).
Let x_3 = x_2 / 2.
Let x_4 = t_1 + x_3.
Let x_5 = 2 * t.
Let x_6 = 2 * t_1.
Let x_7 = 1 + flag_0.
Let x_8 = t - 1 - t_1.
Let x_9 = (x_1 * x_8) / 2.
Let x_10 = t_1 + x_3 - t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_8) /\
      is_sint32(x_3) /\ is_sint32(x_10) /\
      is_sint32(x_3 + (if (flag_0 = 0) then 0 else x_3)).
  (* Invariant *)
  Have: (x_9 + (if (flag_0 = 0) then 0 else x_9)) = t_1.
  (* Invariant *)
  Have: (x_9 + (if (flag_0 = 0) then 0 else x_10)) = t_1.
  (* Invariant *)
  Have: x_5 <= (t_1 + (2 * x_3)).
  (* Invariant *)
  Have: x_4 = (t + x_9).
  (* Invariant *)
  Have: x_4 = (t + ((x_7 * x_8) / 2)).
  (* Invariant *)
  Have: x_3 <= t.
  (* Invariant *)
  Have: t <= (1 + x_6).
  (* Invariant *)
  Have: x_5 <= (1 + x_6 + x_3).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t <= x_4.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Let x_11 = t_1 + (2 * x_3).
    Have: (x_11 = x_5) /\ (x_11 = (t_2 + t)).
  }
  Else { Have: x_3 = t. }
  (* Invariant *)
  Have: (flag_0 != 0) \/ ((-1) <= x_2).
}
Prove: x_3 = ((x_7 * x_1) / 2).
Prover Z3 4.8.6 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * (1 + t - t_1).
Let x_3 = x_2 / 2.
Let x_4 = 1 + flag_0.
Let x_5 = (x_4 * x_1) / 2.
Let x_6 = 2 * t.
Let x_7 = t_1 + x_5.
Let x_8 = 2 * t_1.
Let x_9 = t - 1 - t_1.
Let x_10 = (x_1 * x_9) / 2.
Let x_11 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_9) /\ is_sint32(x_5) /\
      is_sint32(t_1 + x_5 - t) /\ is_sint32(x_5 + x_3) /\
      is_sint32(t_1 + x_5 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x_10) = t_1.
  (* Invariant *)
  Have: (x_5 + x_10) = t.
  (* Invariant *)
  Have: x_6 <= (t_1 + (2 * x_5)).
  (* Invariant *)
  Have: (t + x_10) = x_7.
  (* Invariant *)
  Have: (t + ((x_4 * x_9) / 2)) = x_7.
  (* Invariant *)
  Have: x_5 <= t.
  (* Invariant *)
  Have: t <= (1 + x_8).
  (* Invariant *)
  Have: x_6 <= (1 + x_8 + x_5).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t <= x_7.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_5 + x_3) = x_6.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 = x_5.
}
Prove: (-1) <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (20ms) (40837)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * (1 + t - t_1).
Let x_3 = x_2 / 2.
Let x_4 = 1 + flag_0.
Let x_5 = (x_4 * x_1) / 2.
Let x_6 = t_1 + x_5 + x_3.
Let x_7 = 2 * t.
Let x_8 = t_1 + x_5.
Let x_9 = 2 * t_1.
Let x_10 = t - 1 - t_1.
Let x_11 = (x_1 * x_10) / 2.
Let x_12 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_10) /\ is_sint32(x_5) /\
      is_sint32(t_1 + x_5 - t) /\ is_sint32(x_5 + x_3) /\
      is_sint32(t_1 + x_5 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (2 * x_11) = t_1.
  (* Invariant *)
  Have: (x_5 + x_11) = t.
  (* Invariant *)
  Have: x_7 <= (t_1 + (2 * x_5)).
  (* Invariant *)
  Have: (t + x_11) = x_8.
  (* Invariant *)
  Have: (t + ((x_4 * x_10) / 2)) = x_8.
  (* Invariant *)
  Have: x_5 <= t.
  (* Invariant *)
  Have: t <= (1 + x_9).
  (* Invariant *)
  Have: x_7 <= (1 + x_9 + x_5).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t <= x_8.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_6 = x_7.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 = x_5.
  (* Invariant *)
  Have: (-1) <= x_2.
}
Prove: t <= x_6.
Prover Z3 4.8.6 returns Valid (Qed:16ms) (38229)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (12ms) (547)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 26):
Let x = 1 + a.
Let x_1 = (x * (2 + a)) / 2.
Let x_2 = 1 + flag_0.
Let x_3 = x * x_2.
Let x_4 = x_3 / 2.
Let x_5 = x_1 + (if (flag_0 = 0) then 0 else x_4).
Let x_6 = 2 * x_4.
Let x_7 = (a * x) / 2.
Let x_8 = 1 + a + x_7.
Let x_9 = x_4 - 1 - a.
Let x_10 = x_7 + (if (flag_0 = 0) then 0 else x_9).
Let x_11 = 2 * a.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(t) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_9) /\
      is_sint32(x_5) /\ is_sint32(x_10).
  (* Invariant *)
  Have: (2 + x_11 + x_7 + (if (flag_0 = 0) then 0 else x_9)) <= x_6.
  (* Invariant *)
  Have: x_4 = x_8.
  (* Invariant *)
  Have: x_4 = (1 + a + ((a * x_2) / 2)).
  (* Invariant *)
  Have: x_4 <= (1 + a + x_7 + (if (flag_0 = 0) then 0 else x_9)).
  (* Invariant *)
  Have: a <= x_10.
  (* Invariant *)
  Have: x_11 < x_4.
  (* Invariant *)
  Have: 0 <= x_10.
  (* Invariant *)
  Have: a < x_4.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  Core: x_1 = x_8.
  If flag_0 != 0
  Then { Have: (x_4 + x_1) = (1 + a + t). }
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: x_1 = x_4.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: a < x_5.
  (* Invariant *)
  Have: 0 <= x_5.
}
Prove: (-1) <= x_3.
Prover Z3 4.8.6 returns Valid (Qed:22ms) (10ms) (39975)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (16ms) (467)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 29) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 29) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
