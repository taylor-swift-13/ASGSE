[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0001/12_merged.c:37: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0001/12_merged.c:54: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0001/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/12_0001/12_merged.c:53: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 42 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_4_preserved (Qed 15ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_3_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_5_preserved (Qed 21ms) (Z3)
[wp] Proved goals:   39 / 42
  Qed:              36
  Alt-Ergo 2.6.2:    2 (7ms-9ms)
  Z3 4.8.6:          1 (70ms)
  Timeout:           3
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 12):
Let x = -t_1.
Let x_1 = t - 1 - t_1.
Let x_2 = (1 + flag_0) * x_1.
Let x_3 = t - t_1.
Let x_4 = (x_3 * (1 + t - t_1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_3) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (t_1 = 0).
  (* Invariant *)
  Have: ((flag_0 * x_1) + ((2 - flag_0) * x_1)) = t_1.
  (* Invariant *)
  Have: (x_2 + (((t - 2 - t_1) * x_1) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_3 * x_1) / 2) = t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (x_2 / 2) = t_1.
  (* Invariant *)
  Have: t <= (1 + (2 * t_1)).
  (* Invariant *)
  Have: (-1) <= x_2.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: (x_4 + (if (flag_0 = 0) then 0 else x_4)) = t_2.
Prover Z3 4.8.6 returns Valid (Qed:14ms) (70ms) (532230)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.61ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = (x_1 * (1 + t - t_1)) / 2.
Let x_3 = t - 1 - t_1.
Let x_4 = (1 + flag_0) * x_3.
Let x_5 = 2 - flag_0.
Let x_6 = (if (flag_0 = 0) then 0 else t) + x_2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_6).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (t_1 = 0).
  (* Invariant *)
  Have: ((flag_0 * x_3) + (x_5 * x_3)) = t_1.
  (* Invariant *)
  Have: (x_4 + (((t - 2 - t_1) * x_3) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_1 * x_3) / 2) = t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (x_4 / 2) = t_1.
  (* Invariant *)
  Have: t <= (1 + (2 * t_1)).
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_1 + x_2) = t. }
  Else { Have: x_2 = t. }
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_2 = t).
}
Prove: x_6 = ((flag_0 * x_1) + (x_5 * x_1)).
Prover Z3 4.8.6 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = (t * (1 + t)) / 2.
Let x_1 = flag_0 * t.
Let x_2 = 2 - flag_0.
Let x_3 = t * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = t - 1.
Let x_6 = 1 + flag_0.
Let x_7 = x_5 * x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_5) /\ is_sint32(x_4) /\ is_sint32(x_1 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((flag_0 * x_5) + (x_5 * x_2)) = 0.
  (* Invariant *)
  Have: (x_7 + (((t - 2) * x_5) / 2)) = 0.
  (* Invariant *)
  Have: ((t * x_5) / 2) = 0.
  (* Invariant *)
  Have: (x_7 / 2) = 0.
  (* Invariant *)
  Have: t <= 1.
  (* Invariant *)
  Have: (-1) <= x_7.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_4 = (2 * t).
  (* Invariant *)
  Have: x_4 = (2 * x).
  (* Invariant *)
  Have: (t + x) = x_4.
}
Prove: (t * x_6) = x_4.
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = (s * (1 + s)) / 2.
Let x_1 = flag_0 * s.
Let x_2 = 2 - flag_0.
Let x_3 = s * x_2.
Let x_4 = x_1 + x_3.
Let x_5 = 1 + flag_0.
Let x_6 = -x_1.
Let x_7 = -x_3.
Let x_8 = s * x_5.
Let x_9 = t + x_8 - x_1 - x_3.
Let x_10 = x_5 * x_9.
Let x_11 = (x_9 * (t + x_8 - 1 - x_1 - x_3)) / 2.
Let x_12 = s - 1.
Let x_13 = x_12 * x_5.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(s) /\ is_sint32(t) /\
      is_sint32(tmp_0) /\ is_sint32(x_12) /\ is_sint32(x_4) /\
      is_sint32(x_1 + x_3 - x_8).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((flag_0 * x_12) + x_8 + (x_12 * x_2)) = x_4.
  (* Invariant *)
  Have: (x_8 + x_13 + (((s - 2) * x_12) / 2)) = x_4.
  (* Invariant *)
  Have: x_8 = x_4.
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: ((s * x_12) / 2) = 0.
  (* Invariant *)
  Have: (x_13 / 2) = 0.
  (* Invariant *)
  Have: (s + x_8) <= (1 + x_1 + x_3).
  (* Invariant *)
  Have: s <= 1.
  (* Invariant *)
  Have: x_8 <= x_4.
  (* Invariant *)
  Have: 0 < s.
  (* Then *)
  Have: tmp_0 != 0.
  Have: ((x_10 + x_11) = (s + t)) /\
      ((x_1 + x_3 + x_10 + x_11) = ((2 * t) + x_8)).
  (* Invariant *)
  Have: x_4 = (2 * x).
  (* Invariant *)
  Have: (s + x) = x_4.
}
Prove: x = x_4.
Prover Z3 4.8.6 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 28):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = 2 * x_3.
Let x_5 = a * x.
Let x_6 = x_5 / 2.
Let x_7 = 1 + a + x_6.
Let x_8 = 2 * a.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2) /\ is_sint32(x_3 - 1 - a).
  (* Invariant *)
  Have: x_6 = x_8.
  (* Invariant *)
  Have: x_6 = (a + ((a * (a - 1)) / 2)).
  (* Invariant *)
  Have: (2 + x_8 + x_6) <= x_4.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_3 = (1 + a + (a / 2)).
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: x_8 < x_3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: a < x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 = (2 + x_8).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a < x_2.
}
Prove: (-1) <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:16ms) (10ms) (36816)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (9ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 29):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x_1 / 2.
Let x_3 = x / 2.
Let x_4 = 2 * x_3.
Let x_5 = a * x.
Let x_6 = x_5 / 2.
Let x_7 = 1 + a + x_6.
Let x_8 = 2 * a.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2) /\ is_sint32(x_3 - 1 - a).
  (* Invariant *)
  Have: x_6 = x_8.
  (* Invariant *)
  Have: x_6 = (a + ((a * (a - 1)) / 2)).
  (* Invariant *)
  Have: (2 + x_8 + x_6) <= x_4.
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: x_3 = (1 + a + (a / 2)).
  (* Invariant *)
  Have: x_3 <= x_7.
  (* Invariant *)
  Have: a <= x_6.
  (* Invariant *)
  Have: x_8 < x_3.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: a < x_3.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 = (2 + x_8).
  (* Invariant *)
  Have: x_2 = x_7.
  (* Invariant *)
  Have: x_2 <= x_4.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: (-2) <= a.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (20ms) (36821)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (7ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 32) (2/2):
Call Result at line 37
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
