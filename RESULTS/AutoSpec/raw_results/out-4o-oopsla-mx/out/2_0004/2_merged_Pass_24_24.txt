[kernel] Parsing out/2_0004/2_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] Proved goals:   24 / 24
  Qed:              12
  Alt-Ergo 2.6.2:   12 (4ms-15ms)
------------------------------------------------------------
  Function arraymax
------------------------------------------------------------

Goal Post-condition (file out/2_0004/2_merged.c, line 6) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_2 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_1 = x_2.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_1) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < i_2).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i_2).
  (* Invariant *)
  Have: 0 < i_2.
  (* Else *)
  Have: n <= i_2.
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (20ms) (85855)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (7ms) (109)

------------------------------------------------------------

Goal Post-condition (file out/2_0004/2_merged.c, line 7) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_2 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_1 = x_2.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_1) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < i_2).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i_2).
  (* Invariant *)
  Have: 0 < i_2.
  (* Else *)
  Have: n <= i_2.
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (85855)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (8ms) (109)

------------------------------------------------------------

Goal Post-condition (file out/2_0004/2_merged.c, line 8) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_2 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_2) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_1 = x_2.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_1) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_2) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < i_2).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i_2).
  (* Invariant *)
  Have: 0 < i_2.
  (* Else *)
  Have: n <= i_2.
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (20ms) (85855)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (11ms) (109)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0004/2_merged.c, line 16):
Let x = Mint_0[shift_sint32(a, i_2)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_3 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_2) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < i_1).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (90ms) (901303)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (13ms) (188)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0004/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0004/2_merged.c, line 17):
Let x = Mint_0[shift_sint32(a, i_2)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_3 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_2) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < i_1).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= i_1) -> ((0 <= i_6) ->
      (Mint_0[shift_sint32(a, i_6)] <= max_0))).
}
Prove: Mint_0[shift_sint32(a, i)] <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (20ms) (88074)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (14ms) (112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0004/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0004/2_merged.c, line 18):
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let x_2 = Mint_0[shift_sint32(a, i_2)].
Let a_1 = shift_sint32(a, 0).
Let x_3 = Mint_0[a_1].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_3.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_3)] = x_2) /\ (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (Mint_0[shift_sint32(a, i_5)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x) /\ (0 <= i_4) /\ (i_4 < i).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (Mint_0[shift_sint32(a, i_5)] <= max_0))).
}
Prove: exists i_5 : Z. (Mint_0[shift_sint32(a, i_5)] = max_0) /\
    (i_5 <= i) /\ (0 <= i_5).
Prover Z3 4.8.6 returns Valid (Qed:17ms) (20ms) (88228)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (15ms) (142)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0004/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0004/2_merged.c, line 19):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[shift_sint32(a, i_2)].
Let x_2 = Mint_0[shift_sint32(a, i_1)].
Let x_3 = Mint_0[shift_sint32(a, i_3)].
Let a_1 = shift_sint32(a, 0).
Let x_4 = Mint_0[a_1].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_3 = x_4.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_3) /\ (i_4 <= 0) /\ (0 <= i_4).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) ->
      (Mint_0[shift_sint32(a, i_6)] <= x_1))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x_1) /\ (0 <= i_5) /\ (i_5 < i_1).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 < x_2
  Then { Have: x_2 = x. }
  Else { Have: x_1 = x. }
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= i_1) -> ((0 <= i_6) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= i_1).
}
Prove: exists i_6 : Z. (Mint_0[shift_sint32(a, i_6)] = x) /\ (i_6 <= i_1) /\
    (0 <= i_6).
Prover Z3 4.8.6 returns Valid (Qed:13ms) (10ms) (89059)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (14ms) (122)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0004/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0004/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0004/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/2_0004/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'arraymax':
Effect at line 24
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file out/2_0004/2_merged.c, line 35):
Assume {
  Type: is_sint32(max_0).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'arraymax' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] <= max_0))).
}
Prove: 0 < max_0.
Prover Z3 4.8.6 returns Valid (Qed:0.84ms) (10ms) (33581)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.84ms) (4ms) (33)

------------------------------------------------------------

Goal Assertion (file out/2_0004/2_merged.c, line 36):
Assume {
  Type: is_sint32(max_0).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'arraymax' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] <= max_0))).
  (* Assertion *)
  Have: 0 < max_0.
}
Prove: 2 <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:0.95ms) (10ms) (33675)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.95ms) (9ms) (38)

------------------------------------------------------------

Goal Assertion (file out/2_0004/2_merged.c, line 37):
Assume {
  Type: is_sint32(max_0).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'arraymax' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] <= max_0))).
  (* Assertion *)
  Have: 0 < max_0.
  (* Assertion *)
  Have: 2 <= max_0.
}
Prove: 3 <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (33785)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (9ms) (41)

------------------------------------------------------------

Goal Assertion (file out/2_0004/2_merged.c, line 38):
Assume {
  Type: is_sint32(max_0).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'arraymax' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] <= max_0))).
  (* Assertion *)
  Have: 0 < max_0.
  (* Assertion *)
  Have: 2 <= max_0.
  (* Assertion *)
  Have: 3 <= max_0.
}
Prove: 4 <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:0.99ms) (10ms) (33895)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.99ms) (6ms) (39)

------------------------------------------------------------

Goal Assertion (file out/2_0004/2_merged.c, line 39):
Assume {
  Type: is_sint32(max_0).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
  (* Call 'arraymax' *)
  Have: forall i : Z. ((0 <= i) -> ((i <= 4) -> (arr_0[i] <= max_0))).
  (* Assertion *)
  Have: 0 < max_0.
  (* Assertion *)
  Have: 2 <= max_0.
  (* Assertion *)
  Have: 3 <= max_0.
  (* Assertion *)
  Have: 4 <= max_0.
}
Prove: 5 <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (34005)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (9ms) (40)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/2_0004/2_merged.c, line 2) in 'arraymax'' in 'main' at initialization of 'max' (file out/2_0004/2_merged.c, line 34)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/2_0004/2_merged.c, line 3) in 'arraymax'' in 'main' at initialization of 'max' (file out/2_0004/2_merged.c, line 34)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/2_0004/2_merged.c, line 4) in 'arraymax'' in 'main' at initialization of 'max' (file out/2_0004/2_merged.c, line 34)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/2_0004/2_merged.c, line 5) in 'arraymax'' in 'main' at initialization of 'max' (file out/2_0004/2_merged.c, line 34)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0004/2_merged.c:32: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
