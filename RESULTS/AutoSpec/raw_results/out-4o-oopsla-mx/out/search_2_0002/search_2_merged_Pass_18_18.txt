[kernel] Parsing out/search_2_0002/search_2_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] Proved goals:   18 / 18
  Qed:              10
  Alt-Ergo 2.6.2:    8 (8ms-15ms)
------------------------------------------------------------
  Function arraySearch
------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 4) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (exists i : Z. (Mint_0[shift_sint32(a, i)] = x) /\ (0 <= i) /\
        (i < n)) <-> (arraySearch_0 = 1).
Prover Z3 4.8.6 returns Valid (Qed:8ms) (100ms) (1412589)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (15ms) (124)

------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 5) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (exists i : Z. (Mint_0[shift_sint32(a, i)] = x) /\ (0 <= i) /\
        (i < n)) <-> (arraySearch_0 = 1).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (90ms) (1412589)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (9ms) (124)

------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 6) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (exists i : Z. (Mint_0[shift_sint32(a, i)] = x) /\ (0 <= i) /\
        (i < n)) <-> (arraySearch_0 = 1).
Prover Z3 4.8.6 returns Valid (Qed:8ms) (90ms) (1412589)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (15ms) (124)

------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 7) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        (Mint_0[shift_sint32(a, i)] != x)))) <-> (arraySearch_0 = 0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (11ms) (126)

------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 8) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        (Mint_0[shift_sint32(a, i)] != x)))) <-> (arraySearch_0 = 0).
Prover Z3 4.8.6 returns Valid (Qed:9ms) (100ms) (1484271)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (14ms) (126)

------------------------------------------------------------

Goal Post-condition (file out/search_2_0002/search_2_merged.c, line 9) in 'arraySearch':
Assume {
  Type: is_sint32(arraySearch_0) /\ is_sint32(n) /\ is_sint32(p) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (Mint_0[shift_sint32(a, i)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  If p < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(a, p)] = x.
    Have: arraySearch_0 = 1.
  }
  Else { Have: arraySearch_0 = 0. }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < n) ->
        (Mint_0[shift_sint32(a, i)] != x)))) <-> (arraySearch_0 = 0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (11ms) (126)

------------------------------------------------------------

Goal Preservation of Invariant (file out/search_2_0002/search_2_merged.c, line 16):
Let x_1 = Mint_0[shift_sint32(a, p)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(1 + p) /\
      is_sint32(x_1).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (Mint_0[shift_sint32(a, i_1)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (30ms) (210322)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/search_2_0002/search_2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/search_2_0002/search_2_merged.c, line 17):
Let x_1 = Mint_0[shift_sint32(a, p)].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(1 + p) /\
      is_sint32(x_1).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (Mint_0[shift_sint32(a, i_1)] != x))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: p < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (Mint_0[shift_sint32(a, i_1)] != x))).
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (79320)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/search_2_0002/search_2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/search_2_0002/search_2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/search_2_0002/search_2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Loop assigns (file out/search_2_0002/search_2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'arraySearch' (1/3):
Effect at line 21
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Assigns nothing in 'arraySearch' (2/3):
Effect at line 23
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Assigns nothing in 'arraySearch' (3/3):
Effect at line 27
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/search_2_0002/search_2_merged.c, line 2) in 'arraySearch'' in 'main' at initialization of 'sum' (file out/search_2_0002/search_2_merged.c, line 33)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/search_2_0002/search_2_merged.c, line 3) in 'arraySearch'' in 'main' at initialization of 'sum' (file out/search_2_0002/search_2_merged.c, line 33)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/search_2_0002/search_2_merged.c:31: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
