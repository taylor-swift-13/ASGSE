[kernel] Parsing out/array_find_0002/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] Proved goals:   20 / 20
  Qed:              15
  Alt-Ergo 2.6.2:    5 (9ms-13ms)
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 9) in 'array_find':
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 10) in 'array_find':
Let x = Mint_0[shift_sint32(arr_0, array_find_0)].
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: array_find_0 < n.
  (* Goal *)
  When: (0 <= array_find_0) /\ (0 <= i) /\ (i < array_find_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < array_find_0) ->
      (Mint_0[shift_sint32(arr_0, i_1)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:7ms) (20ms) (82588)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (11ms) (47)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 11) in 'array_find':
Let x = Mint_0[shift_sint32(arr_0, array_find_0)].
Assume {
  Type: is_sint32(array_find_0) /\ is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: array_find_0 < n.
  (* Goal *)
  When: (0 <= array_find_0) /\ (0 <= i) /\ (i < array_find_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < array_find_0) ->
      (Mint_0[shift_sint32(arr_0, i_1)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (82588)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (10ms) (47)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 12) in 'array_find':
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 13) in 'array_find':
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 14) in 'array_find':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(arr_0, -1)]).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: n <= i_1.
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (82737)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (12ms) (62)

------------------------------------------------------------

Goal Post-condition (file out/array_find_0002/array_find_merged.c, line 15) in 'array_find':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(arr_0, -1)]).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: n <= i_1.
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (82737)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (9ms) (62)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0002/array_find_merged.c, line 22):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(arr_0, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (30ms) (212258)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (13ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0002/array_find_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0002/array_find_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0002/array_find_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0002/array_find_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (1/4):
Effect at line 26
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (2/4):
Effect at line 26
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (3/4):
Effect at line 28
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'array_find' (4/4):
Effect at line 31
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0002/array_find_merged.c, line 5) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0002/array_find_merged.c, line 37)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0002/array_find_merged.c, line 6) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0002/array_find_merged.c, line 37)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0002/array_find_merged.c, line 7) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0002/array_find_merged.c, line 37)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_find_0002/array_find_merged.c, line 8) in 'array_find'' in 'main' at initialization of 'index' (file out/array_find_0002/array_find_merged.c, line 37)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0002/array_find_merged.c:35: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
