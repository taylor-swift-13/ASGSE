[kernel] Parsing out/occurences_of_x_0002/occurences_of_x_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 41 goals scheduled
[wp] Proved goals:   41 / 41
  Qed:              31
  Alt-Ergo 2.6.2:   10 (7ms-19ms)
------------------------------------------------------------
  Function func
------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 7) in 'func':
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 8) in 'func':
Let m = Mint_0[sum_0 <- 0].
Assume {
  Type: is_sint32(n) /\ is_sint32(p) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> false))).
  (* Invariant *)
  Have: 0 <= p.
  (* Else *)
  Have: n <= p.
}
Prove: m[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (20ms) (134155)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (13ms) (70)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 9) in 'func':
Let m = Mint_0[sum_0 <- v].
Let x = m[shift_sint32(a, i)].
Assume {
  Type: is_sint32(func_0) /\ is_sint32(n) /\ is_sint32(p) /\ is_sint32(v) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < func_0)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= func_0.
  (* Invariant *)
  Have: (func_0 * x) = v.
  (* Else *)
  Have: n <= p.
}
Prove: 0 < func_0.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (135725)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (13ms) (147)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 10) in 'func':
Let m = Mint_0[sum_0 <- v].
Let x = m[shift_sint32(a, i)].
Assume {
  Type: is_sint32(func_0) /\ is_sint32(n) /\ is_sint32(p) /\ is_sint32(v) /\
      is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < func_0)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= func_0.
  (* Invariant *)
  Have: (func_0 * x) = v.
  (* Else *)
  Have: n <= p.
}
Prove: 0 < func_0.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (20ms) (135725)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (14ms) (147)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 11) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 12) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 13) in 'func':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 14) in 'func':
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 15) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 16) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 17) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 18) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Post-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 19) in 'func':
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 28):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(Mint_0[sum_0]) /\ is_sint32(1 + p) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
}
Prove: 0 < count_0.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (80ms) (896644)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (7ms) (311)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 29):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(Mint_0[sum_0]) /\ is_sint32(1 + p) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
}
Prove: 0 < count_0.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (20ms) (100977)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (16ms) (300)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 30):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Let x_3 = Mint_0[sum_0].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_3) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
}
Prove: (x_3 = (count_0 * x)) /\ (0 < count_0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (19ms) (1370)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 31):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_2] = Mint_0). }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
}
Prove: x_1 = x_2.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (102839)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (12ms) (545)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 32):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_2] = Mint_0). }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_5 = Mint_0[shift_sint32(a, i_1)] in
      ((x_5 = x) -> ((0 <= i_1) -> ((i_1 <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
}
Prove: x_1 = x_2.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (20ms) (104619)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (8ms) (564)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 34):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((m[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (m = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = Mint_0[shift_sint32(a, i)] in ((x_5 = x) ->
      ((0 <= i) -> ((i <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
}
Prove: 0 <= count_0.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (104409)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (13ms) (562)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 35):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0) /\
      linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, sum_0, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: forall i : Z. ((m[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (m = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = Mint_0[shift_sint32(a, i)] in ((x_5 = x) ->
      ((0 <= i) -> ((i <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
  (* Invariant *)
  Have: 0 <= count_0.
}
Prove: x_1 = x_2.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (12ms) (564)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Assertion (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 36) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 36) (2/2):
Effect at line 40
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Assigns (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 20) in 'func' (1/3):
Effect at line 25
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 20) in 'func' (2/3):
Effect at line 40
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Assigns (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 20) in 'func' (3/3):
Effect at line 48
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 58):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 2) in 'func'' in 'main' at initialization of 'count' (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 57)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 3) in 'func'' in 'main' at initialization of 'count' (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 57)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 4) in 'func'' in 'main' at initialization of 'count' (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 57)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 5) in 'func'' in 'main' at initialization of 'count' (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 57)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 6) in 'func'' in 'main' at initialization of 'count' (file out/occurences_of_x_0002/occurences_of_x_merged.c, line 57)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/occurences_of_x_0002/occurences_of_x_merged.c:54: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
