[kernel] Parsing out/array_find_0004/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 9 goals scheduled
[wp] Proved goals:    9 / 9
  Qed:               5
  Alt-Ergo 2.6.2:    3 (4ms-7ms-12ms)
  Z3 4.8.6:          1 (30ms)
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0004/array_find_merged.c, line 8):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (20ms) (179952)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (5ms) (69)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0004/array_find_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0004/array_find_merged.c, line 9):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (82271)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0004/array_find_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0004/array_find_merged.c, line 10):
Let x_1 = Mint_0[shift_sint32(arr_0, i)].
Let x_2 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_1)] = x)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
}
Prove: exists i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
    ((x_2 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (40ms) (254109)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (4ms) (56)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0004/array_find_merged.c, line 10):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
}
Prove: exists i : Z. ((0 <= i) -> ((i < n) ->
    ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i)] = x)))).
Prover Z3 4.8.6 returns Valid (Qed:0.70ms) (30ms) (171562)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0004/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0004/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0004/array_find_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0004/array_find_merged.c:4: Warning: 
  No 'assigns' specification for function 'array_find'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_find_0004/array_find_merged.c:23: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
