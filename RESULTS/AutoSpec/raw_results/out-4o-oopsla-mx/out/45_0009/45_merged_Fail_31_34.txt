[kernel] Parsing out/45_0009/45_merged.c (with preprocessing)
[kernel:typing:no-proto] out/45_0009/45_merged.c:37: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/45_0009/45_merged.c:54: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/45_0009/45_merged.c:53: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/45_0009/45_merged.c:8: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/45_0009/45_merged.c:8: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/45_0009/45_merged.c:8: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/45_0009/45_merged.c:54: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] out/45_0009/45_merged.c:53: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 34 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_3_preserved (Qed 14ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_preserved (Qed 13ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_8_preserved (Qed 13ms) (Z3)
[wp] Proved goals:   31 / 34
  Qed:              28
  Alt-Ergo 2.6.2:    3 (8ms-17ms-32ms)
  Timeout:           3
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 17):
Let x = 1 + j_1.
Let x_1 = -j_1.
Let x_2 = j - 1 - j_1.
Let x_3 = flag_0 * x_2.
Let x_4 = j - j_1.
Let x_5 = (x_4 * x_2) / 2.
Assume {
  Type: is_sint32(flag_1) /\ is_sint32(flag_0) /\ is_sint32(j_2) /\
      is_sint32(j_1) /\ is_sint32(tmp_0) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(j_1 - (if (flag_1 = 0) then 0 else x_2)).
  (* Invariant *)
  Have: (x_3 + x_5) = j_1.
  (* Invariant *)
  Have: ((if (flag_1 = 0) then 0 else x_2) + x_5) = j_1.
  (* Invariant *)
  Have: (flag_1 = 0) \/ (x = j) \/ ((flag_1 != 0) /\ ((2 + j_1) = j)).
  (* Invariant *)
  Have: if (flag_1 = 0) then (x_3 = 0) else ((1 + j_1 + x_3) = j).
  (* Invariant *)
  Have: if (flag_0 = 0) then ((flag_1 = 0) \/ (x = j))
        else ((1 + j_1 + (if (flag_1 = 0) then 0 else x_2)) = j).
  (* Invariant *)
  Have: j_1 < j.
  (* Invariant *)
  Have: 0 <= j_1.
  (* Invariant *)
  Have: (flag_1 = 0) \/ (j <= (1 + (2 * j_1))).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (1 + j) = j_2. }
  Else { Have: j = j_2. }
}
Prove: ((flag_0 * x_4) + ((x_4 * (1 + j - j_1)) / 2)) = j_2.
Prover Z3 4.8.6 returns Timeout (Qed:14ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:14ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 18):
Let x_1 = flag_0 * x.
Let x_2 = 1 + x.
Let x_3 = (x * x_2) / 2.
Let x_4 = x_1 + x_3.
Let x_5 = (x_2 * (2 + x)) / 2.
Let x_6 = -(if (flag_1 = 0) then 0 else x).
Assume {
  Type: is_sint32(flag_1) /\ is_sint32(flag_0) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32((flag_0 * x_2) + x_5) /\
      is_sint32(x_1 + x_3 - (if (flag_1 = 0) then 0 else x)) /\
      is_sint32(1 + x + x_1 + x_3 - (if (flag_1 = 0) then 0 else x)).
  (* Invariant *)
  Have: if (flag_1 = 0) then (x_1 = 0) else (x_1 = x).
  (* Invariant *)
  Have: (flag_1 = 0) \/ (x = 0) \/ ((flag_1 != 0) /\ (x = 1)).
  (* Invariant *)
  Have: if (flag_0 = 0) then ((flag_1 = 0) \/ (x = 0))
        else ((if (flag_1 = 0) then 0 else x) = x).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: (flag_1 = 0) \/ (x <= x_4).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Let x_7 = (flag_0 * x_2) + x_5.
    Have: (x_7 = (1 + j)) /\ ((2 + x + x_1 + x_3) = x_7).
  }
  Else { Have: x_5 = (1 + x + x_3). }
}
Prove: (1 + x + x_1 + x_3) = ((if (flag_1 = 0) then 0 else x) + x_5).
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (46089)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (32ms) (1437)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 19):
Let x_1 = 1 + x.
Let x_2 = x_1 * (2 + x).
Let x_3 = x_2 / 2.
Let x_4 = flag_1 * x.
Let x_5 = (x * x_1) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(flag_1) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1) /\ is_sint32(x + x_3) /\ is_sint32(x_3 - 1 - x) /\
      is_sint32(1 + x + x_3).
  (* Residual *)
  When: flag_1 != 0.
  (* Invariant *)
  Have: x_3 = (1 + x_4 + x_5).
  (* Invariant *)
  Have: x_3 = (1 + x + x_5).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x = 0) \/ ((flag_0 != 0) /\ (x = 1)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_4 = 0) else (x_4 = x).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 0 else x) = x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 2 <= x_2.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (flag_1 * x_1) = x_1.
}
Prove: (x = (-1)) \/ (x = 0).
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 22):
Let x = -j.
Let x_1 = j_1 - j.
Let x_2 = flag_1 * x_1.
Let x_3 = j_1 + (if (flag_1 = 0) then 0 else x_1).
Let x_4 = (x_1 * (1 + j_1 - j)) / 2.
Let x_5 = j + x_2 + x_4.
Let x_6 = x_2 + x_4.
Let x_7 = j_1 - 1 - j.
Let x_8 = flag_1 * x_7.
Let x_9 = (x_1 * x_7) / 2.
Let x_10 = -(if (flag_1 = 0) then 0 else x_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(flag_1) /\ is_sint32(j_2) /\
      is_sint32(j) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_7) /\
      is_sint32(x_6) /\
      is_sint32(x_2 + x_4 - (if (flag_1 = 0) then 0 else x_1)) /\
      is_sint32(j + x_2 + x_4 - j_1 - (if (flag_1 = 0) then 0 else x_1)).
  (* Invariant *)
  Have: (x_8 + x_9) = j.
  (* Invariant *)
  Have: x_5 = (j_1 + (if (flag_1 = 0) then 0 else x_1) + x_9).
  (* Invariant *)
  Have: (x_6 = x_3) \/ ((1 + x_2 + x_4) = x_3).
  (* Invariant *)
  Have: (x_2 + x_8 + x_4) = x_3.
  (* Invariant *)
  Have: (x_2 + (if (flag_1 = 0) then 0 else x_7) + x_4) = x_3.
  (* Invariant *)
  Have: (x_2 + (if (flag_0 = 0) then 0 else x_7) + x_4) = x_3.
  (* Invariant *)
  Have: x_6 <= x_3.
  (* Invariant *)
  Have: j < j_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_1 != 0
  Then { Have: (x_6 = (1 + j_2)) /\ (x_6 = (1 + j_1)). }
  Else { Have: x_4 = j_1. }
  (* Invariant *)
  Have: if (flag_1 = 0) then (x_2 = 0) else ((j + x_2) = j_1).
  (* Invariant *)
  Have: (flag_1 = 0) \/ ((flag_1 != 0) /\ ((1 + j) = j_1)).
}
Prove: if (flag_0 = 0) then (flag_1 = 0)
       else ((j + (if (flag_1 = 0) then 0 else x_1)) = j_1).
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 28):
Let x_1 = 1 + x.
Let x_2 = flag_1 * x_1.
Let x_3 = (x_1 * (2 + x)) / 2.
Let x_4 = (if (flag_0 = 0) then 0 else x) + x_3.
Let x_5 = flag_1 * x.
Let x_6 = (x * x_1) / 2.
Let x_7 = (if (flag_0 = 0) then 0 else x_1) + x_3.
Let x_8 = -x.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(flag_1) /\ is_sint32(j) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(x_7) /\ is_sint32(x_3 - 1 - x) /\
      is_sint32((if (flag_0 = 0) then 0 else x) + x_3 - 1 - x).
  (* Invariant *)
  Have: (1 + x + x_5 + x_6) = x_4.
  (* Invariant *)
  Have: x_3 = (1 + x + x_6).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x = 0) \/ ((flag_0 != 0) /\ (x = 1)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_5 = 0) else (x_5 = x).
  (* Invariant *)
  Have: if (flag_1 = 0) then ((flag_0 = 0) \/ (x = 0))
        else ((if (flag_0 = 0) then 0 else x) = x).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: x < x_3.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_1 != 0
  Then {
    Have: (x_7 = (1 + j)) /\
        (if (flag_0 = 0) then ((flag_0 != 0) /\ (x = (-1)))
         else ((flag_0 != 0) \/ (x = 0))).
  }
  Else { Have: flag_0 = 0. }
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_2 = 0) else (x_2 = x_1).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x = (-1)) \/ ((flag_0 != 0) /\ (x = 0)).
  (* Invariant *)
  Have: if (flag_1 = 0) then ((flag_0 = 0) \/ (x = (-1)))
        else ((flag_0 != 0) \/ (x = (-1))).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: 0 <= x_7.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (41205)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (12ms) (299)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 29):
Let x_1 = 1 + x.
Let x_2 = flag_1 * x_1.
Let x_3 = 2 + x.
Let x_4 = (x_1 * x_3) / 2.
Let x_5 = x_2 + x_4.
Let x_6 = flag_1 * x.
Let x_7 = (x * x_1) / 2.
Let x_8 = -(if (flag_0 = 0) then 0 else x_1).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(flag_1) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_5) /\
      is_sint32(x_2 + x_4 - 1) /\
      is_sint32(x_2 + x_4 - (if (flag_0 = 0) then 0 else x_1)) /\
      is_sint32(x_2 + x_4 - 1 - (if (flag_0 = 0) then 0 else x_1)) /\
      is_sint32(x_2 + x_4 - 1 - x - (if (flag_0 = 0) then 0 else x_1)).
  (* Residual *)
  When: flag_1 != 0.
  (* Invariant *)
  Have: (1 + x_6 + (if (flag_0 = 0) then 0 else x_1) + x_7) = x_5.
  (* Invariant *)
  Have: (1 + x + (if (flag_0 = 0) then 0 else x_1) + x_7) = x_5.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x = 0) \/ ((flag_0 != 0) /\ (x = 1)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_6 = 0) else (x_6 = x).
  (* Invariant *)
  Have: (if (flag_0 = 0) then 0 else x) = x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: if (flag_0 = 0) then (0 < x_5) else (x_3 <= x_5).
  (* Invariant *)
  Have: (x + (if (flag_0 = 0) then 0 else x_1)) < x_5.
  (* Then *)
  Have: tmp_0 != 0.
  Have: if (flag_0 = 0) then ((flag_0 != 0) /\ (x = (-1)))
        else ((flag_0 != 0) \/ (x = 0)).
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_2 = 0) else (x_2 = x_1).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x = (-1)) \/ ((flag_0 != 0) /\ (x = 0)).
  (* Invariant *)
  Have: (flag_0 != 0) \/ (x = (-1)).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: 0 <= x_5.
}
Prove: (flag_0 = 0) \/ (x < x_5).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (10ms) (37331)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (8ms) (165)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/45_0009/45_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/45_0009/45_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Loop assigns (file out/45_0009/45_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/45_0009/45_merged.c, line 31) (2/2):
Call Result at line 37
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/45_0009/45_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/45_0009/45_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/45_0009/45_merged.c:5: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/45_0009/45_merged.c:8: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
