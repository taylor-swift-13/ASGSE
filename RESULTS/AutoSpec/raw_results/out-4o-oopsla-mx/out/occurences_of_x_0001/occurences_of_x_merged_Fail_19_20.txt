[kernel] Parsing out/occurences_of_x_0001/occurences_of_x_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_func_loop_invariant_established (Qed 0.79ms) (Z3)
[wp] Proved goals:   19 / 20
  Qed:              12
  Alt-Ergo 2.6.2:    7 (8ms-14ms-17ms)
  Timeout:           1
------------------------------------------------------------
  Function func
------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 7):
Assume { Type: is_sint32(n). }
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (Qed:0.79ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.79ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 8):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(Mint_0[sum_0]) /\ is_sint32(1 + p) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
}
Prove: 0 < count_0.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (70ms) (768113)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (11ms) (283)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 9):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(Mint_0[sum_0]) /\ is_sint32(1 + p) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
}
Prove: 0 < count_0.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (87733)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (16ms) (274)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 10):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = count_1 * x.
Let m = Mint_1[sum_0 <- x_1].
Let x_2 = m[shift_sint32(a, p)].
Let x_3 = Mint_0[sum_0].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_3) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else {
    Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- count_0 * x] = Mint_0).
  }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
}
Prove: (x_3 = (count_0 * x)) /\ (0 < count_0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (17ms) (1100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 11):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_2] = Mint_0). }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
}
Prove: x_1 = x_2.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (10ms) (89592)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (16ms) (487)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 12):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\ is_sint32(x) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((m[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_2] = Mint_0). }
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(a, i_1)] = x) -> ((0 <= i_1) ->
      ((i_1 <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_5 = Mint_0[shift_sint32(a, i_1)] in
      ((x_5 = x) -> ((0 <= i_1) -> ((i_1 <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
}
Prove: x_1 = x_2.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (91380)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (16ms) (506)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 14):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. ((m[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (m = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = Mint_0[shift_sint32(a, i)] in ((x_5 = x) ->
      ((0 <= i) -> ((i <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
}
Prove: 0 <= count_0.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (10ms) (90582)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (8ms) (504)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 15):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let m = Mint_1[sum_0 <- x_3].
Let x_4 = m[shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. ((m[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i < p) -> (0 < count_1)))).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (m = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (0 < count_0)))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> ((x_1 = x_2) /\ (0 < count_0))))).
  (* Invariant *)
  Have: forall i : Z. let x_5 = Mint_0[shift_sint32(a, i)] in ((x_5 = x) ->
      ((0 <= i) -> ((i <= p) ->
      ((x_1 = x_2) /\ (((x_5 != x) -> (x_1 = x_2))))))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
  (* Invariant *)
  Have: 0 <= count_0.
}
Prove: x_1 = x_2.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (13ms) (506)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 16) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0001/occurences_of_x_merged.c, line 16) (2/2):
Effect at line 20
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/occurences_of_x_0001/occurences_of_x_merged.c:1: Warning: 
  No 'assigns' specification for function 'func'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/occurences_of_x_0001/occurences_of_x_merged.c:34: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
