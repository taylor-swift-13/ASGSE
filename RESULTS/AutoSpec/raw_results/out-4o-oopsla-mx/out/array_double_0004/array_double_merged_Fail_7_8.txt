[kernel] Parsing out/array_double_0004/array_double_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] [Timeout] typed_arrayDouble_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] Proved goals:    7 / 8
  Qed:               5
  Alt-Ergo 2.6.2:    2 (8ms-13ms)
  Timeout:           1
------------------------------------------------------------
  Function arrayDouble
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0004/array_double_merged.c, line 5):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\
      is_sint32(a_1[shift_sint32(a, p)]).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. let a_2 = shift_sint32(a, i) in ((0 <= i) ->
      ((i < p) -> (a_1[a_2] = (2 * Mint_0[a_2])))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
}
Prove: p < n.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (20ms) (79133)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (86)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0004/array_double_merged.c, line 5):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0004/array_double_merged.c, line 6):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = shift_sint32(a, i).
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. let a_5 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_5] = (2 * Mint_0[a_5])))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
}
Prove: a_1[a_2 <- 2 * a_3][a_4] = (2 * Mint_0[a_4]).
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0004/array_double_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0004/array_double_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0004/array_double_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0004/array_double_merged.c, line 8) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0004/array_double_merged.c, line 8) (2/2):
Effect at line 12
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let x = p - 1.
Let a_3 = shift_sint32(a, x).
Let a_4 = a_2[a_3].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(a_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= (1 + n).
  (* Invariant *)
  Have: forall i : Z. let a_5 = shift_sint32(a, i) in ((0 <= i) ->
      (((2 + i) <= p) -> (a_2[a_5] = (2 * Mint_0[a_5])))).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: to_uint32(x) < n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. let a_5 = shift_sint32(a, i) in ((0 <= i) ->
      ((i < p) -> (a_2[a_3 <- 2 * a_4][a_5] = (2 * Mint_0[a_5])))).
}
Prove: included(a_3, 1, a_1, n).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (104387)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (13ms) (139)

------------------------------------------------------------
[wp:pedantic-assigns] out/array_double_0004/array_double_merged.c:1: Warning: 
  No 'assigns' specification for function 'arrayDouble'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_double_0004/array_double_merged.c:17: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
