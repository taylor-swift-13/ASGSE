[kernel] Parsing out/gcd_0007/gcd_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] [Timeout] typed_gcd_ensures (Qed 24ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_3 (Qed 21ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_4 (Qed 30ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_5 (Qed 28ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_6 (Qed 29ms) (Z3)
[wp] [Timeout] typed_gcd_ensures_7 (Qed 31ms) (Z3)
[wp] Proved goals:   13 / 19
  Qed:              12
  Alt-Ergo 2.6.2:    1 (4ms)
  Timeout:           6
------------------------------------------------------------
  Function gcd
------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 3) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If a = 0
  Then { Have: gcd_0 = b. }
  Else {
    If b = 0
    Then { Have: gcd_0 = a. }
    Else {
      If b = a
      Then { Have: gcd_0 = a. }
      Else {
        If b < a
        Then {
          Let x = a - b.
          Have: (ta_tmp_0=false).
          (* Call 'gcd' *)
          Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
               ((gcd_0 % i) = 0))))) /\
              (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
               (i <= gcd_0))))).
        }
        Else {
          Let x_1 = b - a.
          (* Call 'gcd' *)
          Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) ->
               ((0 < i) -> ((gcd_0 % i) = 0))))) /\
              (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) ->
               ((0 < i) -> (i <= gcd_0))))).
        }
      }
    }
  }
}
Prove: ((a % gcd_0) = 0) /\ ((b % gcd_0) = 0).
Prover Z3 4.8.6 returns Timeout (Qed:24ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:24ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 4) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Residual *)
  When: a <= b.
  (* Residual *)
  When: b != 0.
  (* Residual *)
  When: a != 0.
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    Let x = b - a.
    (* Call 'gcd' *)
    Have: ((a % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
        (0 <= gcd_0) /\
        (forall i : Z. (((a % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
         ((gcd_0 % i) = 0))))) /\
        (forall i : Z. (((a % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
         (i <= gcd_0))))).
  }
}
Prove: 0 <= gcd_0.
Prover Z3 4.8.6 returns Valid (Qed:21ms) (35226)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:21ms) (4ms) (17)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 5) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If a = 0
  Then { Have: gcd_0 = b. }
  Else {
    If b = 0
    Then { Have: gcd_0 = a. }
    Else {
      If b = a
      Then { Have: gcd_0 = a. }
      Else {
        If b < a
        Then {
          Let x = a - b.
          Have: (ta_tmp_0=false).
          (* Call 'gcd' *)
          Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
               ((gcd_0 % i) = 0))))) /\
              (forall i : Z. (((b % i) = 0) -> (((x % i) = 0) -> ((0 < i) ->
               (i <= gcd_0))))).
        }
        Else {
          Let x_1 = b - a.
          (* Call 'gcd' *)
          Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) ->
               ((0 < i) -> ((gcd_0 % i) = 0))))) /\
              (forall i : Z. (((a % i) = 0) -> (((x_1 % i) = 0) ->
               ((0 < i) -> (i <= gcd_0))))).
        }
      }
    }
  }
}
Prove: 0 < gcd_0.
Prover Z3 4.8.6 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 6) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If a = 0
  Then { Have: gcd_0 = b. }
  Else {
    If b = 0
    Then { Have: gcd_0 = a. }
    Else {
      If b = a
      Then { Have: gcd_0 = a. }
      Else {
        If b < a
        Then {
          Let x = a - b.
          Have: (ta_tmp_0=false).
          (* Call 'gcd' *)
          Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
               ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
              (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
               ((0 < i_1) -> (i_1 <= gcd_0))))).
        }
        Else {
          Let x_1 = b - a.
          (* Call 'gcd' *)
          Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
               ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
              (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
               ((0 < i_1) -> (i_1 <= gcd_0))))).
        }
      }
    }
  }
}
Prove: i <= gcd_0.
Prover Z3 4.8.6 returns Timeout (Qed:30ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:30ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 7) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Residual *)
  When: b != 0.
  (* Residual *)
  When: a != 0.
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (0 <= gcd_0) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (0 <= gcd_0) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
  }
}
Prove: (gcd_0 % i) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:28ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:28ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 8) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If a = 0
  Then { Have: gcd_0 = b. }
  Else {
    If b = 0
    Then { Have: gcd_0 = a. }
    Else {
      If b = a
      Then { Have: gcd_0 = a. }
      Else {
        If b < a
        Then {
          Let x = a - b.
          Have: (ta_tmp_0=false).
          (* Call 'gcd' *)
          Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
               ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
              (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
               ((0 < i_1) -> (i_1 <= gcd_0))))).
        }
        Else {
          Let x_1 = b - a.
          (* Call 'gcd' *)
          Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
              (0 <= gcd_0) /\
              (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
               ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
              (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
               ((0 < i_1) -> (i_1 <= gcd_0))))).
        }
      }
    }
  }
}
Prove: i <= gcd_0.
Prover Z3 4.8.6 returns Timeout (Qed:29ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:29ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/gcd_0007/gcd_merged.c, line 9) in 'gcd':
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(gcd_0).
  (* Residual *)
  When: b != 0.
  (* Residual *)
  When: a != 0.
  (* Goal *)
  When: ((a % i) = 0) /\ ((b % i) = 0) /\ (0 < i).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  If b = a
  Then { Have: gcd_0 = a. }
  Else {
    If b < a
    Then {
      Let x = a - b.
      (* Call 'gcd' *)
      Have: ((b % gcd_0) = 0) /\ ((x % gcd_0) = 0) /\ (0 < gcd_0) /\
          (0 <= gcd_0) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((b % i_1) = 0) -> (((x % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
    Else {
      Let x_1 = b - a.
      (* Call 'gcd' *)
      Have: ((a % gcd_0) = 0) /\ ((x_1 % gcd_0) = 0) /\ (0 < gcd_0) /\
          (0 <= gcd_0) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> ((gcd_0 % i_1) = 0))))) /\
          (forall i_1 : Z. (((a % i_1) = 0) -> (((x_1 % i_1) = 0) ->
           ((0 < i_1) -> (i_1 <= gcd_0))))).
    }
  }
}
Prove: (gcd_0 % i) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:31ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:31ms) (8s)

------------------------------------------------------------

Goal Assigns nothing in 'gcd':
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (1/8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (2/8):
Effect at line 14
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (3/8):
Effect at line 17
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (4/8):
Effect at line 20
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (5/8):
Call Result at line 23
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (6/8):
Effect at line 23
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (7/8):
Call Result at line 24
Prove: true.
Prover Qed returns Valid (0.85ms)

------------------------------------------------------------

Goal Assigns nothing in 'gcd' (8/8):
Effect at line 24
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/gcd_0007/gcd_merged.c, line 2) in 'gcd'' in 'gcd' at call 'gcd' (file out/gcd_0007/gcd_merged.c, line 23)
:
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/gcd_0007/gcd_merged.c, line 2) in 'gcd'' in 'gcd' at call 'gcd' (file out/gcd_0007/gcd_merged.c, line 24)
:
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/gcd_0007/gcd_merged.c, line 2) in 'gcd'' in 'main' at initialization of 'c' (file out/gcd_0007/gcd_merged.c, line 30)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/gcd_0007/gcd_merged.c:27: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
