[kernel] Parsing out/array_find_0006/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 9 goals scheduled
[wp] [Timeout] typed_array_find_loop_invariant_established (Z3)
[wp] Proved goals:    8 / 9
  Qed:               6
  Alt-Ergo 2.6.2:    2 (8ms-9ms)
  Timeout:           1
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0006/array_find_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0006/array_find_merged.c, line 8):
Assume { Type: is_sint32(n). }
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0006/array_find_merged.c, line 9):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (30ms) (178150)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (9ms) (59)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0006/array_find_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0006/array_find_merged.c, line 10):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(1 + i_1) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i_1) -> ((0 <= i_2) ->
      (Mint_0[shift_sint32(arr_0, i_2)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (80899)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (49)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0006/array_find_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0006/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0006/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0006/array_find_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0006/array_find_merged.c:4: Warning: 
  No 'assigns' specification for function 'array_find'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_find_0006/array_find_merged.c:23: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
