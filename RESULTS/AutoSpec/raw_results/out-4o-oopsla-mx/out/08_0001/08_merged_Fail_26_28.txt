[kernel] Parsing out/08_0001/08_merged.c (with preprocessing)
[kernel:typing:no-proto] out/08_0001/08_merged.c:34: Warning: 
  Calling function unknown3 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/08_0001/08_merged.c:30: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/08_0001/08_merged.c:29: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/08_0001/08_merged.c:11: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/08_0001/08_merged.c:11: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[kernel:annot:missing-spec] out/08_0001/08_merged.c:11: Warning: 
  Neither code nor specification for function unknown3, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 28 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_4_preserved (Qed 60ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_3_preserved (Qed 60ms) (Z3)
[wp] Proved goals:   26 / 28
  Qed:              17
  Alt-Ergo 2.6.2:    9 (8ms-9ms-12ms)
  Timeout:           2
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 14):
Let x_6 = y_3 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3).
  (* Residual *)
  When: 0 <= x.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_3)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_3))).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_4 <= (100 + x_6).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_3).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_3)).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_3 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_3 = y_4).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_4 = y_5).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_5 = y_2).
        Have: (1 + x_2) = x.
        Have: (1 + y_2) = y.
      }
      Else { Have: (x_3 = x) /\ (y_5 = y). }
    }
    Else { Have: (x_5 = x) /\ (y_4 = y). }
  }
}
Prove: 0 <= y.
Prover Z3 4.8.6 returns Valid (Qed:40ms) (10ms) (41366)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:40ms) (12ms) (107)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 15):
Let x_6 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: 4 <= x.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_4 <= (100 + x_6).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
}
Prove: x <= y.
Prover Z3 4.8.6 returns Valid (Qed:51ms) (10ms) (47737)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:51ms) (8ms) (134)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 16):
Let x_6 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: 4 <= x.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_4 <= (100 + x_6).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: x <= y.
}
Prove: (101 * x) <= (403 + y).
Prover Z3 4.8.6 returns Timeout (Qed:60ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:60ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 17):
Let x_6 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_6.
  (* Invariant *)
  Have: x_4 <= (100 + x_6).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: ((4 <= x) -> (x <= y)).
  (* Invariant *)
  Have: ((4 <= x) -> ((101 * x) <= (403 + y))).
}
Prove: x <= (y / 100).
Prover Z3 4.8.6 returns Timeout (Qed:60ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:60ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 18):
Let x_6 = y / 100.
Let x_7 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: x_4 <= (100 + x_7).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: ((4 <= x) -> (x <= y)).
  (* Invariant *)
  Have: ((4 <= x) -> ((101 * x) <= (403 + y))).
  (* Invariant *)
  Have: x <= x_6.
}
Prove: x <= (100 + x_6).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:60ms) (9ms) (35)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 19):
Let x_4 = y / 100.
Let x_5 = y_3 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3).
  (* Residual *)
  When: 4 <= x_2.
  (* Invariant *)
  Have: ((4 <= x_3) -> (x_3 <= y_3)).
  (* Invariant *)
  Have: ((4 <= x_3) -> ((101 * x_3) <= (403 + y_3))).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 <= (100 + x_5).
  (* Invariant *)
  Have: (x_3 <= 3) \/ (100 <= y_3).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_3 <= 3).
  (* Invariant *)
  Have: ((x_3 <= 3) -> ((100 * x_3) <= y_3)).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (x_3 = x_1) /\ (y_3 = y_2).
    Have: (1 + x_1) = x.
    If x_1 <= (-2)
    Then { Have: ((1 + y) = y_1) /\ ((1 + y_2) = y_1). }
    Else { Have: (1 + y_2) = y. }
  }
  Else { Have: (x_3 = x) /\ (y_3 = y). }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: ((4 <= x) -> (x <= y)).
  (* Invariant *)
  Have: ((4 <= x) -> ((101 * x) <= (403 + y))).
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= (100 + x_4).
}
Prove: (x <= 3) \/ (100 <= y).
Prover Z3 4.8.6 returns Valid (Qed:49ms) (20ms) (39363)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:49ms) (8ms) (89)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 20):
Let x_6 = y / 100.
Let x_7 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: x_4 <= (100 + x_7).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: ((4 <= x) -> (x <= y)).
  (* Invariant *)
  Have: ((4 <= x) -> ((101 * x) <= (403 + y))).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x <= (100 + x_6).
  (* Invariant *)
  Have: (x <= 3) \/ (100 <= y).
}
Prove: (3 <= y) \/ (x <= 3).
Prover Z3 4.8.6 returns Valid (Qed:55ms) (10ms) (41565)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:55ms) (10ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 21):
Let x_6 = y / 100.
Let x_7 = y_4 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3) /\ is_sint32(y_4).
  (* Goal *)
  When: x <= 3.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_4))).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: x_4 <= (100 + x_7).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_4).
  (* Invariant *)
  Have: (3 <= y_4) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_4)).
  (* Invariant *)
  Have: 0 <= y_4.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_4 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_4 = y_5).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_5 = y_6).
      If 4 <= x_3
      Then {
        Have: (x_3 = x_2) /\ (y_6 = y_3).
        Have: (1 + x_2) = x.
        Have: (1 + y_3) = y_7.
      }
      Else { Have: (x_3 = x) /\ (y_6 = y_7). }
      If x < 0
      Then { Have: y_7 = y_2. Have: (1 + y) = y_2. }
      Else { Have: y_7 = y. }
    }
    Else { Have: (x_5 = x) /\ (y_5 = y). }
  }
  (* Invariant *)
  Have: (x < 0) \/ (0 <= y).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x <= (100 + x_6).
}
Prove: (100 * x) <= y.
Prover Z3 4.8.6 returns Valid (Qed:58ms) (20ms) (44857)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:58ms) (9ms) (160)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 22):
Let x_6 = y / 100.
Let x_7 = y_3 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3).
  (* Residual *)
  When: x < 0.
  (* Goal *)
  When: x <= 3.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_3)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_3))).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: x_4 <= (100 + x_7).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_3).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_3)).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_3 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_3 = y_4).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_4 = y_5).
      If 4 <= x_3
      Then { Have: x_3 = x_2. Have: (1 + x_2) = x. }
      Else { Have: (x_3 = x) /\ (y_5 = y_2). }
      Have: (1 + y) = y_2.
    }
    Else { Have: (x_5 = x) /\ (y_4 = y). }
  }
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x <= (100 + x_6).
  (* Invariant *)
  Have: (100 * x) <= y.
}
Prove: 0 <= y.
Prover Z3 4.8.6 returns Valid (Qed:53ms) (10ms) (43049)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:53ms) (9ms) (87)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 23):
Let x_6 = y / 100.
Let x_7 = y_3 / 100.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(tmp_1_0) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(y_3).
  (* Goal *)
  When: x < 0.
  (* Invariant *)
  Have: ((4 <= x_4) -> (x_4 <= y_3)).
  (* Invariant *)
  Have: ((4 <= x_4) -> ((101 * x_4) <= (403 + y_3))).
  (* Invariant *)
  Have: x_4 <= x_7.
  (* Invariant *)
  Have: x_4 <= (100 + x_7).
  (* Invariant *)
  Have: (x_4 <= 3) \/ (100 <= y_3).
  (* Invariant *)
  Have: (3 <= y_3) \/ (x_4 <= 3).
  (* Invariant *)
  Have: ((x_4 <= 3) -> ((100 * x_4) <= y_3)).
  (* Invariant *)
  Have: 0 <= y_3.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0_0 != 0
  Then {
    Have: (x_4 = x_1) /\ (y_3 = y_1).
    Have: (1 + x_1) = x.
    Have: (100 + y_1) = y.
  }
  Else {
    Have: (x_4 = x_5) /\ (y_3 = y_4).
    (* Block In *)
    Have: (ta_tmp_0=false).
    If tmp_0 != 0
    Then {
      Have: (x_5 = x_3) /\ (y_4 = y_5).
      If 4 <= x_3
      Then { Have: x_3 = x_2. Have: (1 + x_2) = x. }
      Else { Have: (x_3 = x) /\ (y_5 = y_2). }
      Have: (1 + y) = y_2.
    }
    Else { Have: (x_5 = x) /\ (y_4 = y). }
  }
  (* Invariant *)
  Have: ((4 <= x) -> (x <= y)).
  (* Invariant *)
  Have: ((4 <= x) -> ((101 * x) <= (403 + y))).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: x <= (100 + x_6).
  (* Invariant *)
  Have: (x <= 3) \/ (100 <= y).
  (* Invariant *)
  Have: (3 <= y) \/ (x <= 3).
  (* Invariant *)
  Have: ((x <= 3) -> ((100 * x) <= y)).
  (* Invariant *)
  Have: ((x <= 3) -> (0 <= y)).
}
Prove: y <= 99.
Prover Z3 4.8.6 returns Valid (Qed:76ms) (10ms) (45333)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:76ms) (8ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (26ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/08_0001/08_merged.c, line 25):
Let x_4 = y / 100.
Let x_5 = 100 + x_4.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(tmp_1_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2).
  (* Residual *)
  When: 4 <= x_2.
  (* Residual *)
  When: x < 0.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 <= 3.
  (* Invariant *)
  Have: (100 * x_3) <= y.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: tmp_1_0 != 0.
  If tmp_0 != 0
  Then {
    Have: (x_2 = x_1) /\ (x_3 = x_1) /\ ((1 + y) = y_1) /\ ((1 + y_2) = y_1).
    Have: (1 + x_1) = x.
  }
  Else { Have: x_3 = x. }
  (* Invariant *)
  Have: x <= x_4.
  (* Invariant *)
  Have: x <= x_5.
  (* Invariant *)
  Have: x <= 3.
  (* Invariant *)
  Have: (100 * x) <= y.
  (* Invariant *)
  Have: y <= 99.
}
Prove: false.
Prover Z3 4.8.6 returns Valid (Qed:41ms) (10ms) (36777)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:41ms) (9ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/08_0001/08_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 26) (1/4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 26) (2/4):
Call Result at line 29
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 26) (3/4):
Call Result at line 30
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/08_0001/08_merged.c, line 26) (4/4):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/08_0001/08_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:3: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown3'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/08_0001/08_merged.c:11: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
