[kernel] Parsing out/mult_0001/mult_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 11 goals scheduled
[wp] Proved goals:   11 / 11
  Qed:               8
  Alt-Ergo 2.6.2:    3 (8ms-9ms)
------------------------------------------------------------
  Function mul
------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0001/mult_merged.c, line 7):
Let x_1 = b * (a - x).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x - 1) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: (a * b) = ((b * x) + x_1).
  (* Then *)
  Have: 0 <= x.
}
Prove: x <= (1 + a).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (33079)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (84)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0001/mult_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0001/mult_merged.c, line 8):
Let x_1 = a * y.
Let x_2 = x * y.
Let x_3 = -x.
Let x_4 = -x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x - 1) /\
      is_sint32(x_1 - x_2) /\ is_sint32(y + x_1 - x_2).
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: x_1 = (x_2 + (y * (a - x))).
  (* Then *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= (1 + a).
}
Prove: (x_2 + (y * (1 + a - x))) = (y + x_1).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (9895)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (179)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0001/mult_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0001/mult_merged.c, line 9):
Let x_1 = -x.
Let x_2 = b * (1 + a - x).
Let x_3 = a * b.
Let x_4 = x - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_2 - b).
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: x_2 = (b + (b * (a - x))).
  (* Invariant *)
  Have: ((b * x) + x_2) = (b + x_3).
  (* Then *)
  Have: 0 <= x.
  (* Invariant *)
  Have: x <= (1 + a).
}
Prove: x_3 = ((b * x_4) + x_2).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (9959)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (9ms) (242)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0001/mult_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0001/mult_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0001/mult_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0001/mult_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0001/mult_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/mult_0001/mult_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/mult_0001/mult_merged.c:3: Warning: 
  No 'assigns' specification for function 'mul'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/mult_0001/mult_merged.c:22: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
