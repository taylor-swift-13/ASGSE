[kernel] Parsing out/equal_arrays_0004/equal_arrays_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] Proved goals:   16 / 16
  Qed:               8
  Alt-Ergo 2.6.2:    8 (8ms-11ms-15ms)
------------------------------------------------------------
  Function check
------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 3) in 'check':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(b, i_2)] = Mint_0[shift_sint32(a, i_2)]))).
  (* Invariant *)
  Have: 0 <= i_1.
  Have: n <= i_1.
}
Prove: Mint_0[shift_sint32(b, i)] = Mint_0[shift_sint32(a, i)].
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (82962)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (58)

------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 4) in 'check':
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(b, i_2)] = Mint_0[shift_sint32(a, i_2)]))).
  (* Invariant *)
  Have: 0 <= i_1.
  Have: n <= i_1.
}
Prove: Mint_0[shift_sint32(b, i)] = Mint_0[shift_sint32(a, i)].
Prover Z3 4.8.6 returns Valid (Qed:2ms) (20ms) (82962)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (58)

------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 5) in 'check':
Assume {
  Type: is_sint32(check_0) /\ is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(b, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 <= i.
  If i < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(b, i)] != Mint_0[shift_sint32(a, i)].
    Have: check_0 = 0.
  }
  Else { Have: check_0 = 1. }
}
Prove: (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) ->
        (Mint_0[shift_sint32(b, i_1)] = Mint_0[shift_sint32(a, i_1)])))) <->
    (check_0 = 1).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (9ms) (138)

------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 6) in 'check':
Let x = Mint_0[shift_sint32(b, i)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(b, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 <= i.
  Have: i < n.
  (* Then *)
  Have: x != x_1.
}
Prove: exists i_1 : Z.
    (Mint_0[shift_sint32(b, i_1)] != Mint_0[shift_sint32(a, i_1)]) /\
    (0 <= i_1) /\ (i_1 < n).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (84174)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (53)

------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 7) in 'check':
Let x = Mint_0[shift_sint32(b, i)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(b, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 <= i.
  Have: i < n.
  (* Then *)
  Have: x != x_1.
}
Prove: exists i_1 : Z.
    (Mint_0[shift_sint32(b, i_1)] != Mint_0[shift_sint32(a, i_1)]) /\
    (0 <= i_1) /\ (i_1 < n).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (84174)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (12ms) (53)

------------------------------------------------------------

Goal Post-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 8) in 'check':
Assume {
  Type: is_sint32(check_0) /\ is_sint32(i) /\ is_sint32(n).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (Mint_0[shift_sint32(b, i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: 0 <= i.
  If i < n
  Then {
    (* Then *)
    Have: Mint_0[shift_sint32(b, i)] != Mint_0[shift_sint32(a, i)].
    Have: check_0 = 0.
  }
  Else { Have: check_0 = 1. }
}
Prove: (exists i_1 : Z.
        (Mint_0[shift_sint32(b, i_1)] != Mint_0[shift_sint32(a, i_1)]) /\
        (0 <= i_1) /\ (i_1 < n)) <-> (check_0 = 0).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (15ms) (137)

------------------------------------------------------------

Goal Preservation of Invariant (file out/equal_arrays_0004/equal_arrays_merged.c, line 13):
Let x = Mint_0[shift_sint32(b, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n) /\
      valid_rw(Malloc_0, shift_sint32(b, 0), n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->
      (Mint_0[shift_sint32(b, i_2)] = Mint_0[shift_sint32(a, i_2)]))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x = x_1.
}
Prove: Mint_0[shift_sint32(b, i)] = Mint_0[shift_sint32(a, i)].
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (15ms) (82)

------------------------------------------------------------

Goal Establishment of Invariant (file out/equal_arrays_0004/equal_arrays_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/equal_arrays_0004/equal_arrays_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/equal_arrays_0004/equal_arrays_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Loop assigns (file out/equal_arrays_0004/equal_arrays_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'check' (1/3):
Effect at line 17
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'check' (2/3):
Effect at line 19
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'check' (3/3):
Effect at line 22
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Assertion (file out/equal_arrays_0004/equal_arrays_merged.c, line 29):
Assume {
  Type: is_sint32(res_0).
  (* Initializer *)
  Init: a[0] = 1.
  (* Initializer *)
  Init: a[1] = 2.
  (* Initializer *)
  Init: a[2] = 3.
  (* Initializer *)
  Init: a[3] = 4.
  (* Initializer *)
  Init: a[4] = 5.
  (* Initializer *)
  Init: b[0] = 1.
  (* Initializer *)
  Init: b[1] = 2.
  (* Initializer *)
  Init: b[2] = 3.
  (* Initializer *)
  Init: b[3] = 4.
  (* Initializer *)
  Init: b[4] = 5.
  (* Call 'check' *)
  Have: ((forall i : Z. ((0 <= i) -> ((i <= 4) -> (b[i] = a[i])))) <->
         (res_0 = 1)) /\
      ((exists i : Z. (b[i] != a[i]) /\ (0 <= i) /\ (i <= 4)) <->
       (res_0 = 0)) /\
      (((res_0 = 1) ->
       (forall i : Z. ((0 <= i) -> ((i <= 4) -> (b[i] = a[i])))))) /\
      (((res_0 = 0) ->
       (exists i : Z. (b[i] != a[i]) /\ (0 <= i) /\ (i <= 4)))).
}
Prove: res_0 = 1.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (37777)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (9ms) (74)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/equal_arrays_0004/equal_arrays_merged.c, line 2) in 'check'' in 'main' at initialization of 'res' (file out/equal_arrays_0004/equal_arrays_merged.c, line 28)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/equal_arrays_0004/equal_arrays_merged.c:25: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
