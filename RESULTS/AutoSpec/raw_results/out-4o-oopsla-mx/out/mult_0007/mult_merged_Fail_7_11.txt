[kernel] Parsing out/mult_0007/mult_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 11 goals scheduled
[wp] [Timeout] typed_mul_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_mul_loop_invariant_2_established (Qed 0.68ms) (Z3)
[wp] [Timeout] typed_mul_loop_invariant_5_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_mul_loop_invariant_5_established (Qed 2ms) (Z3)
[wp] Proved goals:    7 / 11
  Qed:               5
  Alt-Ergo 2.6.2:    2 (5ms-9ms)
  Timeout:           4
------------------------------------------------------------
  Function mul
------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0007/mult_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0007/mult_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0007/mult_merged.c, line 8):
Let x_1 = prod_0 / b.
Let x_2 = x + x_1.
Let x_3 = b + prod_0.
Assume {
  Type: is_sint32(b) /\ is_sint32(prod_0) /\ is_sint32(x) /\
      is_sint32(x - 1) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Initializer *)
  Init: (0 / b) = 0.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (b * x_2) = (prod_0 + (b * x)).
  (* Invariant *)
  Have: (b * x_1) = prod_0.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: (x_3 / b) = (1 + x_1).
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0007/mult_merged.c, line 8):
Assume { Type: is_sint32(b). }
Prove: (0 / b) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:0.68ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.68ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0007/mult_merged.c, line 9):
Let x_1 = b + prod_0.
Let x_2 = x_1 / b.
Let x_3 = x + x_2 - 1.
Let x_4 = b * x_3.
Let x_5 = x - 1.
Assume {
  Type: is_sint32(b) /\ is_sint32(prod_0) /\ is_sint32(x) /\
      is_sint32(x_5) /\ is_sint32(x_1) /\ is_sint32(x_3).
  (* Initializer *)
  Init: (0 / b) = 0.
  (* Invariant *)
  Have: 0 < (x + x_2).
  (* Invariant *)
  Have: x_2 = (1 + (prod_0 / b)).
  (* Invariant *)
  Have: x_4 = (prod_0 + (b * x)).
  (* Invariant *)
  Have: (b * (x_2 - 1)) = prod_0.
  (* Invariant *)
  Have: 0 <= x.
}
Prove: x_4 = (b + prod_0 + (b * x_5)).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (9955)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (9ms) (220)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0007/mult_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0007/mult_merged.c, line 10):
Let x_2 = x_1 - 1.
Let x_3 = b * x_2.
Let x_4 = -x_3.
Let x_5 = b * x.
Let x_6 = x_5 - x_3.
Let x_7 = -x_1.
Let x_8 = x_5 - b - x_3.
Assume {
  Type: is_sint32(b) /\ is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_6) /\ is_sint32(x_8).
  (* Initializer *)
  Init: (0 / b) = 0.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (x_1 + (x_8 / b)) = x.
  (* Invariant *)
  Have: (b * x_1) = (b + x_3).
  (* Invariant *)
  Have: x_5 = (b + x_3 + (b * (x - x_1))).
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (x_1 + (x_6 / b)) = (1 + x).
}
Prove: x_5 = (x_3 + (b * (1 + x - x_1))).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (10119)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (5ms) (248)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0007/mult_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0007/mult_merged.c, line 11):
Let x_2 = b * x_1.
Let x_3 = x - 1.
Let x_4 = -x.
Let x_5 = b * (1 + x_1 - x).
Let x_6 = x_5 - b.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_3) /\
      is_sint32(x_5) /\ is_sint32(x_6).
  (* Initializer *)
  Init: (0 / b) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (x + (x_6 / b)) = x_1.
  (* Invariant *)
  Have: ((b * x) + x_5) = (b + x_2).
  (* Invariant *)
  Have: x_5 = (b + (b * (x_1 - x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (x + (x_5 / b)) = (1 + x_1).
  (* Invariant *)
  Have: x_2 = ((b * x_3) + x_5).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0007/mult_merged.c, line 11):
Assume { Type: is_sint32(a). }
Prove: 0 <= a.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Loop assigns (file out/mult_0007/mult_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/mult_0007/mult_merged.c:3: Warning: 
  No 'assigns' specification for function 'mul'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/mult_0007/mult_merged.c:22: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
