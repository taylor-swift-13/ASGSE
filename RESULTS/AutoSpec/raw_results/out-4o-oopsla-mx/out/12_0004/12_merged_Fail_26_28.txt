[kernel] Parsing out/12_0004/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0004/12_merged.c:30: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0004/12_merged.c:47: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0004/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0004/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/12_0004/12_merged.c:46: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 28 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_preserved (Qed 16ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_11_preserved (Qed 20ms) (Z3)
[wp] Proved goals:   26 / 28
  Qed:              22
  Alt-Ergo 2.6.2:    3 (8ms-14ms)
  Z3 4.8.6:          1 (590ms)
  Timeout:           2
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 12):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = t_1 - 1 - t.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = t_1 - (2 * x_3).
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(t) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32((2 * t_1) - t) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(t_1 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_2 * x_2) + x_3) = t.
  (* Invariant *)
  Have: (2 * x_3) = t.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (t + (x_4 * x_4)) = (t_1 + x_3).
Prover Z3 4.8.6 returns Timeout (Qed:16ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:16ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 13):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Let x_3 = (x_1 * x_2) / 2.
Let x_4 = 2 * x_3.
Let x_5 = x_2 * x_2.
Let x_6 = (-2) * x_3.
Let x_7 = t - x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(t + x_3 - t_1) /\
      is_sint32(t + (x_1 * (if (flag_0 = 0) then 0 else x_1)) + x_3 - t_1).
  (* Invariant *)
  Have: ((x_2 * (if (flag_0 = 0) then 0 else x_2)) + x_3) = t_1.
  (* Invariant *)
  Have: (x_5 + (if (flag_0 = 0) then 0 else x_3)) = t_1.
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else x_5)) = t_1.
  (* Invariant *)
  Have: (x_3 + (if (flag_0 = 0) then 0 else x_3)) = t_1.
  (* Invariant *)
  Have: t_1 <= x_4.
  (* Invariant *)
  Have: x_4 <= t_1.
  (* Invariant *)
  Have: x_4 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (x_3 + (x_7 * x_7)) = t. }
  Else { Have: x_3 = 0. }
}
Prove: (x_3 + (x_7 * x_7)
        + (if (flag_0 = 0) then 0 else ((x_7 * (1 + t - x_4)) / 2)))
         = (t + (x_7 * (if (flag_0 = 0) then 0 else x_7))).
Prover Z3 4.8.6 returns Valid (Qed:15ms) (590ms) (14609318)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 14):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Assume {
  Type: is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (x_1 * x_1) = t.
  (* Invariant *)
  Have: (x_2 * x_2) = t_1.
  (* Invariant *)
  Have: ((x_1 * x_2) / 2) = t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t_1 <= 0.
  (* Invariant *)
  Have: 0 < t.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: ((t * (1 + t)) / 2) = t.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (40009)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (14ms) (250)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 15):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * x_1.
Let x_3 = (x_1 * (1 + t - t_1)) / 2.
Let x_4 = 2 * t.
Let x_5 = t_1 + (2 * x_3).
Let x_6 = t - 1 - t_1.
Let x_7 = (x_1 * x_6) / 2.
Let x_8 = x_6 * x_6.
Let x_9 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(x_2 + x_3) /\ is_sint32(t_1 + x_3 - t) /\
      is_sint32(t_1 + x_2 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_8 + x_3) = t.
  (* Invariant *)
  Have: (x_8 + x_7) = t_1.
  (* Invariant *)
  Have: (2 * x_7) = t_1.
  (* Invariant *)
  Have: (x_7 + x_3) = t.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (t_1 + x_3) = (t + x_7).
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_2 + x_3) = x_4.
}
Prove: x_3 = x_2.
Prover Z3 4.8.6 returns Valid (Qed:15ms) (20ms) (40675)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (8ms) (210)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (14ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 18):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = (x_1 * (1 + t - t_1)) / 2.
Let x_3 = x_1 * x_1.
Let x_4 = 2 * t.
Let x_5 = t_1 + (2 * x_2).
Let x_6 = t - 1 - t_1.
Let x_7 = (x_1 * x_6) / 2.
Let x_8 = x_6 * x_6.
Let x_9 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_2) /\
      is_sint32(x_3 + x_2) /\ is_sint32(t_1 + x_2 - t) /\
      is_sint32(t_1 + x_3 + x_2 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (x_8 + x_2) = t.
  (* Invariant *)
  Have: (x_8 + x_7) = t_1.
  (* Invariant *)
  Have: (2 * x_7) = t_1.
  (* Invariant *)
  Have: (x_7 + x_2) = t.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Invariant *)
  Have: (t_1 + x_2) = (t + x_7).
  (* Invariant *)
  Have: x_5 <= x_4.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_3 + x_2) = x_4.
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: x_3 <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (36389)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (12ms) (253)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 22):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x * x.
Let x_3 = x_1 / 2.
Let x_4 = x_3 + (if (flag_0 = 0) then 0 else x_2).
Let x_5 = x * (if (flag_0 = 0) then 0 else x).
Let x_6 = 2 * x_3.
Let x_7 = (a * x) / 2.
Let x_8 = x_3 - 1 - a.
Let x_9 = 2 + (2 * a) + x_7 + (if (flag_0 = 0) then 0 else x_8).
Let x_10 = a * a.
Let x_11 = x_7 + (if (flag_0 = 0) then 0 else x_8).
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(t) /\
      is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(x_8) /\ is_sint32(x_11).
  (* Invariant *)
  Have: (1 + a + x_7 + (if (flag_0 = 0) then 0 else x_8))
          = ((a * (if (flag_0 = 0) then 0 else a)) + x_3).
  (* Invariant *)
  Have: x_11 = (x_10 + (if (flag_0 = 0) then 0 else x_7)).
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_3 = (1 + a + x_10)).
  (* Invariant *)
  Have: x_9 <= x_6.
  (* Invariant *)
  Have: x_3 = (1 + a + x_7).
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: ((x_2 + x_3) = (1 + a + t)) /\ (x_2 = (1 + a + x_7)). }
  (* Invariant *)
  Have: if (flag_0 = 0) then (x_5 = 0) else (x_5 = x_2).
  (* Invariant *)
  Have: (x_2 + (if (flag_0 = 0) then 0 else x_3)) = x_4.
  (* Invariant *)
  Have: (flag_0 = 0) \/ (x_3 = x_2).
  (* Invariant *)
  Have: if (flag_0 = 0) then ((-1) <= x_1) else (x_2 <= x_3).
}
Prove: if (flag_0 = 0) then (x_1 <= 1) else (x_3 <= x_2).
Prover Z3 4.8.6 returns Timeout (Qed:20ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:20ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0004/12_merged.c, line 25) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0004/12_merged.c, line 25) (2/2):
Call Result at line 30
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0004/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0004/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0004/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
