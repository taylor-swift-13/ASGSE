[kernel] Parsing out/12_0007/12_merged.c (with preprocessing)
[kernel:typing:no-proto] out/12_0007/12_merged.c:34: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[kernel:typing:no-proto] out/12_0007/12_merged.c:51: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/12_0007/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[kernel:annot:missing-spec] out/12_0007/12_merged.c:5: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] out/12_0007/12_merged.c:50: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 36 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_preserved (Qed 21ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_2_preserved (Qed 17ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_13_preserved (Qed 22ms) (Z3)
[wp] Proved goals:   33 / 36
  Qed:              28
  Alt-Ergo 2.6.2:    2 (29ms-32ms)
  Z3 4.8.6:          3 (10ms)
  Timeout:           3
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 12):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = t - 1 - t_1.
Let x_3 = x_1 * x_2.
Let x_4 = x_3 / 2.
Let x_5 = 2 * x_4.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_2) /\ is_sint32(t_1) /\
      is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (x_4 + (if (flag_0 = 0) then 0 else (x_2 * x_2))) = t_1.
  (* Invariant *)
  Have: (((1 + flag_0) * x_2) + (((t - 2 - t_1) * x_2) / 2)) = t_1.
  (* Invariant *)
  Have: (if (flag_0 = 0) then x_4 else ((x_2 * (2 + t - t_1)) / 2)) = t_1.
  (* Invariant *)
  Have: (x_4 + (if (flag_0 = 0) then 0 else x_4)) = t_1.
  (* Invariant *)
  Have: t_1 <= x_5.
  (* Invariant *)
  Have: t_1 <= ((if (flag_0 = 0) then 0 else x_2) + x_5).
  (* Invariant *)
  Have: x_4 <= t_1.
  (* Invariant *)
  Have: x_5 <= t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then { Have: (t_2 + t_1) = (2 * t). }
  Else { Have: t = t_2. }
}
Prove: ((if (flag_0 = 0) then 0 else (x_1 * x_1))
        + ((x_1 * (1 + t - t_1)) / 2)) = t_2.
Prover Z3 4.8.6 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 13):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * x_1.
Let x_3 = (x_1 * (1 + t - t_1)) / 2.
Let x_4 = t - 1 - t_1.
Let x_5 = x_1 * x_4.
Let x_6 = x_5 / 2.
Let x_7 = 1 + flag_0.
Let x_8 = x_2 + x_3.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_8) /\
      is_sint32(t_1 + x_2 + x_3 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_4 * x_4) + x_6) = t_1.
  (* Invariant *)
  Have: ((x_7 * x_4) + (((t - 2 - t_1) * x_4) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_4 * (2 + t - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: (2 * x_6) = t_1.
  (* Invariant *)
  Have: t_1 < t.
  (* Invariant *)
  Have: x_6 <= t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_2 + x_3) = (2 * t).
}
Prove: x_8 = ((x_7 * x_1) + x_6).
Prover Z3 4.8.6 returns Timeout (Qed:17ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:17ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 14):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = 1 + flag_0.
Let x_3 = x_2 * x_1.
Let x_4 = t - 1 - t_1.
Let x_5 = x_1 * x_4.
Let x_6 = x_5 / 2.
Let x_7 = x_3 + x_6.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_7) /\
      is_sint32(t_1 + x_3 + x_6 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_4 * x_4) + x_6) = t_1.
  (* Invariant *)
  Have: ((x_2 * x_4) + (((t - 2 - t_1) * x_4) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_4 * (2 + t - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: (2 * x_6) = t_1.
  (* Invariant *)
  Have: t_1 < t.
  (* Invariant *)
  Have: x_6 <= t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_3 + x_6) = (2 * t).
  (* Invariant *)
  Have: ((x_1 * x_1) + ((x_1 * (1 + t - t_1)) / 2)) = x_7.
}
Prove: ((x_1 * (3 + t - t_1)) / 2) = x_7.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (69466)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 15):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = (x_1 * (3 + t - t_1)) / 2.
Let x_3 = 1 + flag_0.
Let x_4 = t - 1 - t_1.
Let x_5 = x_1 * x_4.
Let x_6 = x_5 / 2.
Let x_7 = (x_1 * (1 + t - t_1)) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_6) /\ is_sint32(x_2) /\
      is_sint32(t_1 + x_2 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_4 * x_4) + x_6) = t_1.
  (* Invariant *)
  Have: ((x_3 * x_4) + (((t - 2 - t_1) * x_4) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_4 * (2 + t - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: (2 * x_6) = t_1.
  (* Invariant *)
  Have: t_1 < t.
  (* Invariant *)
  Have: x_6 <= t_1.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (t_1 + x_2) = (2 * t).
  (* Invariant *)
  Have: x_2 = ((x_1 * x_1) + x_7).
  (* Invariant *)
  Have: x_2 = ((x_3 * x_1) + x_6).
}
Prove: x_2 = (2 * x_7).
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (58487)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 16):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = (x_1 * (1 + t_1 - t)) / 2.
Let x_3 = 2 * x_2.
Let x_4 = 1 + flag_0.
Let x_5 = t_1 - 1 - t.
Let x_6 = x_1 * x_5.
Let x_7 = x_6 / 2.
Let x_8 = t + x_3.
Let x_9 = 2 * t_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_7) /\ is_sint32(x_3) /\
      is_sint32(t_1 + x_7 - t) /\ is_sint32(t + x_3 - t_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_5 * x_5) + x_7) = t.
  (* Invariant *)
  Have: ((x_4 * x_5) + (((t_1 - 2 - t) * x_5) / 2)) = t.
  (* Invariant *)
  Have: ((x_5 * (2 + t_1 - t)) / 2) = t.
  (* Invariant *)
  Have: (2 * x_7) = t.
  (* Invariant *)
  Have: t < t_1.
  (* Invariant *)
  Have: x_7 <= t.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: (-1) <= x_6.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_8 = x_9.
  (* Invariant *)
  Have: x_2 = (x_1 * x_1).
  (* Invariant *)
  Have: ((x_4 * x_1) + x_7) = x_3.
  (* Invariant *)
  Have: ((x_1 * (3 + t_1 - t)) / 2) = x_3.
}
Prove: x_8 <= x_9.
Prover Z3 4.8.6 returns Valid (Qed:25ms) (10ms) (37487)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 18):
Let x = -t.
Let x_1 = t_1 - t.
Let x_2 = t_1 - 1 - t.
Let x_3 = x_1 * x_2.
Let x_4 = x_3 / 2.
Let x_5 = (-2) * x_4.
Let x_6 = t_1 - (2 * x_4).
Let x_7 = (x_6 * (1 + t_1 - (2 * x_4))) / 2.
Let x_8 = 2 * x_7.
Let x_9 = 1 + flag_0.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_4) /\
      is_sint32(2 * ((x_1 * (1 + t_1 - t)) / 2)) /\
      is_sint32(t_1 + x_4 - t) /\ is_sint32(t + x_8 - t_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_2 * x_2) + x_4) = t.
  (* Invariant *)
  Have: ((x_9 * x_2) + (((t_1 - 2 - t) * x_2) / 2)) = t.
  (* Invariant *)
  Have: ((x_2 * (2 + t_1 - t)) / 2) = t.
  (* Invariant *)
  Have: (2 * x_4) = t.
  (* Invariant *)
  Have: x_4 <= t.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: t < t_1.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x_4 + x_7) = t_1.
  (* Invariant *)
  Have: x_7 = (x_6 * x_6).
  (* Invariant *)
  Have: ((x_9 * x_6) + ((x_6 * (t_1 - 1 - (2 * x_4))) / 2)) = x_8.
  (* Invariant *)
  Have: ((x_6 * (3 + t_1 - (2 * x_4))) / 2) = x_8.
  (* Invariant *)
  Have: (t + x_8) <= (2 * t_1).
}
Prove: ((2 * t) + x_8) <= (3 * t_1).
Prover Z3 4.8.6 returns Valid (Qed:29ms) (10ms) (39011)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:29ms) (32ms) (1497)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (26ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 22):
Let x = -t_1.
Let x_1 = t - t_1.
Let x_2 = x_1 * (1 + t - t_1).
Let x_3 = x_2 / 2.
Let x_4 = 2 * x_3.
Let x_5 = 1 + flag_0.
Let x_6 = t - 1 - t_1.
Let x_7 = (x_1 * x_6) / 2.
Let x_8 = t_1 + x_3.
Let x_9 = t_1 + x_4.
Let x_10 = 2 * t.
Let x_11 = -t.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(t_1) /\ is_sint32(tmp_0) /\
      is_sint32(x_1) /\ is_sint32(x_6) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(t_1 + x_3 - t) /\ is_sint32(t_1 + x_4 - t).
  (* Residual *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: ((x_6 * x_6) + x_7) = t_1.
  (* Invariant *)
  Have: ((x_5 * x_6) + (((t - 2 - t_1) * x_6) / 2)) = t_1.
  (* Invariant *)
  Have: ((x_6 * (2 + t - t_1)) / 2) = t_1.
  (* Invariant *)
  Have: (2 * x_7) = t_1.
  (* Invariant *)
  Have: x_10 <= x_9.
  (* Invariant *)
  Have: t < x_4.
  (* Invariant *)
  Have: x_8 = (t + x_7).
  (* Invariant *)
  Have: x_3 <= t.
  (* Invariant *)
  Have: x_9 <= x_10.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: t <= x_8.
  (* Invariant *)
  Have: t_1 < t.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_3 = (x_1 * x_1).
  (* Invariant *)
  Have: ((x_5 * x_1) + x_7) = x_4.
  (* Invariant *)
  Have: ((x_1 * (3 + t - t_1)) / 2) = x_4.
}
Prove: (-1) <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:22ms) (10ms) (39235)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (29ms) (1363)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 24):
Let x = 1 + a.
Let x_1 = x * (2 + a).
Let x_2 = x_1 / 2.
Let x_3 = a * x.
Let x_4 = x_3 / 2.
Let x_5 = 1 + a + x_4.
Let x_6 = 2 * x_2.
Let x_7 = 2 + (2 * a) + x_4.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_2 - 1 - a).
  (* Invariant *)
  Have: x_4 = (a + ((a * (a - 1)) / 2)).
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_6 <= x_7.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: a < x_2.
  (* Invariant *)
  Have: 0 <= a.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: x_1 <= 1.
Prover Z3 4.8.6 returns Timeout (Qed:22ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:22ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (20ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0007/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0007/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0007/12_merged.c, line 29) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/12_0007/12_merged.c, line 29) (2/2):
Call Result at line 34
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0007/12_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0007/12_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/12_0007/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
