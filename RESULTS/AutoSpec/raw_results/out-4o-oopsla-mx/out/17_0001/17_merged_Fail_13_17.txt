[kernel] Parsing out/17_0001/17_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/17_0001/17_merged.c:12: Warning: 
  Missing assigns clause (assigns 'everything' instead)
[wp] 17 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_established (Qed 0.73ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_5_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_6_established (Qed 2ms) (Z3)
[wp] Proved goals:   13 / 17
  Qed:               8
  Alt-Ergo 2.6.2:    5 (1ms-7ms-11ms)
  Timeout:           4
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 15):
Assume { Type: is_sint32(i) /\ is_sint32(n). (* Then *) Have: i < n. }
Prove: 0 <= i.
Prover Z3 4.8.6 returns Timeout (Qed:0.73ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.73ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 17):
Let x = -k.
Let x_1 = j + k_1 - k.
Let x_2 = (x_1 * (j + k_1 - 1 - k)) / 2.
Let x_3 = j + k_1.
Assume {
  Type: is_sint32(j) /\ is_sint32(k_1) /\ is_sint32(k) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_1).
  (* Then *)
  Have: x_3 < (k + n).
  (* Invariant *)
  Have: k <= x_3.
  (* Invariant *)
  Have: x_3 <= (k + k_2).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 < i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k + i_1) < x_3) -> (i_1 <= (k_2 + i)))))).
  (* Invariant *)
  Have: 0 < k_2.
  (* Invariant *)
  Have: x_2 < k_2.
  (* Invariant *)
  Have: k <= k_1.
  (* Invariant *)
  Have: x_3 <= (2 * k).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 < i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k + i_1) < x_3) -> (i_1 <= (k + i)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_2 < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: k < k_1.
}
Prove: j <= k.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (37406)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (1ms) (61)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 17):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
}
Prove: i <= k.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 18):
Let x = (i_1 * (i_1 - 1)) / 2.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(i_1 + k - j).
  (* Goal *)
  When: (0 < i) /\ (i < i_1) /\ (0 <= i_2) /\ (i_2 < i).
  (* Then *)
  Have: i_1 < n.
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: i_1 <= k_1.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 < i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (i_4 <= (k_1 + i_3)))))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: x < k_1.
  (* Invariant *)
  Have: j <= i_1.
  (* Invariant *)
  Have: i_1 <= k.
  (* Invariant *)
  Have: forall i_4,i_3 : Z. ((0 < i_4) -> ((i_4 < i_1) -> ((0 <= i_3) ->
      ((i_3 < i_4) -> (i_4 <= (k + i_3)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < i_1.
  (* Invariant *)
  Have: j <= k.
}
Prove: (i + j) <= (i_1 + i_2 + k).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (7ms) (32)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 18):
Assume {
  Type: is_sint32(i_2) /\ is_sint32(k) /\ is_sint32(n).
  (* Goal *)
  When: (0 < i) /\ (i < i_2) /\ (0 <= i_1) /\ (i_1 < i).
  (* Then *)
  Have: i_2 < n.
  (* Invariant *)
  Have: 0 <= i_2.
  (* Invariant *)
  Have: i_2 <= k.
}
Prove: i <= (i_1 + k).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (9ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 19):
Let x = (i * (i - 1)) / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(k) /\ is_sint32(k_1) /\
      is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(i + k - j).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= k_1.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 < i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (i_2 <= (k_1 + i_1)))))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: x < k_1.
  (* Invariant *)
  Have: j <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 < i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (i_2 <= (k + i_1)))))).
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x < k.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: j < i.
  (* Invariant *)
  Have: j <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 < i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> ((j + i_2) <= (i + k + i_1)))))).
}
Prove: j < (i + k).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (8ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 19):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 < i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (i_2 <= (k + i_1)))))).
}
Prove: 0 < k.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 20):
Let x = j + k.
Let x_1 = -k_1.
Let x_2 = j + k - k_1.
Let x_3 = (x_2 * (j + k - 1 - k_1)) / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(k) /\ is_sint32(k_1) /\ is_sint32(k_2) /\
      is_sint32(n) /\ is_sint32(1 + j) /\ is_sint32(x_2).
  (* Then *)
  Have: x < (k_1 + n).
  (* Invariant *)
  Have: k_1 <= x.
  (* Invariant *)
  Have: x <= (k_1 + k_2).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 < i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (i_1 <= (k_2 + i)))))).
  (* Invariant *)
  Have: 0 < k_2.
  (* Invariant *)
  Have: x_3 < k_2.
  (* Invariant *)
  Have: k_1 <= k.
  (* Invariant *)
  Have: x <= (2 * k_1).
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 < i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (i_1 <= (k_1 + i)))))).
  (* Invariant *)
  Have: 0 < k_1.
  (* Invariant *)
  Have: x_3 < k_1.
  (* Invariant *)
  Have: 0 <= j.
  (* Then *)
  Have: k_1 < k.
  (* Invariant *)
  Have: j <= k_1.
  (* Invariant *)
  Have: forall i_1,i : Z. ((0 < i_1) -> ((0 <= i) -> ((i < i_1) ->
      (((k_1 + i_1) < x) -> (i_1 <= (k + i)))))).
  (* Invariant *)
  Have: 0 < k.
}
Prove: x_3 < k.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (11ms) (62)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 20):
Assume {
  Type: is_sint32(i) /\ is_sint32(k) /\ is_sint32(n).
  (* Then *)
  Have: i < n.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= k.
  (* Invariant *)
  Have: forall i_2,i_1 : Z. ((0 < i_2) -> ((i_2 < i) -> ((0 <= i_1) ->
      ((i_1 < i_2) -> (i_2 <= (k + i_1)))))).
  (* Invariant *)
  Have: 0 < k.
}
Prove: ((i * (i - 1)) / 2) < k.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/17_0001/17_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/17_0001/17_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Loop assigns (file out/17_0001/17_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/17_0001/17_merged.c:7: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
