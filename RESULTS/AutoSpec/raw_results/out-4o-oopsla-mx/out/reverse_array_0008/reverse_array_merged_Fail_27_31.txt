[kernel] Parsing out/reverse_array_0008/reverse_array_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 31 goals scheduled
[wp] [Timeout] typed_reverse_loop_invariant_established (Qed 0.92ms) (Z3)
[wp] [Timeout] typed_reverse_loop_invariant_preserved (Qed 7ms) (Z3)
[wp] [Timeout] typed_reverse_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_reverse_loop_invariant_7_preserved (Qed 7ms) (Z3)
[wp] Proved goals:   27 / 31
  Qed:              18
  Alt-Ergo 2.6.2:    9 (10ms-18ms-38ms)
  Timeout:           4
------------------------------------------------------------
  Function reverse
------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 6):
Let x = 1 + i + j.
Let x_1 = x / 2.
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), x).
Let x_2 = i + j.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(j - 1) /\ is_sint32(x_2) /\
      is_sint32(x) /\ is_sint32(a_1[shift_sint32(a, i)]).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (-2) <= x_2.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x_2) ->
      (Mint_0[shift_sint32(a, i + j - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_1 <= j.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 <= x_2) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j < i_1) -> ((i_1 <= x_2) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - i_1)]))).
  (* Then *)
  Have: i < x_1.
}
Prove: x_1 < j.
Prover Z3 4.8.6 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 6):
Assume { Type: is_sint32(n) /\ is_sint32(n - 1). }
Prove: (n / 2) < n.
Prover Z3 4.8.6 returns Timeout (Qed:0.92ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.92ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 10):
Let x = 1 + j.
Assume {
  Type: is_sint32(j) /\ is_sint32(x).
  (* Invariant *)
  Have: (x / 2) <= j.
}
Prove: (-2) <= j.
Prover Z3 4.8.6 returns Valid (Qed:0.79ms) (10ms) (32925)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.79ms) (10ms) (59)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 12):
Let x = n / 2.
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x_1 = -j.
Let x_2 = n - 1 - j.
Let a_2 = shift_sint32(a, x_2).
Let a_3 = a_1[a_2].
Let a_4 = shift_sint32(a, j).
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_2) /\
      is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (i < n) /\ (n < (i + j)).
  (* Invariant *)
  Have: x < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x).
  (* Invariant *)
  Have: x < j.
}
Prove: a_1[a_2 <- a_1[a_4]][a_4 <- a_3][shift_sint32(a, i)] =
    Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 12):
Assume {
  Type: is_sint32(n) /\ is_sint32(n - 1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 < i) /\ (i < n).
  (* Invariant *)
  Have: (n / 2) < n.
  (* Invariant *)
  Have: (-1) <= n.
}
Prove: Mint_0[shift_sint32(a, n - 1 - i)] = Mint_0[shift_sint32(a, i)].
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 13):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (j <= i) /\ (i < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:10ms) (30ms) (234251)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (15ms) (181)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 14):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (j <= i) /\ (i < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:9ms) (30ms) (236420)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (17ms) (153)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 15):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (j <= i) /\ (i < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:9ms) (30ms) (236420)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (17ms) (153)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 16):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ ((i + j) < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:8ms) (40ms) (442163)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (38ms) (681)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 17):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ ((i + j) < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((j + i_1) < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:9ms) (30ms) (240011)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (17ms) (156)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 18):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let x = -j.
Let x_1 = n - 1 - j.
Let a_2 = shift_sint32(a, x_1).
Let a_3 = shift_sint32(a, j).
Let a_4 = a_1[a_2].
Let a_5 = a_1[a_2 <- a_1[a_3]][a_3 <- a_4].
Let x_2 = n / 2.
Assume {
  Type: is_sint32(j) /\ is_sint32(n) /\ is_sint32(j - 1) /\
      is_sint32(n - 1) /\ is_sint32(n - j) /\ is_sint32(x_1) /\
      is_sint32(a_4).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ ((i + j) < n).
  (* Invariant *)
  Have: x_2 < n.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < n) ->
      (Mint_0[shift_sint32(a, n - 1 - i_1)] = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: j < n.
  (* Invariant *)
  Have: n <= (1 + j + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n <= (j + i_1)) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((j < i_1) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + j + i_1) <= n) ->
      (a_1[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Then *)
  Have: n <= (j + x_2).
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 < n) -> ((n < (j + i_1)) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((j + i_1) < n) ->
      (a_5[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, n - 1 - i_1)]))).
}
Prove: a_5[shift_sint32(a, i)] = Mint_0[shift_sint32(a, n - 1 - i)].
Prover Z3 4.8.6 returns Valid (Qed:9ms) (40ms) (240011)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (12ms) (156)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/reverse_array_0008/reverse_array_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/reverse_array_0008/reverse_array_merged.c, line 20) (1/3):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/reverse_array_0008/reverse_array_merged.c, line 20) (2/3):
Effect at line 26
Let a_1 = shift_sint32(a, 0).
Let x = i + j.
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, x).
Let x_1 = i - 1.
Let a_3 = shift_sint32(a, x_1).
Let a_4 = shift_sint32(a, j).
Let a_5 = a_2[a_3].
Let a_6 = a_2[a_3 <- a_2[a_4]][a_4 <- a_5].
Let x_2 = x / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(x_1) /\ is_sint32(j - 1) /\
      is_sint32(x) /\ is_sint32(i + j - 1) /\ is_sint32(a_5).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Invariant *)
  Have: x_2 < x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 < x) ->
      (Mint_0[shift_sint32(a, i + j - 1 - i_1)]
         = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_2 <= j.
  (* Invariant *)
  Have: 0 < i.
  (* Invariant *)
  Have: i <= (1 + x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((i <= i_1) -> ((i_1 < x) ->
      (Mint_0[shift_sint32(a, i + j - 1 - i_1)] = a_2[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j < i_1) -> ((i_1 < x) ->
      (Mint_0[shift_sint32(a, i + j - 1 - i_1)] = a_2[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= i) ->
      (Mint_0[shift_sint32(a, i + j - 1 - i_1)] = a_2[shift_sint32(a, i_1)]))).
  (* Then *)
  Have: i <= x_2.
  (* Invariant *)
  Have: x_2 < j.
  (* Invariant *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 < x) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j <= i_1) -> ((i_1 < x) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - 1 - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, i + j - 1 - i_1)]))).
}
Prove: included(a_3, 1, a_1, x).
Prover Z3 4.8.6 returns Valid (Qed:10ms) (20ms) (115712)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (14ms) (329)

------------------------------------------------------------

Goal Loop assigns (file out/reverse_array_0008/reverse_array_merged.c, line 20) (3/3):
Effect at line 27
Let a_1 = shift_sint32(a, 0).
Let x = 2 + i + j.
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, x).
Let a_3 = shift_sint32(a, i).
Let x_1 = 1 + j.
Let a_4 = shift_sint32(a, x_1).
Let a_5 = a_2[a_3].
Let a_6 = a_2[a_3 <- a_2[a_4]][a_4 <- a_5].
Let x_2 = 1 + i + j.
Let x_3 = x / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(j) /\ is_sint32(1 + i) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x) /\ is_sint32(a_5).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_4, 1).
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (-3) <= (i + j).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 < i_1) -> ((i_1 <= x_2) ->
      (Mint_0[shift_sint32(a, 1 + i + j - i_1)]
         = Mint_0[shift_sint32(a, i_1)]))).
  (* Invariant *)
  Have: x_3 <= x_1.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: forall i_1 : Z. ((i < i_1) -> ((i_1 <= x_2) ->
      (a_2[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + j) <= i_1) -> ((i_1 <= x_2) ->
      (a_2[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->
      (a_2[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
  (* Then *)
  Have: i < x_3.
  (* Invariant *)
  Have: x_3 <= j.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. (((2 + i) <= i_1) -> ((i_1 <= x_2) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((j < i_1) -> ((i_1 <= x_2) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) ->
      (a_6[shift_sint32(a, i_1)] = Mint_0[shift_sint32(a, 1 + i + j - i_1)]))).
}
Prove: included(a_4, 1, a_1, x).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (20ms) (142010)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (25ms) (340)

------------------------------------------------------------
[wp:pedantic-assigns] out/reverse_array_0008/reverse_array_merged.c:1: Warning: 
  No 'assigns' specification for function 'reverse'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/reverse_array_0008/reverse_array_merged.c:34: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
