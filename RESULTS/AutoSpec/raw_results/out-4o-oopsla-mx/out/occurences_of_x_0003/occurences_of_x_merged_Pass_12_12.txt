[kernel] Parsing out/occurences_of_x_0003/occurences_of_x_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] Proved goals:   12 / 12
  Qed:               8
  Alt-Ergo 2.6.2:    4 (8ms-9ms-12ms)
------------------------------------------------------------
  Function func
------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 7):
Let x_1 = count_1 * x.
Let x_2 = Mint_1[sum_0 <- x_1][shift_sint32(a, p)].
Let x_3 = Mint_0[sum_0].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(1 + p) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_2 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_1] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_1] = Mint_0). }
}
Prove: x_3 = (count_0 * x).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (8ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 8):
Let x = Mint_0[sum_0].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let x_2 = count_0 * x_1.
Let x_3 = count_1 * x_1.
Let x_4 = Mint_1[sum_0 <- x_3][shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(1 + p) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x_1
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x_1 + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_2] = Mint_0). }
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) -> (x = x_2))).
}
Prove: x = x_2.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (70ms) (801351)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (9ms) (430)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 10):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let x_4 = Mint_1[sum_0 <- x_3][shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_3] = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= p) -> (x_1 = x_2))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
}
Prove: 0 <= count_0.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (85936)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (12ms) (444)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 11):
Let x_1 = Mint_0[sum_0].
Let x_2 = count_0 * x.
Let x_3 = count_1 * x.
Let x_4 = Mint_1[sum_0 <- x_3][shift_sint32(a, p)].
Assume {
  Type: is_sint32(count_0) /\ is_sint32(count_1) /\ is_sint32(n) /\
      is_sint32(p) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(1 + p) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(sum_0.base) <= 0).
  (* Invariant *)
  Have: 0 <= p.
  (* Invariant *)
  Have: 0 <= count_1.
  (* Then *)
  Have: p < n.
  If x_4 = x
  Then {
    Have: (1 + count_1) = count_0.
    Have: Mint_1[sum_0 <- x + x_3] = Mint_0.
  }
  Else { Have: (count_1 = count_0) /\ (Mint_1[sum_0 <- x_3] = Mint_0). }
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= p) -> (x_1 = x_2))).
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(a, i)] = x) -> ((0 <= i) ->
      ((i <= p) -> (x_1 = x_2)))).
  (* Invariant *)
  Have: (-1) <= p.
  (* Invariant *)
  Have: 0 <= count_0.
}
Prove: x_1 = x_2.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (8ms) (447)

------------------------------------------------------------

Goal Establishment of Invariant (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 12) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/occurences_of_x_0003/occurences_of_x_merged.c, line 12) (2/2):
Effect at line 16
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/occurences_of_x_0003/occurences_of_x_merged.c:1: Warning: 
  No 'assigns' specification for function 'func'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/occurences_of_x_0003/occurences_of_x_merged.c:30: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
