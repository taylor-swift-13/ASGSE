[kernel] Parsing out/04_0005/04_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_main_loop_invariant_6_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_10_preserved (Qed 4ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_10_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main_loop_invariant_11_established (Qed 0.99ms) (Alt-Ergo)
[wp] [Timeout] typed_main_loop_invariant_13_established (Qed 1ms) (Z3)
[wp] Proved goals:   24 / 29
  Qed:              18
  Alt-Ergo 2.6.2:    5 (8ms-10ms)
  Z3 4.8.6:          1 (20ms)
  Timeout:           5
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 19):
Let x_1 = x + y.
Let x_2 = (y * (y - 1)) / 2.
Let x_3 = y_1 * (y_1 - 1).
Let x_4 = 1 + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_4) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_3.
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> (y_1 <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_2.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_2.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_1 <= i))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: (50 + x + y) <= ((y * x_4) / 2).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (128293)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 19):
Assume { Type: is_sint32(y). }
Prove: (-1) <= (y * (y - 1)).
Prover Z3 4.8.6 returns Valid (10ms) (32244)
Prover Alt-Ergo 2.6.2 returns Valid (10ms) (30)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 21):
Let x_1 = 1 + y.
Let x_2 = x + y.
Let x_3 = (y * (y - 1)) / 2.
Let x_4 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_4.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> (y_1 <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_3.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_2 <= i))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (50 + x + y) <= ((y * x_1) / 2).
}
Prove: x_2 < (x_1 * x_1).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (36109)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 21):
Assume { Type: is_sint32(y). (* Invariant *) Have: (-1) <= (y * (y - 1)). }
Prove: (-49) <= (y * y).
Prover Z3 4.8.6 returns Valid (10ms) (32149)
Prover Alt-Ergo 2.6.2 returns Valid (8ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 22):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * (y - 1)) / 2.
Let x_4 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_4.
  (* Invariant *)
  Have: (-1) <= x_4.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> (y_1 <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_3.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_1 <= i))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (50 + x + y) <= ((y * x_2) / 2).
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
}
Prove: x_1 < 0.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 24):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: x_1 < 0.
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> (y_1 <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
}
Prove: x_1 < x_3.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (35670)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (8ms) (71)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.87ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 26):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y_1) -> (y_1 <= (50 + i_1)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> (x_1 <= i_1))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
  (* Invariant *)
  Have: x_1 < 0.
  (* Invariant *)
  Have: x_1 < x_3.
}
Prove: (x + (2 * y)) < i.
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 26):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Goal *)
  When: (0 <= i) /\ (i < y).
  (* Invariant *)
  Have: (-49) <= (y * y).
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: y <= (50 + i).
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 27):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-49) <= (y * y).
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (y <= (50 + i)))).
}
Prove: 0 <= y.
Prover Z3 4.8.6 returns Unknown (Qed:0.99ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.99ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 28):
Let x_1 = x + y.
Let x_2 = 1 + y.
Let x_3 = (y * x_2) / 2.
Let x_4 = (y * (y - 1)) / 2.
Let x_5 = y_1 * (y_1 - 1).
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (-49) <= (y_1 * y_1).
  (* Invariant *)
  Have: (-99) <= x_5.
  (* Invariant *)
  Have: (-1) <= x_5.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y_1) -> (y_1 <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y_1.
  (* Invariant *)
  Have: 0 < y_1.
  (* Invariant *)
  Have: (50 + x) <= x_4.
  (* Invariant *)
  Have: x < (y * y).
  (* Invariant *)
  Have: x < 0.
  (* Invariant *)
  Have: x < x_4.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (x_1 <= i))).
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: (-50) <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: (50 + x + y) <= x_3.
  (* Invariant *)
  Have: x_1 < (x_2 * x_2).
  (* Invariant *)
  Have: x_1 < 0.
  (* Invariant *)
  Have: x_1 < x_3.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((x + (2 * y)) < i))).
}
Prove: (-50) <= x_1.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (8ms) (73)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 29):
Let x = y * (y - 1).
Assume {
  Type: is_sint32(y).
  (* Invariant *)
  Have: (-49) <= (y * y).
  (* Invariant *)
  Have: (-99) <= x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> (y <= (50 + i)))).
  (* Invariant *)
  Have: 0 <= y.
}
Prove: 0 < y.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/04_0005/04_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/04_0005/04_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Loop assigns (file out/04_0005/04_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/04_0005/04_merged.c:12: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
