[kernel] Parsing out/41_0001/41_merged.c (with preprocessing)
[kernel:typing:no-proto] out/41_0001/41_merged.c:19: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/41_0001/41_merged.c:16: Warning: 
  Neither code nor implicit assigns clause for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 17 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_7_established (Qed 2ms) (Z3)
[wp] Proved goals:   15 / 17
  Qed:              14
  Alt-Ergo 2.6.2:    1 (7ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 23):
Let x = -j_1.
Let x_1 = j - j_1.
Let x_2 = j - 1 - j_1.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(j) /\ is_sint32(j_1) /\
      is_sint32(k) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Then { (* Call 'unknown1' *) Have: 0 <= k. }
  Else { Have: k = 1. }
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: (((j - 2 - j_1) * x_2) / 2) = j_1.
  (* Invariant *)
  Have: ((x_1 * x_2) / 2) = j_1.
  (* Invariant *)
  Have: j <= (2 + j_1 + n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + j_1 + i) <= j) ->
      (((i * (1 + i)) / 2) = j_1))).
  (* Invariant *)
  Have: j_1 < j.
  (* Then *)
  Have: j <= (1 + j_1 + n).
}
Prove: false.
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 28):
Let x = 1 + i.
Let x_1 = (x * (2 + i)) / 2.
Let x_2 = (i * x) / 2.
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(i) /\ is_sint32(k) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_1 - 1 - i).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Pre-condition *)
  Have: 0 < n.
  If flag_0 != 0
  Then { (* Call 'unknown1' *) Have: 0 <= k. }
  Else { Have: k = 1. }
  (* Invariant *)
  Have: 0 < k.
  (* Invariant *)
  Have: x_1 = (1 + i + ((i * (i - 1)) / 2)).
  (* Invariant *)
  Have: x_1 = (1 + i + x_2).
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->
      (x_1 = (1 + i + ((i_2 * (1 + i_2)) / 2))))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: x_1 = x_2.
}
Prove: x_1 = ((i_1 * (1 + i_1)) / 2).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (36704)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (7ms) (52)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 29):
Assume {
  Type: is_sint32(flag_0) /\ is_sint32(k) /\ is_sint32(n).
  (* Residual *)
  When: flag_0 != 0.
  (* Pre-condition *)
  Have: 0 < n.
  (* Call 'unknown1' *)
  Have: 0 <= k.
}
Prove: 0 < k.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/41_0001/41_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/41_0001/41_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Loop assigns (file out/41_0001/41_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/41_0001/41_merged.c:5: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/41_0001/41_merged.c:16: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
