[kernel] Parsing out/sum_digits_0010/sum_digits_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 9 goals scheduled
[wp] Proved goals:    9 / 9
  Qed:               5
  Alt-Ergo 2.6.2:    4 (4ms-10ms)
------------------------------------------------------------
  Function func
------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 6):
Let x = num_0 % 10.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(sum_0) /\ is_sint32(x).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: 0 < num_0.
}
Prove: x <= 9.
Prover Z3 4.8.6 returns Valid (Qed:1ms) (33112)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (10ms) (57)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 7):
Let x = num_0 % 10.
Let x_1 = sum_0 + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(sum_0) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: 0 <= i_1.
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: x <= 9.
}
Prove: 0 <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (33632)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (4ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 8):
Let x = num_0 % 10.
Let x_1 = sum_0 + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(sum_0) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: x <= 9.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (0 <= x_1)).
}
Prove: 0 <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (33367)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (7ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 9):
Let x = num_0 % 10.
Let x_1 = sum_0 + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(sum_0) /\
      is_sint32(x) /\ is_sint32(x_1).
  (* Invariant *)
  Have: i <= 9.
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: x <= 9.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= x.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (33609)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (7ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0010/sum_digits_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/sum_digits_0010/sum_digits_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/sum_digits_0010/sum_digits_merged.c:1: Warning: 
  No 'assigns' specification for function 'func'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/sum_digits_0010/sum_digits_merged.c:23: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
