[kernel] Parsing out/sum_digits_0006/sum_digits_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/sum_digits_0006/sum_digits_merged.c:7: Warning: 
  Lambda-functions not yet implemented
[wp] out/sum_digits_0006/sum_digits_merged.c:7: Warning: 
  array type non-supported({ ℤ}ℤ)
[wp] out/sum_digits_0006/sum_digits_merged.c:7: Warning: 
  Lambda-functions not yet implemented
[wp] out/sum_digits_0006/sum_digits_merged.c:7: Warning: 
  array type non-supported({ ℤ}ℤ)
[wp] 11 goals scheduled
[wp] [Timeout] typed_func_loop_invariant_2_preserved (Qed 2ms) (Z3) (Stronger, 4 warnings)
[wp] [Timeout] typed_func_loop_invariant_2_established (Z3) (Stronger, 4 warnings)
[wp] [Timeout] typed_func_loop_invariant_3_preserved (Qed 5ms) (Z3) (Stronger, 4 warnings)
[wp] [Timeout] typed_func_loop_invariant_3_established (Qed 0.54ms) (Z3) (Stronger, 4 warnings)
[wp] Proved goals:    7 / 11
  Qed:               4
  Alt-Ergo 2.6.2:    2 (2ms-12ms)
  Z3 4.8.6:          1 (190ms)
  Timeout:           4
------------------------------------------------------------
  Function func
------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 6):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Let x = num_0 % 10.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(num_1) /\
      is_sint32(x) /\ is_sint32(w - w_1).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_1 <= i_1) -> ((i_1 % 10) = 0)).
  (* Invariant *)
  Have: 0 <= num_1.
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 9).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_0 <= i_1) -> ((i_1 % 10) = i)).
  (* Invariant *)
  Have: w_1 <= w.
  (* Invariant *)
  Have: 0 <= num_0.
  (* Then *)
  Have: 0 < num_0.
}
Prove: (0 <= x) /\ (x <= 9).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (35034)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 7):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Let x = num_0 % 10.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(num_1) /\
      is_sint32(sum_0) /\ is_sint32(x) /\ is_sint32(sum_0 + x).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_1 <= i_1) -> ((i_1 % 10) = 0)).
  (* Invariant *)
  Have: 0 <= num_1.
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 9).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_0 <= i_1) -> ((i_1 % 10) = i)).
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= num_0.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 9).
}
Prove: (sum_0 + w + x) = w_1.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 7):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Prove: w = w_1.
Prover Z3 4.8.6 returns Timeout (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 8):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Let x = num_0 % 10.
Let x_1 = num_0 / 10.
Let x_2 = -w_1.
Assume {
  Type: is_sint32(i_1) /\ is_sint32(num_0) /\ is_sint32(num_1) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(w - w_1) /\
      is_sint32(w - w_1 - x).
  (* Goal *)
  When: x_1 <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((num_1 <= i_2) -> ((i_2 % 10) = 0)).
  (* Invariant *)
  Have: 0 <= num_1.
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= 9).
  (* Invariant *)
  Have: forall i_2 : Z. ((num_0 <= i_2) -> ((i_2 % 10) = i_1)).
  (* Invariant *)
  Have: (w_1 + x) <= w.
  (* Invariant *)
  Have: 0 <= num_0.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 9).
}
Prove: x = (i % 10).
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 8):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Assume { Type: is_sint32(num_0). (* Goal *) When: num_0 <= i. }
Prove: (i % 10) = 0.
Prover Z3 4.8.6 returns Timeout (Qed:0.54ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.54ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 9):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Let x = num_0 / 10.
Let x_1 = num_0 % 10.
Let x_2 = sum_0 + x_1.
Assume {
  Type: is_sint32(i) /\ is_sint32(num_0) /\ is_sint32(num_1) /\
      is_sint32(sum_0) /\ is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_1 <= i_1) -> ((i_1 % 10) = 0)).
  (* Invariant *)
  Have: 0 <= num_1.
  (* Invariant *)
  Have: (0 <= i) /\ (i <= 9).
  (* Invariant *)
  Have: forall i_1 : Z. ((num_0 <= i_1) -> ((i_1 % 10) = i)).
  (* Invariant *)
  Have: 0 <= sum_0.
  (* Invariant *)
  Have: 0 <= num_0.
  (* Then *)
  Have: 0 < num_0.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 <= 9).
  (* Invariant *)
  Have: forall i_1 : Z. ((x <= i_1) -> ((i_1 % 10) = x_1)).
}
Prove: 0 <= x_2.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (2ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 9):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 10):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sum_digits_0006/sum_digits_merged.c, line 10):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Assume {
  Type: is_sint32(num_0).
  (* Invariant *)
  Have: forall i : Z. ((num_0 <= i) -> ((i % 10) = 0)).
}
Prove: 0 <= num_0.
Prover Z3 4.8.6 returns Valid (190ms) (1003075)

------------------------------------------------------------

Goal Loop assigns (file out/sum_digits_0006/sum_digits_merged.c, line 11):
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: array type non-supported({ ℤ}ℤ)
out/sum_digits_0006/sum_digits_merged.c:7: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Lambda-functions not yet implemented
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/sum_digits_0006/sum_digits_merged.c:1: Warning: 
  No 'assigns' specification for function 'func'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/sum_digits_0006/sum_digits_merged.c:24: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
