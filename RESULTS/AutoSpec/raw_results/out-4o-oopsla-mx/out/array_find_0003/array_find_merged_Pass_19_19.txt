[kernel] Parsing out/array_find_0003/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 19 goals scheduled
[wp] Proved goals:   19 / 19
  Qed:              11
  Alt-Ergo 2.6.2:    7 (5ms-12ms-16ms)
  Z3 4.8.6:          1 (30ms)
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 8):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(x) /\ is_sint32(1 + i_1) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_1 = (-1)) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: ((i_1 = (-1)) ->
      (forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
       (Mint_0[shift_sint32(arr_0, i_4)] != x))))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((i_1 <= i_3) ->
      (Mint_0[shift_sint32(arr_0, i_3)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: x_1 != x.
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (180925)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (12ms) (66)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 9):
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_1)] = x)))).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
       (Mint_0[shift_sint32(arr_0, i_3)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
       (Mint_0[shift_sint32(arr_0, i_3)] != x))))).
  (* Invariant *)
  Have: ((i <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(arr_0, i_3)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 < n) ->
       (Mint_0[shift_sint32(arr_0, i_3)] != x))))).
}
Prove: exists i_3 : Z. ((i < i_3) -> ((i_3 < n) ->
    ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (82961)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (5ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 9):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i : Z. ((0 <= i) -> ((i < n) ->
       (Mint_0[shift_sint32(arr_0, i)] != x))))).
}
Prove: exists i : Z. ((0 <= i) -> ((i < n) ->
    ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i)] = x)))).
Prover Z3 4.8.6 returns Valid (Qed:1ms) (30ms) (158546)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 10):
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_1)] = x)))).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) ->
       (Mint_0[shift_sint32(arr_0, i_4)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) ->
       (Mint_0[shift_sint32(arr_0, i_4)] != x))))).
  (* Invariant *)
  Have: ((i <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < n) ->
       (Mint_0[shift_sint32(arr_0, i_4)] != x))))).
  (* Invariant *)
  Have: ((i_3 < n) -> ((i < i_3) ->
      ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
}
Prove: exists i_4 : Z. ((0 <= i_4) -> ((i_4 < n) ->
    ((Mint_0[shift_sint32(arr_0, i_4)] = x) \/
     (forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (Mint_0[shift_sint32(arr_0, i_5)] != x))))))).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (60ms) (554659)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (13ms) (64)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 12):
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_1)] = x)))).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) ->
       (Mint_0[shift_sint32(arr_0, i_5)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) ->
       (Mint_0[shift_sint32(arr_0, i_5)] != x))))).
  (* Invariant *)
  Have: ((i <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (Mint_0[shift_sint32(arr_0, i_5)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_5 : Z. ((0 <= i_5) -> ((i_5 < n) ->
       (Mint_0[shift_sint32(arr_0, i_5)] != x))))).
  (* Invariant *)
  Have: ((i_3 < n) -> ((i < i_3) ->
      ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) ->
      ((Mint_0[shift_sint32(arr_0, i_4)] = x) \/
       (forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
        (Mint_0[shift_sint32(arr_0, i_5)] != x))))))).
}
Prove: exists i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
    ((Mint_0[shift_sint32(arr_0, i_5)] = x) \/
     (forall i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) ->
      (Mint_0[shift_sint32(arr_0, i_6)] != x))))))).
Prover Z3 4.8.6 returns Valid (Qed:5ms) (60ms) (488730)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (16ms) (170)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 13):
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((0 <= i_1) -> ((i_1 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_1)] = x)))).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: ((i <= i_2) -> ((i_2 < n) ->
      ((n = i) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) ->
      (Mint_0[shift_sint32(arr_0, i_6)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: ((i_3 < n) -> ((i < i_3) ->
      ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: ((0 <= i_4) -> ((i_4 < n) ->
      ((Mint_0[shift_sint32(arr_0, i_4)] = x) \/
       (forall i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) ->
        (Mint_0[shift_sint32(arr_0, i_6)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 <= i) ->
      ((Mint_0[shift_sint32(arr_0, i_5)] = x) \/
       (forall i_6 : Z. ((i_6 <= i) -> ((0 <= i_6) ->
        (Mint_0[shift_sint32(arr_0, i_6)] != x))))))).
}
Prove: exists i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
    ((Mint_0[shift_sint32(arr_0, i_6)] = x) \/
     (forall i_7 : Z. ((i_7 <= i) -> ((0 <= i_7) ->
      (Mint_0[shift_sint32(arr_0, i_7)] != x))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (13ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 14):
Let x_1 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(x) /\ is_sint32(1 + i_1) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((i_2 <= i_1) -> ((0 <= i_2) ->
      ((i_1 = (-1)) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: ((i_3 <= i_1) -> ((i_1 <= i_3) ->
      (Mint_0[shift_sint32(arr_0, i_3)] = x))).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Else *)
  Have: x_1 != x.
  (* Invariant *)
  Have: forall i_4 : Z. ((i_4 <= i_1) -> ((0 <= i_4) ->
      (Mint_0[shift_sint32(arr_0, i_4)] != x))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (81846)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (12ms) (54)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 15):
Let x_1 = 1 + i_1.
Let x_2 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: ((n = i_1) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: ((i_1 <= i_3) -> ((i_3 < n) ->
      ((n = i_1) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_8)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_2 != x.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: ((i_4 < n) -> ((i_1 < i_4) ->
      ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_4)] = x)))).
  (* Invariant *)
  Have: ((0 <= i_5) -> ((i_5 < n) ->
      ((Mint_0[shift_sint32(arr_0, i_5)] = x) \/
       (forall i_8 : Z. ((i_8 <= i_1) -> ((0 <= i_8) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_6) -> ((i_6 <= i_1) ->
      ((Mint_0[shift_sint32(arr_0, i_6)] = x) \/
       (forall i_8 : Z. ((i_8 <= i_1) -> ((0 <= i_8) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 < n) ->
      ((Mint_0[shift_sint32(arr_0, i_7)] = x) \/
       (forall i_8 : Z. ((i_8 <= i_1) -> ((0 <= i_8) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x))))))).
}
Prove: Mint_0[shift_sint32(arr_0, i)] != x.
Prover Z3 4.8.6 returns Valid (Qed:4ms) (20ms) (187802)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (13ms) (99)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0003/array_find_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0003/array_find_merged.c:4: Warning: 
  No 'assigns' specification for function 'array_find'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_find_0003/array_find_merged.c:28: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
