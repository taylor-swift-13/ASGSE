[kernel] Parsing out/array_find_0003/array_find_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] [Timeout] typed_array_find_loop_invariant_2_established (Qed 1ms) (Alt-Ergo)
[wp] [Timeout] typed_array_find_loop_invariant_3_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_array_find_loop_invariant_8_established (Qed 2ms) (Alt-Ergo)
[wp] Proved goals:   22 / 25
  Qed:              12
  Alt-Ergo 2.6.2:   10 (11ms-29ms-162ms)
  Timeout:           3
------------------------------------------------------------
  Function array_find
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 8):
Let x = Mint_0[shift_sint32(arr_0, i)].
Let x_1 = Mint_0[shift_sint32(arr_0, i_2)].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(1 + i_2) /\ is_sint32(x_1) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i_2).
  (* Invariant *)
  Have: (-1) <= i_2.
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x) ->
      ((i_7 <= i_2) -> ((0 <= i_7) -> (x <= i_2)))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) ->
      ((i_2 = (-1)) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_4)] = x) /\ (0 <= i_4) /\ (i_4 < i).
  (* Invariant *)
  Have: ((i_2 = (-1)) ->
      (forall i_7 : Z. ((i_7 <= i_2) -> ((0 <= i_7) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x) ->
      ((i_7 <= i_2) -> ((i_2 <= i_7) -> (x <= i_2)))).
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((i_2 <= i_5) ->
      (x = Mint_0[shift_sint32(arr_0, i_5)]))).
  (* Invariant *)
  Have: ((0 <= i_6) /\ (i_6 < i_2)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_6)]) ->
       (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_6) ->
        (Mint_0[shift_sint32(arr_0, i_7)] != x)))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_2) ->
      (Mint_0[shift_sint32(arr_0, i_7)] != x))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: x != x_1.
}
Prove: x != Mint_0[shift_sint32(arr_0, i_1)].
Prover Z3 4.8.6 returns Valid (Qed:7ms) (90ms) (891049)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (14ms) (96)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 9):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i : Z. ((0 <= i) -> ((i < n) ->
       (Mint_0[shift_sint32(arr_0, i)] != x))))).
}
Prove: 0 <= n.
Prover Z3 4.8.6 returns Unknown (Qed:1ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 10):
Let x = 1 + i_1.
Let x_1 = Mint_0[shift_sint32(arr_0, i)].
Let x_2 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (x_1 != Mint_0[shift_sint32(arr_0, i_2)]) /\ (i_2 < n) /\
      (i_1 < i_2).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x_1) ->
      ((0 <= i_7) -> ((i_7 < n) -> (x_1 < n)))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x_1)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_4)] = x_1) /\ (0 <= i_4) /\ (i_4 < i).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
  (* Invariant *)
  Have: ((n = i_1) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x_1) ->
      ((i_1 <= i_7) -> ((i_7 < n) -> (x_1 < n)))).
  (* Invariant *)
  Have: ((i_1 <= i_5) -> ((i_5 < n) ->
      ((n = i_1) \/ (x_1 = Mint_0[shift_sint32(arr_0, i_5)])))).
  (* Invariant *)
  Have: ((0 <= i_6) /\ (i_6 < i_1)) <->
      (((x_1 = Mint_0[shift_sint32(arr_0, i_6)]) ->
       (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_6) ->
        (Mint_0[shift_sint32(arr_0, i_7)] != x_1)))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_7)] != x_1))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x_2.
  (* Invariant *)
  Have: ((x = n) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
}
Prove: x_1 < n.
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (90488)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (15ms) (89)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 10):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (Mint_0[shift_sint32(arr_0, i)] != x) /\ (0 <= i) /\ (i < n).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) ->
       (Mint_0[shift_sint32(arr_0, i_1)] != x))))).
  (* Invariant *)
  Have: 0 <= n.
}
Prove: x < n.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 11):
Let x = Mint_0[shift_sint32(arr_0, i_1)].
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((Mint_0[shift_sint32(arr_0, i_6)] != x) ->
      ((0 <= i_6) -> ((i_6 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_3)] = x) /\ (0 <= i_3) /\ (i_3 < i_1).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((Mint_0[shift_sint32(arr_0, i_6)] != x) ->
      ((i <= i_6) -> ((i_6 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i <= i_4) -> ((i_4 < n) ->
      ((n = i) \/ (x = Mint_0[shift_sint32(arr_0, i_4)])))).
  (* Invariant *)
  Have: ((0 <= i_5) /\ (i_5 < i)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_5)]) ->
       (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_5) ->
        (Mint_0[shift_sint32(arr_0, i_6)] != x)))))).
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i) ->
      (Mint_0[shift_sint32(arr_0, i_6)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x != x_2.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_6 : Z. ((0 <= i_6) -> ((i_6 < n) ->
       (Mint_0[shift_sint32(arr_0, i_6)] != x))))).
  (* Invariant *)
  Have: forall i_6 : Z. ((Mint_0[shift_sint32(arr_0, i_6)] != x) ->
      ((i < i_6) -> ((i_6 < n) -> (x < n)))).
}
Prove: exists i_6 : Z. ((i < i_6) -> ((i_6 < n) ->
    ((x_1 = n) \/ (Mint_0[shift_sint32(arr_0, i_6)] = x)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (13ms) (87)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 11):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i : Z. ((0 <= i) -> ((i < n) ->
       (Mint_0[shift_sint32(arr_0, i)] != x))))).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i : Z. ((Mint_0[shift_sint32(arr_0, i)] != x) -> ((0 <= i) ->
      ((i < n) -> (x < n)))).
}
Prove: exists i : Z. ((0 <= i) -> ((i < n) ->
    ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i)] = x)))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (162ms) (3649)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 12):
Let x = 1 + i_1.
Let x_1 = Mint_0[shift_sint32(arr_0, i)].
Let x_2 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x_1) ->
      ((0 <= i_7) -> ((i_7 < n) -> (x_1 < n)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x_1)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_3)] = x_1) /\ (0 <= i_3) /\ (i_3 < i).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
  (* Invariant *)
  Have: ((n = i_1) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x_1) ->
      ((i_1 <= i_7) -> ((i_7 < n) -> (x_1 < n)))).
  (* Invariant *)
  Have: ((i_1 <= i_4) -> ((i_4 < n) ->
      ((n = i_1) \/ (x_1 = Mint_0[shift_sint32(arr_0, i_4)])))).
  (* Invariant *)
  Have: ((0 <= i_5) /\ (i_5 < i_1)) <->
      (((x_1 = Mint_0[shift_sint32(arr_0, i_5)]) ->
       (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_5) ->
        (Mint_0[shift_sint32(arr_0, i_7)] != x_1)))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((0 <= i_7) -> ((i_7 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_7)] != x_1))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x_1 != x_2.
  (* Invariant *)
  Have: ((x = n) ->
      (forall i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
       (Mint_0[shift_sint32(arr_0, i_7)] != x_1))))).
  (* Invariant *)
  Have: forall i_7 : Z. ((Mint_0[shift_sint32(arr_0, i_7)] != x_1) ->
      ((i_1 < i_7) -> ((i_7 < n) -> (x_1 < n)))).
  (* Invariant *)
  Have: ((i_6 < n) -> ((i_1 < i_6) ->
      ((x = n) \/ (x_1 = Mint_0[shift_sint32(arr_0, i_6)])))).
}
Prove: exists i_7 : Z. ((0 <= i_7) -> ((i_7 < n) ->
    ((Mint_0[shift_sint32(arr_0, i_7)] = x_1) \/
     (forall i_8 : Z. ((i_8 <= i_1) -> ((0 <= i_8) ->
      (Mint_0[shift_sint32(arr_0, i_8)] != x_1))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (11ms) (92)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.94ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 14):
Let x = Mint_0[shift_sint32(arr_0, i_1)].
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((Mint_0[shift_sint32(arr_0, i_8)] != x) ->
      ((0 <= i_8) -> ((i_8 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_3)] = x) /\ (0 <= i_3) /\ (i_3 < i_1).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_8 : Z. ((Mint_0[shift_sint32(arr_0, i_8)] != x) ->
      ((i <= i_8) -> ((i_8 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i <= i_4) -> ((i_4 < n) ->
      ((n = i) \/ (x = Mint_0[shift_sint32(arr_0, i_4)])))).
  (* Invariant *)
  Have: ((0 <= i_5) /\ (i_5 < i)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_5)]) ->
       (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_5) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x)))))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i) ->
      (Mint_0[shift_sint32(arr_0, i_8)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x != x_2.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < n) ->
       (Mint_0[shift_sint32(arr_0, i_8)] != x))))).
  (* Invariant *)
  Have: forall i_8 : Z. ((Mint_0[shift_sint32(arr_0, i_8)] != x) ->
      ((i < i_8) -> ((i_8 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_6 < n) -> ((i < i_6) ->
      ((x_1 = n) \/ (x = Mint_0[shift_sint32(arr_0, i_6)])))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 < n) ->
      ((x = Mint_0[shift_sint32(arr_0, i_7)]) \/
       (forall i_8 : Z. ((i_8 <= i) -> ((0 <= i_8) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x))))))).
}
Prove: exists i_8 : Z. ((i_8 <= i) -> ((0 <= i_8) ->
    ((Mint_0[shift_sint32(arr_0, i_8)] = x) \/
     (forall i_9 : Z. ((i_9 <= i) -> ((0 <= i_9) ->
      (Mint_0[shift_sint32(arr_0, i_9)] != x))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (12ms) (102)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 15):
Let x = Mint_0[shift_sint32(arr_0, i_1)].
Let x_1 = 1 + i.
Let x_2 = Mint_0[shift_sint32(arr_0, i)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_9 : Z. ((Mint_0[shift_sint32(arr_0, i_9)] != x) ->
      ((0 <= i_9) -> ((i_9 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_3)] = x) /\ (0 <= i_3) /\ (i_3 < i_1).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < n) ->
       (Mint_0[shift_sint32(arr_0, i_9)] != x))))).
  (* Invariant *)
  Have: ((n = i) ->
      (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < n) ->
       (Mint_0[shift_sint32(arr_0, i_9)] != x))))).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_9 : Z. ((Mint_0[shift_sint32(arr_0, i_9)] != x) ->
      ((i <= i_9) -> ((i_9 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i <= i_4) -> ((i_4 < n) ->
      ((n = i) \/ (x = Mint_0[shift_sint32(arr_0, i_4)])))).
  (* Invariant *)
  Have: ((0 <= i_5) /\ (i_5 < i)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_5)]) ->
       (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i_5) ->
        (Mint_0[shift_sint32(arr_0, i_9)] != x)))))).
  (* Invariant *)
  Have: forall i_9 : Z. ((0 <= i_9) -> ((i_9 < i) ->
      (Mint_0[shift_sint32(arr_0, i_9)] != x))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
  (* Else *)
  Have: x != x_2.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_9 : Z. ((0 <= i_9) -> ((i_9 < n) ->
       (Mint_0[shift_sint32(arr_0, i_9)] != x))))).
  (* Invariant *)
  Have: forall i_9 : Z. ((Mint_0[shift_sint32(arr_0, i_9)] != x) ->
      ((i < i_9) -> ((i_9 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_6 < n) -> ((i < i_6) ->
      ((x_1 = n) \/ (x = Mint_0[shift_sint32(arr_0, i_6)])))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 < n) ->
      ((x = Mint_0[shift_sint32(arr_0, i_7)]) \/
       (forall i_9 : Z. ((i_9 <= i) -> ((0 <= i_9) ->
        (Mint_0[shift_sint32(arr_0, i_9)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 <= i) ->
      ((x = Mint_0[shift_sint32(arr_0, i_8)]) \/
       (forall i_9 : Z. ((i_9 <= i) -> ((0 <= i_9) ->
        (Mint_0[shift_sint32(arr_0, i_9)] != x))))))).
}
Prove: exists i_9 : Z. ((i_9 <= i) /\ (0 <= i_9)) <->
    (((Mint_0[shift_sint32(arr_0, i_9)] = x) ->
     (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_9) ->
      (Mint_0[shift_sint32(arr_0, i_10)] != x)))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (15ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 15):
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_1 : Z. ((0 <= i_1) -> ((i_1 < n) ->
       (Mint_0[shift_sint32(arr_0, i_1)] != x))))).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((Mint_0[shift_sint32(arr_0, i_1)] != x) ->
      ((0 <= i_1) -> ((i_1 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i) -> ((i < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i)] = x)))).
}
Prove: exists i_1 : Z. (Mint_0[shift_sint32(arr_0, i_1)] = x) /\
    (exists i_2 : Z. (Mint_0[shift_sint32(arr_0, i_2)] = x) /\ (0 <= i_2) /\
     (i_2 < i_1)).
Prover Z3 4.8.6 returns Unknown (Qed:2ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 16):
Let x = Mint_0[shift_sint32(arr_0, i)].
Let x_1 = 1 + i_1.
Let x_2 = Mint_0[shift_sint32(arr_0, i_1)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_10 : Z. ((Mint_0[shift_sint32(arr_0, i_10)] != x) ->
      ((0 <= i_10) -> ((i_10 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i_2) -> ((i_2 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_2)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_3)] = x) /\ (0 <= i_3) /\ (i_3 < i).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < n) ->
       (Mint_0[shift_sint32(arr_0, i_10)] != x))))).
  (* Invariant *)
  Have: ((n = i_1) ->
      (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < n) ->
       (Mint_0[shift_sint32(arr_0, i_10)] != x))))).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_10 : Z. ((Mint_0[shift_sint32(arr_0, i_10)] != x) ->
      ((i_1 <= i_10) -> ((i_10 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_1 <= i_4) -> ((i_4 < n) ->
      ((n = i_1) \/ (x = Mint_0[shift_sint32(arr_0, i_4)])))).
  (* Invariant *)
  Have: ((0 <= i_5) /\ (i_5 < i_1)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_5)]) ->
       (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_5) ->
        (Mint_0[shift_sint32(arr_0, i_10)] != x)))))).
  (* Invariant *)
  Have: forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_1) ->
      (Mint_0[shift_sint32(arr_0, i_10)] != x))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Then *)
  Have: i_1 < n.
  (* Else *)
  Have: x != x_2.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < n) ->
       (Mint_0[shift_sint32(arr_0, i_10)] != x))))).
  (* Invariant *)
  Have: forall i_10 : Z. ((Mint_0[shift_sint32(arr_0, i_10)] != x) ->
      ((i_1 < i_10) -> ((i_10 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_6 < n) -> ((i_1 < i_6) ->
      ((x_1 = n) \/ (x = Mint_0[shift_sint32(arr_0, i_6)])))).
  (* Invariant *)
  Have: ((0 <= i_7) -> ((i_7 < n) ->
      ((x = Mint_0[shift_sint32(arr_0, i_7)]) \/
       (forall i_10 : Z. ((i_10 <= i_1) -> ((0 <= i_10) ->
        (Mint_0[shift_sint32(arr_0, i_10)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 <= i_1) ->
      ((x = Mint_0[shift_sint32(arr_0, i_8)]) \/
       (forall i_10 : Z. ((i_10 <= i_1) -> ((0 <= i_10) ->
        (Mint_0[shift_sint32(arr_0, i_10)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_9) /\ (i_9 <= i_1)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_9)]) ->
       (forall i_10 : Z. ((0 <= i_10) -> ((i_10 < i_9) ->
        (Mint_0[shift_sint32(arr_0, i_10)] != x)))))).
}
Prove: exists i_10 : Z. ((0 <= i_10) -> ((i_10 < n) ->
    ((Mint_0[shift_sint32(arr_0, i_10)] = x) \/
     (forall i_11 : Z. ((i_11 <= i_1) -> ((0 <= i_11) ->
      (Mint_0[shift_sint32(arr_0, i_11)] != x))))))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (17ms) (112)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 17):
Let x = Mint_0[shift_sint32(arr_0, i)].
Let x_1 = Mint_0[shift_sint32(arr_0, i_2)].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(1 + i_2) /\ is_sint32(x_1) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i_2).
  (* Invariant *)
  Have: (-1) <= i_2.
  (* Invariant *)
  Have: forall i_8 : Z. ((Mint_0[shift_sint32(arr_0, i_8)] != x) ->
      ((i_8 <= i_2) -> ((0 <= i_8) -> (x <= i_2)))).
  (* Invariant *)
  Have: ((i_3 <= i_2) -> ((0 <= i_3) ->
      ((i_2 = (-1)) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_4)] = x) /\ (0 <= i_4) /\ (i_4 < i).
  (* Invariant *)
  Have: forall i_8 : Z. ((Mint_0[shift_sint32(arr_0, i_8)] != x) ->
      ((i_8 <= i_2) -> ((i_2 <= i_8) -> (x <= i_2)))).
  (* Invariant *)
  Have: ((i_5 <= i_2) -> ((i_2 <= i_5) ->
      (x = Mint_0[shift_sint32(arr_0, i_5)]))).
  (* Invariant *)
  Have: ((0 <= i_6) /\ (i_6 < i_2)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_6)]) ->
       (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_6) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x)))))).
  (* Invariant *)
  Have: forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_2) ->
      (Mint_0[shift_sint32(arr_0, i_8)] != x))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Else *)
  Have: x != x_1.
  (* Invariant *)
  Have: forall i_8 : Z. ((i_8 <= i_2) -> ((0 <= i_8) ->
      (Mint_0[shift_sint32(arr_0, i_8)] != x))).
  (* Invariant *)
  Have: ((0 <= i_7) /\ (i_7 <= i_2)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_7)]) ->
       (forall i_8 : Z. ((0 <= i_8) -> ((i_8 < i_7) ->
        (Mint_0[shift_sint32(arr_0, i_8)] != x)))))).
}
Prove: x != Mint_0[shift_sint32(arr_0, i_1)].
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (90809)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (19ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 18):
Let x = Mint_0[shift_sint32(arr_0, i)].
Let x_1 = 1 + i_2.
Let x_2 = Mint_0[shift_sint32(arr_0, i_2)].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i_2).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: forall i_12 : Z. ((Mint_0[shift_sint32(arr_0, i_12)] != x) ->
      ((0 <= i_12) -> ((i_12 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((0 <= i_3) -> ((i_3 < n) ->
      ((n = 0) \/ (Mint_0[shift_sint32(arr_0, i_3)] = x)))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(arr_0, i_4)] = x) /\ (0 <= i_4) /\ (i_4 < i).
  (* Invariant *)
  Have: ((n = 0) ->
      (forall i_12 : Z. ((0 <= i_12) -> ((i_12 < n) ->
       (Mint_0[shift_sint32(arr_0, i_12)] != x))))).
  (* Invariant *)
  Have: ((n = i_2) ->
      (forall i_12 : Z. ((0 <= i_12) -> ((i_12 < n) ->
       (Mint_0[shift_sint32(arr_0, i_12)] != x))))).
  (* Invariant *)
  Have: i_2 <= n.
  (* Invariant *)
  Have: forall i_12 : Z. ((Mint_0[shift_sint32(arr_0, i_12)] != x) ->
      ((i_2 <= i_12) -> ((i_12 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_2 <= i_5) -> ((i_5 < n) ->
      ((n = i_2) \/ (x = Mint_0[shift_sint32(arr_0, i_5)])))).
  (* Invariant *)
  Have: ((0 <= i_6) /\ (i_6 < i_2)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_6)]) ->
       (forall i_12 : Z. ((0 <= i_12) -> ((i_12 < i_6) ->
        (Mint_0[shift_sint32(arr_0, i_12)] != x)))))).
  (* Invariant *)
  Have: forall i_12 : Z. ((0 <= i_12) -> ((i_12 < i_2) ->
      (Mint_0[shift_sint32(arr_0, i_12)] != x))).
  (* Invariant *)
  Have: 0 <= i_2.
  (* Then *)
  Have: i_2 < n.
  (* Else *)
  Have: x != x_2.
  (* Invariant *)
  Have: ((x_1 = n) ->
      (forall i_12 : Z. ((0 <= i_12) -> ((i_12 < n) ->
       (Mint_0[shift_sint32(arr_0, i_12)] != x))))).
  (* Invariant *)
  Have: forall i_12 : Z. ((Mint_0[shift_sint32(arr_0, i_12)] != x) ->
      ((i_2 < i_12) -> ((i_12 < n) -> (x < n)))).
  (* Invariant *)
  Have: ((i_7 < n) -> ((i_2 < i_7) ->
      ((x_1 = n) \/ (x = Mint_0[shift_sint32(arr_0, i_7)])))).
  (* Invariant *)
  Have: ((0 <= i_8) -> ((i_8 < n) ->
      ((x = Mint_0[shift_sint32(arr_0, i_8)]) \/
       (forall i_12 : Z. ((i_12 <= i_2) -> ((0 <= i_12) ->
        (Mint_0[shift_sint32(arr_0, i_12)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_9) -> ((i_9 <= i_2) ->
      ((x = Mint_0[shift_sint32(arr_0, i_9)]) \/
       (forall i_12 : Z. ((i_12 <= i_2) -> ((0 <= i_12) ->
        (Mint_0[shift_sint32(arr_0, i_12)] != x))))))).
  (* Invariant *)
  Have: ((0 <= i_10) /\ (i_10 <= i_2)) <->
      (((x = Mint_0[shift_sint32(arr_0, i_10)]) ->
       (forall i_12 : Z. ((0 <= i_12) -> ((i_12 < i_10) ->
        (Mint_0[shift_sint32(arr_0, i_12)] != x)))))).
  (* Invariant *)
  Have: ((0 <= i_11) -> ((i_11 < n) ->
      ((x = Mint_0[shift_sint32(arr_0, i_11)]) \/
       (forall i_12 : Z. ((i_12 <= i_2) -> ((0 <= i_12) ->
        (Mint_0[shift_sint32(arr_0, i_12)] != x))))))).
}
Prove: x != Mint_0[shift_sint32(arr_0, i_1)].
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (16ms) (148)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_find_0003/array_find_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_find_0003/array_find_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_find_0003/array_find_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_find_0003/array_find_merged.c:4: Warning: 
  No 'assigns' specification for function 'array_find'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_find_0003/array_find_merged.c:31: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
