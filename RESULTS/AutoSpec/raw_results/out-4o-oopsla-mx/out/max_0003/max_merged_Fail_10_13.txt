[kernel] Parsing out/max_0003/max_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] out/max_0003/max_merged.c:6: Warning: 
  Concretization for comprehension sets not implemented yet
[wp] 13 goals scheduled
[wp] [Timeout] typed_arraymax_loop_invariant_established (Qed 0.69ms) (Alt-Ergo) (Stronger)
[wp] [Timeout] typed_arraymax_loop_invariant_preserved (Qed 13ms) (Z3) (Stronger)
[wp] [Timeout] typed_arraymax_loop_invariant_2_established (Qed 1ms) (Z3) (Stronger)
[wp] Proved goals:   10 / 13
  Qed:               8
  Alt-Ergo 2.6.2:    2 (14ms-18ms)
  Timeout:           3
------------------------------------------------------------
  Function arraymax
------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 6):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let x_2 = Mint_0[shift_sint32(a, 0)].
Let x_3 = Mint_0[shift_sint32(a, i_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(max_0) /\ is_sint32(n) /\ is_sint32(x_2) /\
      is_sint32(x_1) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Initializer *)
  Init: x_3 = x_2.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(a, i_3)] <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
}
Prove: w = max_0.
Prover Z3 4.8.6 returns Timeout (Qed:13ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:13ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 6):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Let x = Mint_0[shift_sint32(a, 0)].
Assume { Type: is_sint32(x). (* Heap *) Type: region(a.base) <= 0. }
Prove: x = w.
Prover Z3 4.8.6 returns Unknown (Qed:0.69ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.69ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 7):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 7):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Assume { Type: is_sint32(n). }
Prove: 0 < n.
Prover Z3 4.8.6 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 8):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Let x = Mint_0[shift_sint32(a, i_2)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = Mint_0[shift_sint32(a, 0)].
Let x_3 = Mint_0[shift_sint32(a, i_3)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(max_0) /\ is_sint32(n) /\
      is_sint32(1 + i_1) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x) /\ is_sint32(x_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Initializer *)
  Init: x_3 = x_2.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(a, i_4)] <= x))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (293975)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (18ms) (149)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 8):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 9):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let x_2 = Mint_0[shift_sint32(a, 0)].
Let x_3 = Mint_0[shift_sint32(a, i_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(max_0) /\ is_sint32(n) /\
      is_sint32(1 + i) /\ is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Initializer *)
  Init: x_3 = x_2.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(a, i_3)] <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= max_0))).
}
Prove: exists i_3 : Z. (Mint_0[shift_sint32(a, i_3)] = max_0) /\
    (i_3 <= i) /\ (0 <= i_3).
Prover Z3 4.8.6 returns Valid (Qed:19ms) (20ms) (83690)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (14ms) (106)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 9):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 10):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 10):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0003/max_merged.c, line 11):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0003/max_merged.c, line 11):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Loop assigns (file out/max_0003/max_merged.c, line 12):
out/max_0003/max_merged.c:6: warning from wp:
 - Warning: Hide sub-term definition
   Reason: Concretization for comprehension sets not implemented yet
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/max_0003/max_merged.c:1: Warning: 
  No 'assigns' specification for function 'arraymax'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/max_0003/max_merged.c:26: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
