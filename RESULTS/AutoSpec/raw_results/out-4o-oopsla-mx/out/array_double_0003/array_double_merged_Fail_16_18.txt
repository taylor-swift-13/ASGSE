[kernel] Parsing out/array_double_0003/array_double_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 18 goals scheduled
[wp] [Timeout] typed_arrayDouble_loop_invariant_2_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_arrayDouble_loop_invariant_5_preserved (Qed 9ms) (Alt-Ergo)
[wp] Proved goals:   16 / 18
  Qed:              10
  Alt-Ergo 2.6.2:    6 (11ms-29ms)
  Timeout:           2
------------------------------------------------------------
  Function arrayDouble
------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 5):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\
      is_sint32(a_1[shift_sint32(a, p)]).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (a_1[shift_sint32(a, i)] = (2 * i)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (a_1[shift_sint32(a, i)] = (2 * (if (i = 0) then 0 else i))))).
  (* Invariant *)
  Have: forall i : Z. let a_2 = a_1[shift_sint32(a, i)] in ((0 <= i) ->
      ((i < p) -> (a_2 = (2 * (a_2 / 2))))).
  (* Invariant *)
  Have: forall i : Z. let a_2 = shift_sint32(a, i) in ((0 <= i) ->
      ((i < p) -> (a_1[a_2] = (2 * Mint_0[a_2])))).
  (* Invariant *)
  Have: forall i : Z. let a_2 = a_1[shift_sint32(a, i)] in ((0 <= i) ->
      ((i < p) -> (a_2 = (2 * (if (i = 0) then 0 else (a_2 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
}
Prove: p < n.
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (84101)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (11ms) (162)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 5):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 6):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_4 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_4 = (2 * (a_4 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_4 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_4] = (2 * Mint_0[a_4])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_4 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_4 = (2 * (if (i_1 = 0) then 0 else (a_4 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
}
Prove: a_1[a_2 <- 2 * a_3][shift_sint32(a, i)] = (2 * i).
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 7):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = a_1[a_2 <- 2 * a_3].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_5 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_5 = (2 * (a_5 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_5 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_5] = (2 * Mint_0[a_5])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_5 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_5 = (2 * (if (i_1 = 0) then 0 else (a_5 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * i_1)))).
}
Prove: a_4[shift_sint32(a, i)] = (2 * (if (i = 0) then 0 else i)).
Prover Z3 4.8.6 returns Valid (Qed:5ms) (20ms) (132886)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (15ms) (167)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 8):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = a_1[a_2 <- 2 * a_3].
Let a_5 = a_4[shift_sint32(a, i)].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (if (i_1 = 0) then 0 else (a_6 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
}
Prove: a_5 = (2 * (a_5 / 2)).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (40ms) (303388)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (29ms) (284)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 9):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = a_1[a_2 <- 2 * a_3].
Let a_5 = shift_sint32(a, i).
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (if (i_1 = 0) then 0 else (a_6 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_4[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_6 = (2 * (a_6 / 2))))).
}
Prove: a_4[a_5] = (2 * Mint_0[a_5]).
Prover Z3 4.8.6 returns Unknown (Qed:9ms)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 10):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = a_1[a_2 <- 2 * a_3].
Let a_5 = a_4[shift_sint32(a, i)].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (if (i_1 = 0) then 0 else (a_6 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_4[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_4[a_6] = (2 * Mint_0[a_6])))).
}
Prove: a_5 = (2 * (if (i = 0) then 0 else (a_5 / 2))).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (27ms) (416)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 11):
Let a_1 = havoc(Mint_undef_0, Mint_0, shift_sint32(a, 0), n).
Let a_2 = shift_sint32(a, p).
Let a_3 = a_1[a_2].
Let a_4 = a_1[a_2 <- 2 * a_3].
Let a_5 = a_4[shift_sint32(a, i)].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p) /\ is_sint32(a_3).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= p).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < p) ->
      (a_1[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 < p) -> (a_1[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_1[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 < p) -> (a_6 = (2 * (if (i_1 = 0) then 0 else (a_6 / 2)))))).
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
  (* Invariant *)
  Have: p < n.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * i_1)))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= p) ->
      (a_4[shift_sint32(a, i_1)] = (2 * (if (i_1 = 0) then 0 else i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_4[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = shift_sint32(a, i_1) in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_4[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i_1 : Z. let a_6 = a_4[shift_sint32(a, i_1)] in ((0 <= i_1) ->
      ((i_1 <= p) -> (a_6 = (2 * (if (i_1 = 0) then 0 else (a_6 / 2)))))).
}
Prove: a_5 = (2 * (a_5 / 2)).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (18ms) (192)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0003/array_double_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0003/array_double_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0003/array_double_merged.c, line 13) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0003/array_double_merged.c, line 13) (2/2):
Effect at line 17
Let a_1 = shift_sint32(a, 0).
Let a_2 = havoc(Mint_undef_0, Mint_0, a_1, n).
Let x = p - 1.
Let a_3 = shift_sint32(a, x).
Let a_4 = a_2[a_3].
Let a_5 = a_2[a_3 <- 2 * a_4].
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(x) /\ is_sint32(a_4).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_3, 1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= (1 + n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= p) ->
      (a_2[shift_sint32(a, i)] = (2 * i)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= p) ->
      (a_2[shift_sint32(a, i)] = (2 * (if (i = 0) then 0 else i))))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = a_2[shift_sint32(a, i)] in ((0 <= i) ->
      (((2 + i) <= p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = shift_sint32(a, i) in ((0 <= i) ->
      (((2 + i) <= p) -> (a_2[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = a_2[shift_sint32(a, i)] in ((0 <= i) ->
      (((2 + i) <= p) -> (a_6 = (2 * (if (i = 0) then 0 else (a_6 / 2)))))).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: to_uint32(x) < n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (a_5[shift_sint32(a, i)] = (2 * i)))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < p) ->
      (a_5[shift_sint32(a, i)] = (2 * (if (i = 0) then 0 else i))))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = a_5[shift_sint32(a, i)] in ((0 <= i) ->
      ((i < p) -> (a_6 = (2 * (a_6 / 2))))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = shift_sint32(a, i) in ((0 <= i) ->
      ((i < p) -> (a_5[a_6] = (2 * Mint_0[a_6])))).
  (* Invariant *)
  Have: forall i : Z. let a_6 = a_5[shift_sint32(a, i)] in ((0 <= i) ->
      ((i < p) -> (a_6 = (2 * (if (i = 0) then 0 else (a_6 / 2)))))).
}
Prove: included(a_3, 1, a_1, n).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (20ms) (319)

------------------------------------------------------------
[wp:pedantic-assigns] out/array_double_0003/array_double_merged.c:1: Warning: 
  No 'assigns' specification for function 'arrayDouble'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/array_double_0003/array_double_merged.c:22: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
