[kernel] Parsing out/2_0001/2_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 11 goals scheduled
[wp] [Timeout] typed_arraymax_loop_invariant_established (Qed 0.53ms) (Z3)
[wp] Proved goals:   10 / 11
  Qed:               6
  Alt-Ergo 2.6.2:    4 (12ms-17ms)
  Timeout:           1
------------------------------------------------------------
  Function arraymax
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 6):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 6):
Assume { Type: is_sint32(n). }
Prove: 0 < n.
Prover Z3 4.8.6 returns Timeout (Qed:0.53ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.53ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 7):
Let x = Mint_0[shift_sint32(a, i_2)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let x_2 = Mint_0[shift_sint32(a, i_3)].
Let x_3 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_3) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Initializer *)
  Init: x_2 = x_3.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_2) /\ (0 <= i_4) /\ (i_4 < n).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x) /\ (0 <= i_5) /\ (i_5 < n).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= max_0.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (17ms) (164)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 8):
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let x_2 = Mint_0[shift_sint32(a, i_2)].
Let x_3 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Initializer *)
  Init: x_2 = x_3.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_3)] = x_2) /\ (0 <= i_3) /\ (i_3 < n).
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_5 : Z. ((0 <= i_5) -> ((i_5 < i) ->
      (Mint_0[shift_sint32(a, i_5)] <= x))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x) /\ (0 <= i_4) /\ (i_4 < n).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
  (* Invariant *)
  Have: forall i_5 : Z. ((i_5 <= i) -> ((0 <= i_5) ->
      (Mint_0[shift_sint32(a, i_5)] <= max_0))).
}
Prove: exists i_5 : Z. (Mint_0[shift_sint32(a, i_5)] = max_0) /\
    (0 <= i_5) /\ (i_5 < n).
Prover Z3 4.8.6 returns Valid (Qed:15ms) (10ms) (85547)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (15ms) (122)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 8):
Let x = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(n) /\ is_sint32(x).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Invariant *)
  Have: 0 < n.
}
Prove: exists i : Z. (Mint_0[shift_sint32(a, i)] = x) /\ (0 <= i) /\ (i < n).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (30ms) (173439)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (12ms) (30)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 9):
Let x = Mint_0[shift_sint32(a, i)].
Let x_1 = Mint_0[shift_sint32(a, i_2)].
Let x_2 = Mint_0[shift_sint32(a, i_1)].
Let x_3 = Mint_0[shift_sint32(a, i_3)].
Let x_4 = Mint_0[shift_sint32(a, 0)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Heap *)
  Type: region(a.base) <= 0.
  (* Initializer *)
  Init: x_3 = x_4.
  (* Invariant *)
  Have: 0 < n.
  (* Invariant *)
  Have: x_4 <= x_3.
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_4)] = x_3) /\ (0 <= i_4) /\ (i_4 < n).
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: i_1 <= n.
  (* Invariant *)
  Have: forall i_6 : Z. ((0 <= i_6) -> ((i_6 < i_1) ->
      (Mint_0[shift_sint32(a, i_6)] <= x_1))).
  (* Invariant *)
  Have: (Mint_0[shift_sint32(a, i_5)] = x_1) /\ (0 <= i_5) /\ (i_5 < n).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x_1 < x_2
  Then { Have: x_2 = x. }
  Else { Have: x_1 = x. }
  (* Invariant *)
  Have: forall i_6 : Z. ((i_6 <= i_1) -> ((0 <= i_6) ->
      (Mint_0[shift_sint32(a, i_6)] <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < n).
}
Prove: exists i_6 : Z. (Mint_0[shift_sint32(a, i_6)] = x) /\ (i_6 <= i_1) /\
    (0 <= i_6).
Prover Z3 4.8.6 returns Valid (Qed:14ms) (10ms) (86029)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (13ms) (129)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/2_0001/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0001/2_merged.c:1: Warning: 
  No 'assigns' specification for function 'arraymax'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/2_0001/2_merged.c:22: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
