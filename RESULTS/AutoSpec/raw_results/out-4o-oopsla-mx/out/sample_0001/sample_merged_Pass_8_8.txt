[kernel] Parsing out/sample_0001/sample_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/sample_0001/sample_merged.c:13: Warning: 
  Calling undeclared function printf. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/sample_0001/sample_merged.c:1: Warning: 
  Neither code nor specification for function printf, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] Proved goals:    8 / 8
  Qed:               7
  Alt-Ergo 2.6.2:    1 (8ms)
------------------------------------------------------------
  Function fun
------------------------------------------------------------

Goal Preservation of Invariant (file out/sample_0001/sample_merged.c, line 6):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sample_0001/sample_merged.c, line 6):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sample_0001/sample_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sample_0001/sample_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/sample_0001/sample_merged.c, line 8):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/sample_0001/sample_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/sample_0001/sample_merged.c, line 18):
Let x = 1 + d.
Let x_1 = d * y.
Assume {
  Type: is_sint32(d) /\ is_sint32(r) /\ is_sint32(y) /\ is_sint32(x) /\
      is_sint32(r - y) /\ is_sint32(r + x_1).
  (* Invariant *)
  Have: 0 <= d.
  (* Then *)
  Have: y <= r.
}
Prove: (y * x) = (y + x_1).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (9679)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (37)

------------------------------------------------------------

Goal Loop assigns (file out/sample_0001/sample_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/sample_0001/sample_merged.c:1: Warning: 
  No 'assigns' specification for function 'fun'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/sample_0001/sample_merged.c:13: Warning: 
  No 'assigns' specification for function 'printf'.
  Callers assumptions might be imprecise.
