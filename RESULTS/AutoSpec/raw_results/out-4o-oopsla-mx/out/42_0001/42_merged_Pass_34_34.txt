[kernel] Parsing out/42_0001/42_merged.c (with preprocessing)
[kernel:typing:no-proto] out/42_0001/42_merged.c:35: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/42_0001/42_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 34 goals scheduled
[wp] Proved goals:   34 / 34
  Qed:              26
  Alt-Ergo 2.6.2:    8 (4ms-12ms-21ms)
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 15):
Let x_3 = 1 + x_2 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + y_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_6) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_2 + y_1) % 2) = 0.
  (* Invariant *)
  Have: x_2 <= y_1.
  (* Invariant *)
  Have: (((x_5 = 1) -> (y_1 = x_2))) \/ (((x_5 = 0) -> ((1 + x_2) = y_1))).
  (* Invariant *)
  Have: (((x_5 = 1) -> (y_1 = x_2))) \/ (((x_5 = 0) -> (x_6 = x_2))).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_2 = x. Have: (2 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (x_6 = y). Have: (1 + x_1) = x. }
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.6 returns Valid (Qed:18ms) (10ms) (41038)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:18ms) (10ms) (79)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 16):
Let x_1 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(2 + x) /\
      is_sint32(x_1).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: ((2 + x + y) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (52075)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (13ms) (168)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 17):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> ((1 + x) = y))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> (x_5 = x))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ (x_5 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_5 = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.6 returns Valid (Qed:16ms) (10ms) (38689)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (10ms) (60)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 18):
Let x_1 = 1 + x + y.
Let x_2 = 2 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(1 + y) /\ is_sint32(x_2) /\ is_sint32(x_1).
  (* Goal *)
  When: (x_1 % 2) = 1.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:26ms) (10ms) (34033)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:26ms) (4ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 19):
Let x_1 = x + y.
Let x_2 = 2 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(1 + x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Residual *)
  When: flag_0 != 0.
  (* Goal *)
  When: (x_1 % 2) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: ((2 + x + y) % 2) = 0.
}
Prove: y <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:29ms) (10ms) (34339)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:29ms) (8ms) (21)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 22):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_2 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_2) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> ((1 + x_1) = y_2))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_5 = x_1))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ (x_5 = y_1). Have: (1 + y_1) = y. }
  Else { Have: x_5 = y. Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y <= x)).
}
Prove: ((x + y) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:19ms) (10ms) (45387)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:19ms) (21ms) (328)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 23):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_2 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_2) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> ((1 + x_1) = y_2))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_5 = x_1))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ (x_5 = y_1). Have: (1 + y_1) = y. }
  Else { Have: x_5 = y. Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
}
Prove: x <= y.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (36806)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (9ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 30):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> ((1 + x) = y))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> (x_5 = x))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ (x_5 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_5 = y_1. Have: (1 + x) = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_1) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: (((x_3 = 1) -> (y_1 = x_1))) \/ (((x_3 = 0) -> ((1 + x_1) = y_1))).
  (* Invariant *)
  Have: (((x_3 = 1) -> (y_1 = x_1))) \/ (((x_3 = 0) -> ((1 + y_1) = x_1))).
}
Prove: x_3 = ((1 + x_1 + y_1) % 2).
Prover Z3 4.8.6 returns Valid (Qed:15ms) (10ms) (47578)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:15ms) (21ms) (341)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/42_0001/42_merged.c, line 31) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/42_0001/42_merged.c, line 31) (2/2):
Call Result at line 35
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/42_0001/42_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/42_0001/42_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
