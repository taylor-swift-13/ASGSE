[kernel] Parsing out/42_0001/42_merged.c (with preprocessing)
[kernel:typing:no-proto] out/42_0001/42_merged.c:36: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/42_0001/42_merged.c:4: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_2_preserved (Qed 52ms) (Z3)
[wp] Proved goals:   35 / 36
  Qed:              27
  Alt-Ergo 2.6.2:    8 (4ms-8ms-21ms)
  Timeout:           1
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 15):
Let x_3 = 1 + x_2 + y_1.
Let x_4 = x_3 % 2.
Let x_5 = a % 2.
Let x_6 = 1 + y_1.
Let x_7 = 1 + x_2.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(x_6) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < y_1).
  (* Invariant *)
  Have: (y_1 = x_2) \/ (x_7 = y_1) \/ (x_6 = x_2).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_5 = 0) -> (y_1 <= x_2)).
  (* Invariant *)
  Have: ((x_2 + y_1) % 2) = 0.
  (* Invariant *)
  Have: x_2 <= y_1.
  (* Invariant *)
  Have: (((x_5 = 1) -> (y_1 = x_2))) \/ (((x_5 = 0) -> (x_7 = y_1))).
  (* Invariant *)
  Have: (((x_5 = 1) -> (y_1 = x_2))) \/ (((x_5 = 0) -> (x_6 = x_2))).
  (* Invariant *)
  Have: x_4 = x_5.
  (* Then *)
  Have: tmp_0 != 0.
  If x_4 = 1
  Then { Have: x_2 = x. Have: (2 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (x_6 = y). Have: (1 + x_1) = x. }
}
Prove: (0 < x) /\ (0 < y).
Prover Z3 4.8.6 returns Valid (Qed:25ms) (10ms) (41150)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:25ms) (5ms) (95)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 16):
Let x_5 = 1 + x_4 + y_4.
Let x_6 = a_1 % 2.
Let x_7 = 1 + y_4.
Let x_8 = 1 + x_4.
Let x_9 = x_4 + y_4.
Let x_10 = a_2 % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\
      is_sint32(flag_0) /\ is_sint32(tmp_0) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y_3) /\
      is_sint32(y_4).
  If flag_0 != 0
  Then { Have: a_2 = 0. }
  Else { Have: a_2 = 1. }
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_10 = 0)).
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_10 = 1).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (a_2 = 2))) \/ (((flag_0 = 0) -> (a_2 = 3))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> (x_10 = 1)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < y_4).
  (* Invariant *)
  Have: (y_4 = x_4) \/ (x_8 = y_4) \/ (x_7 = x_4).
  (* Invariant *)
  Have: ((flag_0 != 0) -> (x_6 = 0)).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_6 = 1) -> (x_4 <= y_4)).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y_4 <= x_4)).
  (* Invariant *)
  Have: (x_9 % 2) = 0.
  (* Invariant *)
  Have: (((flag_0 = 0) -> (x_4 <= y_4))) /\
      (((flag_0 != 0) -> (y_4 <= x_4))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (2 <= x_9))) \/ (((flag_0 = 0) -> (3 <= x_9))).
  (* Invariant *)
  Have: (((flag_0 != 0) -> (x_9 = a_1))) \/ (((flag_0 = 0) -> (x_5 = a_1))).
  (* Invariant *)
  Have: (((x_6 = 1) -> (y_4 = x_4))) \/ (((x_6 = 0) -> (x_8 = y_4))).
  (* Invariant *)
  Have: (((x_6 = 1) -> (y_4 = x_4))) \/ (((x_6 = 0) -> (x_7 = x_4))).
  (* Invariant *)
  Have: ((flag_0 = 0) -> ((x_5 % 2) = x_6)).
  (* Then *)
  Have: tmp_0 != 0.
  If flag_0 != 0
  Then {
    Have: (x_4 = x_3) /\ (y_4 = y_2).
    Have: (x_3 + y_2) = a.
    Have: (1 + x_3) = x_2.
  }
  Else {
    Have: (x_4 = x_2) /\ (y_4 = y_3).
    Have: (1 + x_2 + y_3) = a.
    Have: (1 + y_3) = y_2.
  }
  If (a % 2) = 1
  Then { Have: (x_2 = x) /\ (y_2 = y_1). Have: (1 + y_1) = y. }
  Else { Have: (x_2 = x_1) /\ (y_2 = y). Have: (1 + x_1) = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
}
Prove: (y = x) \/ ((1 + x) = y) \/ ((1 + y) = x).
Prover Z3 4.8.6 returns Timeout (Qed:52ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:52ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 17):
Let x_1 = 1 + x.
Let x_2 = 2 + x.
Let x_3 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Goal *)
  When: flag_0 != 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ (x_1 = y) \/ ((1 + y) = x).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = y) \/ (x_2 = y) \/ ((3 + x) = y).
}
Prove: ((2 + x + y) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (20ms) (36273)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (7ms) (51)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 18):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y.
Let x_6 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ (x_6 = y) \/ (x_5 = x).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> (x_6 = y))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y = x))) \/ (((x_4 = 0) -> (x_5 = x))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ (x_5 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_5 = y_1. Have: x_6 = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (y_1 = x_1) \/ ((1 + x_1) = y_1) \/ ((1 + y_1) = x_1).
}
Prove: (x_3 = 0) \/ (x_3 = 1).
Prover Z3 4.8.6 returns Valid (Qed:20ms) (20ms) (39187)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (4ms) (60)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 19):
Let x_1 = 1 + y.
Let x_2 = 2 + y.
Let x_3 = 1 + x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Goal *)
  When: (x_3 % 2) = 1.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ ((1 + x) = y) \/ (x_1 = x).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (a % 2) = 1.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = x) \/ (x_2 = x) \/ ((3 + y) = x).
}
Prove: x <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:29ms) (10ms) (34599)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:29ms) (4ms) (27)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 20):
Let x_1 = 1 + x.
Let x_2 = 2 + x.
Let x_3 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(flag_0) /\ is_sint32(tmp_0) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Residual *)
  When: flag_0 != 0.
  (* Goal *)
  When: (x_3 % 2) = 0.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ (x_1 = y) \/ ((1 + y) = x).
  (* Invariant *)
  Have: (a % 2) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = y) \/ (x_2 = y) \/ ((3 + x) = y).
  (* Invariant *)
  Have: ((2 + x + y) % 2) = 0.
}
Prove: y <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:32ms) (10ms) (34909)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:32ms) (4ms) (26)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 23):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y_2.
Let x_6 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_2).
  (* Invariant *)
  Have: (y_2 = x_1) \/ (x_6 = y_2) \/ (x_5 = x_1).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_2 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_2) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_6 = y_2))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_5 = x_1))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ (x_5 = y_1). Have: (1 + y_1) = y. }
  Else { Have: x_5 = y. Have: x_6 = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ ((1 + x) = y) \/ ((1 + y) = x).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y <= x)).
}
Prove: ((x + y) % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:23ms) (20ms) (44737)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:23ms) (17ms) (330)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 24):
Let x_2 = 1 + x_1 + y_2.
Let x_3 = x_2 % 2.
Let x_4 = a % 2.
Let x_5 = 1 + y_2.
Let x_6 = 1 + x_1.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_2).
  (* Invariant *)
  Have: (y_2 = x_1) \/ (x_6 = y_2) \/ (x_5 = x_1).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> (y_2 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_2) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_2.
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_6 = y_2))).
  (* Invariant *)
  Have: (((x_4 = 1) -> (y_2 = x_1))) \/ (((x_4 = 0) -> (x_5 = x_1))).
  (* Invariant *)
  Have: x_3 = x_4.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x_1 = x) /\ (x_5 = y_1). Have: (1 + y_1) = y. }
  Else { Have: x_5 = y. Have: x_6 = x. }
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ ((1 + x) = y) \/ ((1 + y) = x).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 1) -> (x <= y)).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
}
Prove: x <= y.
Prover Z3 4.8.6 returns Valid (Qed:17ms) (10ms) (37216)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:17ms) (4ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.93ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/42_0001/42_merged.c, line 31):
Let x_2 = 1 + x + y.
Let x_3 = x_2 % 2.
Let x_4 = 1 + y_1.
Let x_5 = 1 + x_1.
Let x_6 = a % 2.
Let x_7 = 1 + y.
Let x_8 = 1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(y) /\ is_sint32(x_7) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (y = x) \/ (x_8 = y) \/ (x_7 = x).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_6 = 1).
  (* Invariant *)
  Have: ((x_6 = 0) -> (y <= x)).
  (* Invariant *)
  Have: ((x + y) % 2) = 0.
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (((x_6 = 1) -> (y = x))) \/ (((x_6 = 0) -> (x_8 = y))).
  (* Invariant *)
  Have: (((x_6 = 1) -> (y = x))) \/ (((x_6 = 0) -> (x_7 = x))).
  (* Invariant *)
  Have: x_3 = x_6.
  (* Then *)
  Have: tmp_0 != 0.
  If x_3 = 1
  Then { Have: (x = x_1) /\ (x_7 = y_2). Have: (1 + y_2) = y_1. }
  Else { Have: x_7 = y_1. Have: x_8 = x_1. }
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < y_1).
  (* Invariant *)
  Have: (y_1 = x_1) \/ (x_5 = y_1) \/ (x_4 = x_1).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> (y_1 <= x_1)).
  (* Invariant *)
  Have: ((x_1 + y_1) % 2) = 0.
  (* Invariant *)
  Have: x_1 <= y_1.
  (* Invariant *)
  Have: (((x_3 = 1) -> (y_1 = x_1))) \/ (((x_3 = 0) -> (x_5 = y_1))).
  (* Invariant *)
  Have: (((x_3 = 1) -> (y_1 = x_1))) \/ (((x_3 = 0) -> (x_4 = x_1))).
}
Prove: x_3 = ((1 + x_1 + y_1) % 2).
Prover Z3 4.8.6 returns Valid (Qed:16ms) (10ms) (47859)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (21ms) (348)

------------------------------------------------------------

Goal Establishment of Invariant (file out/42_0001/42_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/42_0001/42_merged.c, line 32) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/42_0001/42_merged.c, line 32) (2/2):
Call Result at line 36
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/42_0001/42_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/42_0001/42_merged.c:4: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
