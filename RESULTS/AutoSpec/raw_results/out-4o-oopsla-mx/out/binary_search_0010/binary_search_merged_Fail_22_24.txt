[kernel] Parsing out/binary_search_0010/binary_search_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_binarysearch_ensures_8 (Qed 10ms) (Z3)
[wp] [Timeout] typed_binarysearch_ensures_9 (Qed 11ms) (Z3)
[wp] Proved goals:   22 / 24
  Qed:              11
  Alt-Ergo 2.6.2:    9 (4ms-11ms-15ms)
  Z3 4.8.6:          2
  Timeout:           2
------------------------------------------------------------
  Function binarysearch
------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 5) in 'binarysearch':
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 6) in 'binarysearch':
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 7) in 'binarysearch':
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Goal *)
  When: (-1) <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: x_1 < high_1.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (20ms) (98904)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (13ms) (99)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 8) in 'binarysearch':
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Goal *)
  When: (-1) <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: x_1 < high_1.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (98904)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (14ms) (99)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 9) in 'binarysearch':
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Goal *)
  When: (-1) <= x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: x_1 < high_1.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (98904)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (13ms) (99)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 10) in 'binarysearch':
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: (x_1 = (-1)) \/ ((x_1 < high_1) /\ ((-1) <= x)).
Prover Z3 4.8.6 returns Valid (Qed:9ms) (20ms) (98815)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (12ms) (118)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 11) in 'binarysearch':
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: (x_1 = (-1)) \/ ((x_1 < high_1) /\ ((-1) <= x)).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (20ms) (98815)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (13ms) (118)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 12) in 'binarysearch':
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(a, -1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= high_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_2.
  (* Invariant *)
  Have: (-1) <= low_0.
  If (2 + low_0) <= high_0
  Then {
    Have: ((high_0 + low_0) / 2) = (-1).
    (* Then *)
    Have: Mint_0[shift_sint32(a, -1)] = x.
  }
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Timeout (Qed:10ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:10ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 13) in 'binarysearch':
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(a, -1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= high_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: 0 <= i_1.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_2.
  (* Invariant *)
  Have: (-1) <= low_0.
  If (2 + low_0) <= high_0
  Then {
    Have: ((high_0 + low_0) / 2) = (-1).
    (* Then *)
    Have: Mint_0[shift_sint32(a, -1)] = x.
  }
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0010/binary_search_merged.c, line 14) in 'binarysearch':
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0010/binary_search_merged.c, line 24):
Let x_1 = (high_0 + low_0) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(low_0) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: x <= x_2.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= n) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= n.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
  (* Else *)
  Have: x_2 != x.
}
Prove: x_1 <= n.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (15ms) (104)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0010/binary_search_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0010/binary_search_merged.c, line 25):
Let x_1 = (high_1 + low_1) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(high_2) /\
      is_sint32(low_0) /\ is_sint32(low_1) /\ is_sint32(x) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_2).
  (* Pre-condition *)
  Have: forall i_2 : Z. ((0 <= i_2) -> (((2 + i_2) <= high_2) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, 1 + i_2)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_1 <= high_2.
  (* Invariant *)
  Have: low_1 < i_1.
  (* Invariant *)
  Have: (-1) <= low_1.
  (* Then *)
  Have: (2 + low_1) <= high_1.
  (* Else *)
  Have: x_2 != x.
  If x_2 < x
  Then { Have: (high_1 = high_0) /\ (((high_0 + low_1) / 2) = low_0). }
  Else { Have: (low_1 = low_0) /\ (x_1 = high_0). }
  (* Invariant *)
  Have: high_0 <= high_2.
}
Prove: exists i_2 : Z. low_0 < i_2.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (63534)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0010/binary_search_merged.c, line 25):
Assume {
  Type: is_sint32(high_0).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_0).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_0) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
}
Prove: exists i : Z. 0 <= i.
Prover Z3 4.8.6 returns Valid (Qed:1ms) (20ms) (59644)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0010/binary_search_merged.c, line 26):
Let x_1 = high_0 + low_0.
Let x_2 = x_1 / 2.
Let x_3 = Mint_0[shift_sint32(a, x_2)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: x_3 < x.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), high_1).
  (* Pre-condition *)
  Have: forall i_3 : Z. ((0 <= i_3) -> (((2 + i_3) <= high_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= Mint_0[shift_sint32(a, 1 + i_3)]))).
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: low_0 < i_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
  (* Invariant *)
  Have: x_2 < i_2.
}
Prove: (-3) <= x_1.
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (10ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0010/binary_search_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/binary_search_0010/binary_search_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (1/4):
Effect at line 31
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (2/4):
Effect at line 32
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (3/4):
Effect at line 34
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (4/4):
Effect at line 40
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0010/binary_search_merged.c, line 2) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0010/binary_search_merged.c, line 46)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0010/binary_search_merged.c, line 3) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0010/binary_search_merged.c, line 46)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 3).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[1 + i].
Prover Z3 4.8.6 returns Valid (Qed:1ms) (10ms) (23362)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:1ms) (8ms) (36)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0010/binary_search_merged.c, line 4) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0010/binary_search_merged.c, line 46)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 3).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[1 + i].
Prover Z3 4.8.6 returns Valid (Qed:0.58ms) (10ms) (23362)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.58ms) (4ms) (36)

------------------------------------------------------------
[wp:pedantic-assigns] out/binary_search_0010/binary_search_merged.c:44: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
