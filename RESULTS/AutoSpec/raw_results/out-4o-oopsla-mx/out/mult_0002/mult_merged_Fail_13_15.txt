[kernel] Parsing out/mult_0002/mult_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 15 goals scheduled
[wp] [Timeout] typed_mul_loop_invariant_6_established (Qed 0.51ms) (Z3)
[wp] [Timeout] typed_mul_loop_invariant_6_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   13 / 15
  Qed:              10
  Alt-Ergo 2.6.2:    3 (5ms-9ms)
  Timeout:           2
------------------------------------------------------------
  Function mul
------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (0.90ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 8):
Let x_1 = b * (a - x).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x - 1) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: (a * b) = ((b * x) + x_1).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x <= (1 + a).
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (33403)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (9ms) (85)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 9):
Let x_1 = a * b.
Let x_2 = b * (a - x).
Let x_3 = x - 1.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(b + x_2).
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: x_1 = ((b * x) + x_2).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (1 + a).
}
Prove: x_1 = (b + (b * x_3) + x_2).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (10ms) (9929)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (8ms) (187)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 10):
Let x_1 = -x.
Let x_2 = a - x.
Let x_3 = x - 1.
Let x_4 = b * x_3.
Let x_5 = -x_4.
Let x_6 = b * x_2.
Let x_7 = a * b.
Let x_8 = x_7 - x_4 - x_6.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_7 - x_4) /\ is_sint32(x_8).
  (* Initializer *)
  Init: x_7 = (b + x_4 + x_6).
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: x_7 = ((b * x) + x_6).
  (* Invariant *)
  Have: (x_2 * x_8) = x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (1 + a).
}
Prove: x_7 = (x_4 + ((1 + a - x) * x_8)).
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (10175)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (5ms) (331)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 12):
Let x_1 = a * b.
Let x_2 = x - 1.
Let x_3 = -x.
Let x_4 = b * (1 + a - x).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_4) /\ is_sint32(x_4 - b).
  (* Invariant *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x <= a.
  (* Invariant *)
  Have: ((b * x) + x_4) = (b + x_1).
  (* Invariant *)
  Have: x_4 = (b + (b * (a - x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x <= (1 + a).
  (* Invariant *)
  Have: x_1 = ((b * x_2) + x_4).
}
Prove: 0 < x.
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 12):
Assume { Type: is_sint32(x). }
Prove: 0 <= x.
Prover Z3 4.8.6 returns Timeout (Qed:0.51ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:0.51ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/mult_0002/mult_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/mult_0002/mult_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/mult_0002/mult_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/mult_0002/mult_merged.c:3: Warning: 
  No 'assigns' specification for function 'mul'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/mult_0002/mult_merged.c:24: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
