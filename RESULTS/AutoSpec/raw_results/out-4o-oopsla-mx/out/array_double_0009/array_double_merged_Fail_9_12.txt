[kernel] Parsing out/array_double_0009/array_double_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 12 goals scheduled
[wp] [Timeout] typed_arrayDouble_ensures_2 (Qed 2ms) (Z3)
[wp] [Timeout] typed_arrayDouble_ensures (Qed 3ms) (Z3)
[wp] [Timeout] typed_arrayDouble_ensures_3 (Qed 4ms) (Z3)
[wp] Proved goals:    9 / 12
  Qed:               7
  Alt-Ergo 2.6.2:    2 (8ms-13ms)
  Timeout:           3
------------------------------------------------------------
  Function arrayDouble
------------------------------------------------------------

Goal Post-condition (file out/array_double_0009/array_double_merged.c, line 4) in 'arrayDouble':
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(a, i).
Assume {
  Type: is_uint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: 0 <= p.
  (* Else *)
  Have: n <= to_uint32(p).
}
Prove: havoc(Mint_undef_0, Mint_0, a_1, n)[a_2] = (2 * Mint_0[a_2]).
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/array_double_0009/array_double_merged.c, line 5) in 'arrayDouble':
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(a, i).
Assume {
  Type: is_uint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: 0 <= p.
  (* Else *)
  Have: n <= to_uint32(p).
}
Prove: havoc(Mint_undef_0, Mint_0, a_1, n)[a_2] = (2 * Mint_0[a_2]).
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/array_double_0009/array_double_merged.c, line 6) in 'arrayDouble':
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(a, i).
Assume {
  Type: is_uint32(n) /\ is_sint32(p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: 0 <= p.
  (* Else *)
  Have: n <= to_uint32(p).
}
Prove: havoc(Mint_undef_0, Mint_0, a_1, n)[a_2] = (2 * Mint_0[a_2]).
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0009/array_double_merged.c, line 13):
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(1 + p).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, shift_sint32(a, 0), n).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= n.
  (* Invariant *)
  Have: 0 <= p.
  (* Then *)
  Have: to_uint32(p) < n.
}
Prove: p < n.
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (68831)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (58)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0009/array_double_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.73ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/array_double_0009/array_double_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/array_double_0009/array_double_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0009/array_double_merged.c, line 15) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/array_double_0009/array_double_merged.c, line 15) (2/2):
Effect at line 19
Let x = p - 1.
Let a_1 = shift_sint32(a, 0).
Let a_2 = shift_sint32(a, x).
Assume {
  Type: is_uint32(n) /\ is_sint32(p) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_2, 1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: p <= (1 + n).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: to_uint32(x) < n.
  (* Invariant *)
  Have: p <= n.
}
Prove: included(a_2, 1, a_1, n).
Prover Z3 4.8.6 returns Valid (Qed:3ms) (20ms) (95122)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:3ms) (13ms) (85)

------------------------------------------------------------

Goal Assigns (file out/array_double_0009/array_double_merged.c, line 7) in 'arrayDouble':
Effect at line 18
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_double_0009/array_double_merged.c, line 2) in 'arrayDouble'' in 'main' at call 'arrayDouble' (file out/array_double_0009/array_double_merged.c, line 26)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/array_double_0009/array_double_merged.c, line 3) in 'arrayDouble'' in 'main' at call 'arrayDouble' (file out/array_double_0009/array_double_merged.c, line 26)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/array_double_0009/array_double_merged.c:24: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
