[kernel] Parsing out/13_0002/13_merged.c (with preprocessing)
[kernel:typing:no-proto] out/13_0002/13_merged.c:55: Warning: 
  Calling function unknown1 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/13_0002/13_merged.c:11: Warning: 
  Neither code nor specification for function unknown1, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 74 goals scheduled
[wp] [Timeout] typed_foo_loop_invariant_10_preserved (Qed 9ms) (Z3)
[wp] [Timeout] typed_foo_loop_invariant_22_established (Qed 2ms) (Z3)
[wp] Proved goals:   72 / 74
  Qed:              63
  Alt-Ergo 2.6.2:    9 (5ms-19ms)
  Timeout:           2
------------------------------------------------------------
  Function foo
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 19):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i.
Let x_4 = 4 + x.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 % 2) = 0.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (42926)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (13ms) (204)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 20):
Let x = 2 * i.
Let x_1 = 4 + x.
Let x_2 = 2 + x.
Let x_3 = x_2 / 2.
Let x_4 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_1).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (x_2 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
}
Prove: (x_1 / 2) = (2 + i).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (39333)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (12ms) (235)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 22):
Let x = 2 * i.
Let x_1 = 4 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 + i.
Let x_4 = 2 + x.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_2 - 2) /\ is_sint32(x_2 - 1).
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + i).
  (* Invariant *)
  Have: i <= x_5.
  (* Invariant *)
  Have: (x_4 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x_3.
  (* Invariant *)
  Have: (x_2 = 1) \/ (x_2 <= x_3).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
}
Prove: x_2 = (1 + x_5).
Prover Z3 4.8.6 returns Valid (Qed:7ms) (10ms) (37465)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:7ms) (5ms) (25)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 23):
Let x = 2 * i.
Let x_1 = 4 + x.
Let x_2 = x_1 / 2.
Let x_3 = 2 + x.
Let x_4 = x_3 / 2.
Let x_5 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_4 - 1).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_4 = x_5.
  (* Invariant *)
  Have: i <= x_4.
  (* Invariant *)
  Have: (x_3 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 <= x_5).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = (1 + x_4).
}
Prove: x_4 <= x_2.
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (35589)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (7ms) (28)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 24):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 4 + x.
Let x_4 = x_3 / 2.
Let x_5 = 1 + i.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_5.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 <= x_5).
  (* Invariant *)
  Have: (x_3 % 2) = 0.
  (* Invariant *)
  Have: x_4 = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x_4.
}
Prove: x_2 <= x_5.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (35435)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (10ms) (30)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 25):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i.
Let x_4 = 4 + x.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
}
Prove: (x_4 % 4) = 2.
Prover Z3 4.8.6 returns Timeout (Qed:9ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:9ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 32):
Let x = 2 * i.
Let x_1 = 4 + x.
Let x_2 = 2 + x.
Let x_3 = x_2 / 2.
Let x_4 = 1 + i.
Let x_5 = x_1 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_2) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_3 - 1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 < x_3).
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: x_3 = x_4.
  (* Invariant *)
  Have: i <= x_3.
  (* Invariant *)
  Have: (x_2 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_3).
  (* Invariant *)
  Have: x_3 <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: (-1) <= i.
}
Prove: x_4 = i_1.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (42413)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (16ms) (268)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 33):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i.
Let x_4 = 4 + x.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x_2).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (x_4 % 4) = 2.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_2) -> (x_3 = i_2))).
}
Prove: x_3 = i_1.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (10ms) (43231)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (18ms) (269)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 34):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i.
Let x_4 = 4 + x.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= x_2).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) -> (i_2 = i))).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= i) -> ((0 <= i_2) -> (i_2 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (x_4 % 4) = 2.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < x_2) -> (x_3 = i_2))).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_2) -> (x_3 = i_2))).
}
Prove: x_3 = i_1.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (44080)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (19ms) (269)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 35):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 36):
Let x = 2 * i.
Let x_1 = 2 + x.
Let x_2 = x_1 / 2.
Let x_3 = 1 + i.
Let x_4 = 4 + x.
Let x_5 = x_4 / 2.
Assume {
  Type: is_sint32(i) /\ is_sint32(tmp_0) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_2 - 1).
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_2 = x_3.
  (* Invariant *)
  Have: i <= x_2.
  (* Invariant *)
  Have: (x_1 % 4) = 2.
  (* Invariant *)
  Have: 0 <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) -> (i_1 = i))).
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= i) -> ((0 <= i_1) -> (i_1 = i))).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_4 % 2) = 0.
  (* Invariant *)
  Have: x_5 = (1 + x_2).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (x_4 % 4) = 2.
  (* Invariant *)
  Have: (-1) <= i.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < x_2) -> (x_3 = i_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_2) -> (x_3 = i_1))).
}
Prove: i < x_2.
Prover Z3 4.8.6 returns Valid (Qed:10ms) (10ms) (37541)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:10ms) (11ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 37):
Assume { Type: is_sint32(flag_0). }
Prove: flag_0 = 0.
Prover Z3 4.8.6 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 39):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 42):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 43):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 44):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 45):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 46):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 47):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 48):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 49):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 50):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0002/13_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0002/13_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 52) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/13_0002/13_merged.c, line 52) (2/2):
Call Result at line 55
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0002/13_merged.c:2: Warning: 
  No 'assigns' specification for function 'unknown1'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/13_0002/13_merged.c:11: Warning: 
  No 'assigns' specification for function 'foo'.
  Callers assumptions might be imprecise.
