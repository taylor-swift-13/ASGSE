[kernel] Parsing out/increment_arr_0003/increment_arr_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 8 goals scheduled
[wp] [Timeout] typed_increment_array_by_loop_invariant_established (Z3)
[wp] [Timeout] typed_increment_array_by_loop_invariant_2_preserved (Qed 3ms) (Z3)
[wp] Proved goals:    6 / 8
  Qed:               5
  Alt-Ergo 2.6.2:    1 (12ms)
  Timeout:           2
------------------------------------------------------------
  Function increment_array_by
------------------------------------------------------------

Goal Preservation of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 3):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 3):
Assume { Type: is_sint32(n). }
Prove: 0 <= n.
Prover Z3 4.8.6 returns Timeout (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 4):
Let a = havoc(Mint_undef_0, Mint_0, shift_sint32(arr_0, 0), n).
Let a_1 = shift_sint32(arr_0, i).
Let a_2 = a[a_1].
Let a_3 = shift_sint32(arr_0, i_1).
Assume {
  Type: is_sint32(c) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i) /\
      is_sint32(a_2).
  (* Heap *)
  Type: region(arr_0.base) <= 0.
  (* Goal *)
  When: (0 <= i_1) /\ (i_1 <= i).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_2 : Z. let a_4 = shift_sint32(arr_0, i_2) in ((0 <= i_2) ->
      ((i_2 < i) -> (a[a_4] = (c + Mint_0[a_4])))).
  (* Invariant *)
  Have: 0 <= i.
  (* Then *)
  Have: i < n.
}
Prove: a[a_1 <- c + a_2][a_3] = (c + Mint_0[a_3]).
Prover Z3 4.8.6 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 4):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 5):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/increment_arr_0003/increment_arr_merged.c, line 5):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Loop assigns (file out/increment_arr_0003/increment_arr_merged.c, line 6) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/increment_arr_0003/increment_arr_merged.c, line 6) (2/2):
Effect at line 10
Let a = shift_sint32(arr_0, 0).
Let a_1 = havoc(Mint_undef_0, Mint_0, a, n).
Let x = i - 1.
Let a_2 = shift_sint32(arr_0, x).
Let a_3 = a_1[a_2].
Assume {
  Type: is_sint32(c) /\ is_sint32(i) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(a_3).
  (* Heap *)
  Type: (region(arr_0.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: !invalid(Malloc_0, a_2, 1).
  (* Invariant *)
  Have: 0 <= n.
  (* Invariant *)
  Have: i <= (1 + n).
  (* Invariant *)
  Have: forall i_1 : Z. let a_4 = shift_sint32(arr_0, i_1) in ((0 <= i_1) ->
      (((2 + i_1) <= i) -> (a_1[a_4] = (c + Mint_0[a_4])))).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i <= n.
  (* Invariant *)
  Have: forall i_1 : Z. let a_4 = shift_sint32(arr_0, i_1) in ((0 <= i_1) ->
      ((i_1 < i) -> (a_1[a_2 <- c + a_3][a_4] = (c + Mint_0[a_4])))).
}
Prove: included(a_2, 1, a, n).
Prover Z3 4.8.6 returns Valid (Qed:4ms) (10ms) (104239)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:4ms) (12ms) (129)

------------------------------------------------------------
[wp:pedantic-assigns] out/increment_arr_0003/increment_arr_merged.c:1: Warning: 
  No 'assigns' specification for function 'increment_array_by'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/increment_arr_0003/increment_arr_merged.c:16: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
