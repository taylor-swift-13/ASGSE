[kernel] Parsing out/binary_search_0008/binary_search_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_binarysearch_ensures_5 (Qed 15ms) (Z3)
[wp] [Timeout] typed_binarysearch_ensures_6 (Qed 15ms) (Z3)
[wp] [Timeout] typed_binarysearch_ensures_7 (Qed 21ms) (Z3)
[wp] Proved goals:   23 / 26
  Qed:              13
  Alt-Ergo 2.6.2:   10 (4ms-16ms)
  Timeout:           3
------------------------------------------------------------
  Function binarysearch
------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 10) in 'binarysearch':
Prove: true.
Prover Qed returns Valid (10ms)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 11) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Goal *)
  When: (-1) <= x.
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_1) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_1) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: x_1 < high_1.
Prover Z3 4.8.6 returns Valid (Qed:12ms) (10ms) (101424)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:12ms) (11ms) (105)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 12) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Goal *)
  When: (-1) <= x.
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_1) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_1) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: x_1 < high_1.
Prover Z3 4.8.6 returns Valid (Qed:11ms) (20ms) (101424)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (11ms) (105)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 13) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: (2 + low_0) <= high_0.
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_1) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_1) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
}
Prove: (x_1 = (-1)) \/ ((x_1 < high_1) /\ ((-1) <= x)).
Prover Z3 4.8.6 returns Valid (Qed:11ms) (20ms) (101320)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:11ms) (13ms) (133)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 14) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(a, -1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < high_1).
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, 1 + i_1)]))).
  (* Pre-condition *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_1 < high_1) ->
      ((i_2 <= i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, i_1)])))).
  (* Pre-condition *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 < high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  If (2 + low_0) <= high_0
  Then {
    Have: ((high_0 + low_0) / 2) = (-1).
    (* Then *)
    Have: Mint_0[shift_sint32(a, -1)] = x.
  }
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 15) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(Mint_0[shift_sint32(a, -1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < high_1).
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i_1 : Z. ((0 <= i_1) -> (((2 + i_1) <= high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, 1 + i_1)]))).
  (* Pre-condition *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_1 < high_1) ->
      ((i_2 <= i_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, i_1)])))).
  (* Pre-condition *)
  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> ((i_1 < high_1) ->
      (Mint_0[shift_sint32(a, i_2)] <= Mint_0[shift_sint32(a, i_1)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  If (2 + low_0) <= high_0
  Then {
    Have: ((high_0 + low_0) / 2) = (-1).
    (* Then *)
    Have: Mint_0[shift_sint32(a, -1)] = x.
  }
}
Prove: Mint_0[shift_sint32(a, i)] != x.
Prover Z3 4.8.6 returns Timeout (Qed:15ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:15ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 16) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(binarysearch_0) /\ is_sint32(high_1) /\
      is_sint32(high_0) /\ is_sint32(low_0) /\ is_sint32(x) /\
      is_sint32(Mint_0[shift_sint32(a, binarysearch_0)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 <= high_0.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_0).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_0).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_0) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_0) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_0) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_1 <= high_0.
  (* Invariant *)
  Have: (-1) <= low_0.
  If (2 + low_0) <= high_1
  Then {
    Let x_1 = (high_1 + low_0) / 2.
    Have: x_1 = binarysearch_0.
    (* Then *)
    Have: Mint_0[shift_sint32(a, x_1)] = x.
  }
  Else { Have: binarysearch_0 = (-1). }
}
Prove: (forall i : Z. ((0 <= i) -> ((i < high_0) ->
        (Mint_0[shift_sint32(a, i)] != x)))) <-> (binarysearch_0 = (-1)).
Prover Z3 4.8.6 returns Timeout (Qed:21ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:21ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 17) in 'binarysearch':
Let a_1 = shift_sint32(a, 0).
Let x = high_0 + low_0.
Let x_1 = x / 2.
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x_1) /\ is_sint32(Mint_0[shift_sint32(a, x_1)]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: x_1 != (-1).
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_1) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_1) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  Have: (2 + low_0) <= high_0.
}
Prove: (x_1 < high_1) /\ ((-1) <= x).
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (16ms) (127)

------------------------------------------------------------

Goal Post-condition (file out/binary_search_0008/binary_search_merged.c, line 18) in 'binarysearch':
Prove: true.
Prover Qed returns Valid (9ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0008/binary_search_merged.c, line 28):
Let x_1 = (high_0 + low_0) / 2.
Let x_2 = Mint_0[shift_sint32(a, x_1)].
Let a_1 = shift_sint32(a, 0).
Assume {
  Type: is_sint32(high_0) /\ is_sint32(low_0) /\ is_sint32(n) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: x <= x_2.
  (* Pre-condition *)
  Have: 0 <= n.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= n) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 <= i) -> ((i < n) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < n) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= n.
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
  (* Else *)
  Have: x_2 != x.
}
Prove: x_1 <= n.
Prover Z3 4.8.6 returns Valid (Qed:13ms) (20ms) (102029)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:13ms) (8ms) (111)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0008/binary_search_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/binary_search_0008/binary_search_merged.c, line 29):
Let a_1 = shift_sint32(a, 0).
Let x_1 = high_0 + low_0.
Let x_2 = x_1 / 2.
Let x_3 = Mint_0[shift_sint32(a, x_2)].
Assume {
  Type: is_sint32(high_0) /\ is_sint32(high_1) /\ is_sint32(low_0) /\
      is_sint32(x) /\ is_sint32(x_2) /\ is_sint32(x_3).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Residual *)
  When: x_3 < x.
  (* Pre-condition *)
  Have: 0 <= high_1.
  (* Pre-condition *)
  Have: valid_rd(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, high_1).
  (* Pre-condition *)
  Have: forall i : Z. ((0 <= i) -> (((2 + i) <= high_1) ->
      (Mint_0[shift_sint32(a, i)] <= Mint_0[shift_sint32(a, 1 + i)]))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i < high_1) -> ((i_1 <= i) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Pre-condition *)
  Have: forall i_1,i : Z. ((0 <= i_1) -> ((i_1 < i) -> ((i < high_1) ->
      (Mint_0[shift_sint32(a, i_1)] <= Mint_0[shift_sint32(a, i)])))).
  (* Invariant *)
  Have: high_0 <= high_1.
  (* Invariant *)
  Have: (-1) <= low_0.
  (* Then *)
  Have: (2 + low_0) <= high_0.
}
Prove: (-3) <= x_1.
Prover Z3 4.8.6 returns Valid (Qed:14ms) (20ms) (79823)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (11ms) (22)

------------------------------------------------------------

Goal Establishment of Invariant (file out/binary_search_0008/binary_search_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/binary_search_0008/binary_search_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (1/4):
Effect at line 34
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (2/4):
Effect at line 35
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (3/4):
Effect at line 37
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assigns nothing in 'binarysearch' (4/4):
Effect at line 43
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 2) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 3) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 4) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 5) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 6) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 3).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[1 + i].
Prover Z3 4.8.6 returns Valid (Qed:0.88ms) (10ms) (23362)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.88ms) (6ms) (36)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 7) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= 3).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[1 + i].
Prover Z3 4.8.6 returns Valid (Qed:2ms) (10ms) (23362)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:2ms) (8ms) (36)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 8) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1) /\ (i_1 <= 4).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[i_1].
Prover Z3 4.8.6 returns Valid (Qed:0.97ms) (10ms) (25186)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.97ms) (4ms) (74)

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/binary_search_0008/binary_search_merged.c, line 9) in 'binarysearch'' in 'main' at initialization of 'sum' (file out/binary_search_0008/binary_search_merged.c, line 49)
:
Assume {
  (* Goal *)
  When: (0 <= i) /\ (i < i_1) /\ (i_1 <= 4).
  (* Initializer *)
  Init: arr_0[0] = 1.
  (* Initializer *)
  Init: arr_0[1] = 2.
  (* Initializer *)
  Init: arr_0[2] = 3.
  (* Initializer *)
  Init: arr_0[3] = 4.
  (* Initializer *)
  Init: arr_0[4] = 5.
}
Prove: arr_0[i] <= arr_0[i_1].
Prover Z3 4.8.6 returns Valid (Qed:0.72ms) (10ms) (27118)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:0.72ms) (8ms) (59)

------------------------------------------------------------
[wp:pedantic-assigns] out/binary_search_0008/binary_search_merged.c:47: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
