[kernel] Parsing out/46_0001/46_merged.c (with preprocessing)
[kernel:typing:no-proto] out/46_0001/46_merged.c:38: Warning: 
  Calling function unknown2 that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/46_0001/46_merged.c:8: Warning: 
  Neither code nor specification for function unknown2, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 36 goals scheduled
[wp] Proved goals:   36 / 36
  Qed:              30
  Alt-Ergo 2.6.2:    6 (12ms-19ms-31ms)
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 16):
Let x_1 = w % 2.
Let x_2 = z / 2.
Let x_3 = 1 + z.
Let x_4 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_2) /\ is_sint32(x_3) /\ is_sint32(x_4).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
  (* Invariant *)
  Have: x_2 <= z.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= z).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((x_1 = 1) -> ((1 + x) = w)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 % 2) = (x_3 % 2).
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (44333)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (19ms) (293)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 17):
Let x_1 = z / 2.
Let x_2 = 1 + x_1.
Let x_3 = 1 + z.
Let x_4 = x_3 % 2.
Let x_5 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_1) /\ is_sint32(x_3) /\ is_sint32(x_2).
  (* Residual *)
  When: (z % 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= z).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_5 = 1) -> ((1 + x) = w)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = x_4.
}
Prove: (x_4 = 0) \/ (x_4 = 1).
Prover Z3 4.8.6 returns Valid (Qed:8ms) (10ms) (38104)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:8ms) (22ms) (270)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 18):
Let x_1 = z / 2.
Let x_2 = 1 + x_1.
Let x_3 = w % 2.
Let x_4 = 1 + z.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(z) /\
      is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_2).
  (* Residual *)
  When: (z % 2) = 0.
  (* Goal *)
  When: (x_4 % 2) = 0.
  (* Invariant *)
  Have: (x_1 % 2) = 0.
  (* Invariant *)
  Have: x_1 <= z.
  (* Invariant *)
  Have: x_1 <= x_4.
  (* Invariant *)
  Have: (0 <= x) /\ ((-1) <= z).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x <= w.
  (* Invariant *)
  Have: x < w.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 1) -> ((1 + x) = w)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_2 % 2) = 0.
}
Prove: (x_4 / 2) = x_2.
Prover Z3 4.8.6 returns Valid (Qed:9ms) (10ms) (40263)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:9ms) (12ms) (266)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 18):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 21):
Let x_3 = z % 2.
Let x_4 = z_2 % 2.
Let x_5 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2).
  (* Invariant *)
  Have: x_4 = (y_2 % 2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 <= y_2).
  (* Invariant *)
  Have: x_2 <= y_2.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 < w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_5 = 1) -> ((1 + x_2) = w)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If x_4 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
}
Prove: (0 <= x) /\ (0 <= y).
Prover Z3 4.8.6 returns Valid (Qed:22ms) (46308)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:22ms) (12ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 22):
Let x_3 = z % 2.
Let x_4 = z_2 % 2.
Let x_5 = w % 2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(w) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(y) /\ is_sint32(y_1) /\ is_sint32(y_2) /\
      is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2).
  (* Invariant *)
  Have: x_4 = (y_2 % 2).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_4 = 1).
  (* Invariant *)
  Have: ((x_4 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: (0 <= x_2) /\ (0 <= y_2).
  (* Invariant *)
  Have: x_2 <= y_2.
  (* Invariant *)
  Have: x_2 <= w.
  (* Invariant *)
  Have: x_2 < w.
  (* Invariant *)
  Have: x_2 <= 1.
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_5 = 1).
  (* Invariant *)
  Have: ((x_5 = 1) -> ((1 + x_2) = w)).
  (* Invariant *)
  Have: 0 < w.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_5 = 1
  Then { Have: x_2 = x_1. Have: (1 + x_1) = x. }
  Else { Have: x_2 = x. }
  If x_4 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_3 = (y % 2).
  (* Invariant *)
  Have: (x_3 = 0) \/ (x_3 = 1).
  (* Invariant *)
  Have: ((x_3 = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y).
}
Prove: x <= y.
Prover Z3 4.8.6 returns Valid (Qed:25ms) (10ms) (66871)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:25ms) (31ms) (537)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 25):
Let x_1 = z % 2.
Let x_2 = z_2 % 2.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(y_1) /\
      is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\ is_sint32(z_2) /\
      is_sint32(x_3) /\ is_sint32(2 + x).
  (* Residual *)
  When: (x_3 % 2) = 1.
  (* Invariant *)
  Have: x_2 = (y_2 % 2).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_2 = 1).
  (* Invariant *)
  Have: ((x_2 = 0) -> ((z_2 / 2) = y_2)).
  (* Invariant *)
  Have: y_2 <= z_2.
  (* Invariant *)
  Have: y_2 <= (1 + z_2).
  (* Invariant *)
  Have: (0 <= x) /\ (0 <= y_2).
  (* Invariant *)
  Have: x <= y_2.
  (* Invariant *)
  Have: x <= 1.
  (* Invariant *)
  Have: 0 <= z_2.
  (* Then *)
  Have: tmp_0 != 0.
  If x_2 = 0
  Then {
    Have: (y_2 = y_1) /\ (z_2 = z_1).
    Have: (1 + y_1) = y.
    Have: (1 + z_1) = z.
  }
  Else { Have: (y_2 = y) /\ (z_2 = z). }
  (* Invariant *)
  Have: x_1 = (y % 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_1 = 1).
  (* Invariant *)
  Have: ((x_1 = 0) -> ((z / 2) = y)).
  (* Invariant *)
  Have: y <= z.
  (* Invariant *)
  Have: y <= (1 + z).
  (* Invariant *)
  Have: (0 <= y) /\ ((-1) <= x).
  (* Invariant *)
  Have: x < y.
}
Prove: x <= 0.
Prover Z3 4.8.6 returns Valid (Qed:20ms) (10ms) (45240)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:20ms) (19ms) (311)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 25):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (13ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (12ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 29):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (25ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 30):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/46_0001/46_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/46_0001/46_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/46_0001/46_merged.c, line 33) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/46_0001/46_merged.c, line 33) (2/2):
Call Result at line 38
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/46_0001/46_merged.c:4: Warning: 
  No 'assigns' specification for function 'unknown2'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/46_0001/46_merged.c:8: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
