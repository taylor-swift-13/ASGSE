[kernel] Parsing out/max_0004/max_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 16 goals scheduled
[wp] [Timeout] typed_arraymax_ensures_4 (Qed 4ms) (Z3)
[wp] [Timeout] typed_arraymax_ensures_3 (Qed 5ms) (Z3)
[wp] Proved goals:   14 / 16
  Qed:              10
  Alt-Ergo 2.6.2:    4 (11ms-17ms)
  Timeout:           2
------------------------------------------------------------
  Function arraymax
------------------------------------------------------------

Goal Post-condition (file out/max_0004/max_merged.c, line 4) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i_1)].
Let a_1 = shift_sint32(a, 0).
Let x_1 = Mint_0[a_1].
Let x_2 = Mint_0[shift_sint32(a, i_3)].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) ->
      (Mint_0[shift_sint32(a, i_4)] <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i_2).
  (* Invariant *)
  Have: 0 < i_2.
  (* Else *)
  Have: n <= i_2.
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Z3 4.8.6 returns Valid (Qed:6ms) (10ms) (84216)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:6ms) (12ms) (86)

------------------------------------------------------------

Goal Post-condition (file out/max_0004/max_merged.c, line 5) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i_1)].
Let a_1 = shift_sint32(a, 0).
Let x_1 = Mint_0[a_1].
Let x_2 = Mint_0[shift_sint32(a, i_3)].
Assume {
  Type: is_sint32(i_2) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i < n).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_2) ->
      (Mint_0[shift_sint32(a, i_4)] <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i_2).
  (* Invariant *)
  Have: 0 < i_2.
  (* Else *)
  Have: n <= i_2.
}
Prove: Mint_0[shift_sint32(a, i)] <= x.
Prover Z3 4.8.6 returns Valid (Qed:5ms) (10ms) (84216)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:5ms) (11ms) (86)

------------------------------------------------------------

Goal Post-condition (file out/max_0004/max_merged.c, line 6) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i)].
Let a_1 = shift_sint32(a, 0).
Let x_1 = Mint_0[a_1].
Let x_2 = Mint_0[shift_sint32(a, i_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Else *)
  Have: n <= i_1.
}
Prove: exists i_3 : Z. (Mint_0[shift_sint32(a, i_3)] = x) /\ (0 <= i_3) /\
    (i_3 < n).
Prover Z3 4.8.6 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Post-condition (file out/max_0004/max_merged.c, line 7) in 'arraymax':
Let x = Mint_0[shift_sint32(a, i)].
Let a_1 = shift_sint32(a, 0).
Let x_1 = Mint_0[a_1].
Let x_2 = Mint_0[shift_sint32(a, i_2)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->
      (Mint_0[shift_sint32(a, i_3)] <= x))).
  (* Invariant *)
  Have: (0 <= i) /\ (i < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Else *)
  Have: n <= i_1.
}
Prove: exists i_3 : Z. (Mint_0[shift_sint32(a, i_3)] = x) /\ (0 <= i_3) /\
    (i_3 < n).
Prover Z3 4.8.6 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.6.2 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0004/max_merged.c, line 15):
Let x = Mint_0[shift_sint32(a, i_2)].
Let x_1 = Mint_0[shift_sint32(a, i_1)].
Let a_1 = shift_sint32(a, 0).
Let x_2 = Mint_0[a_1].
Let x_3 = Mint_0[shift_sint32(a, i_3)].
Assume {
  Type: is_sint32(i_1) /\ is_sint32(n) /\ is_sint32(1 + i_1) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Goal *)
  When: (0 <= i) /\ (i <= i_1).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_3 = x_2.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (i_3 <= 0) /\ (0 <= i_3).
  (* Invariant *)
  Have: forall i_4 : Z. ((0 <= i_4) -> ((i_4 < i_1) ->
      (Mint_0[shift_sint32(a, i_4)] <= x))).
  (* Invariant *)
  Have: (0 <= i_2) /\ (i_2 < i_1).
  (* Invariant *)
  Have: 0 < i_1.
  (* Then *)
  Have: i_1 < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
}
Prove: Mint_0[shift_sint32(a, i)] <= max_0.
Prover Z3 4.8.6 returns Valid (Qed:14ms) (40ms) (351487)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:14ms) (17ms) (152)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0004/max_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0004/max_merged.c, line 16):
Let x = Mint_0[shift_sint32(a, i_1)].
Let x_1 = Mint_0[shift_sint32(a, i)].
Let a_1 = shift_sint32(a, 0).
Let x_2 = Mint_0[a_1].
Let x_3 = Mint_0[shift_sint32(a, i_2)].
Assume {
  Type: is_sint32(i) /\ is_sint32(n) /\ is_sint32(1 + i) /\ is_sint32(x_2) /\
      is_sint32(x_1) /\ is_sint32(x).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ linked(Malloc_0).
  (* Pre-condition *)
  Have: 0 < n.
  (* Pre-condition *)
  Have: valid_rw(Malloc_0, a_1, n).
  (* Initializer *)
  Init: x_3 = x_2.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: (i_2 <= 0) /\ (0 <= i_2).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->
      (Mint_0[shift_sint32(a, i_3)] <= x))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 < i).
  (* Invariant *)
  Have: 0 < i.
  (* Then *)
  Have: i < n.
  If x < x_1
  Then { Have: x_1 = max_0. }
  Else { Have: x = max_0. }
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->
      (Mint_0[shift_sint32(a, i_3)] <= max_0))).
}
Prove: exists i_3 : Z. (Mint_0[shift_sint32(a, i_3)] = max_0) /\
    (i_3 <= i) /\ (0 <= i_3).
Prover Z3 4.8.6 returns Valid (Qed:16ms) (20ms) (86479)
Prover Alt-Ergo 2.6.2 returns Valid (Qed:16ms) (13ms) (113)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0004/max_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0004/max_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0004/max_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/max_0004/max_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/max_0004/max_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Loop assigns (file out/max_0004/max_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assigns nothing in 'arraymax':
Effect at line 22
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/max_0004/max_merged.c, line 2) in 'arraymax'' in 'main' at initialization of 'sum' (file out/max_0004/max_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Instance of 'Pre-condition (file out/max_0004/max_merged.c, line 3) in 'arraymax'' in 'main' at initialization of 'sum' (file out/max_0004/max_merged.c, line 35)
:
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/max_0004/max_merged.c:33: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
