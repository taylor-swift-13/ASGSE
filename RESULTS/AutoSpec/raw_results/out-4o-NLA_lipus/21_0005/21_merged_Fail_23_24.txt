[kernel] Parsing out/21_0005/21_merged.c (with preprocessing)
[kernel:typing:no-proto] out/21_0005/21_merged.c:21: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/21_0005/21_merged.c:2: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 24 goals scheduled
[wp] [Timeout] typed_main21_loop_invariant_5_preserved (Qed 8ms) (Z3)
[wp] Proved goals:   23 / 24
  Qed:              17
  Alt-Ergo 2.5.4:    6 (5ms-9ms)
  Timeout:           1
------------------------------------------------------------
  Function main21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 8):
Let x = y * y.
Let x_1 = 2 * y.
Let x_2 = 1 + y.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x) /\
      is_sint32(x_3).
  (* Invariant *)
  Have: x_3 = (1 + x_1 + x).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) = x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) < x))).
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: (x_4 * x_4) = (3 + x_1 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (9895)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (33)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 10):
Let x = 2 + y.
Let x_1 = x * x.
Let x_2 = 2 * y.
Let x_3 = 1 + y.
Let x_4 = x_3 * x_3.
Let x_5 = 3 + x_2 + x_4.
Let x_6 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_1 - 3 - x_2).
  (* Invariant *)
  Have: x_4 = (1 + x_2 + x_6).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) = x_6))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) < x_6))).
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = x_5.
}
Prove: x_1 <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (9969)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (8ms) (39)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 11):
Let x = 2 + y.
Let x_1 = x * x.
Let x_2 = 2 * y.
Let x_3 = 1 + y.
Let x_4 = x_3 * x_3.
Let x_5 = 3 + x_2 + x_4.
Let x_6 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_1 - 3 - x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_3).
  (* Invariant *)
  Have: x_4 = (1 + x_2 + x_6).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) = x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) < x_6))).
  (* Invariant *)
  Have: x_2 <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = x_5.
  (* Invariant *)
  Have: x_1 <= x_5.
}
Prove: x_1 = (3 + x_2 + (i * i)).
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:8ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 12):
Let x = 1 + y.
Let x_1 = 2 + y.
Let x_2 = x_1 * x_1.
Let x_3 = 2 * y.
Let x_4 = x * x.
Let x_5 = 3 + x_3 + x_4.
Let x_6 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_6) /\
      is_sint32(x_2 - 3 - x_3).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: x_4 = (1 + x_3 + x_6).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) = x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) < x_6))).
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x_5.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      (x_2 = (3 + x_3 + (i_1 * i_1))))).
}
Prove: (3 + x_3) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (33308)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (45)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 13):
Let x = 2 * y.
Let x_1 = 2 + y.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + y.
Let x_4 = x_3 * x_3.
Let x_5 = 3 + x + x_4.
Let x_6 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2 - 3 - x).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: x_4 = (1 + x + x_6).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) = x_6))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) < x_6))).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x_5.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x_3) ->
      (x_2 = (3 + x + (i_1 * i_1))))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((3 + x) <= x_2))).
}
Prove: (4 + x + (i * i)) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (34843)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (5ms) (148)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 14):
Let x = 2 * y.
Let x_1 = 2 + y.
Let x_2 = x_1 * x_1.
Let x_3 = 1 + y.
Let x_4 = x_3 * x_3.
Let x_5 = 3 + x + x_4.
Let x_6 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_6) /\ is_sint32(x_2 - 3 - x).
  (* Invariant *)
  Have: x_4 = (1 + x + x_6).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) = x_6))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) < x_6))).
  (* Invariant *)
  Have: x <= x_6.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_2 = x_5.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_3) ->
      (x_2 = (3 + x + (i * i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((3 + x) <= x_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((4 + x + (i * i)) <= x_2))).
}
Prove: (5 + (4 * y)) <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (34972)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (9ms) (147)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 15):
Let x = 2 + y.
Let x_1 = x * x.
Let x_2 = 2 * y.
Let x_3 = 3 + x_2.
Let x_4 = 1 + y.
Let x_5 = x_4 * x_4.
Let x_6 = 3 + x_2 + x_5.
Let x_7 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x_7) /\ is_sint32(x_1 - 3 - x_2).
  (* Invariant *)
  Have: x_5 = (1 + x_2 + x_7).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) = x_7))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) < x_7))).
  (* Invariant *)
  Have: x_2 <= x_7.
  (* Invariant *)
  Have: 0 <= x_7.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = x_6.
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x_4) ->
      (x_1 = (3 + x_2 + (i * i))))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> (x_3 <= x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) ->
      ((4 + x_2 + (i * i)) <= x_1))).
  (* Invariant *)
  Have: (5 + (4 * y)) <= x_1.
}
Prove: x_3 <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (34707)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (9ms) (48)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0005/21_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0005/21_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0005/21_merged.c, line 18) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0005/21_merged.c, line 18) (2/2):
Call Result at line 21
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0005/21_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/21_0005/21_merged.c:2: Warning: 
  No 'assigns' specification for function 'main21'.
  Callers assumptions might be imprecise.
