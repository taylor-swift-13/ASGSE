[kernel] Parsing out/14_0001/14_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 11 goals scheduled
[wp] Proved goals:   11 / 11
  Qed:               7
  Alt-Ergo 2.5.4:    4 (4ms-23ms-56ms)
------------------------------------------------------------
  Function main14
------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 12):
Let x_1 = x * y_2.
Let x_2 = a * b.
Let x_3 = y / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(z_1) /\
      is_sint32(2 * x) /\ is_sint32(x_3) /\ is_sint32(x_2 - x_1).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Have: (y_2 = y_1) /\ (x_2 = (z_1 + (y_1 * (z - z_1)))).
    Have: (x + z_1) = z.
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ (x_2 = (z + (x * y))). }
}
Prove: x_2 = (z + (2 * (x * x_3))).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (56ms) (820)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 13):
Let x_1 = x * y_2.
Let x_2 = a * b.
Let x_3 = 2 * x.
Let x_4 = y / 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_3) /\
      is_sint32(x_4) /\ is_sint32(x_2 - x_1) /\
      is_sint32(x_2 - (2 * (x * x_4))).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: x_1 <= x_2.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_5 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_5)) /\ (x_2 = (x + z + x_5)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = (2 * (x * x_4))). }
}
Prove: a <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (10ms) (34167)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (7ms) (127)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 14):
Let x_1 = 2 * x.
Let x_2 = x * y_2.
Let x_3 = a * b.
Let x_4 = y / 2.
Let x_5 = x * x_4.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(y_1) /\ is_sint32(y_2) /\ is_sint32(z) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_3 - x_2) /\ is_sint32(x_3 - (2 * x_5)).
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: x_2 <= x_3.
  (* Invariant *)
  Have: 0 <= y_2.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y_2 != 0.
  If (y_2 % 2) = 1
  Then {
    Let x_6 = 2 * (x * ((y_1 - 1) / 2)).
    Have: (y_2 = y_1) /\ ((x * y_1) = (x + x_6)) /\ (x_3 = (x + z + x_6)).
    Have: (1 + y) = y_1.
  }
  Else { Have: (y_2 = y) /\ ((x * y) = (2 * x_5)). }
  (* Invariant *)
  Have: a <= x_1.
}
Prove: (2 * x_5) <= x_3.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (23ms) (573)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 15):
Let x_1 = y / 2.
Let x_2 = x * x_1.
Let x_3 = 2 * x_2.
Let x_4 = a * b.
Let x_5 = 2 * x.
Let x_6 = x * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_5) /\ is_sint32(x_1) /\ is_sint32(x_4 - x_6) /\
      is_sint32(x_4 - x_3).
  (* Residual *)
  When: (y % 2) != 1.
  (* Pre-condition *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: a <= x.
  (* Invariant *)
  Have: x_6 <= x_4.
  (* Invariant *)
  Have: 0 <= y.
  (* Invariant *)
  Have: 0 <= x.
  (* Then *)
  Have: y != 0.
  Have: x_6 = x_3.
  (* Invariant *)
  Have: a <= x_5.
  (* Invariant *)
  Have: x_3 <= x_4.
}
Prove: (-1) <= y.
Prover Z3 4.8.12 returns Valid (Qed:11ms) (20ms) (32467)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:11ms) (4ms) (83)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/14_0001/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/14_0001/14_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Loop assigns (file out/14_0001/14_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/14_0001/14_merged.c:4: Warning: 
  No 'assigns' specification for function 'main14'.
  Callers assumptions might be imprecise.
