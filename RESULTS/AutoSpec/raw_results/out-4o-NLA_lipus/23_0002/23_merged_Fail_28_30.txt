[kernel] Parsing out/23_0002/23_merged.c (with preprocessing)
[kernel:typing:implicit-function-declaration] out/23_0002/23_merged.c:26: Warning: 
  Calling undeclared function unknown. Old style K&R code?
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/23_0002/23_merged.c:4: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_main23_loop_invariant_preserved (Qed 5ms) (Z3)
[wp] [Timeout] typed_main23_loop_invariant_9_established (Qed 1ms) (Z3)
[wp] Proved goals:   28 / 30
  Qed:              18
  Alt-Ergo 2.5.4:   10 (1ms-7ms-13ms)
  Timeout:           2
------------------------------------------------------------
  Function main23
------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 9):
Let x_2 = i * i.
Let x_3 = x * x.
Let x_4 = 1 + x.
Let x_5 = x_4 * x_4.
Let x_6 = i_1 * i_1.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Let x_9 = 1 + x_2.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= (1 + x_1 + x_7).
  (* Invariant *)
  Have: x_6 <= (x_8 * x_8).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_6)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * i_2) <= x_6))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: x_3 = x_2.
  (* Invariant *)
  Have: x_2 <= (1 + x + x_3).
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x <= x_2.
  (* Invariant *)
  Have: x_3 <= x_2.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) <= x_2)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> ((i_2 * i_2) <= x_2))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= (x + x_2).
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: x_5 = x_9.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:5ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 10):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 13):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = x * x.
Let x_5 = i * i.
Let x_6 = x_1 * x_1.
Let x_7 = 1 + x_1.
Let x_8 = 2 + x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_5) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_6 = x_5.
  (* Invariant *)
  Have: x_5 <= (1 + x_1 + x_6).
  (* Invariant *)
  Have: x_5 <= (x_7 * x_7).
  (* Invariant *)
  Have: x_1 <= x_5.
  (* Invariant *)
  Have: x_6 <= x_5.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_5)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * i_2) <= x_5))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= (x_1 + x_5).
  (* Invariant *)
  Have: x_3 = (1 + x_4).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_4).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x_4 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> ((i_2 * i_2) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 < (x + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= x.
}
Prove: x_3 <= (x_8 * x_8).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (36785)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (101)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 13):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: (-1) <= x.
}
Prove: x_1 <= (x_2 * x_2).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (9301)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (18)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 14):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x * x.
Let x_6 = i * i.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= (1 + x_1 + x_7).
  (* Invariant *)
  Have: x_6 <= (x_8 * x_8).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_6)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * i_2) <= x_6))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: x_3 = (1 + x_5).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_5).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> ((i_2 * i_2) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 < (x + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
}
Prove: ((-1) <= x) /\ (x <= 9).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (36995)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (7ms) (228)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 15):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
}
Prove: x <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30191)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (71)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 17):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x * x.
Let x_6 = i_1 * i_1.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Goal *)
  When: i <= x_2.
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= (1 + x_1 + x_7).
  (* Invariant *)
  Have: x_6 <= (x_8 * x_8).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 * i_3) <= x_6)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) ->
      ((i_3 * i_3) <= x_6))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: x_3 = (1 + x_5).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_5).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 * i_3) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) -> ((i_3 * i_3) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + (i_2 * i_2))) /\ (0 <= i_2) /\ (i_2 <= x).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 < (x + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
}
Prove: (i * i) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (44006)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (13ms) (381)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 17):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: i <= x.
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: x <= x_1.
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 18):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x * x.
Let x_6 = i_1 * i_1.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x_2).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= (1 + x_1 + x_7).
  (* Invariant *)
  Have: x_6 <= (x_8 * x_8).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_1) -> ((i_3 * i_3) <= x_6)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x_1) ->
      ((i_3 * i_3) <= x_6))).
  (* Invariant *)
  Have: (0 <= i_1) /\ (i_1 <= x_1).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: x_3 = (1 + x_5).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_5).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x) -> ((i_3 * i_3) < x_3)).
  (* Invariant *)
  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= x) -> ((i_3 * i_3) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + (i_2 * i_2))) /\ (0 <= i_2) /\ (i_2 <= x).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 < (x + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
  (* Invariant *)
  Have: forall i_3 : Z. ((i_3 <= x_2) -> ((i_3 * i_3) <= x_3)).
}
Prove: (i * i) <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (40078)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (1ms) (109)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 18):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= x) -> ((i_1 * i_1) <= x_1)).
}
Prove: (i * i) <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31294)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (68)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 19):
Let x_2 = 1 + x.
Let x_3 = x_2 * x_2.
Let x_4 = 2 + x.
Let x_5 = x * x.
Let x_6 = i * i.
Let x_7 = x_1 * x_1.
Let x_8 = 1 + x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_2) /\ is_sint32(x_6) /\ is_sint32(x_3) /\
      is_sint32(x_3 - 1).
  (* Pre-condition *)
  Have: (0 <= x_1) /\ (x_1 <= 10).
  (* Initializer *)
  Init: x_7 = x_6.
  (* Invariant *)
  Have: x_6 <= (1 + x_1 + x_7).
  (* Invariant *)
  Have: x_6 <= (x_8 * x_8).
  (* Invariant *)
  Have: x_1 <= x_6.
  (* Invariant *)
  Have: x_7 <= x_6.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_1) -> ((i_2 * i_2) <= x_6)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_1) ->
      ((i_2 * i_2) <= x_6))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x_1).
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= (x_1 + x_6).
  (* Invariant *)
  Have: x_3 = (1 + x_5).
  (* Invariant *)
  Have: x_3 <= (2 + x + x_5).
  (* Invariant *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: x < x_3.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x) -> ((i_2 * i_2) < x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x) -> ((i_2 * i_2) < x_3))).
  (* Invariant *)
  Have: (x_3 = (1 + (i_1 * i_1))) /\ (0 <= i_1) /\ (i_1 <= x).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 < (x + x_3).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (-2) <= x.
  (* Invariant *)
  Have: x_3 <= (x_4 * x_4).
  (* Invariant *)
  Have: ((-1) <= x) /\ (x <= 9).
  (* Invariant *)
  Have: forall i_2 : Z. ((i_2 <= x_2) -> ((i_2 * i_2) <= x_3)).
  (* Invariant *)
  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= x_2) ->
      ((i_2 * i_2) <= x_3))).
}
Prove: exists i_2 : Z. (x_3 = (i_2 * i_2)) /\ (0 <= i_2) /\ (i_2 <= x_2).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (431)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 19):
Let x_1 = x * x.
Let x_2 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Invariant *)
  Have: (-1) <= x.
  (* Invariant *)
  Have: x_1 <= (x_2 * x_2).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: forall i : Z. ((i <= x) -> ((i * i) <= x_1)).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((i * i) <= x_1))).
}
Prove: exists i : Z. ((i * i) = x_1) /\ (0 <= i) /\ (i <= x).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (6ms) (66)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.95ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/23_0002/23_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/23_0002/23_merged.c, line 22):
Let x_1 = i * i.
Let x_2 = x * x.
Let x_3 = 1 + x.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 <= x) /\ (x <= 10).
  (* Initializer *)
  Init: x_2 = x_1.
  (* Invariant *)
  Have: x_1 <= (1 + x + x_2).
  (* Invariant *)
  Have: x_1 <= (x_3 * x_3).
  (* Invariant *)
  Have: x <= x_1.
  (* Invariant *)
  Have: x_2 <= x_1.
  (* Invariant *)
  Have: forall i_1 : Z. ((i_1 <= x) -> ((i_1 * i_1) <= x_1)).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) -> ((i_1 * i_1) <= x_1))).
  (* Invariant *)
  Have: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: 0 <= (x + x_1).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (32144)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (6ms) (40)

------------------------------------------------------------

Goal Loop assigns (file out/23_0002/23_merged.c, line 23) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/23_0002/23_merged.c, line 23) (2/2):
Call Result at line 26
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/23_0002/23_merged.c:4: Warning: 
  No 'assigns' specification for function 'main23'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/23_0002/23_merged.c:26: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
