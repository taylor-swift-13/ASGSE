[kernel] Parsing out/5_0001/5_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 30 goals scheduled
[wp] [Timeout] typed_main5_loop_invariant_preserved (Qed 55ms) (Z3)
[wp] [Timeout] typed_main5_loop_invariant_2_preserved (Qed 64ms) (Z3)
[wp] [Timeout] typed_main5_loop_invariant_3_preserved (Qed 67ms) (Z3)
[wp] [Timeout] typed_main5_loop_invariant_9_preserved (Qed 61ms) (Z3)
[wp] [Timeout] typed_main5_loop_invariant_10_preserved (Qed 57ms) (Z3)
[wp] [Timeout] typed_main5_loop_invariant_10_established (Qed 2ms) (Z3)
[wp] Proved goals:   24 / 30
  Qed:            21
  Z3 4.8.12:       3 (10ms)
  Timeout:         6
------------------------------------------------------------
  Function main5
------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 17):
Let x = (a_1 * q) + (s_1 * y).
Let x_1 = (a_1 * p) + (r_1 * y).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(p) /\
      is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(s) /\
      is_sint32(s_1) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < a_1.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((a_1 * i) = y) \/ (((i * y) = a_1) /\ (0 < i)).
  (* Invariant *)
  Have: ((r_1 * x_1) + (s_1 * x)) = y.
  (* Invariant *)
  Have: ((p * x_1) + (q * x)) = a_1.
  (* Invariant *)
  Have: (p * s_1) = (1 + (q * r_1)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < x).
  (* Invariant *)
  Have: (x_1 <= a_1) /\ (x <= y).
  (* Invariant *)
  Have: ((i_1 * x_1) = x) \/ (((i_1 * x) = x_1) /\ (0 < i_1)).
  (* Then *)
  Have: x != x_1.
  If x < x_1
  Then {
    Have: (s_1 = s) /\ (x = b).
    Have: (a + (a_1 * q) + (s_1 * y)) = x_1.
    Have: (r + s_1) = r_1.
  }
  Else {
    Let x_2 = a_1 * p.
    Let x_3 = r * y.
    Have: (r_1 = r) /\ ((r + s) = s_1) /\ ((x_2 + x_3) = a) /\
        ((b + x_2 + x_3) = x).
  }
}
Prove: ((a * r) + (b * s)) = y.
Prover Z3 4.8.12 returns Timeout (Qed:55ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:55ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 18):
Let x_1 = (a * r) + (b * s).
Let x_2 = (q_1 * x) + (s_1 * x_1).
Let x_3 = (p_2 * x) + (r_2 * x_1).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((i * x) = x_1) \/ (((i * x_1) = x) /\ (0 < i)).
  (* Invariant *)
  Have: ((r_2 * x_3) + (s_1 * x_2)) = x_1.
  (* Invariant *)
  Have: ((p_2 * x_3) + (q_1 * x_2)) = x.
  (* Invariant *)
  Have: (p_2 * s_1) = (1 + (q_1 * r_2)).
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_2).
  (* Invariant *)
  Have: (x_3 <= x) /\ (x_2 <= x_1).
  (* Invariant *)
  Have: ((i_1 * x_3) = x_2) \/ (((i_1 * x_2) = x_3) /\ (0 < i_1)).
  (* Then *)
  Have: x_2 != x_3.
  If x_2 < x_3
  Then {
    Let x_4 = (b * s) + ((a_1 - b) * (r_1 - s)).
    Have: (p_2 = p_1) /\ (q_1 = q) /\ (r_2 = r_1) /\ (s_1 = s) /\
        (((p_1 * x) + (r_1 * x_4)) = a_1) /\ (((q * x) + (s * x_4)) = b).
    Have: (a + b) = a_1.
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_5 = s_1 - s.
    Let x_6 = (b * s) + ((b_1 - b) * x_5).
    Have: ((a + b) = b_1) /\ ((p + q) = q_1) /\ ((p_2 + q) = q_1) /\
        ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (((q_1 * x) + (s_1 * x_6)) = b_1) /\
        ((b + (x * (q_1 - q)) + (x_5 * x_6)) = b_1).
  }
}
Prove: ((a * p) + (b * q)) = x.
Prover Z3 4.8.12 returns Timeout (Qed:64ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:64ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 19):
Let x = (a * p) + (b * q).
Let x_1 = (a * r) + (b * s).
Let x_2 = (q_1 * x) + (s_1 * x_1).
Let x_3 = (p_2 * x) + (r_2 * x_1).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\ is_sint32(b_1) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: ((i * x) = x_1) \/ (((i * x_1) = x) /\ (0 < i)).
  (* Invariant *)
  Have: ((r_2 * x_3) + (s_1 * x_2)) = x_1.
  (* Invariant *)
  Have: ((p_2 * x_3) + (q_1 * x_2)) = x.
  (* Invariant *)
  Have: (p_2 * s_1) = (1 + (q_1 * r_2)).
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_2).
  (* Invariant *)
  Have: (x_3 <= x) /\ (x_2 <= x_1).
  (* Invariant *)
  Have: ((i_1 * x_3) = x_2) \/ (((i_1 * x_2) = x_3) /\ (0 < i_1)).
  (* Then *)
  Have: x_2 != x_3.
  If x_2 < x_3
  Then {
    Let x_4 = a_1 - b.
    Let x_5 = (b * q) + (x_4 * (p_1 - q)).
    Let x_6 = (b * s) + (x_4 * (r_1 - s)).
    Have: (p_2 = p_1) /\ (q_1 = q) /\ (r_2 = r_1) /\ (s_1 = s) /\
        (((p_1 * x_5) + (r_1 * x_6)) = a_1) /\ (((q * x_5) + (s * x_6)) = b).
    Have: (a + b) = a_1.
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_7 = b_1 - b.
    Let x_8 = q_1 - q.
    Let x_9 = (b * q) + (x_7 * x_8).
    Let x_10 = s_1 - s.
    Let x_11 = (b * s) + (x_7 * x_10).
    Have: ((a + b) = b_1) /\ ((p + q) = q_1) /\ ((p_2 + q) = q_1) /\
        ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (((q_1 * x_9) + (s_1 * x_11)) = b_1) /\
        ((b + (x_8 * x_9) + (x_10 * x_11)) = b_1).
  }
}
Prove: (p * s) = (1 + (q * r)).
Prover Z3 4.8.12 returns Timeout (Qed:67ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:67ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 20):
Let x = s - r.
Let x_1 = q - p.
Let x_2 = b_1 - b.
Let x_3 = (b * x_1) + (p * x_2).
Let x_4 = (b * x) + (r * x_2).
Let x_5 = p * x_3.
Let x_6 = r * x_4.
Let x_7 = x_5 + x_6.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\ is_sint32(q) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(x_2) /\ is_sint32(x_1) /\
      is_sint32(x) /\ is_sint32(x_3) /\ is_sint32(x_4) /\ is_sint32(x_7).
  (* Residual *)
  When: x_7 <= b_1.
  (* Pre-condition *)
  Have: 0 < x_3.
  (* Pre-condition *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: ((i * x_3) = x_4) \/ (((i * x_4) = x_3) /\ (0 < i)).
  (* Invariant *)
  Have: ((b_1 * s) + (r * x_7)) = x_4.
  (* Invariant *)
  Have: ((b_1 * q) + (p * x_7)) = x_3.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < b_1) /\ (0 < x_7).
  (* Invariant *)
  Have: (b_1 <= x_4) /\ (x_7 <= x_3).
  (* Invariant *)
  Have: ((i_1 * x_7) = b_1) \/ (((b_1 * i_1) = x_7) /\ (0 < i_1)).
  (* Then *)
  Have: x_7 != b_1.
  Have: (((q * x_3) + (s * x_4)) = b_1) /\ ((b + x_5 + x_6) = b_1).
  (* Invariant *)
  Have: (p * x) = (1 + (r * x_1)).
}
Prove: ((x_1 * x_3) + (x * x_4)) = b.
Prover Z3 4.8.12 returns Valid (Qed:62ms) (10ms) (43069)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 22):
Let x = s - r.
Let x_1 = q - p.
Let x_2 = a * x_1.
Let x_3 = b * x.
Let x_4 = x_2 + x_3.
Let x_5 = a * q.
Let x_6 = b * s.
Let x_7 = x_5 + x_6 - x_2 - x_3.
Let x_8 = a * p.
Let x_9 = b * r.
Let x_10 = x_5 + x_6.
Let x_11 = x_8 + x_9.
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(p) /\ is_sint32(q) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_11) /\ is_sint32(x_10) /\ is_sint32(x_4) /\ is_sint32(x_7).
  (* Residual *)
  When: x_11 <= x_10.
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
  (* Invariant *)
  Have: ((a * i) = b) \/ (((b * i) = a) /\ (0 < i)).
  (* Invariant *)
  Have: ((r * x_11) + (s * x_10)) = b.
  (* Invariant *)
  Have: ((p * x_11) + (q * x_10)) = a.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < x_11) /\ (0 < x_10).
  (* Invariant *)
  Have: (x_11 <= a) /\ (x_10 <= b).
  (* Invariant *)
  Have: ((i_1 * x_11) = x_10) \/ (((i_1 * x_10) = x_11) /\ (0 < i_1)).
  (* Then *)
  Have: x_10 != x_11.
  Have: (x_8 + x_9 + x_2 + x_3) = x_10.
  (* Invariant *)
  Have: ((x * x_4) + (r * x_7)) = b.
  (* Invariant *)
  Have: ((x_1 * x_4) + (p * x_7)) = a.
  (* Invariant *)
  Have: (p * x) = (1 + (r * x_1)).
}
Prove: (0 < x_4) /\ (x_4 < x_10).
Prover Z3 4.8.12 returns Valid (Qed:54ms) (10ms) (37238)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 23):
Let x_1 = p - q.
Let x_2 = r - s.
Let x_3 = q * x.
Let x_4 = s * y.
Let x_5 = x_3 + x_4.
Let x_6 = q * x_5.
Let x_7 = p * x.
Let x_8 = r * y.
Let x_9 = x_7 + x_8 - x_3 - x_4.
Let x_10 = s * x_5.
Let x_11 = x_7 + x_8.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_2) /\
      is_sint32(x_11) /\ is_sint32(x_5) /\ is_sint32(x_9).
  (* Residual *)
  When: x_5 < x_11.
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((i * x) = y) \/ (((i * y) = x) /\ (0 < i)).
  (* Invariant *)
  Have: ((r * x_11) + x_10) = y.
  (* Invariant *)
  Have: ((p * x_11) + x_6) = x.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < x_11) /\ (0 < x_5).
  (* Invariant *)
  Have: (x_11 <= x) /\ (x_5 <= y).
  (* Invariant *)
  Have: ((i_1 * x_11) = x_5) \/ (((i_1 * x_5) = x_11) /\ (0 < i_1)).
  (* Invariant *)
  Have: (x_10 + (x_2 * x_9)) = y.
  (* Invariant *)
  Have: (x_6 + (x_1 * x_9)) = x.
  (* Invariant *)
  Have: (s * x_1) = (1 + (q * x_2)).
}
Prove: (x_3 + x_4 + (x * x_1) + (y * x_2)) = x_11.
Prover Z3 4.8.12 returns Valid (Qed:54ms) (10ms) (10921)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 25):
Let x_1 = (p * x) + (r * y).
Let x_2 = (q * x) + (s * y).
Let x_3 = (q_2 * x) + (s_2 * y).
Let x_4 = (p_2 * x) + (r_2 * y).
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x_4) /\
      is_sint32(x_2) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: ((i * x) = y) \/ (((i * y) = x) /\ (0 < i)).
  (* Invariant *)
  Have: ((r_2 * x_4) + (s_2 * x_3)) = y.
  (* Invariant *)
  Have: ((p_2 * x_4) + (q_2 * x_3)) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: (x_4 <= x) /\ (x_3 <= y).
  (* Invariant *)
  Have: ((i_1 * x_4) = x_3) \/ (((i_1 * x_3) = x_4) /\ (0 < i_1)).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (((q * x) + (s * y) + (x * (p_1 - q)) + (y * (r_1 - s)))
           = ((p_1 * x) + (r_1 * y))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (((q * x) + (s * y) + (x * (q_1 - q)) + (y * (s_1 - s)))
           = ((q_1 * x) + (s_1 * y))).
  }
  (* Invariant *)
  Have: ((r * x_1) + (s * x_2)) = y.
  (* Invariant *)
  Have: ((p * x_1) + (q * x_2)) = x.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < x_1) /\ (0 < x_2).
}
Prove: (x_1 <= x) /\ (x_2 <= y).
Prover Z3 4.8.12 returns Timeout (Qed:61ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:61ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 26):
Let x = (a * p) + (b * r).
Let x_1 = (a * q) + (b * s).
Let x_2 = (a * q_2) + (b * s_2).
Let x_3 = (a * p_2) + (b * r_2).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(p) /\ is_sint32(p_1) /\
      is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\
      is_sint32(s_1) /\ is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
  (* Invariant *)
  Have: ((a * i) = b) \/ (((b * i) = a) /\ (0 < i)).
  (* Invariant *)
  Have: ((r_2 * x_3) + (s_2 * x_2)) = b.
  (* Invariant *)
  Have: ((p_2 * x_3) + (q_2 * x_2)) = a.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_2).
  (* Invariant *)
  Have: (x_3 <= a) /\ (x_2 <= b).
  (* Invariant *)
  Have: ((i_1 * x_3) = x_2) \/ (((i_1 * x_2) = x_3) /\ (0 < i_1)).
  (* Then *)
  Have: x_2 != x_3.
  If x_2 < x_3
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (((a * q) + (b * s) + (a * (p_1 - q)) + (b * (r_1 - s)))
           = ((a * p_1) + (b * r_1))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (((a * q) + (b * s) + (a * (q_1 - q)) + (b * (s_1 - s)))
           = ((a * q_1) + (b * s_1))).
  }
  (* Invariant *)
  Have: ((r * x) + (s * x_1)) = b.
  (* Invariant *)
  Have: ((p * x) + (q * x_1)) = a.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: (0 < x) /\ (0 < x_1).
  (* Invariant *)
  Have: (x <= a) /\ (x_1 <= b).
}
Prove: exists i_2 : Z. ((i_2 * x) = x_1) \/ (((i_2 * x_1) = x) /\ (0 < i_2)).
Prover Z3 4.8.12 returns Timeout (Qed:57ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:57ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 26):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: exists i : Z. ((a * i) = b) \/ (((b * i) = a) /\ (0 < i)).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/5_0001/5_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/5_0001/5_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/5_0001/5_merged.c, line 51):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/5_0001/5_merged.c, line 31):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/5_0001/5_merged.c:4: Warning: 
  No 'assigns' specification for function 'main5'.
  Callers assumptions might be imprecise.
