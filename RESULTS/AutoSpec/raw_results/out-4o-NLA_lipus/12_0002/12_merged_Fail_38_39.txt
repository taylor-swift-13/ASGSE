[kernel] Parsing out/12_0002/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 39 goals scheduled
[wp] [Timeout] typed_main12_loop_invariant_4_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   38 / 39
  Qed:              28
  Alt-Ergo 2.5.4:   10 (4ms-18ms-59ms)
  Timeout:           1
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 14):
Let x = -t.
Let x_1 = A - t.
Let x_2 = x_1 % B.
Let x_3 = t + x_2.
Let x_4 = (A - t - x_2) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t + x_2 + (B * x_4)) = A.
  (* Invariant *)
  Have: x_3 <= A.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_4 = (x_1 / B).
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: x_3 < (A + B).
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
  (* Then *)
  Have: t != 0.
  If (1 + x_2) = B
  Then { Have: (1 + x_4) = q. Have: r = 0. }
  Else { Have: x_4 = q. Have: (1 + x_2) = r. }
}
Prove: (r + t + (B * q)) = (1 + A).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (90ms) (220843)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (8ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 15):
Let x = B * q.
Let x_1 = r + x - 1.
Let x_2 = x_1 % B.
Let x_3 = r + x.
Let x_4 = (r + x - 1 - x_2) / B.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t - 1) /\
      is_sint32(r + t + x - 1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < (r + t + x).
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (1 + x_2 + (B * x_4)) = x_3.
  (* Invariant *)
  Have: x_2 < x_3.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_4 = (x_1 / B).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (2 + x_2) <= (B + r + x).
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
  (* Then *)
  Have: t != 0.
  If (1 + x_2) = B
  Then {
    Let x_5 = 1 + q_1.
    Let x_6 = B * x_5.
    Have: ((x_6 - 1 - ((x_6 - 1) % B)) / B) = q_1.
    Have: x_5 = q.
    Have: r = 0.
  }
  Else { Have: ((x / B) = q) /\ (((r_1 + x) % B) = r_1). Have: (1 + r_1) = r.
  }
}
Prove: 0 <= x.
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (41609)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (17ms) (354)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 16):
Let x = B * q.
Let x_1 = -t_2.
Let x_2 = A - t_2.
Let x_3 = x_2 % B.
Let x_4 = t_2 + x_3.
Let x_5 = (A - t_2 - x_3) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(t_2) /\ is_sint32(x_3) /\ is_sint32(A - r - x) /\
      is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_2 + x_3 + (B * x_5)) = A.
  (* Invariant *)
  Have: x_4 <= A.
  (* Invariant *)
  Have: (0 <= t_2) /\ (0 <= x_5).
  (* Invariant *)
  Have: x_5 = (x_2 / B).
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: x_4 < (A + B).
  (* Invariant *)
  Have: (0 <= x_3) /\ (x_3 < B).
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_3) = B
  Then {
    Let x_6 = 1 + q_1.
    Let x_7 = B * x_6.
    Have: (t_2 = t) /\ (((x_7 - 1 - ((x_7 - 1) % B)) / B) = q_1).
    Have: x_6 = q.
    Have: r = 0.
    Have: (t + x_7) = (1 + A).
  }
  Else {
    Have: (t_2 = t_1) /\ ((x / B) = q) /\ (((r_1 + x) % B) = r_1).
    Have: (1 + r_1) = r.
    Have: (r_1 + t_1 + x) = A.
  }
  (* Invariant *)
  Have: 0 <= x.
}
Prove: (0 <= q) /\ ((r + x) <= A).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (22ms) (420)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 17):
Let x = B * q.
Let x_1 = r + x - 1.
Let x_2 = x_1 % B.
Let x_3 = r + x.
Let x_4 = (r + x - 1 - x_2) / B.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t - 1) /\
      is_sint32(r + t + x - 1) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < (r + t + x).
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (1 + x_2 + (B * x_4)) = x_3.
  (* Invariant *)
  Have: x_2 < x_3.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_4).
  (* Invariant *)
  Have: x_4 = (x_1 / B).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (2 + x_2) <= (B + r + x).
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
  (* Then *)
  Have: t != 0.
  If (1 + x_2) = B
  Then {
    Let x_5 = 1 + q_1.
    Let x_6 = B * x_5.
    Have: ((x_6 - 1 - ((x_6 - 1) % B)) / B) = q_1.
    Have: x_5 = q.
    Have: r = 0.
  }
  Else { Have: ((x / B) = q) /\ (((r_1 + x) % B) = r_1). Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: (0 < t) /\ (0 <= q).
}
Prove: (x_3 / B) = q.
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 17):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: (0 < B) /\ (0 <= A).
}
Prove: (0 / B) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (4ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 18):
Let x = -t.
Let x_1 = (A - t) / B.
Let x_2 = B * x_1.
Let x_3 = -t_3.
Let x_4 = A - t_3.
Let x_5 = x_4 % B.
Let x_6 = t_3 + x_5.
Let x_7 = (A - t_3 - x_5) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\
      is_sint32(x_1) /\ is_sint32(x_5) /\ is_sint32(x_7) /\
      is_sint32(A - t - x_2).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_3 + x_5 + (B * x_7)) = A.
  (* Invariant *)
  Have: x_6 <= A.
  (* Invariant *)
  Have: (0 <= t_3) /\ (0 <= x_7).
  (* Invariant *)
  Have: x_7 = (x_4 / B).
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: x_6 < (A + B).
  (* Invariant *)
  Have: (0 <= x_5) /\ (x_5 < B).
  (* Then *)
  Have: t_3 != 0.
  If (1 + x_5) = B
  Then {
    Let x_8 = -t_1.
    Let x_9 = (1 + A - t_1) / B.
    Have: (t_3 = t_1) /\ (x_9 = (1 + q)) /\
        (x_9 = (1 + ((A - t_1 - ((A - t_1) % B)) / B))).
    Have: ((1 + t) = t_1) /\ ((t_1 + (B * x_9)) = (1 + A)).
  }
  Else {
    Let x_10 = -t_2.
    Let x_11 = (A - t_2) % B.
    Let x_12 = (1 + A - t_2) / B.
    Let x_13 = B * x_12.
    Have: (t_3 = t_2) /\ (((A - t_2 - x_11) / B) = x_12) /\
        ((r + t_2 + x_13) = A) /\ ((t_2 + x_11 + x_13) = A).
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_1).
}
Prove: (x_2 / B) = x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:12ms) (26ms) (522)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 21):
Let x = -t.
Let x_1 = (A - r - t) / B.
Let x_2 = -t_2.
Let x_3 = A - t_2.
Let x_4 = x_3 % B.
Let x_5 = t_2 + x_4.
Let x_6 = (A - t_2 - x_4) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(x_4) /\
      is_sint32(x_1) /\ is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_2 + x_4 + (B * x_6)) = A.
  (* Invariant *)
  Have: x_5 <= A.
  (* Invariant *)
  Have: (0 <= t_2) /\ (0 <= x_6).
  (* Invariant *)
  Have: x_6 = (x_3 / B).
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: x_5 < (A + B).
  (* Invariant *)
  Have: (0 <= x_4) /\ (x_4 < B).
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_4) = B
  Then {
    Let x_7 = -t_1.
    Let x_8 = (1 + A - t_1) / B.
    Have: (t_2 = t_1) /\ (x_8 = (1 + q)) /\
        (x_8 = (1 + ((A - t_1 - ((A - t_1) % B)) / B))).
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (1 + x_4) = r. Have: (1 + t) = t_2. }
  (* Invariant *)
  Have: (r + t + (B * x_1)) = A.
  (* Invariant *)
  Have: (r + t) <= A.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 = ((A - t) / B).
}
Prove: t <= A.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (227)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 22):
Let x = -t.
Let x_1 = (A - r - t) / B.
Let x_2 = r + t.
Let x_3 = -t_2.
Let x_4 = A - t_2.
Let x_5 = x_4 % B.
Let x_6 = t_2 + x_5.
Let x_7 = A + B.
Let x_8 = (A - t_2 - x_5) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(x_5) /\
      is_sint32(x_1) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_2 + x_5 + (B * x_8)) = A.
  (* Invariant *)
  Have: x_6 <= A.
  (* Invariant *)
  Have: (0 <= t_2) /\ (0 <= x_8).
  (* Invariant *)
  Have: x_8 = (x_4 / B).
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: x_6 < x_7.
  (* Invariant *)
  Have: (0 <= x_5) /\ (x_5 < B).
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_5) = B
  Then {
    Let x_9 = -t_1.
    Let x_10 = (1 + A - t_1) / B.
    Have: (t_2 = t_1) /\ (x_10 = (1 + q)) /\
        (x_10 = (1 + ((A - t_1 - ((A - t_1) % B)) / B))).
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (1 + x_5) = r. Have: (1 + t) = t_2. }
  (* Invariant *)
  Have: (r + t + (B * x_1)) = A.
  (* Invariant *)
  Have: x_2 <= A.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_1).
  (* Invariant *)
  Have: x_1 = ((A - t) / B).
  (* Invariant *)
  Have: t <= A.
}
Prove: x_2 < x_7.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (9ms) (103)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 23):
Let x = r + t.
Let x_1 = A + B.
Let x_2 = -t.
Let x_3 = (A - r - t) / B.
Let x_4 = -t_2.
Let x_5 = A - t_2.
Let x_6 = x_5 % B.
Let x_7 = t_2 + x_6.
Let x_8 = (A - t_2 - x_6) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(x_6) /\
      is_sint32(x_3) /\ is_sint32(x_8).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_2 + x_6 + (B * x_8)) = A.
  (* Invariant *)
  Have: x_7 <= A.
  (* Invariant *)
  Have: (0 <= t_2) /\ (0 <= x_8).
  (* Invariant *)
  Have: x_8 = (x_5 / B).
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: x_7 < x_1.
  (* Invariant *)
  Have: (0 <= x_6) /\ (x_6 < B).
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_6) = B
  Then {
    Let x_9 = -t_1.
    Let x_10 = (1 + A - t_1) / B.
    Have: (t_2 = t_1) /\ (x_10 = (1 + q)) /\
        (x_10 = (1 + ((A - t_1 - ((A - t_1) % B)) / B))).
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (1 + x_6) = r. Have: (1 + t) = t_2. }
  (* Invariant *)
  Have: (r + t + (B * x_3)) = A.
  (* Invariant *)
  Have: x <= A.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_3 = ((A - t) / B).
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: x < x_1.
}
Prove: (0 <= r) /\ (r < B).
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (16ms) (306)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.66ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 24):
Let x = r + t.
Let x_1 = A + B.
Let x_2 = -t.
Let x_3 = (A - r - t) / B.
Let x_4 = A - t.
Let x_5 = -t_2.
Let x_6 = A - t_2.
Let x_7 = x_6 % B.
Let x_8 = t_2 + x_7.
Let x_9 = (A - t_2 - x_7) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(x_7) /\
      is_sint32(x_3) /\ is_sint32(x_9).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: (t_2 + x_7 + (B * x_9)) = A.
  (* Invariant *)
  Have: x_8 <= A.
  (* Invariant *)
  Have: (0 <= t_2) /\ (0 <= x_9).
  (* Invariant *)
  Have: x_9 = (x_6 / B).
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: x_8 < x_1.
  (* Invariant *)
  Have: (0 <= x_7) /\ (x_7 < B).
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_7) = B
  Then {
    Let x_10 = -t_1.
    Let x_11 = (1 + A - t_1) / B.
    Have: (t_2 = t_1) /\ (x_11 = (1 + q)) /\
        (x_11 = (1 + ((A - t_1 - ((A - t_1) % B)) / B))).
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (1 + x_7) = r. Have: (1 + t) = t_2. }
  (* Invariant *)
  Have: (r + t + (B * x_3)) = A.
  (* Invariant *)
  Have: x <= A.
  (* Invariant *)
  Have: (0 <= t) /\ (0 <= x_3).
  (* Invariant *)
  Have: x_3 = (x_4 / B).
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: x < x_1.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
}
Prove: (x_4 % B) = r.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (59ms) (1021)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 24):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 % B) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (6ms) (41)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0002/12_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0002/12_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.76ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0002/12_merged.c, line 33):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0002/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
