[kernel] Parsing out/2_0001/2_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 37 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_3_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_5_preserved (Qed 3ms) (Z3)
[wp] [Timeout] typed_main2_loop_invariant_5_established (Qed 0.88ms) (Z3)
[wp] Proved goals:   34 / 37
  Qed:              29
  Alt-Ergo 2.5.4:    5
  Timeout:           3
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 10):
Let x_1 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r <= x.
  (* Invariant *)
  Have: r < x.
  (* Invariant *)
  Have: r < x_1.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
  If (1 + r) = y
  Then { Have: q = 1. }
  Else { Have: q = 0. }
}
Prove: (q * y) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (38280)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r_2 <= x.
  (* Invariant *)
  Have: r_2 < x.
  (* Invariant *)
  Have: r_2 < x_2.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: q = 1. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: (r + x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (39486)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (67)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 12):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r_2 <= x.
  (* Invariant *)
  Have: r_2 < x.
  (* Invariant *)
  Have: r_2 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: q = 1. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: x_2 < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 13):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r_2 <= x.
  (* Invariant *)
  Have: r_2 < x.
  (* Invariant *)
  Have: r_2 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: q = 1. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x.
}
Prove: x_2 < x_3.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (32933)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (41)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 13):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < x.
}
Prove: 0 < (x + y).
Prover Z3 4.8.12 returns Valid (Qed:0.84ms) (10ms) (29646)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.84ms) (17)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 14):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(r_2) /\
      is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: x_2 < x.
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r_2 <= x.
  (* Invariant *)
  Have: r_2 < x.
  (* Invariant *)
  Have: r_2 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: 0 <= r_2.
  If (1 + r_2) = y
  Then { Have: r = 0. Have: q = 1. }
  Else { Have: (q = 0) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 < x_3.
}
Prove: q = 0.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 14):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Goal *)
  When: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < (x + y).
}
Prove: (x / y) = 1.
Prover Z3 4.8.12 returns Timeout (Qed:0.88ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.88ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 18):
Let x_1 = 2 + r.
Let x_2 = x + y.
Let x_3 = 1 + r.
Assume {
  Type: is_sint32(r) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3).
  (* Invariant *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: (x / y) = 1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: r <= x.
  (* Invariant *)
  Have: r < x.
  (* Invariant *)
  Have: r < x_2.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: 0 <= r.
  Have: x_3 != y.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: x_1 <= y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (31722)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (23)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.53ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.57ms)

------------------------------------------------------------

Goal Loop assigns (file out/2_0001/2_merged.c, line 28):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0001/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
