[kernel] Parsing out/2_0001/2_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 33 goals scheduled
[wp] [Timeout] typed_main2_loop_invariant_16_preserved (Qed 4ms) (Z3)
[wp] Proved goals:   32 / 33
  Qed:              21
  Alt-Ergo 2.5.4:   11 (3ms-7ms-21ms)
  Timeout:           1
------------------------------------------------------------
  Function main2
------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 10):
Let x_1 = q_2 * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x_4.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: x_2 < x.
  If (1 + r) = y
  Then { Have: q_2 = q_1. Have: (1 + q_1) = q. }
  Else { Have: q_2 = q. }
}
Prove: (q * y) <= x.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (9ms) (69)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 11):
Let x_1 = q * y.
Let x_2 = q_2 * y.
Let x_3 = r_2 + x_2.
Let x_4 = x / y.
Let x_5 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_5.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x_5.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_4.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: x_3 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
}
Prove: (r + x_1) <= x.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (41814)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (8ms) (156)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 12):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = q_2 * y.
Let x_4 = r_2 + x_3.
Let x_5 = x / y.
Let x_6 = x + y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_6.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_4 < x_6.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_5.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: x_4 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
}
Prove: x_2 < x_6.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (34205)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (5ms) (78)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 12):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < y.
}
Prove: 0 < (x + y).
Prover Z3 4.8.12 returns Valid (Qed:0.72ms) (10ms) (29541)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.72ms) (4ms) (16)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 13):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Let x_6 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_6.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_5 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x_3.
}
Prove: (x_2 = x) \/ (x_2 < x).
Prover Z3 4.8.12 returns Valid (Qed:4ms) (10ms) (34392)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (3ms) (75)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 16):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Let x_6 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_6.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_5 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x_3.
  (* Invariant *)
  Have: (x_2 = x) \/ (x_2 < x).
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (36041)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (8ms) (170)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 17):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x + y.
Let x_4 = q_2 * y.
Let x_5 = r_2 + x_4.
Let x_6 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_3.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_5 < x_3.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_6.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: x_5 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x_3.
  (* Invariant *)
  Have: (x_2 = x) \/ (x_2 < x).
  (* Invariant *)
  Have: r < y.
}
Prove: q <= x_6.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (90ms) (228260)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (21ms) (504)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 17):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < (x + y).
  (* Invariant *)
  Have: 0 < y.
}
Prove: 0 <= (x / y).
Prover Z3 4.8.12 returns Valid (Qed:1ms) (20ms) (29934)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (5ms) (33)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 19):
Let x_1 = x / y.
Let x_2 = q * y.
Let x_3 = r + x_2.
Let x_4 = x + y.
Let x_5 = q_2 * y.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_6 < x_4.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_6 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x_4.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_3 < x).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (35755)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (9ms) (168)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 20):
Let x_1 = x / y.
Let x_2 = q * y.
Let x_3 = r + x_2.
Let x_4 = x + y.
Let x_5 = q_2 * y.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_6 < x_4.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_6 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x_4.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_3 < x).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (36598)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (4ms) (169)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 21):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 22):
Let x_1 = x / y.
Let x_2 = q * y.
Let x_3 = r + x_2.
Let x_4 = x + y.
Let x_5 = q_2 * y.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_6 < x_4.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_6 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_3 < x_4.
  (* Invariant *)
  Have: (x_3 = x) \/ (x_3 < x).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q.
}
Prove: 0 <= x_3.
Prover Z3 4.8.12 returns Valid (Qed:4ms) (20ms) (50851)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:4ms) (6ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 24):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/2_0001/2_merged.c, line 25):
Let x_1 = q * y.
Let x_2 = r + x_1.
Let x_3 = x / y.
Let x_4 = x + y.
Let x_5 = q_2 * y.
Let x_6 = r_2 + x_5.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: x_5 <= x.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: x_6 < x_4.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_3.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Invariant *)
  Have: x_6 < x.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: x_1 <= x.
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: x_2 < x_4.
  (* Invariant *)
  Have: (x_2 = x) \/ (x_2 < x).
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_3.
  (* Invariant *)
  Have: 0 <= r.
  (* Invariant *)
  Have: 0 <= q.
  (* Invariant *)
  Have: 0 <= x_2.
}
Prove: x_2 < x.
Prover Z3 4.8.12 returns Timeout (Qed:4ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:4ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/2_0001/2_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Loop assigns (file out/2_0001/2_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/2_0001/2_merged.c:4: Warning: 
  No 'assigns' specification for function 'main2'.
  Callers assumptions might be imprecise.
