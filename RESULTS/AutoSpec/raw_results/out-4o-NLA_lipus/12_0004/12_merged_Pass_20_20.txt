[kernel] Parsing out/12_0004/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] Proved goals:   20 / 20
  Qed:              14
  Alt-Ergo 2.5.4:    5 (3ms-7ms-9ms)
  Z3 4.8.12:         1 (2s)
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 14):
Let x = B * q.
Let x_1 = B + t_3 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\
      is_sint32(A - t_3 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: ((t_3 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_3 != 0.
  If x_1 = (1 + A)
  Then { Have: t_3 = t_1. Have: (1 + t) = t_1. }
  Else { Have: t_3 = t_2. Have: (1 + t) = t_2. }
}
Prove: t <= A.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (33083)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (5ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.99ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 15):
Let x = B * q.
Let x_1 = B + t_2 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: ((t_2 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then { Have: t_2 = t_1. Have: r = 0. Have: (1 + t) = t_1. }
  Else { Have: (r_1 + t_2 + x) = A. Have: (1 + r_1) = r. Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
}
Prove: (0 <= r) /\ (r < B).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (33971)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (3ms) (103)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.54ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 17):
Let x = B * q_2.
Let x_1 = B + t_2 + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: ((t_2 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Have: (q_2 = q) /\ ((r_1 + t_2 + x) = A).
    Have: (1 + r_1) = r.
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
}
Prove: (r + t + (B * q)) = A.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (8ms) (97)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.56ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 20):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_2.
Let x_3 = B + t_1 + x_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(A - r - x) /\ is_sint32(A - t_1 - x_2).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_1 <= A.
  (* Invariant *)
  Have: ((t_1 + x_2) <= A) /\ (A < x_3).
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_1 != 0.
  If x_3 = (1 + A)
  Then {
    Let x_4 = 1 + q_1.
    Have: (q_2 = q_1) /\ (t_1 = t).
    Have: x_4 = q.
    Have: r = 0.
    Have: (t + (B * x_4)) = (1 + A).
  }
  Else { Have: (q_2 = q) /\ ((r_1 + t_1 + x) = A). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
}
Prove: x_1 <= A.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (20ms) (69354)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (9ms) (210)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0004/12_merged.c, line 22):
Let x = B * q.
Let x_1 = B * q_2.
Let x_2 = B + t_2 + x_1.
Let x_3 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(t_2) /\ is_sint32(x_3) /\ is_sint32(r + t + x - t_2 - x_1).
  (* Pre-condition *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: t_2 <= x_3.
  (* Invariant *)
  Have: ((t_2 + x_1) <= x_3) /\ (x_3 < x_2).
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_2 != 0.
  If (1 + r + t + x) = x_2
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (q_2 = q) /\ ((1 + r_1) = r) /\ ((1 + t) = t_2). }
  (* Invariant *)
  Have: 0 <= (r + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: 0 <= t.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (35354)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (8ms) (199)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0004/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Assertion (file out/12_0004/12_merged.c, line 38):
Let x = B * q.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(A - x).
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (x <= A) /\ (A < (B + x)).
  (* Invariant *)
  Have: 0 <= q.
}
Prove: (A / B) = q.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (2s) (5610081)

------------------------------------------------------------

Goal Loop assigns (file out/12_0004/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0004/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
