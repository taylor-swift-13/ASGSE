[kernel] Parsing out/12_0003/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 27 goals scheduled
[wp] [Timeout] typed_main12_loop_invariant_7_established (Qed 0.77ms) (Z3)
[wp] Proved goals:   26 / 27
  Qed:              17
  Alt-Ergo 2.5.4:    7 (4ms-29ms-121ms)
  Z3 4.8.12:         2 (60ms-80ms)
  Timeout:           1
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 14):
Let x = A - t.
Let x_1 = x % B.
Let x_2 = (A - x_1) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t + x_1 + (B * x_2)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 < B).
  (* Invariant *)
  Have: x_2 = (x / B).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= x_2.
  (* Then *)
  Have: t != 0.
  If (1 + x_1) = B
  Then { Have: (1 + x_2) = q. Have: r = 0. }
  Else { Have: x_2 = q. Have: (1 + x_1) = r. }
}
Prove: (r + t + (B * q)) = (1 + A).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (40ms) (80442)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (7ms) (72)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.52ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.59ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 16):
Let x = 1 + A.
Let x_1 = -t.
Let x_2 = A - t.
Let x_3 = x_2 % B.
Let x_4 = (A - x_3) / B.
Let x_5 = B * q.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_3) /\
      is_sint32(1 + A - t - x_5) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t + x_3 + (B * x_4)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_3) /\ (x_3 < B).
  (* Invariant *)
  Have: x_4 = (x_2 / B).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= x_4.
  (* Then *)
  Have: t != 0.
  If (1 + x_3) = B
  Then {
    Let x_6 = 1 + q_1.
    Let x_7 = B * x_6.
    Have: ((t + x_7 - 1 - ((x_7 - 1) % B)) / B) = q_1.
    Have: x_6 = q.
    Have: (t + x_7) = x.
  }
  Else {
    Have: (((t + x_5) / B) = q) /\ (((r + x_5) % B) = r).
    Have: (r + t + x_5) = A.
  }
  (* Invariant *)
  Have: t <= x.
}
Prove: ((t + x_5) <= x) /\ ((2 + A) <= (B + t + x_5)).
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (83900)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (28ms) (477)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 17):
Let x = B * q.
Let x_1 = r + x - 1.
Let x_2 = x_1 % B.
Let x_3 = (r + t_2 + x - 1 - x_2) / B.
Let x_4 = r + x.
Let x_5 = r + t_2 + x - 1.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(t_2 - 1) /\ is_sint32(x_5) /\ is_sint32(x_2) /\
      is_sint32(x_3).
  (* Pre-condition *)
  Have: 0 < (r + t_2 + x).
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (x_5 / B) = 0.
  (* Invariant *)
  Have: (1 + x_2 + (B * x_3)) = x_4.
  (* Invariant *)
  Have: 0 < x_4.
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
  (* Invariant *)
  Have: x_3 = (x_1 / B).
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Then *)
  Have: t_2 != 0.
  If (1 + x_2) = B
  Then {
    Let x_6 = 1 + q_1.
    Let x_7 = B * x_6.
    Have: (t_2 = t) /\ (((t + x_7 - 1 - ((x_7 - 1) % B)) / B) = q_1).
    Have: x_6 = q.
    Have: r = 0.
  }
  Else {
    Have: (t_2 = t_1) /\ (((t_1 + x) / B) = q) /\ (((r_1 + x) % B) = r_1).
    Have: (1 + r_1) = r.
  }
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
}
Prove: (x_4 % B) = r.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (60ms) (148044)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 17):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 % B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 19):
Let x = -t.
Let x_1 = 1 + A - t.
Let x_2 = x_1 % B.
Let x_3 = 1 + A.
Let x_4 = A - t.
Let x_5 = x_4 % B.
Let x_6 = (A - x_5) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_5) /\ is_sint32(x_2) /\
      is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t + x_5 + (B * x_6)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_5) /\ (x_5 < B).
  (* Invariant *)
  Have: x_6 = (x_4 / B).
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= x_6.
  (* Then *)
  Have: t != 0.
  If (1 + x_5) = B
  Then { Have: (1 + x_6) = q. Have: x_2 = 0. }
  Else { Have: (x_2 = (1 + r)) /\ (x_2 = (1 + x_5)) /\ (x_6 = q). }
  (* Invariant *)
  Have: (t + (B * q) + x_2) = x_3.
  (* Invariant *)
  Have: t <= x_3.
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
}
Prove: (x_1 / B) = q.
Prover Z3 4.8.12 returns Valid (Qed:9ms) (20ms) (67057)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:9ms) (121ms) (2466)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 19):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 / B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:1ms) (10ms) (30251)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:1ms) (6ms) (43)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 20):
Let x = A - t.
Let x_1 = x % B.
Let x_2 = x / B.
Let x_3 = A - t_3.
Let x_4 = x_3 % B.
Let x_5 = (A - x_4) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t_3 + x_4 + (B * x_5)) = A.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: (0 <= x_4) /\ (x_4 < B).
  (* Invariant *)
  Have: x_5 = (x_3 / B).
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Then *)
  Have: t_3 != 0.
  If (1 + x_4) = B
  Then {
    Let x_6 = -t_1.
    Let x_7 = 1 + A - t_1.
    Let x_8 = x_7 / B.
    Have: (t_3 = t_1) /\ (x_8 = (1 + q)) /\
        (x_8 = (1 + ((A - ((A - t_1) % B)) / B))).
    Have: (x_7 % B) = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Let x_9 = -t_2.
    Let x_10 = 1 + A - t_2.
    Let x_11 = x_10 % B.
    Let x_12 = (A - t_2) % B.
    Have: (t_3 = t_2) /\ (x_11 = (1 + r)) /\ (x_11 = (1 + x_12)) /\
        (((A - x_12) / B) = (x_10 / B)).
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: (t + x_1 + (B * x_2)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 < B).
}
Prove: ((A - x_1) / B) = x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (80ms) (158674)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 20):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
}
Prove: (A / B) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:0.77ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.77ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.69ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 24):
Let x = A - t.
Let x_1 = x % B.
Let x_2 = (A - x_1) / B.
Let x_3 = A - t_3.
Let x_4 = x_3 % B.
Let x_5 = (A - x_4) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(r) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t_3 + x_4 + (B * x_5)) = A.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: (0 <= x_4) /\ (x_4 < B).
  (* Invariant *)
  Have: x_5 = (x_3 / B).
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Then *)
  Have: t_3 != 0.
  If (1 + x_4) = B
  Then {
    Let x_6 = -t_1.
    Have: (t_3 = t_1) /\ (((A - ((A - t_1) % B)) / B) = (-1)).
    Have: ((1 + A - t_1) % B) = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Let x_7 = -t_2.
    Let x_8 = (1 + A - t_2) % B.
    Let x_9 = (A - t_2) % B.
    Have: (t_3 = t_2) /\ (x_8 = (1 + r)) /\ (x_8 = (1 + x_9)) /\
        (((A - x_8) / B) = ((A - x_9) / B)).
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: (t + x_1 + (B * x_2)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 < B).
  (* Invariant *)
  Have: x_2 = (x / B).
}
Prove: 0 <= t.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (30ms) (48869)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (17ms) (271)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0003/12_merged.c, line 26):
Let x = A - t.
Let x_1 = x % B.
Let x_2 = (A - x_1) / B.
Let x_3 = A - t_3.
Let x_4 = x_3 % B.
Let x_5 = (A - x_4) / B.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(r) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\ is_sint32(x_1) /\
      is_sint32(x_4) /\ is_sint32(x_2) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 / B) = 0.
  (* Invariant *)
  Have: (A / B) = 0.
  (* Invariant *)
  Have: (t_3 + x_4 + (B * x_5)) = A.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: (0 <= x_4) /\ (x_4 < B).
  (* Invariant *)
  Have: x_5 = (x_3 / B).
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: 0 <= x_5.
  (* Then *)
  Have: t_3 != 0.
  If (1 + x_4) = B
  Then {
    Let x_6 = -t_1.
    Have: (t_3 = t_1) /\ (((A - ((A - t_1) % B)) / B) = (-1)).
    Have: ((1 + A - t_1) % B) = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Let x_7 = -t_2.
    Let x_8 = (1 + A - t_2) % B.
    Let x_9 = (A - t_2) % B.
    Have: (t_3 = t_2) /\ (x_8 = (1 + r)) /\ (x_8 = (1 + x_9)) /\
        (((A - x_8) / B) = ((A - x_9) / B)).
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: (t + x_1 + (B * x_2)) = A.
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (0 <= x_1) /\ (x_1 < B).
  (* Invariant *)
  Have: x_2 = (x / B).
  (* Invariant *)
  Have: 0 <= t.
}
Prove: 0 <= x_2.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (40232)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (19ms) (270)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0003/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0003/12_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0003/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
