[kernel] Parsing out/1_0002/1_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 49 goals scheduled
[wp] [Timeout] typed_main1_loop_invariant_8_established (Qed 0.79ms) (Z3)
[wp] Proved goals:   48 / 49
  Qed:              40
  Alt-Ergo 2.5.4:    8 (6ms-13ms)
  Timeout:           1
------------------------------------------------------------
  Function main1
------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 13):
Let x = 1 + n.
Let x_1 = 2 * n.
Let x_2 = n * x * (1 + x_1).
Let x_3 = n * n.
Let x_4 = 1 + a.
Let x_5 = x_2 / 6.
Let x_6 = 3 * x_3.
Let x_7 = 1 + (3 * n) + x_6.
Let x_8 = 6 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(6 + x_8) /\
      is_sint32(12 + x_8) /\ is_sint32(x_7) /\
      is_sint32(7 + (9 * n) + x_6) /\ is_sint32(x_5).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: x_5 = (n * n * n).
  (* Invariant *)
  Have: x_5 <= x_7.
  (* Invariant *)
  Have: n <= x_4.
  (* Invariant *)
  Have: (x_4 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: 0 <= (n + x_3).
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-5) <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
}
Prove: (x * x) = (1 + x_1 + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (10345)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (6ms) (120)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 14):
Let x = 1 + n.
Let x_1 = 2 * n.
Let x_2 = n * x * (1 + x_1).
Let x_3 = x * x.
Let x_4 = 1 + a.
Let x_5 = 3 * n.
Let x_6 = x_2 / 6.
Let x_7 = 3 * x_3.
Let x_8 = 6 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(6 + x_8) /\
      is_sint32(12 + x_8) /\ is_sint32(x_6) /\ is_sint32(x_7 - 2 - x_5) /\
      is_sint32(4 + x_5 + x_7).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_3 = (1 + x_1 + (n * n)).
  (* Invariant *)
  Have: x_3 <= (2 + x_5).
  (* Invariant *)
  Have: x_6 = (n * n * n).
  (* Invariant *)
  Have: (2 + x_5 + x_6) <= x_7.
  (* Invariant *)
  Have: n <= x_4.
  (* Invariant *)
  Have: (x_4 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_3.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-5) <= x_2.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
}
Prove: x_3 <= (2 + n).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (10ms) (34981)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (13ms) (331)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.58ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 15):
Let x = 1 + n.
Let x_1 = x * x.
Let x_2 = 2 * n.
Let x_3 = n * x * (1 + x_2).
Let x_4 = 1 + a.
Let x_5 = 3 * n.
Let x_6 = x_3 / 6.
Let x_7 = 3 * x_1.
Let x_8 = 6 * n.
Let x_9 = (-3) * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(6 + x_8) /\
      is_sint32(12 + x_8) /\ is_sint32(x_6) /\ is_sint32(x_7 - 2 - x_5) /\
      is_sint32(4 + x_5 + x_7) /\ is_sint32(x_7 + x_6 - 2 - x_5).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_1 = (1 + x_2 + (n * n)).
  (* Invariant *)
  Have: x_1 <= (2 + x_5).
  (* Invariant *)
  Have: x_6 = (n * n * n).
  (* Invariant *)
  Have: (2 + x_5 + x_6) <= x_7.
  (* Invariant *)
  Have: n <= x_4.
  (* Invariant *)
  Have: (x_4 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_1.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: (-5) <= x_3.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_1 <= (2 + n).
}
Prove: (x_7 + x_6) = (2 + x_5 + (x * x * x)).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (10599)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (8ms) (172)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.51ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 16):
Let x = 1 + n.
Let x_1 = x * x.
Let x_2 = 2 + n.
Let x_3 = 3 * x_1.
Let x_4 = 3 * n.
Let x_5 = x * x * x.
Let x_6 = 2 + x_4 + x_5.
Let x_7 = 1 + a.
Let x_8 = 6 * n.
Let x_9 = 2 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(6 + x_8) /\
      is_sint32(12 + x_8) /\ is_sint32(x_5) /\ is_sint32(x_3 - 2 - x_4) /\
      is_sint32(4 + x_4 + x_3) /\ is_sint32(2 + x_4 + x_5 - x_3).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_1 = (1 + x_9 + (n * n)).
  (* Invariant *)
  Have: x_1 <= (2 + x_4).
  (* Invariant *)
  Have: x_6 = ((n * n * n) + x_3).
  (* Invariant *)
  Have: (x_3 + ((n * x * (1 + x_9)) / 6)) = x_6.
  (* Invariant *)
  Have: (4 + x_8 + x_5) <= (6 * x_1).
  (* Invariant *)
  Have: n <= x_7.
  (* Invariant *)
  Have: (x_7 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_1.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_3 <= x_6.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_1 <= x_2.
}
Prove: ((x * x_2 * (3 + x_9)) / 6) = x_5.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (37724)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (11ms) (289)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 17):
Let x = 1 + n.
Let x_1 = 2 + n.
Let x_2 = 2 * n.
Let x_3 = (x * x_1 * (3 + x_2)) / 6.
Let x_4 = x * x.
Let x_5 = 3 * x_4.
Let x_6 = 3 * n.
Let x_7 = 2 + x_6 + x_3.
Let x_8 = 1 + a.
Let x_9 = 6 * n.
Let x_10 = 4 + x_6 + x_5.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\ is_sint32(6 + x_9) /\
      is_sint32(12 + x_9) /\ is_sint32(x_3) /\ is_sint32(x_5 - 2 - x_6) /\
      is_sint32(x_10) /\ is_sint32(2 + x_6 + x_3 - x_5).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_4 = (1 + x_2 + (n * n)).
  (* Invariant *)
  Have: x_4 <= (2 + x_6).
  (* Invariant *)
  Have: x_7 = ((n * n * n) + x_5).
  (* Invariant *)
  Have: x_7 = (x_5 + ((n * x * (1 + x_2)) / 6)).
  (* Invariant *)
  Have: (4 + x_9 + x_3) <= (6 * x_4).
  (* Invariant *)
  Have: n <= x_8.
  (* Invariant *)
  Have: (x_8 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_4.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_5 <= x_7.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_4 <= x_1.
  (* Invariant *)
  Have: x_3 = (x * x * x).
}
Prove: x_3 <= x_10.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (34890)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (8ms) (122)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 19):
Let x = 1 + n.
Let x_1 = 2 + n.
Let x_2 = 2 * n.
Let x_3 = (x * x_1 * (3 + x_2)) / 6.
Let x_4 = 3 * n.
Let x_5 = x * x.
Let x_6 = 3 * x_5.
Let x_7 = 4 + x_4 + x_6.
Let x_8 = 2 + x_4 + x_3.
Let x_9 = 1 + a.
Let x_10 = 6 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(6 + x_10) /\ is_sint32(12 + x_10) /\ is_sint32(x_3) /\
      is_sint32(x_6 - 2 - x_4) /\ is_sint32(x_7) /\
      is_sint32(2 + x_4 + x_3 - x_6).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_5 = (1 + x_2 + (n * n)).
  (* Invariant *)
  Have: x_5 <= (2 + x_4).
  (* Invariant *)
  Have: x_8 = ((n * n * n) + x_6).
  (* Invariant *)
  Have: x_8 = (x_6 + ((n * x * (1 + x_2)) / 6)).
  (* Invariant *)
  Have: (4 + x_10 + x_3) <= (6 * x_5).
  (* Invariant *)
  Have: n <= x_9.
  (* Invariant *)
  Have: (x_9 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_5.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_6 <= x_8.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_5 <= x_1.
  (* Invariant *)
  Have: x_3 = (x * x * x).
  (* Invariant *)
  Have: x_3 <= x_7.
}
Prove: (n = a) \/ (x_9 = n).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (37509)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (7ms) (117)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 19):
Assume {
  Type: is_sint32(a).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (-1) <= a.
}
Prove: (a = (-2)) \/ (a = (-1)).
Prover Z3 4.8.12 returns Timeout (Qed:0.79ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:0.79ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 20):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 21):
Let x = 1 + n.
Let x_1 = 1 + a.
Let x_2 = 2 + n.
Let x_3 = 2 * n.
Let x_4 = (x * x_2 * (3 + x_3)) / 6.
Let x_5 = 3 * n.
Let x_6 = x * x.
Let x_7 = 3 * x_6.
Let x_8 = 4 + x_5 + x_7.
Let x_9 = 2 + x_5 + x_4.
Let x_10 = 6 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(6 + x_10) /\ is_sint32(12 + x_10) /\ is_sint32(x_4) /\
      is_sint32(x_7 - 2 - x_5) /\ is_sint32(x_8) /\
      is_sint32(2 + x_5 + x_4 - x_7).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_6 = (1 + x_3 + (n * n)).
  (* Invariant *)
  Have: x_6 <= (2 + x_5).
  (* Invariant *)
  Have: x_9 = ((n * n * n) + x_7).
  (* Invariant *)
  Have: x_9 = (x_7 + ((n * x * (1 + x_3)) / 6)).
  (* Invariant *)
  Have: (4 + x_10 + x_4) <= (6 * x_6).
  (* Invariant *)
  Have: n <= x_1.
  (* Invariant *)
  Have: (x_1 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_6.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_7 <= x_9.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_6 <= x_2.
  (* Invariant *)
  Have: x_4 = (x * x * x).
  (* Invariant *)
  Have: x_4 <= x_8.
  (* Invariant *)
  Have: (n = a) \/ (x_1 = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> (i <= x))).
}
Prove: (-1) <= (n + x_6).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (35722)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (9ms) (120)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.97ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 24):
Let x = 1 + n.
Let x_1 = x * x.
Let x_2 = 1 + a.
Let x_3 = 2 + n.
Let x_4 = 2 * n.
Let x_5 = x * x_3 * (3 + x_4).
Let x_6 = x_5 / 6.
Let x_7 = 3 * n.
Let x_8 = 3 * x_1.
Let x_9 = 4 + x_7 + x_8.
Let x_10 = 2 + x_7 + x_6.
Let x_11 = 6 * n.
Assume {
  Type: is_sint32(a) /\ is_sint32(n) /\ is_sint32(x) /\
      is_sint32(6 + x_11) /\ is_sint32(12 + x_11) /\ is_sint32(x_6) /\
      is_sint32(x_8 - 2 - x_7) /\ is_sint32(x_9) /\
      is_sint32(2 + x_7 + x_6 - x_8).
  (* Pre-condition *)
  Have: 0 <= a.
  (* Invariant *)
  Have: (a = (-2)) \/ (a = (-1)).
  (* Invariant *)
  Have: (-1) <= a.
  (* Invariant *)
  Have: x_1 = (1 + x_4 + (n * n)).
  (* Invariant *)
  Have: x_1 <= (2 + x_7).
  (* Invariant *)
  Have: x_10 = ((n * n * n) + x_8).
  (* Invariant *)
  Have: x_10 = (x_8 + ((n * x * (1 + x_4)) / 6)).
  (* Invariant *)
  Have: (4 + x_11 + x_6) <= (6 * x_1).
  (* Invariant *)
  Have: n <= x_2.
  (* Invariant *)
  Have: (x_2 = n) \/ ((2 + a) = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < n) -> (i <= n))).
  (* Invariant *)
  Have: n < x_1.
  (* Invariant *)
  Have: (-1) <= n.
  (* Invariant *)
  Have: x_8 <= x_10.
  (* Invariant *)
  Have: 0 <= n.
  (* Then *)
  Have: n <= a.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: x_6 = (x * x * x).
  (* Invariant *)
  Have: x_6 <= x_9.
  (* Invariant *)
  Have: (n = a) \/ (x_2 = n).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= n) -> (i <= x))).
  (* Invariant *)
  Have: (-1) <= (n + x_1).
  (* Invariant *)
  Have: (-2) <= n.
}
Prove: (-5) <= x_5.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (38569)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (12ms) (217)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.98ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.67ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.68ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (0.80ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (0.75ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (0.70ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/1_0002/1_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/1_0002/1_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Loop assigns (file out/1_0002/1_merged.c, line 36):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/1_0002/1_merged.c:2: Warning: 
  No 'assigns' specification for function 'main1'.
  Callers assumptions might be imprecise.
