[kernel] Parsing out/21_0007/21_merged.c (with preprocessing)
[kernel:typing:no-proto] out/21_0007/21_merged.c:20: Warning: 
  Calling function unknown that is declared without prototype.
  Its formals will be inferred from actual arguments
[wp] Running WP plugin...
[kernel:annot:missing-spec] out/21_0007/21_merged.c:2: Warning: 
  Neither code nor specification for function unknown, generating default assigns from the prototype
[wp] Warning: Missing RTE guards
[wp] 22 goals scheduled
[wp] [Timeout] typed_main21_loop_invariant_4_established (Z3)
[wp] [Timeout] typed_main21_loop_invariant_6_preserved (Qed 11ms) (Z3)
[wp] Proved goals:   20 / 22
  Qed:              13
  Alt-Ergo 2.5.4:    7 (5ms-45ms-253ms)
  Timeout:           2
------------------------------------------------------------
  Function main21
------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 7):
Let x = y * y.
Let x_1 = 1 + y.
Let x_2 = x_1 * x_1.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x_1) /\ is_sint32(x) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: x = (y + (y * (y - 1))).
  (* Invariant *)
  Have: (y * x_1) = (y + x).
  (* Invariant *)
  Have: (x % y) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) <= x))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) = x))).
  (* Invariant *)
  Have: forall i : Z. let x_3 = 1 + i in ((0 <= i) -> ((i < y) ->
      ((x_3 * x_3) = x))).
  (* Invariant *)
  Have: 0 <= x.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
}
Prove: y < x_2.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (33134)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (6ms) (43)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 7):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 8):
Let x = 1 + y.
Let x_1 = x * x.
Let x_2 = y * y.
Let x_3 = y * x.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_2) /\
      is_sint32(x_1).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: x_2 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_3 = (y + x_2).
  (* Invariant *)
  Have: (x_2 % y) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) <= x_2))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) = x_2))).
  (* Invariant *)
  Have: forall i : Z. let x_4 = 1 + i in ((0 <= i) -> ((i < y) ->
      ((x_4 * x_4) = x_2))).
  (* Invariant *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: y < x_1.
}
Prove: x_1 = (1 + y + x_3).
Prover Z3 4.8.12 returns Valid (Qed:5ms) (20ms) (10245)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:5ms) (7ms) (40)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 8):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 9):
Let x = 1 + y.
Let x_1 = y * x.
Let x_2 = 1 + y + x_1.
Let x_3 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_3) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: x_3 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_1 = (y + x_3).
  (* Invariant *)
  Have: (x_3 % y) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) <= x_3))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) = x_3))).
  (* Invariant *)
  Have: forall i : Z. let x_4 = 1 + i in ((0 <= i) -> ((i < y) ->
      ((x_4 * x_4) = x_3))).
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: (x * x) = x_2.
  (* Invariant *)
  Have: 0 <= x_1.
}
Prove: (x * (2 + y)) = (2 + (2 * y) + x_1).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (20ms) (10363)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (42)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 9):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 10):
Let x = 1 + y.
Let x_1 = x * (2 + y).
Let x_2 = 2 * y.
Let x_3 = y * x.
Let x_4 = y * y.
Let x_5 = x_1 - 1 - y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_4) /\
      is_sint32(x_5).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: x_4 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_3 = (y + x_4).
  (* Invariant *)
  Have: (x_4 % y) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) <= x_4))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) = x_4))).
  (* Invariant *)
  Have: forall i : Z. let x_6 = 1 + i in ((0 <= i) -> ((i < y) ->
      ((x_6 * x_6) = x_4))).
  (* Invariant *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + y + (x * x)).
  (* Invariant *)
  Have: (2 + x_2) <= x_1.
  (* Invariant *)
  Have: x_1 = (2 + x_2 + x_3).
}
Prove: (x_5 % x) = 0.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (253ms) (3598)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 10):
Prove: (0 % 0) = 0.
Prover Z3 4.8.12 returns Timeout (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 11):
Let x = 1 + y.
Let x_1 = x * (2 + y).
Let x_2 = x_1 - 1 - y.
Let x_3 = 2 * y.
Let x_4 = y * x.
Let x_5 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= x).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_4 = (y + x_5).
  (* Invariant *)
  Have: (x_5 % y) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) = x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_6 = 1 + i_1 in ((0 <= i_1) -> ((i_1 < y) ->
      ((x_6 * x_6) = x_5))).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + y + (x * x)).
  (* Invariant *)
  Have: (2 + x_3) <= x_1.
  (* Invariant *)
  Have: x_1 = (2 + x_3 + x_4).
  (* Invariant *)
  Have: (x_2 % x) = 0.
}
Prove: (y + (i * i)) < x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:13ms) (25ms) (416)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.55ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 12):
Let x = 1 + y.
Let x_1 = x * (2 + y).
Let x_2 = x_1 - 1 - y.
Let x_3 = 2 * y.
Let x_4 = y * x.
Let x_5 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_4 = (y + x_5).
  (* Invariant *)
  Have: (x_5 % y) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) = x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_6 = 1 + i_1 in ((0 <= i_1) -> ((i_1 < y) ->
      ((x_6 * x_6) = x_5))).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + y + (x * x)).
  (* Invariant *)
  Have: (2 + x_3) <= x_1.
  (* Invariant *)
  Have: x_1 = (2 + x_3 + x_4).
  (* Invariant *)
  Have: (x_2 % x) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      ((y + (i_1 * i_1)) < x_1))).
}
Prove: x_1 = (1 + y + (i * i)).
Prover Z3 4.8.12 returns Timeout (Qed:11ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:11ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 13):
Let x = 1 + y.
Let x_1 = x * (2 + y).
Let x_2 = x_1 - 1 - y.
Let x_3 = 2 * y.
Let x_4 = y * x.
Let x_5 = y * y.
Let x_6 = 1 + i.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Goal *)
  When: (0 <= i) /\ (i <= y).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_4 = (y + x_5).
  (* Invariant *)
  Have: (x_5 % y) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) -> ((i_1 * i_1) <= x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < y) -> ((i_1 * i_1) = x_5))).
  (* Invariant *)
  Have: forall i_1 : Z. let x_7 = 1 + i_1 in ((0 <= i_1) -> ((i_1 < y) ->
      ((x_7 * x_7) = x_5))).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + y + (x * x)).
  (* Invariant *)
  Have: (2 + x_3) <= x_1.
  (* Invariant *)
  Have: x_1 = (2 + x_3 + x_4).
  (* Invariant *)
  Have: (x_2 % x) = 0.
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= x) ->
      ((y + (i_1 * i_1)) < x_1))).
  (* Invariant *)
  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= y) ->
      (x_1 = (1 + y + (i_1 * i_1))))).
}
Prove: x_1 = (1 + y + (x_6 * x_6)).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (37772)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (13ms) (300)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 14):
Let x = 1 + y.
Let x_1 = x * (2 + y).
Let x_2 = x_1 - 1 - y.
Let x_3 = 2 * y.
Let x_4 = y * x.
Let x_5 = y * y.
Assume {
  Type: is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_5) /\
      is_sint32(x_2).
  (* Invariant *)
  Have: (0 % 0) = 0.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 = (y + (y * (y - 1))).
  (* Invariant *)
  Have: x_4 = (y + x_5).
  (* Invariant *)
  Have: (x_5 % y) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> ((i * i) <= x_5))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i < y) -> ((i * i) = x_5))).
  (* Invariant *)
  Have: forall i : Z. let x_6 = 1 + i in ((0 <= i) -> ((i < y) ->
      ((x_6 * x_6) = x_5))).
  (* Invariant *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 <= y.
  (* Then *)
  Have: tmp_0 != 0.
  Have: x_1 = (1 + y + (x * x)).
  (* Invariant *)
  Have: (2 + x_3) <= x_1.
  (* Invariant *)
  Have: x_1 = (2 + x_3 + x_4).
  (* Invariant *)
  Have: (x_2 % x) = 0.
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= x) -> ((y + (i * i)) < x_1))).
  (* Invariant *)
  Have: forall i : Z. ((0 <= i) -> ((i <= y) -> (x_1 = (1 + y + (i * i))))).
  (* Invariant *)
  Have: forall i : Z. let x_6 = 1 + i in ((0 <= i) -> ((i <= y) ->
      (x_1 = (1 + y + (x_6 * x_6))))).
}
Prove: y < x_1.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (36257)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (8ms) (63)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/21_0007/21_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/21_0007/21_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0007/21_merged.c, line 17) (1/2):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/21_0007/21_merged.c, line 17) (2/2):
Call Result at line 20
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------
[wp:pedantic-assigns] out/21_0007/21_merged.c:1: Warning: 
  No 'assigns' specification for function 'unknown'.
  Callers assumptions might be imprecise.
[wp:pedantic-assigns] out/21_0007/21_merged.c:2: Warning: 
  No 'assigns' specification for function 'main21'.
  Callers assumptions might be imprecise.
