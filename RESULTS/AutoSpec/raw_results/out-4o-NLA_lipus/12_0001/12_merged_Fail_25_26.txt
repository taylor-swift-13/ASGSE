[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 26 goals scheduled
[wp] [Timeout] typed_main12_loop_invariant_4_preserved (Qed 7ms) (Z3)
[wp] Proved goals:   25 / 26
  Qed:              17
  Alt-Ergo 2.5.4:    8 (4ms-11ms-29ms)
  Timeout:           1
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Let x = B * q.
Let x_1 = B + t_3 + x.
Let x_2 = -t_3.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(t_2) /\ is_sint32(t_3) /\
      is_sint32(A - t_3 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_3 <= A.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: ((t_3 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: (t_3 + x + ((A - t_3) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_3.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_3 != 0.
  If x_1 = (1 + A)
  Then { Have: t_3 = t_1. Have: (1 + t) = t_1. }
  Else { Have: t_3 = t_2. Have: (1 + t) = t_2. }
}
Prove: t <= A.
Prover Z3 4.8.12 returns Valid (Qed:6ms) (30ms) (35950)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (5ms) (89)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = B * q.
Let x_1 = B + t_2 + x.
Let x_2 = -t_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: ((t_2 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: (t_2 + x + ((A - t_2) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then { Have: t_2 = t_1. Have: r = 0. Have: (1 + t) = t_1. }
  Else { Have: (r_1 + t_2 + x) = A. Have: (1 + r_1) = r. Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
}
Prove: (r + t) < (A + B).
Prover Z3 4.8.12 returns Valid (Qed:10ms) (20ms) (36832)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (7ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = B * q.
Let x_1 = B + t_2 + x.
Let x_2 = -t_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: ((t_2 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: (t_2 + x + ((A - t_2) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then { Have: t_2 = t_1. Have: r = 0. Have: (1 + t) = t_1. }
  Else { Have: (r_1 + t_2 + x) = A. Have: (1 + r_1) = r. Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (r + t) < (A + B).
}
Prove: (0 <= r) /\ (r < B).
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (37156)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (124)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = B * q.
Let x_1 = B + t_2 + x.
Let x_2 = -t_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\ is_sint32(t_2) /\
      is_sint32(A - t_2 - x).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: ((t_2 + x) <= A) /\ (A < x_1).
  (* Invariant *)
  Have: (t_2 + x + ((A - t_2) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t_2 != 0.
  If x_1 = (1 + A)
  Then { Have: t_2 = t_1. Have: r = 0. Have: (1 + t) = t_1. }
  Else { Have: (r_1 + t_2 + x) = A. Have: (1 + r_1) = r. Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (r + t) < (A + B).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
}
Prove: ((A - t) % B) = r.
Prover Z3 4.8.12 returns Timeout (Qed:7ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:7ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 % B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Let x = (A - t) % B.
Let x_1 = B * q_2.
Let x_2 = B + t_2 + x_1.
Let x_3 = -t_2.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(t_2) /\ is_sint32(x) /\ is_sint32(A - t_2 - x_1).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= A.
  (* Invariant *)
  Have: 0 < (B + x_1).
  (* Invariant *)
  Have: ((t_2 + x_1) <= A) /\ (A < x_2).
  (* Invariant *)
  Have: (t_2 + x_1 + ((A - t_2) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_2 != 0.
  If x_2 = (1 + A)
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: ((1 + A - t_1) % B) = 0.
    Have: (1 + t) = t_1.
  }
  Else {
    Let x_4 = (1 + A - t_2) % B.
    Have: (q_2 = q) /\ (x_4 = (1 + r)) /\ ((t_2 + (B * q) + x_4) = (1 + A)).
    Have: (1 + t) = t_2.
  }
  (* Invariant *)
  Have: t <= A.
  (* Invariant *)
  Have: (t + x) < (A + B).
  (* Invariant *)
  Have: (0 <= x) /\ (x < B).
}
Prove: (t + (B * q) + x) = A.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (7ms) (228)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.78ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_2.
Let x_3 = B + t_1 + x_2.
Let x_4 = -t_1.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\
      is_sint32(t_1) /\ is_sint32(A - r - x) /\ is_sint32(A - t_1 - x_2).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_1 <= A.
  (* Invariant *)
  Have: 0 < (B + x_2).
  (* Invariant *)
  Have: ((t_1 + x_2) <= A) /\ (A < x_3).
  (* Invariant *)
  Have: (t_1 + x_2 + ((A - t_1) % B)) = A.
  (* Invariant *)
  Have: 0 <= t_1.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_1 != 0.
  If x_3 = (1 + A)
  Then {
    Let x_5 = 1 + q_1.
    Have: (q_2 = q_1) /\ (t_1 = t).
    Have: x_5 = q.
    Have: r = 0.
    Have: (t + (B * x_5)) = (1 + A).
  }
  Else { Have: (q_2 = q) /\ ((r_1 + t_1 + x) = A). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
}
Prove: x_1 <= A.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (11ms) (237)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (0.84ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_2.
Let x_3 = B + t_2 + x_2.
Let x_4 = -t_2.
Let x_5 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(t_2) /\ is_sint32(x_5) /\ is_sint32(r + t + x - t_2 - x_2).
  (* Pre-condition *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= x_5.
  (* Invariant *)
  Have: 0 < (B + x_2).
  (* Invariant *)
  Have: ((t_2 + x_2) <= x_5) /\ (x_5 < x_3).
  (* Invariant *)
  Have: (t_2 + x_2 + ((r + t + x - t_2) % B)) = x_5.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_2 != 0.
  If (1 + r + t + x) = x_3
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (q_2 = q) /\ ((1 + r_1) = r) /\ ((1 + t) = t_2). }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: 0 <= t.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:8ms) (20ms) (37707)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (11ms) (244)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.74ms)

------------------------------------------------------------

Goal Assertion (file out/12_0001/12_merged.c, line 41):
Let x = B * q.
Let x_1 = B + x.
Assume {
  Type: is_sint32(A) /\ is_sint32(B) /\ is_sint32(q) /\ is_sint32(A - x).
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < x_1.
  (* Invariant *)
  Have: (x <= A) /\ (A < x_1).
  (* Invariant *)
  Have: ((A % B) + x) = A.
  (* Invariant *)
  Have: 0 <= q.
}
Prove: (A / B) = q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (30ms) (83505)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (29ms) (645)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
