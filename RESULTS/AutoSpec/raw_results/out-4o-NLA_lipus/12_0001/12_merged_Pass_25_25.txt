[kernel] Parsing out/12_0001/12_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 25 goals scheduled
[wp] Proved goals:   25 / 25
  Qed:              18
  Alt-Ergo 2.5.4:    7 (3ms-396ms-2.7s)
------------------------------------------------------------
  Function main12
------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 15):
Let x = B * q.
Let x_1 = r_1 + x.
Let x_2 = r_1 + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
  (* Invariant *)
  Have: (x_1 % B) = r_1.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then { Have: r = 0. }
  Else { Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (-1) <= x_1.
}
Prove: r <= (B + r_1 + x).
Prover Z3 4.8.12 returns Valid (Qed:8ms) (10ms) (35162)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (3ms) (81)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 15):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 16):
Let x = B * q.
Let x_1 = r_1 + x.
Let x_2 = r_1 + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
  (* Invariant *)
  Have: (x_1 % B) = r_1.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then { Have: r = 0. }
  Else { Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: r <= (B + r_1 + x).
}
Prove: (0 <= r) /\ (r < B).
Prover Z3 4.8.12 returns Valid (Qed:6ms) (10ms) (35486)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:6ms) (7ms) (100)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 17):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(r_1) /\ is_sint32(r) /\
      is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_2.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then { Have: r_1 = 0. }
  Else { Have: (1 + r) = r_1. }
  (* Invariant *)
  Have: (-1) <= x_1.
  (* Invariant *)
  Have: r_1 <= (B + r + x).
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
}
Prove: ((1 + r + x) % B) = r_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:8ms) (2.7s) (30785)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 17):
Assume {
  Type: is_sint32(A) /\ is_sint32(B).
  (* Pre-condition *)
  Have: 0 <= A.
  (* Invariant *)
  Have: 0 < B.
}
Prove: (0 % B) = 0.
Prover Z3 4.8.12 returns Valid (Qed:0.89ms) (10ms) (29930)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.89ms) (3ms) (31)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.65ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 19):
Let x = B * q_1.
Let x_1 = 1 + r + x.
Let x_2 = x_1 % B.
Let x_3 = r + x.
Let x_4 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r_1) /\
      is_sint32(r) /\ is_sint32(t) /\ is_sint32(t - 1) /\ is_sint32(x_4) /\
      is_sint32(x_2).
  (* Pre-condition *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_3 % B) = r.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q_1.
  (* Then *)
  Have: t != 0.
  If (1 + r) = B
  Then {
    Let x_5 = 1 + r.
    Have: (1 + q_1) = q.
    Have: ((1 + r + (q_1 * x_5)) % x_5) = 0.
  }
  Else {
    Let x_6 = (1 + r + (B * q)) % B.
    Have: (q_1 = q) /\ (x_6 = (1 + r_1)) /\ (x_6 = x_5).
  }
  (* Invariant *)
  Have: (-1) <= x_3.
  (* Invariant *)
  Have: x_2 <= (B + r + x).
  (* Invariant *)
  Have: (0 <= x_2) /\ (x_2 < B).
}
Prove: ((B * q) + x_2) = x_1.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:10ms) (8ms) (188)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (0.64ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 23):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_1.
Let x_3 = r_1 + x_2.
Let x_4 = r_1 + t + x_2.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(x_4) /\
      is_sint32(r_1 + t + x_2 - r - x).
  (* Pre-condition *)
  Have: 0 <= x_4.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: 0 <= x_3.
  (* Invariant *)
  Have: 0 < (B + x_2).
  (* Invariant *)
  Have: (0 <= r_1) /\ (r_1 < B).
  (* Invariant *)
  Have: (x_3 % B) = r_1.
  (* Invariant *)
  Have: 0 <= t.
  (* Invariant *)
  Have: 0 <= q_1.
  (* Then *)
  Have: t != 0.
  If (1 + r_1) = B
  Then {
    Let x_5 = 1 + r_1.
    Let x_6 = 1 + r_1 + (q_1 * x_5).
    Let x_7 = 1 + q_1.
    Let x_8 = x_7 * x_5.
    Have: x_7 = q.
    Have: (x_6 = (r + x_8)) /\ (x_8 = x_6).
  }
  Else { Have: q_1 = q. Have: x_5 = r. }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
}
Prove: x_1 <= x_4.
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (12ms) (293)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/12_0001/12_merged.c, line 25):
Let x = B * q.
Let x_1 = r + x.
Let x_2 = B * q_2.
Let x_3 = B + t_2 + x_2.
Let x_4 = -t_2.
Let x_5 = r + t + x.
Assume {
  Type: is_sint32(B) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\
      is_sint32(r) /\ is_sint32(r_1) /\ is_sint32(t) /\ is_sint32(t_1) /\
      is_sint32(t_2) /\ is_sint32(x_5) /\ is_sint32(r + t + x - t_2 - x_2).
  (* Pre-condition *)
  Have: 0 <= x_5.
  (* Invariant *)
  Have: 0 < B.
  (* Invariant *)
  Have: (0 % B) = 0.
  (* Invariant *)
  Have: t_2 <= x_5.
  (* Invariant *)
  Have: 0 < (B + x_2).
  (* Invariant *)
  Have: ((t_2 + x_2) <= x_5) /\ (x_5 < x_3).
  (* Invariant *)
  Have: (t_2 + x_2 + ((r + t + x - t_2) % B)) = x_5.
  (* Invariant *)
  Have: 0 <= t_2.
  (* Invariant *)
  Have: 0 <= q_2.
  (* Then *)
  Have: t_2 != 0.
  If (1 + r + t + x) = x_3
  Then {
    Have: (q_2 = q_1) /\ (t_2 = t_1).
    Have: (1 + q_1) = q.
    Have: r = 0.
    Have: (1 + t) = t_1.
  }
  Else { Have: (q_2 = q) /\ ((1 + r_1) = r) /\ ((1 + t) = t_2). }
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: 0 < (B + x).
  (* Invariant *)
  Have: (0 <= r) /\ (r < B).
  (* Invariant *)
  Have: (x_1 % B) = r.
  (* Invariant *)
  Have: 0 <= t.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:7ms) (10ms) (37707)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:7ms) (11ms) (244)

------------------------------------------------------------

Goal Establishment of Invariant (file out/12_0001/12_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Loop assigns (file out/12_0001/12_merged.c, line 26):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/12_0001/12_merged.c:5: Warning: 
  No 'assigns' specification for function 'main12'.
  Callers assumptions might be imprecise.
