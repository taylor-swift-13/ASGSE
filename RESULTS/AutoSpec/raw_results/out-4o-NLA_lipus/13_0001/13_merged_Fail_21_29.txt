[kernel] Parsing out/13_0001/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_2_preserved (Qed 431ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_4_preserved (Qed 508ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_6_preserved (Qed 521ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_7_preserved (Qed 497ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_7_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_8_preserved (Qed 517ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_9_preserved (Qed 537ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_9_established (Qed 2ms) (Z3)
[wp] Proved goals:   21 / 29
  Qed:              16
  Alt-Ergo 2.5.4:    2 (8ms-13ms)
  Z3 4.8.12:         3 (20ms-23ms-30ms)
  Timeout:           8
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 13):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p.
Let x_5 = b_7 * p.
Let x_6 = p * (x - a_6) * (y - b_7).
Let x_7 = p * p.
Let x_8 = a_6 * b_7 * p.
Let x_9 = x_4 + x_5.
Let x_10 = y % 2.
Let x_11 = x_3 - y.
Let x_12 = x_11 % 2.
Let x_13 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_11) /\
      is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_13.
  (* Invariant *)
  Have: x_3 <= x_13.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_11) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_3 = y) \/ (x_12 = 0) \/ ((x_10 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_8 / x_7) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_6).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / (p / 4))).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: 0 < p.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1).
      Have: (a_1 / 2) = a.
      Have: (b_1 / 2) = b.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then { Have: (a_8 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
            Else {
              Have: (a_9 = a_3) /\ (b_4 = b_3).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then { Have: (a_8 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: (a <= x) /\ (b <= y).
Prover Z3 4.8.12 returns Valid (Qed:311ms) (20ms) (75404)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.63ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 14):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = p_2 * (x - a_6) * (y - b_7).
Let x_7 = p_2 * p_2.
Let x_8 = a_6 * b_7 * p_2.
Let x_9 = x_4 + x_5.
Let x_10 = y % 2.
Let x_11 = x_3 - y.
Let x_12 = x_11 % 2.
Let x_13 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_11) /\ is_sint32(x_3 - x_4 - x_5).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_13.
  (* Invariant *)
  Have: x_3 <= x_13.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_11) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_3 = y) \/ (x_12 = 0) \/ ((x_10 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_8 / x_7) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_6).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / (p_2 / 4))).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_3 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_14 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_14 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_3 = (q + x_14).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_15 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_3 = (q_2 + (a * p) + x_15)).
              Have: (1 + b) = b_2.
              Have: x_3 = (q + x_15).
            }
            Else {
              Let x_16 = a_3 * p.
              Let x_17 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_3 = (q_3 + x_16 + x_17)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_15).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_3 = (q_1 + x_14 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_3 = (q + x_14).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
            Have: (1 + b) = b_2.
            Have: x_3 = (q + x_15).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_3 = (q_2 + (a * p) + x_15)).
          Have: (1 + b) = b_2.
          Have: x_3 = (q + x_15).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_3 = (q_3 + x_16 + x_17)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_3 + (p * (a_3 + b_3 - 1))) = (q + x_16 + x_17).
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
}
Prove: x_3 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:431ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:431ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (22ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.79ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 16):
Let x_1 = a_6 % 2.
Let x_2 = b_7 % 2.
Let x_3 = x * y.
Let x_4 = a_6 * p_2.
Let x_5 = b_7 * p_2.
Let x_6 = p_2 * (x - a_6) * (y - b_7).
Let x_7 = p_2 * p_2.
Let x_8 = a_6 * b_7 * p_2.
Let x_9 = x_4 + x_5.
Let x_10 = y % 2.
Let x_11 = x_3 - y.
Let x_12 = x_11 % 2.
Let x_13 = x + y.
Let x_14 = a * b * p.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_11) /\
      is_sint32(x_3 - x_4 - x_5) /\ is_sint32(x_3 - x_14).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_3 = x_13.
  (* Invariant *)
  Have: x_3 <= x_13.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_11) = x_3.
  (* Invariant *)
  Have: y <= x_3.
  (* Invariant *)
  Have: (x_10 = 0) \/ (x_3 = y) \/ (x_12 = 0) \/ ((x_10 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_8 = x_9.
  (* Invariant *)
  Have: (x_8 / x_7) = x_9.
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + x_6).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / (p_2 / 4))).
  (* Invariant *)
  Have: x_3 = (x_4 + x_5 + (x_6 / x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_15 = b_1 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_16 * x_15))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_17 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
              (x_3 = (q + (b * p) + x_17)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_18 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                  (x_3 = (q_1 + (a * p) + x_18)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_19 = p * (a_3 - 1) * (b_3 - 1).
              Let x_20 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_3 = (q_2 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
            (x_3 = (q + (b * p) + x_17)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_3 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_3 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
              (x_3 = (q_1 + (a * p) + x_18)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_3 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_3 = (q_2 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
}
Prove: (x_14 / (p * p)) = x_14.
Prover Z3 4.8.12 returns Timeout (Qed:508ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:508ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (15ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 18):
Let x_1 = a * b * p.
Let x_2 = a_6 % 2.
Let x_3 = b_7 % 2.
Let x_4 = x * y.
Let x_5 = a_6 * p_2.
Let x_6 = b_7 * p_2.
Let x_7 = p_2 * (x - a_6) * (y - b_7).
Let x_8 = p_2 * p_2.
Let x_9 = a_6 * b_7 * p_2.
Let x_10 = x_5 + x_6.
Let x_11 = y % 2.
Let x_12 = x_4 - y.
Let x_13 = x_12 % 2.
Let x_14 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_12) /\
      is_sint32(x_4 - x_5 - x_6) /\ is_sint32(x_4 - x_1).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_4 = x_14.
  (* Invariant *)
  Have: x_4 <= x_14.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_12) = x_4.
  (* Invariant *)
  Have: y <= x_4.
  (* Invariant *)
  Have: (x_11 = 0) \/ (x_4 = y) \/ (x_13 = 0) \/ ((x_11 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_9 = x_10.
  (* Invariant *)
  Have: (x_9 / x_8) = x_10.
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + x_7).
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + (x_7 / (p_2 / 4))).
  (* Invariant *)
  Have: x_4 = (x_5 + x_6 + (x_7 / x_8)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_2 = 0) \/ (x_3 = 0) \/ ((x_2 = 1) /\ (x_3 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_2 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_15 = b_1 / 2.
      Let x_16 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_16 * x_15)) / (16 * (p_1 * p_1)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_16 = a.
      Have: x_15 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_17 = (b * p * (a_2 - 1)) / (p * p).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
              (x_4 = (q + (b * p) + x_17)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_18 = (a * p * (b_2 - 1)) / (p * p).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                  (x_4 = (q_1 + (a * p) + x_18)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_19 = p * (a_3 + b_3 - 1).
              Let x_20 = (p * (a_3 - 1) * (b_3 - 1)) / (p * p).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                  (x_4 = (q_2 + x_19 + x_20)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_4 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_17 = (a_2 * p)) /\
            (x_4 = (q + (b * p) + x_17)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
                (x_4 = (q_1 + (a * p) + x_18)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
                (x_4 = (q_2 + x_19 + x_20)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_18 = (b_2 * p)) /\
              (x_4 = (q_1 + (a * p) + x_18)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
              (x_4 = (q_2 + x_19 + x_20)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_19 + x_20) = ((a_3 * p) + (b_3 * p))) /\
            (x_4 = (q_2 + x_19 + x_20)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: (x_1 / (p * p)) = x_1.
}
Prove: x_4 = (x_1 + (p * (x - a) * (y - b))).
Prover Z3 4.8.12 returns Timeout (Qed:521ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:521ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.89ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 19):
Let x_1 = x * y.
Let x_2 = p * (x - a) * (y - b).
Let x_3 = a * b * p.
Let x_4 = a_6 % 2.
Let x_5 = b_7 % 2.
Let x_6 = a_6 * p_2.
Let x_7 = b_7 * p_2.
Let x_8 = p_2 * (x - a_6) * (y - b_7).
Let x_9 = p_2 * p_2.
Let x_10 = a_6 * b_7 * p_2.
Let x_11 = x_6 + x_7.
Let x_12 = y % 2.
Let x_13 = x_1 - y.
Let x_14 = x_13 % 2.
Let x_15 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_13) /\
      is_sint32(x_1 - x_6 - x_7) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_15.
  (* Invariant *)
  Have: x_1 <= x_15.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_13) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_12 = 0) \/ (x_1 = y) \/ (x_14 = 0) \/ ((x_12 = 1) /\ (x_14 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_10 = x_11.
  (* Invariant *)
  Have: (x_10 / x_9) = x_11.
  (* Invariant *)
  Have: x_1 = (x_6 + x_7 + x_8).
  (* Invariant *)
  Have: x_1 = (x_6 + x_7 + (x_8 / (p_2 / 4))).
  (* Invariant *)
  Have: x_1 = (x_6 + x_7 + (x_8 / x_9)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_4 = 0) \/ (x_5 = 0) \/ ((x_4 = 1) /\ (x_5 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_4 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_16 = b_1 / 2.
      Let x_17 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1
             = ((a_1 * p_1) + (b_1 * p_1)
                + (4 * (p_1 * (x - x_17) * (y - x_16))))).
      Have: x_17 = a.
      Have: x_16 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_18 = p * (y - b) * (1 + x - a_2).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_18)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_19 = p * (x - a) * (1 + y - b_2).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_19)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_20 = p * (1 + x - a_3) * (1 + y - b_3).
              Let x_21 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_20 = (q_2 + x_21)) /\
                  (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_20 = (q_2 + x_21)) /\
                (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_20 = (q_2 + x_21)) /\
                (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_20 = (q_2 + x_21)) /\
              (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_18)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_20 = (q_2 + x_21)) /\
                (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_20 = (q_2 + x_21)) /\
              (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_19)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_20 = (q_2 + x_21)) /\
              (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_20 = (q_2 + x_21)) /\
            (((a_3 * p) + (b_3 * p) + x_20) = (x_1 + x_21)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: x_1 = (x_3 + x_2).
  (* Invariant *)
  Have: x_1 = ((x_3 / (p * p)) + x_2).
}
Prove: (x_2 / (p / 4)) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:497ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:497ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 19):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: (0 / 0) = 0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 20):
Let x_1 = x * y.
Let x_2 = p * (x - a) * (y - b).
Let x_3 = a * b * p.
Let x_4 = p * p.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = p_2 * (x - a_6) * (y - b_7).
Let x_10 = p_2 * p_2.
Let x_11 = a_6 * b_7 * p_2.
Let x_12 = x_7 + x_8.
Let x_13 = y % 2.
Let x_14 = x_1 - y.
Let x_15 = x_14 % 2.
Let x_16 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_14) /\
      is_sint32(x_1 - x_7 - x_8) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_16.
  (* Invariant *)
  Have: x_1 <= x_16.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_14) = x_1.
  (* Invariant *)
  Have: y <= x_1.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_1 = y) \/ (x_15 = 0) \/ ((x_13 = 1) /\ (x_15 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_11 = x_12.
  (* Invariant *)
  Have: (x_11 / x_10) = x_12.
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + x_9).
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + (x_9 / (p_2 / 4))).
  (* Invariant *)
  Have: x_1 = (x_7 + x_8 + (x_9 / x_10)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_1
             = ((a_1 * p_1) + (b_1 * p_1)
                + ((4 * (p_1 * (x - x_18) * (y - x_17))) / p_1))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = (p * (y - b) * (1 + x - a_2)) / (p / 4).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_19 = (q + (b * p))) /\
              (x_1 = ((a_2 * p) + x_19)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_20 = (p * (x - a) * (1 + y - b_2)) / (p / 4).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                  (x_1 = ((b_2 * p) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = (p * (1 + x - a_3) * (1 + y - b_3)) / (p / 4).
              Let x_22 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                  (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_19 = (q + (b * p))) /\
            (x_1 = ((a_2 * p) + x_19)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                (x_1 = ((b_2 * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
              (x_1 = ((b_2 * p) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
            (((a_3 * p) + (b_3 * p) + x_21) = (x_1 + x_22)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: ((x_2 / (p / 4)) = x_2) /\ (x_1 = (x_3 + x_2)).
  (* Invariant *)
  Have: x_1 = ((x_3 / x_4) + x_2).
}
Prove: (x_2 / x_4) = x_2.
Prover Z3 4.8.12 returns Timeout (Qed:517ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:517ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.88ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 21):
Let x_1 = p * (x - a) * (y - b).
Let x_2 = x * y.
Let x_3 = a * b * p.
Let x_4 = p * p.
Let x_5 = a_6 % 2.
Let x_6 = b_7 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = p_2 * (x - a_6) * (y - b_7).
Let x_10 = p_2 * p_2.
Let x_11 = a_6 * b_7 * p_2.
Let x_12 = x_7 + x_8.
Let x_13 = y % 2.
Let x_14 = x_2 - y.
Let x_15 = x_14 % 2.
Let x_16 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_14) /\
      is_sint32(x_2 - x_7 - x_8) /\ is_sint32(x_1).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_2 = x_16.
  (* Invariant *)
  Have: x_2 <= x_16.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (y * x_14) = x_2.
  (* Invariant *)
  Have: y <= x_2.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_2 = y) \/ (x_15 = 0) \/ ((x_13 = 1) /\ (x_15 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: x_11 = x_12.
  (* Invariant *)
  Have: (x_11 / x_10) = x_12.
  (* Invariant *)
  Have: x_2 = (x_7 + x_8 + x_9).
  (* Invariant *)
  Have: x_2 = (x_7 + x_8 + (x_9 / (p_2 / 4))).
  (* Invariant *)
  Have: x_2 = (x_7 + x_8 + (x_9 / x_10)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_5 = 0) \/ (x_6 = 0) \/ ((x_5 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_5 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_2
             = ((a_1 * p_1) + (b_1 * p_1)
                + ((4 * (p_1 * (x - x_18) * (y - x_17)))
                   / (16 * (p_1 * p_1))))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = (p * (y - b) * (1 + x - a_2)) / x_4.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_19 = (q + (b * p))) /\
              (x_2 = ((a_2 * p) + x_19)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_20 = (p * (x - a) * (1 + y - b_2)) / x_4.
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                  (x_2 = ((b_2 * p) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = (p * (1 + x - a_3) * (1 + y - b_3)) / x_4.
              Let x_22 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                  (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                (x_2 = ((b_2 * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_19 = (q + (b * p))) /\
            (x_2 = ((a_2 * p) + x_19)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
                (x_2 = ((b_2 * p) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
                (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_20 = (q_1 + (a * p))) /\
              (x_2 = ((b_2 * p) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_21 = (q_2 + x_22)) /\
              (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_21 = (q_2 + x_22)) /\
            (((a_3 * p) + (b_3 * p) + x_21) = (x_2 + x_22)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: ((x_1 / x_4) = x_1) /\ (x_2 = (x_3 + x_1)).
  (* Invariant *)
  Have: x_2 = ((x_3 / x_4) + x_1).
  (* Invariant *)
  Have: (x_1 / (p / 4)) = x_1.
}
Prove: x_2 = ((a * p) + (b * p) + x_1).
Prover Z3 4.8.12 returns Timeout (Qed:537ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:537ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 21):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
  (* Invariant *)
  Have: (0 / 0) = 0.
}
Prove: (a * b) = (a + b).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (21ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = p * (b_8 - b) * (x - a).
Let x_5 = p * p.
Let x_6 = a * b * p.
Let x_7 = x_2 + x_3.
Let x_8 = a_6 % 2.
Let x_9 = b_7 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_7 * p_2.
Let x_12 = p_2 * (b_8 - b_7) * (x - a_6).
Let x_13 = p_2 * p_2.
Let x_14 = a_6 * b_7 * p_2.
Let x_15 = x_10 + x_11.
Let x_16 = b_8 % 2.
Let x_17 = x_1 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_1 - x_10 - x_11).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_19.
  (* Invariant *)
  Have: x_1 <= x_19.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_1 = b_8) \/ (x_18 = 0) \/
      ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: x_14 = x_15.
  (* Invariant *)
  Have: (x_14 / x_13) = x_15.
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + x_12).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + (x_12 / (p_2 / 4))).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + (x_12 / x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_9 = 0) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_8 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
              (x_1 = (q + (2 * x_3) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_22)) /\
            (x_1 = (q + (2 * x_3) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
                (x_1 = (q_1 + (2 * x_2) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_23)) /\
              (x_1 = (q_1 + (2 * x_2) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_6 / x_5) = x_7.
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + x_4).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (x_4 / (p / 4))).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (x_4 / x_5)).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:595ms) (30ms) (94658)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 23):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (31047)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (8ms) (35)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 24):
Let x_1 = b_8 * x.
Let x_2 = a * p.
Let x_3 = b * p.
Let x_4 = p * (b_8 - b) * (x - a).
Let x_5 = p * p.
Let x_6 = a * b * p.
Let x_7 = x_2 + x_3.
Let x_8 = a_6 % 2.
Let x_9 = b_7 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_7 * p_2.
Let x_12 = p_2 * (b_8 - b_7) * (x - a_6).
Let x_13 = p_2 * p_2.
Let x_14 = a_6 * b_7 * p_2.
Let x_15 = x_10 + x_11.
Let x_16 = b_8 % 2.
Let x_17 = x_1 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 + x.
Let x_20 = a % 2.
Let x_21 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_1 - x_2 - x_3) /\ is_sint32(x_1 - x_10 - x_11).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_19.
  (* Invariant *)
  Have: x_1 <= x_19.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_1.
  (* Invariant *)
  Have: b_8 <= x_1.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_1 = b_8) \/ (x_18 = 0) \/
      ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: x_14 = x_15.
  (* Invariant *)
  Have: (x_14 / x_13) = x_15.
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + x_12).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + (x_12 / (p_2 / 4))).
  (* Invariant *)
  Have: x_1 = (x_10 + x_11 + (x_12 / x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_9 = 0) \/ ((x_8 = 1) /\ (x_9 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_8 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_22 = b_1 / 2.
      Let x_23 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_23)) + (4 * (p_1 * x_22)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_23 = a.
      Have: x_22 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_24 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_24)) /\
              (x_1 = (q + (2 * x_3) + x_24)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_25 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_25)) /\
                  (x_1 = (q_1 + (2 * x_2) + x_25)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_26 = p * (a_3 - 1).
              Let x_27 = p * (b_3 - 1).
              Let x_28 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                  (x_1 = (q_2 + x_26 + x_27 + x_28)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_25)) /\
                (x_1 = (q_1 + (2 * x_2) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_3 + x_24)) /\
            (x_1 = (q + (2 * x_3) + x_24)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_25)) /\
                (x_1 = (q_1 + (2 * x_2) + x_25)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
                (x_1 = (q_2 + x_26 + x_27 + x_28)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_2 + x_25)) /\
              (x_1 = (q_1 + (2 * x_2) + x_25)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
              (x_1 = (q_2 + x_26 + x_27 + x_28)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_26 + x_27 + x_28) = ((a_3 * p) + (b_3 * p))) /\
            (x_1 = (q_2 + x_26 + x_27 + x_28)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: x_6 = x_7.
  (* Invariant *)
  Have: (x_6 / x_5) = x_7.
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + x_4).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (x_4 / (p / 4))).
  (* Invariant *)
  Have: x_1 = (x_2 + x_3 + (x_4 / x_5)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: (a = 0) \/ (b = 0) \/ (x_20 = 0) \/ (x_21 = 0) \/
    ((x_20 = 1) /\ (x_21 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:569ms) (20ms) (59644)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 24):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b + x.
Let x_4 = b % 2.
Let x_5 = x_2 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (0 / 0) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
}
Prove: (x_4 = 0) \/ (x_1 = b) \/ (x_5 = 0) \/ ((x_4 = 1) /\ (x_5 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (33887)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (13ms) (325)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (0.86ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0001/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (398ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0001/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (0.82ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0001/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0001/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
