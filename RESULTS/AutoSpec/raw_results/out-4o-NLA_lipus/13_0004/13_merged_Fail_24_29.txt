[kernel] Parsing out/13_0004/13_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 29 goals scheduled
[wp] [Timeout] typed_main13_loop_invariant_3_preserved (Qed 495ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_4_preserved (Qed 620ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_6_preserved (Qed 600ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_6_established (Qed 2ms) (Z3)
[wp] [Timeout] typed_main13_loop_invariant_13_preserved (Qed 451ms) (Z3)
[wp] Proved goals:   24 / 29
  Qed:              14
  Alt-Ergo 2.5.4:    4
  Z3 4.8.12:         6 (20ms-48ms-140ms)
  Timeout:           5
------------------------------------------------------------
  Function main13
------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 13):
Let x_1 = a_6 % 2.
Let x_2 = a_6 * p.
Let x_3 = b_7 * p.
Let x_4 = x_2 + x_3.
Let x_5 = x * y.
Let x_6 = b_7 % 2.
Let x_7 = y - b_7.
Let x_8 = x - a_6.
Let x_9 = y % 2.
Let x_10 = x_5 - y.
Let x_11 = x_10 % 2.
Let x_12 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_10) /\
      is_sint32(x_5 - x_2 - x_3).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_12.
  (* Invariant *)
  Have: x_5 <= x_12.
  (* Invariant *)
  Have: (y * (x + y - x_5)) = 0.
  (* Invariant *)
  Have: (y * x_10) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 != y.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 + x_11) = 2).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (a_6 * b_7 * p) = x_4.
  (* Invariant *)
  Have: (x_2 + x_3 + (x * x_7) + (y * x_8)) = (x_5 + (x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 + x_6) = 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: 0 < p.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1).
      Have: (a_1 / 2) = a.
      Have: (b_1 / 2) = b.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then { Have: (a_8 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
            Else {
              Have: (a_9 = a_3) /\ (b_4 = b_3).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then { Have: (a_8 = a_2) /\ (b_5 = b). Have: (1 + a) = a_2. }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then { Have: (a_9 = a) /\ (b_4 = b_2). Have: (1 + b) = b_2. }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
}
Prove: (a <= x) /\ (b <= y).
Prover Z3 4.8.12 returns Valid (Qed:384ms) (40ms) (74002)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 13):
Prove: true.
Prover Qed returns Valid (0.81ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 14):
Prove: true.
Prover Qed returns Valid (0.72ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 15):
Let x_1 = a_6 % 2.
Let x_2 = a_6 * p_2.
Let x_3 = b_7 * p_2.
Let x_4 = x_2 + x_3.
Let x_5 = x * y.
Let x_6 = b_7 % 2.
Let x_7 = y - b_7.
Let x_8 = x - a_6.
Let x_9 = y % 2.
Let x_10 = x_5 - y.
Let x_11 = x_10 % 2.
Let x_12 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(q_3) /\ is_sint32(x) /\ is_sint32(y) /\
      is_sint32(x_10) /\ is_sint32(x_5 - x_2 - x_3).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_12.
  (* Invariant *)
  Have: x_5 <= x_12.
  (* Invariant *)
  Have: (y * (x + y - x_5)) = 0.
  (* Invariant *)
  Have: (y * x_10) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 != y.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 + x_11) = 2).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_4.
  (* Invariant *)
  Have: (x_2 + x_3 + (x * x_7) + (y * x_8)) = (x_5 + (x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 + x_6) = 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (x_5 = (q + (a_7 * p_3) + (b_6 * p_3))).
      Have: (a_7 / 2) = a.
      Have: (b_6 / 2) = b.
      Have: (4 * p_3) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_13 = a_2 * p.
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_5 = (q_1 + x_13 + (b * p))).
          Have: (1 + a) = a_2.
          Have: x_5 = (q + x_13).
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_14 = b_2 * p.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  (x_5 = (q_2 + (a * p) + x_14)).
              Have: (1 + b) = b_2.
              Have: x_5 = (q + x_14).
            }
            Else {
              Let x_15 = a_3 * p.
              Let x_16 = b_3 * p.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  (x_5 = (q_3 + x_15 + x_16)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
              Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
            Have: x_5 = (q + x_14).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_5 = (q_1 + x_13 + (b * p))).
        Have: (1 + a) = a_2.
        Have: x_5 = (q + x_13).
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_14)).
            Have: (1 + b) = b_2.
            Have: x_5 = (q + x_14).
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
            Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_5 = (q_2 + (a * p) + x_14)).
          Have: (1 + b) = b_2.
          Have: x_5 = (q + x_14).
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
          Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\ (x_5 = (q_3 + x_15 + x_16)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
        Have: (x_5 + (p * (a_3 + b_3 - 1))) = (q + x_15 + x_16).
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
}
Prove: x_5 = (q + (a * b * p)).
Prover Z3 4.8.12 returns Timeout (Qed:495ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:495ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 15):
Prove: true.
Prover Qed returns Valid (0.60ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 16):
Let x_1 = a_6 % 2.
Let x_2 = a_6 * p_2.
Let x_3 = b_7 * p_2.
Let x_4 = x_2 + x_3.
Let x_5 = x * y.
Let x_6 = b_7 % 2.
Let x_7 = y - b_7.
Let x_8 = x - a_6.
Let x_9 = y % 2.
Let x_10 = x_5 - y.
Let x_11 = x_10 % 2.
Let x_12 = x + y.
Let x_13 = a * b * p.
Let x_14 = y - b.
Let x_15 = x - a.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_10) /\
      is_sint32(x_5 - x_2 - x_3) /\ is_sint32(x_5 - x_13).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_12.
  (* Invariant *)
  Have: x_5 <= x_12.
  (* Invariant *)
  Have: (y * (x + y - x_5)) = 0.
  (* Invariant *)
  Have: (y * x_10) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 != y.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 + x_11) = 2).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_11 = 0) \/ ((x_9 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_4.
  (* Invariant *)
  Have: (x_2 + x_3 + (x * x_7) + (y * x_8)) = (x_5 + (x_8 * x_7)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 + x_6) = 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_6 = 0) \/ ((x_1 = 1) /\ (x_6 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_4 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_1 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_16 = b_1 / 2.
      Let x_17 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1)) = (4 * (p_1 * x_17 * x_16))).
      Have: x_17 = a.
      Have: x_16 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_18 = b * p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
              (x_5 = (q + (b * p) + x_18)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_19 = a * p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                  (x_5 = (q_1 + (a * p) + x_19)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_20 = p * (a_3 - 1) * (b_3 - 1).
              Let x_21 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                  (x_5 = (q_2 + x_20 + x_21)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                (x_5 = (q_1 + (a * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ (x_18 = (a_2 * p)) /\
            (x_5 = (q + (b * p) + x_18)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
                (x_5 = (q_1 + (a * p) + x_19)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_20 + x_21)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ (x_19 = (b_2 * p)) /\
              (x_5 = (q_1 + (a * p) + x_19)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_20 + x_21)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_20 + x_21) = ((a_3 * p) + (b_3 * p))) /\
            (x_5 = (q_2 + x_20 + x_21)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
}
Prove: (x_13 + (x * x_14) + (y * x_15)) = (x_5 + (x_15 * x_14)).
Prover Z3 4.8.12 returns Timeout (Qed:620ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:620ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.83ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (16ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.96ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 18):
Let x_1 = y - b.
Let x_2 = x * x_1.
Let x_3 = x - a.
Let x_4 = y * x_3.
Let x_5 = x * y.
Let x_6 = x_3 * x_1.
Let x_7 = x_5 + x_6.
Let x_8 = a_6 % 2.
Let x_9 = a_6 * p_2.
Let x_10 = b_7 * p_2.
Let x_11 = x_9 + x_10.
Let x_12 = b_7 % 2.
Let x_13 = y - b_7.
Let x_14 = x - a_6.
Let x_15 = y % 2.
Let x_16 = x_5 - y.
Let x_17 = x_16 % 2.
Let x_18 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_16) /\
      is_sint32(x_5 - x_9 - x_10) /\ is_sint32(x_2 + x_4 - x_6).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_18.
  (* Invariant *)
  Have: x_5 <= x_18.
  (* Invariant *)
  Have: (y * (x + y - x_5)) = 0.
  (* Invariant *)
  Have: (y * x_16) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 != y.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_15 = 0) \/ (x_17 = 0) \/ ((x_15 + x_17) = 2).
  (* Invariant *)
  Have: (x_15 = 0) \/ (x_17 = 0) \/ ((x_15 = 1) /\ (x_17 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_11.
  (* Invariant *)
  Have: (x_9 + x_10 + (x * x_13) + (y * x_14)) = (x_5 + (x_14 * x_13)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_12 = 0) \/ ((x_8 + x_12) = 2).
  (* Invariant *)
  Have: (x_8 = 0) \/ (x_12 = 0) \/ ((x_8 = 1) /\ (x_12 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_11 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_8 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_19 = b_1 / 2.
      Let x_20 = a_1 / 2.
      Let x_21 = y - x_19.
      Let x_22 = x - x_20.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((a_1 * p_1) + (b_1 * p_1) + (x * x_21) + (y * x_22))
             = (x_5 + (x_22 * x_21))).
      Have: x_20 = a.
      Have: x_19 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_23 = 1 + x - a_2.
          Let x_24 = x_1 * x_23.
          Let x_25 = y * x_23.
          Have: (a_8 = a_2) /\ (b_5 = b) /\
              ((q + (b * p) + x_24) = (x_2 + x_25)) /\
              (((a_2 * p) + x_2 + x_25) = (x_5 + x_24)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_26 = 1 + y - b_2.
              Let x_27 = x_3 * x_26.
              Let x_28 = x * x_26.
              Have: (a_9 = a) /\ (b_4 = b_2) /\
                  ((q_1 + (a * p) + x_27) = (x_4 + x_28)) /\
                  (((b_2 * p) + x_4 + x_28) = (x_5 + x_27)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_29 = p * (a_3 + b_3 - 1).
              Let x_30 = 1 + x - a_3.
              Let x_31 = 1 + y - b_3.
              Let x_32 = x_30 * x_31.
              Let x_33 = x * x_31.
              Let x_34 = y * x_30.
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
                  (((a_3 * p) + (b_3 * p) + x_33 + x_34)
                     = (x_5 + x_29 + x_32)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
                (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((q_1 + (a * p) + x_27) = (x_4 + x_28)) /\
                (((b_2 * p) + x_4 + x_28) = (x_5 + x_27)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
                (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
              (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\
            ((q + (b * p) + x_24) = (x_2 + x_25)) /\
            (((a_2 * p) + x_2 + x_25) = (x_5 + x_24)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\
                ((q_1 + (a * p) + x_27) = (x_4 + x_28)) /\
                (((b_2 * p) + x_4 + x_28) = (x_5 + x_27)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
                (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
              (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\
              ((q_1 + (a * p) + x_27) = (x_4 + x_28)) /\
              (((b_2 * p) + x_4 + x_28) = (x_5 + x_27)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
              (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((q_2 + x_29 + x_32) = (x_33 + x_34)) /\
            (((a_3 * p) + (b_3 * p) + x_33 + x_34) = (x_5 + x_29 + x_32)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: ((a * b * p) + x_2 + x_4) = x_7.
}
Prove: ((a * p) + (b * p) + x_2 + x_4) = x_7.
Prover Z3 4.8.12 returns Timeout (Qed:600ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:600ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 18):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: (0 < a) /\ (0 < b).
}
Prove: (a * b) = (a + b).
Prover Z3 4.8.12 returns Timeout (Qed:2ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:2ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 19):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = x - a.
Let x_4 = b_8 - b.
Let x_5 = b_8 * x.
Let x_6 = a_6 % 2.
Let x_7 = a_6 * p_2.
Let x_8 = b_7 * p_2.
Let x_9 = x_7 + x_8.
Let x_10 = b_7 % 2.
Let x_11 = x - a_6.
Let x_12 = b_8 - b_7.
Let x_13 = b_8 % 2.
Let x_14 = x_5 - b_8.
Let x_15 = x_14 % 2.
Let x_16 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_14) /\
      is_sint32(x_5 - x_1 - x_2) /\ is_sint32(x_5 - x_7 - x_8).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_5 = x_16.
  (* Invariant *)
  Have: x_5 <= x_16.
  (* Invariant *)
  Have: (b_8 * (b_8 + x - x_5)) = 0.
  (* Invariant *)
  Have: (b_8 * x_14) = x_5.
  (* Invariant *)
  Have: b_8 <= x_5.
  (* Invariant *)
  Have: x_5 != b_8.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_15 = 0) \/ ((x_13 + x_15) = 2).
  (* Invariant *)
  Have: (x_13 = 0) \/ (x_15 = 0) \/ ((x_13 = 1) /\ (x_15 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_9.
  (* Invariant *)
  Have: (x_7 + x_8 + (b_8 * x_11) + (x * x_12)) = (x_5 + (x_12 * x_11)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_10 = 0) \/ ((x_6 + x_10) = 2).
  (* Invariant *)
  Have: (x_6 = 0) \/ (x_10 = 0) \/ ((x_6 = 1) /\ (x_10 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_9 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_6 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_17 = b_1 / 2.
      Let x_18 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_18)) + (4 * (p_1 * x_17)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_18 = a.
      Have: x_17 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_19 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_19)) /\
              (x_5 = (q + (2 * x_2) + x_19)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_20 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                  (x_5 = (q_1 + (2 * x_1) + x_20)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_21 = p * (a_3 - 1).
              Let x_22 = p * (b_3 - 1).
              Let x_23 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                  (x_5 = (q_2 + x_21 + x_22 + x_23)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                (x_5 = (q_1 + (2 * x_1) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_19)) /\
            (x_5 = (q + (2 * x_2) + x_19)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
                (x_5 = (q_1 + (2 * x_1) + x_20)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_21 + x_22 + x_23)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_20)) /\
              (x_5 = (q_1 + (2 * x_1) + x_20)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_21 + x_22 + x_23)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_21 + x_22 + x_23) = ((a_3 * p) + (b_3 * p))) /\
            (x_5 = (q_2 + x_21 + x_22 + x_23)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (a * b * p) = (x_1 + x_2).
  (* Invariant *)
  Have: (x_1 + x_2 + (b_8 * x_3) + (x * x_4)) = (x_5 + (x_4 * x_3)).
}
Prove: (0 <= a) /\ (0 <= b).
Prover Z3 4.8.12 returns Valid (Qed:420ms) (20ms) (84171)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 19):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (b * (b + x - x_1)) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
}
Prove: b <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (30885)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (7ms) (27)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 20):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = y - b.
Let x_4 = x - a.
Let x_5 = x * y.
Let x_6 = x_1 + x_2.
Let x_7 = a_6 % 2.
Let x_8 = a_6 * p_2.
Let x_9 = b_7 * p_2.
Let x_10 = x_8 + x_9.
Let x_11 = b_7 % 2.
Let x_12 = y - b_7.
Let x_13 = x - a_6.
Let x_14 = y % 2.
Let x_15 = x_5 - y.
Let x_16 = x_15 % 2.
Let x_17 = x + y.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(p) /\
      is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\
      is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_15) /\
      is_sint32(x_5 - x_1 - x_2) /\ is_sint32(x_5 - x_8 - x_9).
  (* Goal *)
  When: (a = 0) \/ (b = 0).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_5 = x_17.
  (* Invariant *)
  Have: x_5 <= x_17.
  (* Invariant *)
  Have: (y * (x + y - x_5)) = 0.
  (* Invariant *)
  Have: (y * x_15) = x_5.
  (* Invariant *)
  Have: y <= x_5.
  (* Invariant *)
  Have: x_5 != y.
  (* Invariant *)
  Have: x_5 != 0.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 + x_16) = 2).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: (a_6 <= x) /\ (b_7 <= y).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: (x_8 + x_9 + (x * x_12) + (y * x_13)) = (x_5 + (x_13 * x_12)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 + x_11) = 2).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_10 <= x_5.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_18 = b_1 / 2.
      Let x_19 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_19)) + (4 * (p_1 * x_18)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_19 = a.
      Have: x_18 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_8) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_8 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_20 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_20)) /\
              (x_5 = (q + (2 * x_2) + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_9).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_9 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_21 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                  (x_5 = (q_1 + (2 * x_1) + x_21)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_22 = p * (a_3 - 1).
              Let x_23 = p * (b_3 - 1).
              Let x_24 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                  (x_5 = (q_2 + x_22 + x_23 + x_24)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_9 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_8 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                (x_5 = (q_1 + (2 * x_1) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_8) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_8 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_20)) /\
            (x_5 = (q + (2 * x_2) + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_9).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_9 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                (x_5 = (q_1 + (2 * x_1) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_5 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_9 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_8 = b_9).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_9 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
              (x_5 = (q_1 + (2 * x_1) + x_21)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_5 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_9 = b_3) /\
            ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
            (x_5 = (q_2 + x_22 + x_23 + x_24)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (a <= x) /\ (b <= y).
  (* Invariant *)
  Have: (a * b * p) = x_6.
  (* Invariant *)
  Have: (x_1 + x_2 + (x * x_3) + (y * x_4)) = (x_5 + (x_4 * x_3)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
}
Prove: x_6 = 0.
Prover Z3 4.8.12 returns Valid (Qed:513ms) (140ms) (453994)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 20):
Let x_1 = x * y.
Let x_2 = x_1 - y.
Let x_3 = x + y.
Assume {
  Type: is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2).
  (* Goal *)
  When: (y = 0) \/ (x_1 = y).
  (* Pre-condition *)
  Have: (0 < x) /\ (0 < y).
  (* Initializer *)
  Init: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (y * (x + y - x_1)) = 0.
  (* Invariant *)
  Have: (y * x_2) = x_1.
  (* Invariant *)
  Have: y <= x_1.
}
Prove: x_1 = 0.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (31173)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (53)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 21):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = x_1 + x_2.
Let x_4 = x - a.
Let x_5 = b_8 - b.
Let x_6 = b_8 * x.
Let x_7 = a_6 % 2.
Let x_8 = a_6 * p_2.
Let x_9 = b_7 * p_2.
Let x_10 = x_8 + x_9.
Let x_11 = b_7 % 2.
Let x_12 = x - a_6.
Let x_13 = b_8 - b_7.
Let x_14 = b_8 % 2.
Let x_15 = x_6 - b_8.
Let x_16 = x_15 % 2.
Let x_17 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_15) /\
      is_sint32(x_6 - x_1 - x_2) /\ is_sint32(x_6 - x_8 - x_9).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_6 = x_17.
  (* Invariant *)
  Have: x_6 <= x_17.
  (* Invariant *)
  Have: (b_8 * (b_8 + x - x_6)) = 0.
  (* Invariant *)
  Have: (b_8 * x_15) = x_6.
  (* Invariant *)
  Have: b_8 <= x_6.
  (* Invariant *)
  Have: x_6 != b_8.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 + x_16) = 2).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: (x_8 + x_9 + (b_8 * x_12) + (x * x_13)) = (x_6 + (x_13 * x_12)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 + x_11) = 2).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_10 <= x_6.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_18 = b_1 / 2.
      Let x_19 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_19)) + (4 * (p_1 * x_18)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_19 = a.
      Have: x_18 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_20 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_20)) /\
              (x_6 = (q + (2 * x_2) + x_20)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_21 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                  (x_6 = (q_1 + (2 * x_1) + x_21)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_22 = p * (a_3 - 1).
              Let x_23 = p * (b_3 - 1).
              Let x_24 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                  (x_6 = (q_2 + x_22 + x_23 + x_24)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                (x_6 = (q_1 + (2 * x_1) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_20)) /\
            (x_6 = (q + (2 * x_2) + x_20)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
                (x_6 = (q_1 + (2 * x_1) + x_21)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_22 + x_23 + x_24)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_21)) /\
              (x_6 = (q_1 + (2 * x_1) + x_21)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_22 + x_23 + x_24)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_22 + x_23 + x_24) = ((a_3 * p) + (b_3 * p))) /\
            (x_6 = (q_2 + x_22 + x_23 + x_24)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (a * b * p) = x_3.
  (* Invariant *)
  Have: (x_1 + x_2 + (b_8 * x_4) + (x * x_5)) = (x_6 + (x_5 * x_4)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (((a = 0) \/ (b = 0)) -> (x_3 = 0)).
}
Prove: (a + b) != 0.
Prover Z3 4.8.12 returns Valid (Qed:494ms) (50ms) (160241)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 22):
Let x_1 = a * p.
Let x_2 = b * p.
Let x_3 = x_1 + x_2.
Let x_4 = x - a.
Let x_5 = b_8 - b.
Let x_6 = b_8 * x.
Let x_7 = a_6 % 2.
Let x_8 = a_6 * p_2.
Let x_9 = b_7 * p_2.
Let x_10 = x_8 + x_9.
Let x_11 = b_7 % 2.
Let x_12 = x - a_6.
Let x_13 = b_8 - b_7.
Let x_14 = b_8 % 2.
Let x_15 = x_6 - b_8.
Let x_16 = x_15 % 2.
Let x_17 = b_8 + x.
Let x_18 = a % 2.
Let x_19 = b % 2.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_15) /\
      is_sint32(x_6 - x_1 - x_2) /\ is_sint32(x_6 - x_8 - x_9).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_6 = x_17.
  (* Invariant *)
  Have: x_6 <= x_17.
  (* Invariant *)
  Have: (b_8 * (b_8 + x - x_6)) = 0.
  (* Invariant *)
  Have: (b_8 * x_15) = x_6.
  (* Invariant *)
  Have: b_8 <= x_6.
  (* Invariant *)
  Have: x_6 != b_8.
  (* Invariant *)
  Have: x_6 != 0.
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 + x_16) = 2).
  (* Invariant *)
  Have: (x_14 = 0) \/ (x_16 = 0) \/ ((x_14 = 1) /\ (x_16 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_10.
  (* Invariant *)
  Have: (x_8 + x_9 + (b_8 * x_12) + (x * x_13)) = (x_6 + (x_13 * x_12)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 + x_11) = 2).
  (* Invariant *)
  Have: (x_7 = 0) \/ (x_11 = 0) \/ ((x_7 = 1) /\ (x_11 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_10 <= x_6.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_7 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_22)) /\
              (x_6 = (q + (2 * x_2) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_23)) /\
                  (x_6 = (q_1 + (2 * x_1) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_6 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_23)) /\
                (x_6 = (q_1 + (2 * x_1) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_2 + x_22)) /\
            (x_6 = (q + (2 * x_2) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_23)) /\
                (x_6 = (q_1 + (2 * x_1) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_6 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_1 + x_23)) /\
              (x_6 = (q_1 + (2 * x_1) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_6 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_6 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (a * b * p) = x_3.
  (* Invariant *)
  Have: (x_1 + x_2 + (b_8 * x_4) + (x * x_5)) = (x_6 + (x_5 * x_4)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (((a = 0) \/ (b = 0)) -> (x_3 = 0)).
  (* Invariant *)
  Have: (a + b) != 0.
}
Prove: (x_18 = 0) \/ (x_19 = 0) \/ ((x_18 + x_19) = 2).
Prover Z3 4.8.12 returns Valid (Qed:513ms) (20ms) (54854)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 22):
Let x_1 = b * x.
Let x_2 = x_1 - b.
Let x_3 = b + x.
Let x_4 = b % 2.
Let x_5 = x_2 % 2.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_2).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_1 = x_3.
  (* Invariant *)
  Have: x_1 <= x_3.
  (* Invariant *)
  Have: (b * (b + x - x_1)) = 0.
  (* Invariant *)
  Have: (b * x_2) = x_1.
  (* Invariant *)
  Have: b <= x_1.
  (* Invariant *)
  Have: x_1 != b.
  (* Invariant *)
  Have: x_1 != 0.
}
Prove: (x_4 = 0) \/ (x_5 = 0) \/ ((x_4 + x_5) = 2).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (33529)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (14ms) (311)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 23):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = x_3 + x_4.
Let x_6 = x - a.
Let x_7 = b_8 - b.
Let x_8 = b_8 * x.
Let x_9 = a_6 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_7 * p_2.
Let x_12 = x_10 + x_11.
Let x_13 = b_7 % 2.
Let x_14 = x - a_6.
Let x_15 = b_8 - b_7.
Let x_16 = b_8 % 2.
Let x_17 = x_8 - b_8.
Let x_18 = x_17 % 2.
Let x_19 = b_8 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_1) /\ is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\
      is_sint32(b_5) /\ is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_8 - x_3 - x_4) /\ is_sint32(x_8 - x_10 - x_11).
  (* Pre-condition *)
  Have: (0 < b_8) /\ (0 < x).
  (* Initializer *)
  Init: x_8 = x_19.
  (* Invariant *)
  Have: x_8 <= x_19.
  (* Invariant *)
  Have: (b_8 * (b_8 + x - x_8)) = 0.
  (* Invariant *)
  Have: (b_8 * x_17) = x_8.
  (* Invariant *)
  Have: b_8 <= x_8.
  (* Invariant *)
  Have: x_8 != b_8.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_18 = 0) \/ ((x_16 + x_18) = 2).
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_18 = 0) \/ ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: (b_7 <= b_8) /\ (a_6 <= x).
  (* Invariant *)
  Have: (a_6 * b_7 * p_2) = x_12.
  (* Invariant *)
  Have: (x_10 + x_11 + (b_8 * x_14) + (x * x_15)) = (x_8 + (x_15 * x_14)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_7).
  (* Invariant *)
  Have: (a_6 + b_7) != 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_13 = 0) \/ ((x_9 + x_13) = 2).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_13 = 0) \/ ((x_9 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_12 <= x_8.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_7 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_7 = b_6) /\ (p_2 = p_3).
    If (b_6 % 2) = 0
    Then {
      Let x_20 = b_1 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_6 = b_1) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_1 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_6 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_5).
        If (b_5 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_22)) /\
              (x_8 = (q + (2 * x_4) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_5 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_4).
            If (b_4 % 2) = 1
            Then {
              Let x_23 = p * (b_2 - 1).
              Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_23)) /\
                  (x_8 = (q_1 + (2 * x_3) + x_23)).
              Have: (1 + b) = b_2.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_3 - 1).
              Let x_26 = p * (a_3 + b_3 - 1).
              Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                  (x_8 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_3.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_23)) /\
                (x_8 = (q_1 + (2 * x_3) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_7 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_5).
      If (b_5 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_5 = b) /\ ((a_2 * p) = (x_4 + x_22)) /\
            (x_8 = (q + (2 * x_4) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_5 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_4).
          If (b_4 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_23)) /\
                (x_8 = (q_1 + (2 * x_3) + x_23)).
            Have: (1 + b) = b_2.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_4 = b_3) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_3.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_4).
        If (b_4 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_4 = b_2) /\ ((b_2 * p) = (x_3 + x_23)) /\
              (x_8 = (q_1 + (2 * x_3) + x_23)).
          Have: (1 + b) = b_2.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_4 = b_3) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_3.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_3) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_3 * p))) /\
            (x_8 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_3.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_8) /\ (a <= x).
  (* Invariant *)
  Have: (a * b * p) = x_5.
  (* Invariant *)
  Have: (x_3 + x_4 + (b_8 * x_6) + (x * x_7)) = (x_8 + (x_7 * x_6)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (((a = 0) \/ (b = 0)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (a + b) != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 + x_2) = 2).
}
Prove: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:445ms) (20ms) (55246)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 23):
Let x_1 = b % 2.
Let x_2 = b * x.
Let x_3 = x_2 - b.
Let x_4 = x_3 % 2.
Let x_5 = b + x.
Assume {
  Type: is_sint32(b) /\ is_sint32(x) /\ is_sint32(x_3).
  (* Pre-condition *)
  Have: (0 < b) /\ (0 < x).
  (* Initializer *)
  Init: x_2 = x_5.
  (* Invariant *)
  Have: x_2 <= x_5.
  (* Invariant *)
  Have: (b * (b + x - x_2)) = 0.
  (* Invariant *)
  Have: (b * x_3) = x_2.
  (* Invariant *)
  Have: b <= x_2.
  (* Invariant *)
  Have: x_2 != b.
  (* Invariant *)
  Have: x_2 != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_4 = 0) \/ ((x_1 + x_4) = 2).
}
Prove: (x_1 = 0) \/ (x_4 = 0) \/ ((x_1 = 1) /\ (x_4 = 1)).
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (33929)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (16ms) (434)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (432ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 25):
Let x_1 = a % 2.
Let x_2 = b % 2.
Let x_3 = a * p.
Let x_4 = b * p.
Let x_5 = x_3 + x_4.
Let x_6 = x - a.
Let x_7 = b_1 - b.
Let x_8 = b_1 * x.
Let x_9 = a_6 % 2.
Let x_10 = a_6 * p_2.
Let x_11 = b_8 * p_2.
Let x_12 = x_10 + x_11.
Let x_13 = b_8 % 2.
Let x_14 = x - a_6.
Let x_15 = b_1 - b_8.
Let x_16 = b_1 % 2.
Let x_17 = x_8 - b_1.
Let x_18 = x_17 % 2.
Let x_19 = b_1 + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(a_3) /\
      is_sint32(a_4) /\ is_sint32(a_5) /\ is_sint32(a_6) /\ is_sint32(b) /\
      is_sint32(b_2) /\ is_sint32(b_3) /\ is_sint32(b_4) /\ is_sint32(b_5) /\
      is_sint32(b_6) /\ is_sint32(b_7) /\ is_sint32(b_8) /\ is_sint32(b_1) /\
      is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(x) /\ is_sint32(x_17) /\
      is_sint32(x_8 - x_3 - x_4) /\ is_sint32(x_8 - x_10 - x_11).
  (* Pre-condition *)
  Have: (0 < b_1) /\ (0 < x).
  (* Initializer *)
  Init: x_8 = x_19.
  (* Invariant *)
  Have: x_8 <= x_19.
  (* Invariant *)
  Have: (b_1 * (b_1 + x - x_8)) = 0.
  (* Invariant *)
  Have: (b_1 * x_17) = x_8.
  (* Invariant *)
  Have: b_1 <= x_8.
  (* Invariant *)
  Have: x_8 != b_1.
  (* Invariant *)
  Have: x_8 != 0.
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_18 = 0) \/ ((x_16 + x_18) = 2).
  (* Invariant *)
  Have: (x_16 = 0) \/ (x_18 = 0) \/ ((x_16 = 1) /\ (x_18 = 1)).
  (* Invariant *)
  Have: (b_8 <= b_1) /\ (a_6 <= x).
  (* Invariant *)
  Have: (a_6 * b_8 * p_2) = x_12.
  (* Invariant *)
  Have: (x_10 + x_11 + (b_1 * x_14) + (x * x_15)) = (x_8 + (x_15 * x_14)).
  (* Invariant *)
  Have: (0 <= a_6) /\ (0 <= b_8).
  (* Invariant *)
  Have: (a_6 + b_8) != 0.
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_13 = 0) \/ ((x_9 + x_13) = 2).
  (* Invariant *)
  Have: (x_9 = 0) \/ (x_13 = 0) \/ ((x_9 = 1) /\ (x_13 = 1)).
  (* Invariant *)
  Have: 0 < p_2.
  (* Invariant *)
  Have: x_12 <= x_8.
  (* Then *)
  Have: a_6 != 0.
  (* Then *)
  Have: b_8 != 0.
  If x_9 = 0
  Then {
    Have: (a_6 = a_7) /\ (b_8 = b_7) /\ (p_2 = p_3).
    If (b_7 % 2) = 0
    Then {
      Let x_20 = b_2 / 2.
      Let x_21 = a_1 / 2.
      Have: (a_7 = a_1) /\ (b_7 = b_2) /\ (p_3 = p_1) /\
          (((4 * (p_1 * x_21)) + (4 * (p_1 * x_20)))
             = ((a_1 * p_1) + (b_2 * p_1))).
      Have: x_21 = a.
      Have: x_20 = b.
      Have: (4 * p_1) = p.
    }
    Else {
      Have: (a_7 = a_5) /\ (b_7 = b_9) /\ (p_3 = p).
      If (a_5 % 2) = 1
      Then {
        Have: (a_5 = a_8) /\ (b_9 = b_6).
        If (b_6 % 2) = 0
        Then {
          Let x_22 = p * (a_2 - 1).
          Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_4 + x_22)) /\
              (x_8 = (q + (2 * x_4) + x_22)).
          Have: (1 + a) = a_2.
        }
        Else {
          Have: (a_8 = a_4) /\ (b_6 = b_10).
          If (a_4 % 2) = 0
          Then {
            Have: (a_4 = a_9) /\ (b_10 = b_5).
            If (b_5 % 2) = 1
            Then {
              Let x_23 = p * (b_3 - 1).
              Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_3 + x_23)) /\
                  (x_8 = (q_1 + (2 * x_3) + x_23)).
              Have: (1 + b) = b_3.
            }
            Else {
              Let x_24 = p * (a_3 - 1).
              Let x_25 = p * (b_4 - 1).
              Let x_26 = p * (a_3 + b_4 - 1).
              Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                  ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
                  (x_8 = (q_2 + x_24 + x_25 + x_26)).
              Have: (1 + a) = a_3.
              Have: (1 + b) = b_4.
            }
          }
          Else {
            Have: (a_4 = a_3) /\ (b_10 = b_4) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
      }
      Else {
        Have: (a_5 = a_4) /\ (b_9 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_3 + x_23)) /\
                (x_8 = (q_1 + (2 * x_3) + x_23)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
  }
  Else {
    Have: (a_6 = a_5) /\ (b_8 = b_9) /\ (p_2 = p).
    If (a_5 % 2) = 1
    Then {
      Have: (a_5 = a_8) /\ (b_9 = b_6).
      If (b_6 % 2) = 0
      Then {
        Have: (a_8 = a_2) /\ (b_6 = b) /\ ((a_2 * p) = (x_4 + x_22)) /\
            (x_8 = (q + (2 * x_4) + x_22)).
        Have: (1 + a) = a_2.
      }
      Else {
        Have: (a_8 = a_4) /\ (b_6 = b_10).
        If (a_4 % 2) = 0
        Then {
          Have: (a_4 = a_9) /\ (b_10 = b_5).
          If (b_5 % 2) = 1
          Then {
            Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_3 + x_23)) /\
                (x_8 = (q_1 + (2 * x_3) + x_23)).
            Have: (1 + b) = b_3.
          }
          Else {
            Have: (a_9 = a_3) /\ (b_5 = b_4) /\
                ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
                (x_8 = (q_2 + x_24 + x_25 + x_26)).
            Have: (1 + a) = a_3.
            Have: (1 + b) = b_4.
          }
        }
        Else {
          Have: (a_4 = a_3) /\ (b_10 = b_4) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
    }
    Else {
      Have: (a_5 = a_4) /\ (b_9 = b_10).
      If (a_4 % 2) = 0
      Then {
        Have: (a_4 = a_9) /\ (b_10 = b_5).
        If (b_5 % 2) = 1
        Then {
          Have: (a_9 = a) /\ (b_5 = b_3) /\ ((b_3 * p) = (x_3 + x_23)) /\
              (x_8 = (q_1 + (2 * x_3) + x_23)).
          Have: (1 + b) = b_3.
        }
        Else {
          Have: (a_9 = a_3) /\ (b_5 = b_4) /\
              ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
              (x_8 = (q_2 + x_24 + x_25 + x_26)).
          Have: (1 + a) = a_3.
          Have: (1 + b) = b_4.
        }
      }
      Else {
        Have: (a_4 = a_3) /\ (b_10 = b_4) /\
            ((x_24 + x_25 + x_26) = ((a_3 * p) + (b_4 * p))) /\
            (x_8 = (q_2 + x_24 + x_25 + x_26)).
        Have: (1 + a) = a_3.
        Have: (1 + b) = b_4.
      }
    }
  }
  (* Invariant *)
  Have: (b <= b_1) /\ (a <= x).
  (* Invariant *)
  Have: (a * b * p) = x_5.
  (* Invariant *)
  Have: (x_3 + x_4 + (b_1 * x_6) + (x * x_7)) = (x_8 + (x_7 * x_6)).
  (* Invariant *)
  Have: (0 <= a) /\ (0 <= b).
  (* Invariant *)
  Have: (((a = 0) \/ (b = 0)) -> (x_5 = 0)).
  (* Invariant *)
  Have: (a + b) != 0.
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 + x_2) = 2).
  (* Invariant *)
  Have: (x_1 = 0) \/ (x_2 = 0) \/ ((x_1 = 1) /\ (x_2 = 1)).
  (* Invariant *)
  Have: 0 < p.
}
Prove: x_5 <= x_8.
Prover Z3 4.8.12 returns Timeout (Qed:451ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:451ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/13_0004/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (18ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/13_0004/13_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Loop assigns (file out/13_0004/13_merged.c, line 27):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/13_0004/13_merged.c:4: Warning: 
  No 'assigns' specification for function 'main13'.
  Callers assumptions might be imprecise.
