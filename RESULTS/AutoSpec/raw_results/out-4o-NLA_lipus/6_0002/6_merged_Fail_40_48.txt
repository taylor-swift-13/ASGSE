[kernel] Parsing out/6_0002/6_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 48 goals scheduled
[wp] [Timeout] typed_main6_loop_invariant_preserved (Qed 40ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_4_preserved (Qed 43ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_8_preserved (Qed 44ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_10_preserved (Qed 53ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_12_preserved (Qed 53ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_16_preserved (Qed 53ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_17_preserved (Qed 52ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_18_preserved (Qed 54ms) (Z3)
[wp] Proved goals:   40 / 48
  Qed:              37
  Alt-Ergo 2.5.4:    1 (190ms)
  Z3 4.8.12:         2 (10ms-600ms)
  Timeout:           8
------------------------------------------------------------
  Function main6
------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 17):
Let x = i * y.
Let x_1 = a + x - y.
Let x_2 = p_2 * x_1.
Let x_3 = s_2 * y.
Let x_4 = i_1 * x_1.
Let x_5 = y + x_4.
Let x_6 = a + x.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(y) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_4).
  (* Pre-condition *)
  Have: y < x_6.
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < y) /\ (0 < x_4).
  (* Invariant *)
  Have: x_5 = x_6.
  (* Invariant *)
  Have: x_5 <= x_6.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x = (x_3 + (q_2 * x_1)).
  (* Invariant *)
  Have: x = (x_3 + (r_2 * x_1)).
  (* Invariant *)
  Have: x <= y.
  (* Invariant *)
  Have: (0 < a) /\ (0 < x).
  (* Invariant *)
  Have: ((r_2 * y) + x_2) = a.
  (* Invariant *)
  Have: ((q_2 * y) + x_2) = a.
  (* Invariant *)
  Have: y <= x.
  (* Invariant *)
  Have: (i_3 * x_1) = a.
  (* Then *)
  Have: x != a.
  If x < a
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1).
  }
}
Prove: (p * s) = (1 + (q * r)).
Prover Z3 4.8.12 returns Timeout (Qed:40ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:40ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 17):
Prove: true.
Prover Qed returns Valid (0.77ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 18):
Let x_1 = s - r.
Let x_2 = q - p.
Let x_3 = i * y.
Let x_4 = i_1 * x.
Let x_5 = p * x.
Let x_6 = s * y.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_1) /\ is_sint32(x_3 - x_4).
  (* Residual *)
  When: x_4 <= x_3.
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_3 = ((q * x) + x_6).
  (* Invariant *)
  Have: x_3 = ((r * x) + x_6).
  (* Invariant *)
  Have: x_3 <= y.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: x_4 = (x_5 + (r * y)).
  (* Invariant *)
  Have: x_4 = (x_5 + (q * y)).
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: (x_4 + x_3) = (x + y).
  (* Then *)
  Have: x_3 != x_4.
  (* Invariant *)
  Have: (p * x_1) = (1 + (r * x_2)).
}
Prove: x_3 = (x_4 + (x * x_2) + (y * x_1)).
Prover Z3 4.8.12 returns Valid (Qed:43ms) (10ms) (36866)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 20):
Let x_1 = i_1 * y.
Let x_2 = i * x.
Let x_3 = p_2 * x.
Let x_4 = s_2 * y.
Let x_5 = q * x.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_2) /\
      is_sint32(x_1) /\ is_sint32(x_5 + (s * y)).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_1 = ((q_2 * x) + x_4).
  (* Invariant *)
  Have: x_1 = ((r_2 * x) + x_4).
  (* Invariant *)
  Have: x_1 <= y.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_1).
  (* Invariant *)
  Have: x_2 = (x_3 + (r_2 * y)).
  (* Invariant *)
  Have: x_2 = (x_3 + (q_2 * y)).
  (* Invariant *)
  Have: x_2 <= x.
  (* Invariant *)
  Have: (x_2 + x_1) = (x + y).
  (* Then *)
  Have: x_1 != x_2.
  If x_1 < x_2
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_1 = (x_5 + (s * y))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_6 = s * y.
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_1 = (a + x_5 + x_6)) /\ (x_1 = (x_2 + x_5 + x_6)).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
}
Prove: (r * x) = x_5.
Prover Z3 4.8.12 returns Timeout (Qed:43ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:43ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 23):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 24):
Let x_1 = r * x.
Let x_2 = i_1 * y.
Let x_3 = i * x.
Let x_4 = p_2 * x.
Let x_5 = s_2 * y.
Let x_6 = x_1 + (s * y).
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_3) /\
      is_sint32(x_2) /\ is_sint32(x_6).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_2 = ((q_2 * x) + x_5).
  (* Invariant *)
  Have: x_2 = ((r_2 * x) + x_5).
  (* Invariant *)
  Have: x_2 <= y.
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_2).
  (* Invariant *)
  Have: x_3 = (x_4 + (r_2 * y)).
  (* Invariant *)
  Have: x_3 = (x_4 + (q_2 * y)).
  (* Invariant *)
  Have: x_3 <= x.
  (* Invariant *)
  Have: (x_3 + x_2) = (x + y).
  (* Then *)
  Have: x_2 != x_3.
  If x_2 < x_3
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_2 = ((s * y) + (x * (r_1 - s)))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_7 = s * y.
    Let x_8 = x * (s_1 - s).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_2 = (a + x_7 + x_8)) /\ (x_2 = (x_3 + x_7 + x_8)).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_1 = (q * x).
}
Prove: x_6 <= y.
Prover Z3 4.8.12 returns Timeout (Qed:44ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:44ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 25):
Let x_1 = r * x.
Let x_2 = x_1 + (s * y).
Let x_3 = i_1 * y.
Let x_4 = i * x.
Let x_5 = p_2 * x.
Let x_6 = s_2 * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_3 = ((q_2 * x) + x_6).
  (* Invariant *)
  Have: x_3 = ((r_2 * x) + x_6).
  (* Invariant *)
  Have: x_3 <= y.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: x_4 = (x_5 + (r_2 * y)).
  (* Invariant *)
  Have: x_4 = (x_5 + (q_2 * y)).
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: (x_4 + x_3) = (x + y).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_7 = s * y.
    Let x_8 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_3 = (x_7 + x_8)).
    Have: x_4 = (a + x_7 + x_8).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_9 = y * (s_1 - r).
    Have: (q_2 = q_1) /\ (r_2 = r) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ (x_3 = (a + x_1 + x_9)) /\
        (x_3 = (x_4 + x_1 + x_9)).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_1 = (q * x).
  (* Invariant *)
  Have: x_2 <= y.
}
Prove: (0 < a) /\ (0 < x_2).
Prover Z3 4.8.12 returns Valid (Qed:67ms) (600ms) (1303728)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 26):
Let x_1 = r * x.
Let x_2 = x_1 + (s * y).
Let x_3 = i_1 * y.
Let x_4 = i * x.
Let x_5 = p_2 * x.
Let x_6 = s_2 * y.
Assume {
  Type: is_sint32(a) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(s_2) /\ is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_4) /\
      is_sint32(x_3) /\ is_sint32(x_2).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_3 = ((q_2 * x) + x_6).
  (* Invariant *)
  Have: x_3 = ((r_2 * x) + x_6).
  (* Invariant *)
  Have: x_3 <= y.
  (* Invariant *)
  Have: (0 < x_4) /\ (0 < x_3).
  (* Invariant *)
  Have: x_4 = (x_5 + (r_2 * y)).
  (* Invariant *)
  Have: x_4 = (x_5 + (q_2 * y)).
  (* Invariant *)
  Have: x_4 <= x.
  (* Invariant *)
  Have: (x_4 + x_3) = (x + y).
  (* Then *)
  Have: x_3 != x_4.
  If x_3 < x_4
  Then {
    Let x_7 = s * y.
    Let x_8 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_3 = (x_7 + x_8)).
    Have: x_4 = (a + x_7 + x_8).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_9 = y * (s_1 - r).
    Have: (q_2 = q_1) /\ (r_2 = r) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ (x_3 = (a + x_1 + x_9)) /\
        (x_3 = (x_4 + x_1 + x_9)).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_1 = (q * x).
  (* Invariant *)
  Have: x_2 <= y.
  (* Invariant *)
  Have: (0 < a) /\ (0 < x_2).
}
Prove: ((p * x) + (r * y)) = a.
Prover Z3 4.8.12 returns Timeout (Qed:53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:53ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 28):
Let x_1 = r * y.
Let x_2 = (p * x) + x_1.
Let x_3 = r * x.
Let x_4 = x_3 + (s * y).
Let x_5 = i_1 * y.
Let x_6 = i * x.
Let x_7 = p_2 * x.
Let x_8 = s_2 * y.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_5 = ((q_2 * x) + x_8).
  (* Invariant *)
  Have: x_5 = ((r_2 * x) + x_8).
  (* Invariant *)
  Have: x_5 <= y.
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_5).
  (* Invariant *)
  Have: x_6 = (x_7 + (r_2 * y)).
  (* Invariant *)
  Have: x_6 = (x_7 + (q_2 * y)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: (x_6 + x_5) = (x + y).
  (* Then *)
  Have: x_5 != x_6.
  If x_5 < x_6
  Then {
    Let x_9 = s * y.
    Let x_10 = r_1 - s.
    Let x_11 = x * x_10.
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_5 = (x_9 + x_11)) /\
        (x_6 = (x_9 + (x * (p_1 - q)) + x_11 + (y * x_10))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_12 = s_1 - s.
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_5 = (x_9 + (x * (q_1 - q)) + (x * x_12) + (y * x_12))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_3 = (q * x).
  (* Invariant *)
  Have: x_4 <= y.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_4).
}
Prove: x_1 = (q * y).
Prover Z3 4.8.12 returns Timeout (Qed:53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:53ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 32):
Let x_1 = q * y.
Let x_2 = (p * x) + x_1.
Let x_3 = r * x.
Let x_4 = x_3 + (s * y).
Let x_5 = i_1 * y.
Let x_6 = i * x.
Let x_7 = p_2 * x.
Let x_8 = s_2 * y.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_6) /\ is_sint32(x_5) /\
      is_sint32(x_2) /\ is_sint32(x_4).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_5 = ((q_2 * x) + x_8).
  (* Invariant *)
  Have: x_5 = ((r_2 * x) + x_8).
  (* Invariant *)
  Have: x_5 <= y.
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_5).
  (* Invariant *)
  Have: x_6 = (x_7 + (r_2 * y)).
  (* Invariant *)
  Have: x_6 = (x_7 + (q_2 * y)).
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: (x_6 + x_5) = (x + y).
  (* Then *)
  Have: x_5 != x_6.
  If x_5 < x_6
  Then {
    Let x_9 = s * y.
    Let x_10 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_5 = (x_9 + x_10)) /\ (x_6 = (x_1 + x_9 + (x * (p_1 - q)) + x_10)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_11 = x * (q_1 - q).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_6 = (x_1 + x_11)) /\ (x_5 = (x_1 + x_9 + x_11 + (x * (s_1 - s)))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_3 = (q * x).
  (* Invariant *)
  Have: x_4 <= y.
  (* Invariant *)
  Have: (0 < x_2) /\ (0 < x_4).
  (* Invariant *)
  Have: (r * y) = x_1.
}
Prove: x_2 <= x.
Prover Z3 4.8.12 returns Timeout (Qed:53ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:53ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 33):
Let x_1 = p * x.
Let x_2 = q * y.
Let x_3 = x_1 + x_2.
Let x_4 = r * x.
Let x_5 = s * y.
Let x_6 = x_4 + x_5.
Let x_7 = i_1 * y.
Let x_8 = i * x.
Let x_9 = x + y.
Let x_10 = p_2 * x.
Let x_11 = s_2 * y.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_8) /\ is_sint32(x_7) /\
      is_sint32(x_3) /\ is_sint32(x_6).
  (* Goal *)
  When: x_6 != x_3.
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_7 = ((q_2 * x) + x_11).
  (* Invariant *)
  Have: x_7 = ((r_2 * x) + x_11).
  (* Invariant *)
  Have: x_7 <= y.
  (* Invariant *)
  Have: (0 < x_8) /\ (0 < x_7).
  (* Invariant *)
  Have: x_8 = (x_10 + (r_2 * y)).
  (* Invariant *)
  Have: x_8 = (x_10 + (q_2 * y)).
  (* Invariant *)
  Have: x_8 <= x.
  (* Invariant *)
  Have: (x_8 + x_7) = x_9.
  (* Then *)
  Have: x_7 != x_8.
  If x_7 < x_8
  Then {
    Let x_12 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_7 = (x_5 + x_12)) /\ (x_8 = (x_2 + x_5 + (x * (p_1 - q)) + x_12)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_13 = x * (q_1 - q).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_8 = (x_2 + x_13)) /\ (x_7 = (x_2 + x_5 + x_13 + (x * (s_1 - s)))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_4 = (q * x).
  (* Invariant *)
  Have: x_6 <= y.
  (* Invariant *)
  Have: (0 < x_3) /\ (0 < x_6).
  (* Invariant *)
  Have: (r * y) = x_2.
  (* Invariant *)
  Have: x_3 <= x.
}
Prove: (x_1 + x_2 + x_4 + x_5) = x_9.
Prover Z3 4.8.12 returns Timeout (Qed:52ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:52ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 34):
Let x_1 = r * x.
Let x_2 = s * y.
Let x_3 = x_1 + x_2.
Let x_4 = p * x.
Let x_5 = q * y.
Let x_6 = x_4 + x_5.
Let x_7 = x + y.
Let x_8 = i_1 * y.
Let x_9 = i * x.
Let x_10 = p_2 * x.
Let x_11 = s_2 * y.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(y) /\ is_sint32(x_9) /\ is_sint32(x_8) /\
      is_sint32(x_6) /\ is_sint32(x_3).
  (* Invariant *)
  Have: (i_2 * y) = y.
  (* Invariant *)
  Have: (0 < x) /\ (0 < y).
  (* Invariant *)
  Have: (i_3 * x) = x.
  (* Invariant *)
  Have: (p_2 * s_2) = (1 + (q_2 * r_2)).
  (* Invariant *)
  Have: x_8 = ((q_2 * x) + x_11).
  (* Invariant *)
  Have: x_8 = ((r_2 * x) + x_11).
  (* Invariant *)
  Have: x_8 <= y.
  (* Invariant *)
  Have: (0 < x_9) /\ (0 < x_8).
  (* Invariant *)
  Have: x_9 = (x_10 + (r_2 * y)).
  (* Invariant *)
  Have: x_9 = (x_10 + (q_2 * y)).
  (* Invariant *)
  Have: x_9 <= x.
  (* Invariant *)
  Have: (x_9 + x_8) = x_7.
  (* Then *)
  Have: x_8 != x_9.
  If x_8 < x_9
  Then {
    Let x_12 = x * (r_1 - s).
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (x_8 = (x_2 + x_12)) /\ (x_9 = (x_5 + x_2 + (x * (p_1 - q)) + x_12)).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_13 = x * (q_1 - q).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        (x_9 = (x_5 + x_13)) /\ (x_8 = (x_5 + x_2 + x_13 + (x * (s_1 - s)))).
  }
  (* Invariant *)
  Have: (p * s) = (1 + (q * r)).
  (* Invariant *)
  Have: x_1 = (q * x).
  (* Invariant *)
  Have: x_3 <= y.
  (* Invariant *)
  Have: (0 < x_6) /\ (0 < x_3).
  (* Invariant *)
  Have: (r * y) = x_5.
  (* Invariant *)
  Have: x_6 <= x.
  (* Invariant *)
  Have: ((x_3 != x_6) -> ((x_4 + x_5 + x_1 + x_2) = x_7)).
}
Prove: exists i_5,i_4 : Z. ((x * i_5) = x_6) /\ ((y * i_4) = x_3).
Prover Z3 4.8.12 returns Timeout (Qed:54ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:54ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 34):
Assume {
  Type: is_sint32(a) /\ is_sint32(b).
  (* Pre-condition *)
  Have: 0 < a.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: exists i_1,i : Z. ((a * i_1) = a) /\ ((b * i) = b).
Prover Z3 4.8.12 returns Valid (Qed:2ms) (220ms) (276450)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (190ms) (2264)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0002/6_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (8ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0002/6_merged.c, line 39):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Assertion (file out/6_0002/6_merged.c, line 60):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/6_0002/6_merged.c, line 40):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/6_0002/6_merged.c:4: Warning: 
  No 'assigns' specification for function 'main6'.
  Callers assumptions might be imprecise.
