[kernel] Parsing out/6_0001/6_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 52 goals scheduled
[wp] [Timeout] typed_main6_loop_invariant_preserved (Qed 38ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_established (Qed 1ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_4_preserved (Qed 48ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_16_preserved (Qed 51ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_21_preserved (Qed 70ms) (Z3)
[wp] [Timeout] typed_main6_loop_invariant_23_preserved (Qed 62ms) (Z3)
[wp] Proved goals:   46 / 52
  Qed:              38
  Alt-Ergo 2.5.4:    5 (4ms-37ms-125ms)
  Z3 4.8.12:         3 (10ms-13ms-20ms)
  Timeout:           6
------------------------------------------------------------
  Function main6
------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 17):
Let x = (a * s) + (b * r).
Let x_1 = p_2 * x.
Let x_2 = q_2 * x.
Let x_3 = r * x.
Let x_4 = s * x.
Assume {
  Type: is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b_1) /\ is_sint32(b_2) /\
      is_sint32(b) /\ is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\
      is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(s) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: (a + x_2) = x.
  (* Invariant *)
  Have: x = IAbs.abs(x).
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: x = ((a * q_2) + (b * p_2)).
  (* Invariant *)
  Have: (x_2 + x_4) = b.
  (* Invariant *)
  Have: (x_3 + x_4) = b.
  (* Invariant *)
  Have: IAbs.abs(b) = b.
  (* Invariant *)
  Have: (0 < a) /\ (0 < b).
  (* Invariant *)
  Have: (x_1 + x_3) = a.
  (* Invariant *)
  Have: (x_1 + x_2) = a.
  (* Invariant *)
  Have: (a < b) \/ (b < a).
  (* Invariant *)
  Have: IAbs.abs(a) = a.
  (* Invariant *)
  Have: ((a * i_1) = b) \/ ((b * i_1) = a).
  (* Then *)
  Have: b != a.
  If b < a
  Then {
    Have: (b = b_1) /\ (p_2 = p_1) /\ (q_2 = q).
    Have: (a_1 + b_1) = a.
    Have: (p + q) = p_1.
  }
  Else {
    Have: (b = b_2) /\ (q_2 = q_1) /\ ((a_1 + b_1) = b_2) /\
        ((a + b_1) = b_2) /\ ((p + q) = q_1) /\ ((p_2 + q) = q_1).
  }
}
Prove: x = ((a_1 * q) + (b_1 * p)).
Prover Z3 4.8.12 returns Timeout (Qed:38ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:38ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 17):
Assume {
  Type: is_sint32(b) /\ is_sint32(x).
  (* Pre-condition *)
  Have: 0 < x.
  (* Pre-condition *)
  Have: 0 < b.
}
Prove: x = b.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:1ms) (8s)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 18):
Let x = b_1 - b.
Let x_1 = q - p.
Let x_2 = (b * p) + (x * x_1).
Let x_3 = q * x_2.
Let x_4 = p * x_2.
Let x_5 = r * x_2.
Let x_6 = x_4 + x_5.
Let x_7 = s - r.
Assume {
  Type: is_sint32(b) /\ is_sint32(b_1) /\ is_sint32(p) /\ is_sint32(q) /\
      is_sint32(r) /\ is_sint32(s) /\ is_sint32(x) /\ is_sint32(x_1) /\
      is_sint32(x_7) /\ is_sint32(x_2) /\ is_sint32(x_6).
  (* Residual *)
  When: x_6 <= b_1.
  (* Pre-condition *)
  Have: 0 < x_2.
  (* Invariant *)
  Have: x_2 = IAbs.abs(x_2).
  (* Invariant *)
  Have: (i * x_2) = x_2.
  (* Invariant *)
  Have: ((b_1 * p) + (q * x_6)) = x_2.
  (* Invariant *)
  Have: IAbs.abs(b_1) = b_1.
  (* Invariant *)
  Have: (b_1 != 0) /\ (x_6 != 0).
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: x_5 = x_3.
  (* Invariant *)
  Have: (x_4 + x_3 + x_5) = x_2.
  (* Invariant *)
  Have: x_6 < b_1.
  (* Invariant *)
  Have: ((b_1 * r) + (s * x_6)) = x_2.
  (* Invariant *)
  Have: ((b_1 * i_1) = x_6) \/ ((i_1 * x_6) = b_1).
  Have: ((x_3 + (s * x_2)) = b_1) /\ ((b + x_4 + x_5) = b_1).
}
Prove: ((x_1 * x_2) + (x_7 * x_2)) = b.
Prover Z3 4.8.12 returns Valid (Qed:53ms) (10ms) (47315)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.91ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (4ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 19):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 20):
Let x_1 = q * x.
Let x_2 = x_1 + (s * x).
Let x_3 = q_1 * x.
Let x_4 = x_3 + (s_1 * x).
Let x_5 = p_2 * x.
Let x_6 = r_2 * x.
Let x_7 = x_5 + x_6.
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(p) /\ is_sint32(p_1) /\
      is_sint32(p_2) /\ is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\
      is_sint32(x) /\ is_sint32(x_7) /\ is_sint32(x_2) /\ is_sint32(x_4).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p_2 * x_4) + (q_1 * x_7)) = x.
  (* Invariant *)
  Have: x_4 = IAbs.abs(x_4).
  (* Invariant *)
  Have: (x_7 != 0) /\ (x_4 != 0).
  (* Invariant *)
  Have: x_7 = IAbs.abs(x_7).
  (* Invariant *)
  Have: x_6 = x_3.
  (* Invariant *)
  Have: (x_5 + x_3 + x_6) = x.
  (* Invariant *)
  Have: (x_7 < x_4) \/ (x_4 < x_7).
  (* Invariant *)
  Have: ((r_2 * x_4) + (s_1 * x_7)) = x.
  (* Invariant *)
  Have: ((i_1 * x_7) = x_4) \/ ((i_1 * x_4) = x_7).
  (* Then *)
  Have: x_4 != x_7.
  If x_4 < x_7
  Then {
    Have: (p_2 = p_1) /\ (q_1 = q) /\ (r_2 = r_1) /\ (s_1 = s) /\
        (x_2 = IAbs.abs(x_2)).
    Have: ((a + x_1 + (s * x)) = a_1) /\
        (IAbs.abs((p_1 * x) + (r_1 * x)) = a_1).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_8 = s * x.
    Have: ((p + q) = q_1) /\ ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\
        ((r_2 + s) = s_1) /\
        ((x_1 + x_8 + (x * (q_1 - q)) + (x * (s_1 - s))) = x_4).
    Have: (a + x_1 + x_8) = x_4.
  }
  (* Invariant *)
  Have: ((a * q) + (p * x_2)) = x.
}
Prove: (r * x) = x_1.
Prover Z3 4.8.12 returns Timeout (Qed:48ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:48ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 20):
Prove: true.
Prover Qed returns Valid (0.92ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 21):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 22):
Prove: true.
Prover Qed returns Valid (1.00ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 23):
Let x_1 = q - p.
Let x_2 = x * x_1.
Let x_3 = r * x.
Let x_4 = s - r.
Let x_5 = x * x_4.
Let x_6 = x_3 + x_5.
Let x_7 = q * x.
Let x_8 = s * x.
Let x_9 = x_7 + x_8 - x_3 - x_5.
Let x_10 = p * x.
Let x_11 = x_7 + x_8.
Let x_12 = x_10 + x_3.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_12) /\
      is_sint32(x_11) /\ is_sint32(x_6) /\ is_sint32(x_9).
  (* Residual *)
  When: x_12 <= x_11.
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p * x_11) + (q * x_12)) = x.
  (* Invariant *)
  Have: x_11 = IAbs.abs(x_11).
  (* Invariant *)
  Have: (x_12 != 0) /\ (x_11 != 0).
  (* Invariant *)
  Have: x_12 = IAbs.abs(x_12).
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: (x_10 + x_7 + x_3) = x.
  (* Invariant *)
  Have: x_12 < x_11.
  (* Invariant *)
  Have: ((r * x_11) + (s * x_12)) = x.
  (* Invariant *)
  Have: ((i_1 * x_12) = x_11) \/ ((i_1 * x_11) = x_12).
  Have: (x_10 + (2 * x_3) + x_5) = x_11.
  (* Invariant *)
  Have: ((p * x_6) + (x_1 * x_9)) = x.
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: x_6 = IAbs.abs(x_2 + x_5).
Prover Z3 4.8.12 returns Valid (Qed:44ms) (10ms) (41090)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:44ms) (21ms) (743)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 23):
Assume { Type: is_sint32(b). (* Pre-condition *) Have: 0 < b. }
Prove: IAbs.abs(b) = b.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (10ms) (29974)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (4ms) (21)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 24):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 25):
Let x_1 = q - p.
Let x_2 = x * x_1.
Let x_3 = r * x.
Let x_4 = s - r.
Let x_5 = x * x_4.
Let x_6 = x_2 + x_5.
Let x_7 = q * x.
Let x_8 = s * x.
Let x_9 = x_7 + x_8 - x_2 - x_5.
Let x_10 = p * x.
Let x_11 = x_7 + x_8.
Let x_12 = x_10 + x_3.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_4) /\ is_sint32(x_12) /\
      is_sint32(x_11) /\ is_sint32(x_6) /\ is_sint32(x_9).
  (* Residual *)
  When: x_12 <= x_11.
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p * x_11) + (q * x_12)) = x.
  (* Invariant *)
  Have: x_11 = IAbs.abs(x_11).
  (* Invariant *)
  Have: (x_12 != 0) /\ (x_11 != 0).
  (* Invariant *)
  Have: x_12 = IAbs.abs(x_12).
  (* Invariant *)
  Have: x_3 = x_7.
  (* Invariant *)
  Have: (x_10 + x_7 + x_3) = x.
  (* Invariant *)
  Have: x_12 < x_11.
  (* Invariant *)
  Have: ((r * x_11) + (s * x_12)) = x.
  (* Invariant *)
  Have: ((i_1 * x_12) = x_11) \/ ((i_1 * x_11) = x_12).
  Have: (x_10 + x_3 + x_2 + x_5) = x_11.
  (* Invariant *)
  Have: ((p * x_6) + (x_1 * x_9)) = x.
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: x_2 = x_3.
}
Prove: (x_6 != 0) /\ (x_6 < x_11).
Prover Z3 4.8.12 returns Valid (Qed:55ms) (20ms) (40655)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:55ms) (23ms) (763)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 25):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 26):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 27):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 28):
Let x_1 = q * x.
Let x_2 = s * x.
Let x_3 = x_1 + x_2.
Let x_4 = p * x.
Let x_5 = r * x.
Let x_6 = x_4 + x_5.
Let x_7 = r - s.
Let x_8 = x * x_7.
Let x_9 = p - q.
Let x_10 = x_4 + x_5 - x_1 - x_2.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(x_9) /\ is_sint32(x_7) /\ is_sint32(x_6) /\
      is_sint32(x_3) /\ is_sint32(x_10).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p * x_3) + (q * x_6)) = x.
  (* Invariant *)
  Have: x_3 = IAbs.abs(x_3).
  (* Invariant *)
  Have: (x_6 != 0) /\ (x_3 != 0).
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: x_5 = x_1.
  (* Invariant *)
  Have: (x_4 + x_1 + x_5) = x.
  (* Invariant *)
  Have: ((r * x_3) + (s * x_6)) = x.
  (* Invariant *)
  Have: ((i_1 * x_6) = x_3) \/ ((i_1 * x_3) = x_6).
  (* Invariant *)
  Have: ((x_9 * x_3) + (q * x_10)) = x.
  (* Invariant *)
  Have: x_8 = x_1.
  (* Invariant *)
  Have: x_3 < x_6.
}
Prove: (x_1 + x_2 + (x * x_9) + x_8) = x_6.
Prover Z3 4.8.12 returns Valid (Qed:53ms) (10ms) (10719)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:53ms) (12ms) (341)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 28):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 29):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 30):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (11ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 31):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 32):
Let x_1 = q * x.
Let x_2 = x_1 + (s * x).
Let x_3 = p * x.
Let x_4 = x_3 + x_1.
Let x_5 = q_2 * x.
Let x_6 = x_5 + (s_2 * x).
Let x_7 = p_2 * x.
Let x_8 = r_2 * x.
Let x_9 = x_7 + x_8.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(x_4) /\ is_sint32(x_9) /\ is_sint32(x_2) /\
      is_sint32(x_6).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p_2 * x_6) + (q_2 * x_9)) = x.
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: (x_9 != 0) /\ (x_6 != 0).
  (* Invariant *)
  Have: x_9 = IAbs.abs(x_9).
  (* Invariant *)
  Have: x_8 = x_5.
  (* Invariant *)
  Have: (x_7 + x_5 + x_8) = x.
  (* Invariant *)
  Have: (x_9 < x_6) \/ (x_6 < x_9).
  (* Invariant *)
  Have: ((r_2 * x_6) + (s_2 * x_9)) = x.
  (* Invariant *)
  Have: ((i_1 * x_9) = x_6) \/ ((i_1 * x_6) = x_9).
  (* Then *)
  Have: x_6 != x_9.
  If x_6 < x_9
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        (((s * x) + (2 * x_1) + (x * (p_1 - q))) =
         IAbs.abs((p_1 * x) + (r_1 * x))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x * (s_1 - s)) = x_1) /\
        (((s * x) + (2 * x_1) + (x * (q_1 - q))) =
         IAbs.abs((q_1 * x) + (s_1 * x))).
  }
  (* Invariant *)
  Have: ((p * x_2) + (q * x_4)) = x.
  (* Invariant *)
  Have: x_2 = IAbs.abs(x_2).
  (* Invariant *)
  Have: (r * x) = x_1.
  (* Invariant *)
  Have: (x_2 != 0) /\ (0 < x_4).
}
Prove: (x_3 + (2 * x_1)) = x.
Prover Z3 4.8.12 returns Timeout (Qed:51ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:51ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 32):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 33):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 34):
Let x_1 = q * x.
Let x_2 = 2 * x_1.
Let x_3 = p * x.
Let x_4 = r * x.
Let x_5 = s * x.
Let x_6 = x_1 + x_5.
Let x_7 = x - x_1.
Let x_8 = q_2 * x.
Let x_9 = x_8 + (s_2 * x).
Let x_10 = p_2 * x.
Let x_11 = r_2 * x.
Let x_12 = x_10 + x_11.
Let x_13 = x_5 + x_2.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(x_12) /\ is_sint32(x_6) /\ is_sint32(x_9) /\
      is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p_2 * x_9) + (q_2 * x_12)) = x.
  (* Invariant *)
  Have: x_9 = IAbs.abs(x_9).
  (* Invariant *)
  Have: (x_12 != 0) /\ (x_9 != 0).
  (* Invariant *)
  Have: x_12 = IAbs.abs(x_12).
  (* Invariant *)
  Have: x_11 = x_8.
  (* Invariant *)
  Have: (x_10 + x_8 + x_11) = x.
  (* Invariant *)
  Have: (x_12 < x_9) \/ (x_9 < x_12).
  (* Invariant *)
  Have: ((r_2 * x_9) + (s_2 * x_12)) = x.
  (* Invariant *)
  Have: ((i_1 * x_12) = x_9) \/ ((i_1 * x_9) = x_12).
  (* Then *)
  Have: x_9 != x_12.
  If x_9 < x_12
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((x + x_5) = IAbs.abs((p_1 * x) + (r_1 * x))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Let x_14 = x * (q_1 - q).
    Let x_15 = x * (s_1 - s).
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_1 + x_14 + x_15) = x) /\
        ((x_1 + x_5 + x_14 + x_15) = IAbs.abs((q_1 * x) + (s_1 * x))).
  }
  (* Invariant *)
  Have: ((p * x_6) + (q * x_7)) = x.
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: x_4 = x_1.
  (* Invariant *)
  Have: (x_6 != 0) /\ (x_1 < x).
  (* Invariant *)
  Have: (x_3 + x_1 + x_4) = x.
  (* Invariant *)
  Have: (x_3 + x_2) = x.
}
Prove: (x_13 = x) \/ ((x_13 != x) /\ ((x < x_13) \/ (x_13 < x))).
Prover Z3 4.8.12 returns Valid (Qed:53ms) (10ms) (42504)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 34):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 35):
Let x_1 = q * x.
Let x_2 = 2 * x_1.
Let x_3 = s * x.
Let x_4 = x_3 + x_2.
Let x_5 = p - q.
Let x_6 = x * x_5.
Let x_7 = r - s.
Let x_8 = x * x_7.
Let x_9 = x_1 + x_3.
Let x_10 = x - x_1.
Let x_11 = p * x.
Let x_12 = r * x.
Let x_13 = x_11 + x_12.
Let x_14 = x + x_3.
Assume {
  Type: is_sint32(p) /\ is_sint32(q) /\ is_sint32(r) /\ is_sint32(s) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_7) /\ is_sint32(x_14) /\
      is_sint32(x_13) /\ is_sint32(x_9) /\ is_sint32(x_10).
  (* Residual *)
  When: x_9 < x_13.
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p * x_9) + (q * x_13)) = x.
  (* Invariant *)
  Have: x_9 = IAbs.abs(x_9).
  (* Invariant *)
  Have: (x_13 != 0) /\ (x_9 != 0).
  (* Invariant *)
  Have: x_13 = IAbs.abs(x_13).
  (* Invariant *)
  Have: x_12 = x_1.
  (* Invariant *)
  Have: (x_11 + x_1 + x_12) = x.
  (* Invariant *)
  Have: ((r * x_9) + (s * x_13)) = x.
  (* Invariant *)
  Have: ((i_1 * x_13) = x_9) \/ ((i_1 * x_9) = x_13).
  Have: x_13 = x_14.
  (* Invariant *)
  Have: ((x_5 * x_9) + (q * x_10)) = x.
  (* Invariant *)
  Have: x_8 = x_1.
  (* Invariant *)
  Have: x_1 < x.
  (* Invariant *)
  Have: (x_1 + x_6 + x_8) = x.
  (* Invariant *)
  Have: (x_2 + x_6) = x.
  (* Invariant *)
  Have: (x_4 = x) \/ ((x_4 != x) /\ ((x < x_4) \/ (x_4 < x))).
}
Prove: (x_1 + IAbs.abs(x_6 + x_8)) = x.
Prover Z3 4.8.12 returns Valid (Qed:60ms) (20ms) (43312)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 35):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (5ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 36):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 37):
Let x = p * y.
Let x_1 = r * y.
Let x_2 = x + x_1.
Let x_3 = q * y.
Let x_4 = x_3 + (s * y).
Let x_5 = q_2 * y.
Let x_6 = x_5 + (s_2 * y).
Let x_7 = p_2 * y.
Let x_8 = r_2 * y.
Let x_9 = x_7 + x_8.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(y) /\ is_sint32(x_2) /\ is_sint32(x_9) /\ is_sint32(x_4) /\
      is_sint32(x_6).
  (* Goal *)
  When: x_4 != x_2.
  (* Pre-condition *)
  Have: 0 < y.
  (* Invariant *)
  Have: IAbs.abs(y) = y.
  (* Invariant *)
  Have: (i * y) = y.
  (* Invariant *)
  Have: ((p_2 * x_6) + (q_2 * x_9)) = y.
  (* Invariant *)
  Have: x_6 = IAbs.abs(x_6).
  (* Invariant *)
  Have: (x_9 != 0) /\ (x_6 != 0).
  (* Invariant *)
  Have: x_9 = IAbs.abs(x_9).
  (* Invariant *)
  Have: x_8 = x_5.
  (* Invariant *)
  Have: (x_7 + x_5 + x_8) = y.
  (* Invariant *)
  Have: (x_9 < x_6) \/ (x_6 < x_9).
  (* Invariant *)
  Have: ((r_2 * x_6) + (s_2 * x_9)) = y.
  (* Invariant *)
  Have: ((i_1 * x_9) = x_6) \/ ((i_1 * x_6) = x_9).
  (* Then *)
  Have: x_6 != x_9.
  If x_6 < x_9
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((x_3 + (s * y) + IAbs.abs((y * (p_1 - q)) + (y * (r_1 - s)))) =
         IAbs.abs((p_1 * y) + (r_1 * y))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_3 + (s * y) + (y * (q_1 - q)) + (y * (s_1 - s))) =
         IAbs.abs((q_1 * y) + (s_1 * y))).
  }
  (* Invariant *)
  Have: ((p * x_4) + (q * x_2)) = y.
  (* Invariant *)
  Have: x_4 = IAbs.abs(x_4).
  (* Invariant *)
  Have: (x_2 != 0) /\ (x_4 != 0).
  (* Invariant *)
  Have: x_2 = IAbs.abs(x_2).
  (* Invariant *)
  Have: x_1 = x_3.
  (* Invariant *)
  Have: (x + x_3 + x_1) = y.
  (* Invariant *)
  Have: (x_2 < x_4) \/ (x_4 < x_2).
}
Prove: ((r * x_4) + (s * x_2)) = y.
Prover Z3 4.8.12 returns Timeout (Qed:70ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:70ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 37):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (7ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 38):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 39):
Let x_1 = q * x.
Let x_2 = x_1 + (s * x).
Let x_3 = p * x.
Let x_4 = r * x.
Let x_5 = x_3 + x_4.
Let x_6 = q_2 * x.
Let x_7 = x_6 + (s_2 * x).
Let x_8 = p_2 * x.
Let x_9 = r_2 * x.
Let x_10 = x_8 + x_9.
Assume {
  Type: is_sint32(p) /\ is_sint32(p_1) /\ is_sint32(p_2) /\ is_sint32(q) /\
      is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\ is_sint32(r_1) /\
      is_sint32(r_2) /\ is_sint32(s) /\ is_sint32(s_1) /\ is_sint32(s_2) /\
      is_sint32(x) /\ is_sint32(x_5) /\ is_sint32(x_10) /\ is_sint32(x_2) /\
      is_sint32(x_7).
  (* Pre-condition *)
  Have: 0 < x.
  (* Invariant *)
  Have: IAbs.abs(x) = x.
  (* Invariant *)
  Have: (i * x) = x.
  (* Invariant *)
  Have: ((p_2 * x_7) + (q_2 * x_10)) = x.
  (* Invariant *)
  Have: x_7 = IAbs.abs(x_7).
  (* Invariant *)
  Have: (x_10 != 0) /\ (x_7 != 0).
  (* Invariant *)
  Have: x_10 = IAbs.abs(x_10).
  (* Invariant *)
  Have: x_9 = x_6.
  (* Invariant *)
  Have: (x_8 + x_6 + x_9) = x.
  (* Invariant *)
  Have: (x_10 < x_7) \/ (x_7 < x_10).
  (* Invariant *)
  Have: ((r_2 * x_7) + (s_2 * x_10)) = x.
  (* Invariant *)
  Have: ((i_1 * x_10) = x_7) \/ ((i_1 * x_7) = x_10).
  (* Then *)
  Have: x_7 != x_10.
  If x_7 < x_10
  Then {
    Have: (p_2 = p_1) /\ (q_2 = q) /\ (r_2 = r_1) /\ (s_2 = s) /\
        ((x_1 + (s * x) + IAbs.abs((x * (p_1 - q)) + (x * (r_1 - s)))) =
         IAbs.abs((p_1 * x) + (r_1 * x))).
    Have: (p + q) = p_1.
    Have: (r + s) = r_1.
  }
  Else {
    Have: (q_2 = q_1) /\ (s_2 = s_1) /\ ((p + q) = q_1) /\
        ((p_2 + q) = q_1) /\ ((r + s) = s_1) /\ ((r_2 + s) = s_1) /\
        ((x_1 + (s * x) + (x * (q_1 - q)) + (x * (s_1 - s))) =
         IAbs.abs((q_1 * x) + (s_1 * x))).
  }
  (* Invariant *)
  Have: ((p * x_2) + (q * x_5)) = x.
  (* Invariant *)
  Have: x_2 = IAbs.abs(x_2).
  (* Invariant *)
  Have: (x_5 != 0) /\ (x_2 != 0).
  (* Invariant *)
  Have: x_5 = IAbs.abs(x_5).
  (* Invariant *)
  Have: x_4 = x_1.
  (* Invariant *)
  Have: (x_3 + x_1 + x_4) = x.
  (* Invariant *)
  Have: (x_2 = x_5) \/ ((x_2 != x_5) /\ ((x_5 < x_2) \/ (x_2 < x_5))).
  (* Invariant *)
  Have: ((x_2 != x_5) -> (((r * x_2) + (s * x_5)) = x)).
}
Prove: exists i_2 : Z. ((i_2 * x_5) = x_2) \/ ((i_2 * x_2) = x_5).
Prover Z3 4.8.12 returns Timeout (Qed:62ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:62ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 39):
Assume {
  Type: is_sint32(a).
  (* Pre-condition *)
  Have: 0 < a.
  (* Invariant *)
  Have: IAbs.abs(a) = a.
}
Prove: exists i : Z. (a * i) = a.
Prover Z3 4.8.12 returns Valid (Qed:2ms) (160ms) (224420)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:2ms) (125ms) (2187)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 40):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/6_0001/6_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (6ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/6_0001/6_merged.c, line 41):
Prove: true.
Prover Qed returns Valid (1ms)

------------------------------------------------------------

Goal Assertion (file out/6_0001/6_merged.c, line 62):
Prove: true.
Prover Qed returns Valid (3ms)

------------------------------------------------------------

Goal Loop assigns (file out/6_0001/6_merged.c, line 42):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/6_0001/6_merged.c:4: Warning: 
  No 'assigns' specification for function 'main6'.
  Callers assumptions might be imprecise.
