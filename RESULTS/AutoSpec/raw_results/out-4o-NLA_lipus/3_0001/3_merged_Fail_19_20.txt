[kernel] Parsing out/3_0001/3_merged.c (with preprocessing)
[wp] Running WP plugin...
[wp] Warning: Missing RTE guards
[wp] 20 goals scheduled
[wp] [Timeout] typed_main3_loop_invariant_preserved (Qed 3ms) (Z3)
[wp] Proved goals:   19 / 20
  Qed:              14
  Alt-Ergo 2.5.4:    5
  Timeout:           1
------------------------------------------------------------
  Function main3
------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 10):
Let x_1 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (r_2 + (q_2 * y)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
}
Prove: (r + (q * y)) < x.
Prover Z3 4.8.12 returns Timeout (Qed:3ms) (8s)
Prover Alt-Ergo 2.5.4 returns Timeout (Qed:3ms) (8s)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 11):
Prove: true.
Prover Qed returns Valid (0.71ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 12):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 13):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 14):
Let x_1 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (r_2 + (q_2 * y)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
}
Prove: r < y.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (34565)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (46)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 14):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 15):
Let x_1 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (r_2 + (q_2 * y)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
  (* Invariant *)
  Have: r < y.
}
Prove: q <= x_1.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (60ms) (118763)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (16ms) (264)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 15):
Assume {
  Type: is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
}
Prove: 0 <= (x / y).
Prover Z3 4.8.12 returns Valid (Qed:0.84ms) (29771)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:0.84ms) (32)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (2ms)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 16):
Prove: true.
Prover Qed returns Valid (0.50ms)

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 17):
Let x_1 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (r_2 + (q_2 * y)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
}
Prove: 0 <= r.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (20ms) (34277)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (6ms) (50)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 17):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant (file out/3_0001/3_merged.c, line 18):
Let x_1 = x / y.
Assume {
  Type: is_sint32(q) /\ is_sint32(q_1) /\ is_sint32(q_2) /\ is_sint32(r) /\
      is_sint32(r_1) /\ is_sint32(r_2) /\ is_sint32(x) /\ is_sint32(y).
  (* Invariant *)
  Have: 0 < x.
  (* Invariant *)
  Have: 0 < y.
  (* Invariant *)
  Have: 0 <= x_1.
  (* Invariant *)
  Have: (r_2 + (q_2 * y)) < x.
  (* Invariant *)
  Have: r_2 < y.
  (* Invariant *)
  Have: q_2 <= x_1.
  (* Invariant *)
  Have: 0 <= r_2.
  (* Invariant *)
  Have: 0 <= q_2.
  If (1 + r_2) = y
  Then { Have: q_2 = q_1. Have: r = 0. Have: (1 + q_1) = q. }
  Else { Have: (q_2 = q) /\ (r_2 = r_1). Have: (1 + r_1) = r. }
  (* Invariant *)
  Have: (r + (q * y)) < x.
  (* Invariant *)
  Have: r < y.
  (* Invariant *)
  Have: q <= x_1.
  (* Invariant *)
  Have: 0 <= r.
}
Prove: 0 <= q.
Prover Z3 4.8.12 returns Valid (Qed:3ms) (10ms) (35114)
Prover Alt-Ergo 2.5.4 returns Valid (Qed:3ms) (5ms) (52)

------------------------------------------------------------

Goal Establishment of Invariant (file out/3_0001/3_merged.c, line 18):
Prove: true.
Prover Qed returns Valid (0.62ms)

------------------------------------------------------------

Goal Assertion (file out/3_0001/3_merged.c, line 32):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file out/3_0001/3_merged.c, line 19):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] out/3_0001/3_merged.c:4: Warning: 
  No 'assigns' specification for function 'main3'.
  Callers assumptions might be imprecise.
