2025-08-18 17:14:53,979 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 17:14:53,980 - INFO  - ========================================

2025-08-18 17:14:54,028 - INFO  - 初始待处理函数: ['hoo13', 'unknown']
2025-08-18 17:14:54,028 - INFO  - 现在处理函数 unknown

2025-08-18 17:14:54,028 - INFO  - 
GENERATE ANNOTATION FOR hoo13
2025-08-18 17:14:54,028 - INFO  - ========================================

2025-08-18 17:14:54,028 - INFO  - 函数 hoo13 已经初始化
2025-08-18 17:14:54,043 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo13
2025-08-18 17:14:54,043 - INFO  - ========================================

2025-08-18 17:14:54,057 - INFO  - file_name: hoo13
2025-08-18 17:14:54,065 - DEBUG  - INNER_FLAG: False
2025-08-18 17:14:54,079 - INFO  - Variable Maps:[{'x': 'x@pre'}, {'x': 'x@pre'}]
2025-08-18 17:14:54,079 - INFO  - Path conditions: ['x@pre == 2', 'x@pre == 1']
2025-08-18 17:14:54,079 - INFO  - Pre condition: x@pre == 2 && x == x@pre || x@pre == 1 && x == x@pre
2025-08-18 17:14:54,080 - INFO  - Loop Condition: unknown()
2025-08-18 17:14:54,080 - INFO  - Array Names: []
2025-08-18 17:14:54,080 - INFO  - Updated Loop Conditions: ['unknown()', 'unknown()']
2025-08-18 17:14:54,080 - INFO  - Global Unchanged Variables: []
2025-08-18 17:14:54,080 - INFO  - Non Inductive Variables: ['x', 'x']
2025-08-18 17:15:20,009 - INFO  - after const
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after not in
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after vars
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after verification goal
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after const
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after not in
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,010 - INFO  - after vars
2025-08-18 17:15:20,010 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:20,011 - INFO  - after verification goal
2025-08-18 17:15:20,011 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == \at(x,Pre))) || (PLACE_HOLDER_x) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            
2025-08-18 17:15:28,285 - DEBUG  - invgen reasoning
2025-08-18 17:15:28,285 - DEBUG  - ```c
//svcomp_benchmark32_linear
int unknown();
/*@
  requires x == 1 || x == 2;
*/
int hoo13(int x){

    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            

    //post-condition
    /*@ assert x <= 8; */
}
```
2025-08-18 17:15:28,285 - INFO  - 生成循环不变量
2025-08-18 17:15:28,285 - INFO  - 
//svcomp_benchmark32_linear
int unknown();
/*@
  requires x == 1 || x == 2;
*/
int hoo13(int x){

    //loop-body
    
            
            /*@
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            

    //post-condition
    /*@ assert x <= 8; */
}

2025-08-18 17:15:39,446 - INFO  - syntax Correct
2025-08-18 17:15:43,320 - INFO  - Validate:
2025-08-18 17:15:43,320 - INFO  - [True, True, True, True]
2025-08-18 17:15:43,320 - INFO  - 
2025-08-18 17:15:43,320 - INFO  - Verify:
2025-08-18 17:15:43,320 - INFO  - [True]
2025-08-18 17:15:43,320 - INFO  - 
2025-08-18 17:15:43,320 - INFO  - 注释过不变量的代码
2025-08-18 17:15:43,320 - INFO  - 
//svcomp_benchmark32_linear
int unknown();
/*@
  requires x == 1 || x == 2;
*/
int hoo13(int x){

    //loop-body
    
            
            /*@
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
            

    //post-condition
    /*@ assert x <= 8; */
}

2025-08-18 17:15:54,538 - INFO  - syntax Correct
2025-08-18 17:15:58,451 - INFO  - Validate:
2025-08-18 17:15:58,451 - INFO  - [True, True, True, True]
2025-08-18 17:15:58,451 - INFO  - 
2025-08-18 17:15:58,451 - INFO  - Verify:
2025-08-18 17:15:58,451 - INFO  - [True]
2025-08-18 17:15:58,452 - INFO  - 
2025-08-18 17:15:58,452 - INFO  - ACSL 格式的循环不变量
2025-08-18 17:15:58,452 - INFO  - /*@
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
          loop invariant  ((x == \at(x,Pre))) || (x <= 8) ;
          loop invariant  ((x == \at(x,Pre))) || (x == 1 || x == 2) ;
            */
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
2025-08-18 17:15:58,452 - INFO  - VST 格式的循环不变量
2025-08-18 17:15:58,452 - INFO  - /*@ Inv
    (((x == x@pre)) || (x <= 8) ) &&
(((x == x@pre)) || (x == 1 || x == 2) ) &&
(((x == x@pre)) || (x <= 8) ) &&
(((x == x@pre)) || (x == 1 || x == 2) )
    */
    
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
2025-08-18 17:15:58,452 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 17:15:58,452 - INFO  - 继续符号执行
2025-08-18 17:15:58,452 - INFO  - /*@ Inv
    (((x == x@pre)) || (x <= 8) ) &&
(((x == x@pre)) || (x == 1 || x == 2) ) &&
(((x == x@pre)) || (x <= 8) ) &&
(((x == x@pre)) || (x == 1 || x == 2) )
    */
    
            while (unknown()) {
        if(x == 1) 
            x = 2;
        else if(x == 2)
            x = 1;
    }
2025-08-18 17:16:09,573 - INFO  - syntax Correct
2025-08-18 17:16:13,462 - INFO  - Validate:
2025-08-18 17:16:13,463 - INFO  - [True, True, True, True]
2025-08-18 17:16:13,463 - INFO  - 
2025-08-18 17:16:13,463 - INFO  - Verify:
2025-08-18 17:16:13,463 - INFO  - [True]
2025-08-18 17:16:13,463 - INFO  - 
2025-08-18 17:16:13,463 - INFO  - CORRECT INVARIANT
2025-08-18 17:16:24,526 - INFO  - syntax Correct
2025-08-18 17:16:28,377 - INFO  - Validate:
2025-08-18 17:16:28,377 - INFO  - [True, True, True, True]
2025-08-18 17:16:28,377 - INFO  - 
2025-08-18 17:16:28,377 - INFO  - Verify:
2025-08-18 17:16:28,377 - INFO  - [True]
2025-08-18 17:16:28,377 - INFO  - 
2025-08-18 17:16:28,377 - INFO  - ========================================
2025-08-18 17:16:28,377 - INFO  - first_pass:
2025-08-18 17:16:28,377 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 17:16:28,377 - INFO  - ========================================
