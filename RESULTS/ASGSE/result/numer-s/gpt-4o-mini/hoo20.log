2025-08-18 02:41:06,740 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 02:41:06,740 - INFO  - ========================================

2025-08-18 02:41:06,775 - INFO  - 初始待处理函数: ['hoo20']
2025-08-18 02:41:06,775 - INFO  - 
GENERATE ANNOTATION FOR hoo20
2025-08-18 02:41:06,775 - INFO  - ========================================

2025-08-18 02:41:06,775 - INFO  - 函数 hoo20 已经初始化
2025-08-18 02:41:06,789 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo20
2025-08-18 02:41:06,789 - INFO  - ========================================

2025-08-18 02:41:06,803 - INFO  - file_name: hoo20
2025-08-18 02:41:06,813 - DEBUG  - INNER_FLAG: False
2025-08-18 02:41:06,829 - INFO  - Variable Maps:[{'j': '0', 'nlen': 'nlen@pre', 'material_length': 'material_length@pre', 'idBitLength': 'idBitLength@pre'}]
2025-08-18 02:41:06,830 - INFO  - Path conditions: ['nlen@pre == idBitLength@pre / 32 && idBitLength@pre >= 0 && material_length@pre >= 0']
2025-08-18 02:41:06,830 - INFO  - Pre condition: nlen@pre == idBitLength@pre / 32 && idBitLength@pre >= 0 && material_length@pre >= 0 && (j == 0) * (nlen == nlen@pre) * (material_length == material_length@pre) * (idBitLength == idBitLength@pre)
2025-08-18 02:41:06,830 - INFO  - Loop Condition: (j < idBitLength / 8) && (j < material_length)
2025-08-18 02:41:06,830 - INFO  - Array Names: []
2025-08-18 02:41:06,830 - INFO  - Updated Loop Conditions: ['(0 < idBitLength@pre / 8) && (0 < material_length@pre)']
2025-08-18 02:41:06,831 - INFO  - Global Unchanged Variables: ['nlen', 'material_length', 'idBitLength']
2025-08-18 02:41:06,831 - INFO  - Non Inductive Variables: []
2025-08-18 02:41:27,481 - INFO  - after const
2025-08-18 02:41:27,482 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            
2025-08-18 02:41:27,482 - INFO  - after not in
2025-08-18 02:41:27,482 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre)))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            
2025-08-18 02:41:27,482 - INFO  - after vars
2025-08-18 02:41:27,482 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (PLACE_HOLDER_j) ;
          loop invariant (!((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre)))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            
2025-08-18 02:41:27,482 - INFO  - after verification goal
2025-08-18 02:41:27,482 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (PLACE_HOLDER_j) ;
          loop invariant (!((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre)))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            
2025-08-18 02:41:33,911 - DEBUG  - invgen reasoning
2025-08-18 02:41:33,912 - DEBUG  - ```c
//svcomp_id_trans
/*@
  requires nlen == idBitLength / 32;
  requires idBitLength >= 0;
  requires material_length >= 0;
*/
int hoo20(int idBitLength,int material_length,int nlen){
    int j = 0;

    //pre-condition

    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre))) || (j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre)));
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (0 <= j && j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre));
          loop invariant !((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            

    //post-condition
    /*@ assert (j / 4) <= nlen; */
}
```
2025-08-18 02:41:33,912 - INFO  - 生成循环不变量
2025-08-18 02:41:33,912 - INFO  - 
//svcomp_id_trans
/*@
  requires nlen == idBitLength / 32;
  requires idBitLength >= 0;
  requires material_length >= 0;
*/
int hoo20(int idBitLength,int material_length,int nlen){
    int j = 0;

    //pre-condition

    //loop-body
    
            
            /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre))) || (j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre)));
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (0 <= j && j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre));
          loop invariant !((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            

    //post-condition
    /*@ assert (j / 4) <= nlen; */
}

2025-08-18 02:41:44,938 - INFO  - syntax Correct
2025-08-18 02:41:48,711 - INFO  - Validate:
2025-08-18 02:41:48,711 - INFO  - [True, True, True, True, True, True]
2025-08-18 02:41:48,711 - INFO  - 
2025-08-18 02:41:48,711 - INFO  - Verify:
2025-08-18 02:41:48,711 - INFO  - [True]
2025-08-18 02:41:48,711 - INFO  - 
2025-08-18 02:41:48,712 - INFO  - 注释过不变量的代码
2025-08-18 02:41:48,712 - INFO  - 
//svcomp_id_trans
/*@
  requires nlen == idBitLength / 32;
  requires idBitLength >= 0;
  requires material_length >= 0;
*/
int hoo20(int idBitLength,int material_length,int nlen){
    int j = 0;

    //pre-condition

    //loop-body
    
            
            /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre))) || (j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre)));
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (0 <= j && j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre));
          loop invariant !((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
            

    //post-condition
    /*@ assert (j / 4) <= nlen; */
}

2025-08-18 02:41:59,591 - INFO  - syntax Correct
2025-08-18 02:42:03,379 - INFO  - Validate:
2025-08-18 02:42:03,380 - INFO  - [True, True, True, True, True, True]
2025-08-18 02:42:03,380 - INFO  - 
2025-08-18 02:42:03,380 - INFO  - Verify:
2025-08-18 02:42:03,380 - INFO  - [True]
2025-08-18 02:42:03,380 - INFO  - 
2025-08-18 02:42:03,380 - INFO  - ACSL 格式的循环不变量
2025-08-18 02:42:03,380 - INFO  - /*@
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre))) || (j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre)));
          loop invariant ((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> (0 <= j && j <= \at(idBitLength,Pre) / 8 && j <= \at(material_length,Pre));
          loop invariant !((0 < \at(idBitLength,Pre) / 8) && (0 < \at(material_length,Pre))) ==> ((j == 0)&&(nlen == \at(nlen,Pre))&&(material_length == \at(material_length,Pre))&&(idBitLength == \at(idBitLength,Pre)));
          loop invariant nlen == \at(nlen,Pre);
          loop invariant material_length == \at(material_length,Pre);
          loop invariant idBitLength == \at(idBitLength,Pre);
            */
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
2025-08-18 02:42:03,381 - INFO  - VST 格式的循环不变量
2025-08-18 02:42:03,381 - INFO  - /*@ Inv
    (((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => (((j == 0)&&(nlen == nlen@pre)&&(material_length == material_length@pre)&&(idBitLength == idBitLength@pre)) || (j <= idBitLength@pre / 8 && j <= material_length@pre))) &&
(((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => (0 <= j && j <= idBitLength@pre / 8 && j <= material_length@pre)) &&
(!((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => ((j == 0)&&(nlen == nlen@pre)&&(material_length == material_length@pre)&&(idBitLength == idBitLength@pre))) &&
(nlen == nlen@pre) &&
(material_length == material_length@pre) &&
(idBitLength == idBitLength@pre)
    */
    
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
2025-08-18 02:42:03,381 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 02:42:03,381 - INFO  - 继续符号执行
2025-08-18 02:42:03,381 - INFO  - /*@ Inv
    (((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => (((j == 0)&&(nlen == nlen@pre)&&(material_length == material_length@pre)&&(idBitLength == idBitLength@pre)) || (j <= idBitLength@pre / 8 && j <= material_length@pre))) &&
(((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => (0 <= j && j <= idBitLength@pre / 8 && j <= material_length@pre)) &&
(!((0 < idBitLength@pre / 8) && (0 < material_length@pre)) => ((j == 0)&&(nlen == nlen@pre)&&(material_length == material_length@pre)&&(idBitLength == idBitLength@pre))) &&
(nlen == nlen@pre) &&
(material_length == material_length@pre) &&
(idBitLength == idBitLength@pre)
    */
    
            while((j < idBitLength / 8) && (j < material_length)){
       j = j + 1;
    }
2025-08-18 02:42:14,346 - INFO  - syntax Correct
2025-08-18 02:42:18,121 - INFO  - Validate:
2025-08-18 02:42:18,121 - INFO  - [True, True, True, True, True, True]
2025-08-18 02:42:18,121 - INFO  - 
2025-08-18 02:42:18,121 - INFO  - Verify:
2025-08-18 02:42:18,121 - INFO  - [True]
2025-08-18 02:42:18,121 - INFO  - 
2025-08-18 02:42:18,121 - INFO  - CORRECT INVARIANT
2025-08-18 02:42:29,007 - INFO  - syntax Correct
2025-08-18 02:42:32,798 - INFO  - Validate:
2025-08-18 02:42:32,798 - INFO  - [True, True, True, True, True, True]
2025-08-18 02:42:32,798 - INFO  - 
2025-08-18 02:42:32,798 - INFO  - Verify:
2025-08-18 02:42:32,798 - INFO  - [True]
2025-08-18 02:42:32,798 - INFO  - 
2025-08-18 02:42:32,798 - INFO  - ========================================
2025-08-18 02:42:32,798 - INFO  - first_pass:
2025-08-18 02:42:32,798 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 02:42:32,799 - INFO  - ========================================
