2025-08-18 02:26:18,819 - INFO  - 
FUNCTION INITIALIZATION
2025-08-18 02:26:18,819 - INFO  - ========================================

2025-08-18 02:26:18,840 - INFO  - 初始待处理函数: ['hoo10']
2025-08-18 02:26:18,840 - INFO  - 
GENERATE ANNOTATION FOR hoo10
2025-08-18 02:26:18,840 - INFO  - ========================================

2025-08-18 02:26:18,841 - INFO  - 函数 hoo10 已经初始化
2025-08-18 02:26:18,855 - INFO  - 
GENERATE LOOP INVARIANT FOR hoo10
2025-08-18 02:26:18,855 - INFO  - ========================================

2025-08-18 02:26:18,869 - INFO  - file_name: hoo10
2025-08-18 02:26:18,878 - DEBUG  - INNER_FLAG: False
2025-08-18 02:26:18,893 - INFO  - Variable Maps:[{'y': '0', 'x': '1'}]
2025-08-18 02:26:18,893 - INFO  - Path conditions: [None]
2025-08-18 02:26:18,893 - INFO  - Pre condition: (y == 0) * (x == 1)
2025-08-18 02:26:18,893 - INFO  - Loop Condition: y < 1024
2025-08-18 02:26:18,893 - INFO  - Array Names: []
2025-08-18 02:26:18,893 - INFO  - Updated Loop Conditions: ['0 < 1024']
2025-08-18 02:26:18,894 - INFO  - Global Unchanged Variables: []
2025-08-18 02:26:18,894 - INFO  - Non Inductive Variables: ['x']
2025-08-18 02:26:28,625 - INFO  - after const
2025-08-18 02:26:28,625 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            
2025-08-18 02:26:28,625 - INFO  - after not in
2025-08-18 02:26:28,625 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            
2025-08-18 02:26:28,625 - INFO  - after vars
2025-08-18 02:26:28,625 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (PLACE_HOLDER_x) ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            
2025-08-18 02:26:28,625 - INFO  - after verification goal
2025-08-18 02:26:28,625 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((y == 0)&&(x == 1)) || (PLACE_HOLDER_x) ;
          loop invariant  PLACE_HOLDER_y ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            
2025-08-18 02:26:30,778 - DEBUG  - invgen reasoning
2025-08-18 02:26:30,778 - DEBUG  - ```c
//svcomp_const_1-1
int hoo10(){

    //pre-condition
    int x = 1;
    int y = 0;
    
    //loop-body
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (y <= 1024) ;
          loop invariant  ((y == 0)&&(x == 1)) || (x == 0) ;
          loop invariant  0 <= y && y <= 1024 ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            

    //post-condition
    /*@ assert x == 0; */
}
```
2025-08-18 02:26:30,778 - INFO  - 生成循环不变量
2025-08-18 02:26:30,778 - INFO  - 
//svcomp_const_1-1
int hoo10(){

    //pre-condition
    int x = 1;
    int y = 0;
    
    //loop-body
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (y <= 1024) ;
          loop invariant  ((y == 0)&&(x == 1)) || (x == 0) ;
          loop invariant  0 <= y && y <= 1024 ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            

    //post-condition
    /*@ assert x == 0; */
}

2025-08-18 02:26:41,723 - INFO  - syntax Correct
2025-08-18 02:26:45,378 - INFO  - Validate:
2025-08-18 02:26:45,378 - INFO  - [True, True, True]
2025-08-18 02:26:45,378 - INFO  - 
2025-08-18 02:26:45,378 - INFO  - Verify:
2025-08-18 02:26:45,378 - INFO  - [True]
2025-08-18 02:26:45,378 - INFO  - 
2025-08-18 02:26:45,379 - INFO  - 注释过不变量的代码
2025-08-18 02:26:45,379 - INFO  - 
//svcomp_const_1-1
int hoo10(){

    //pre-condition
    int x = 1;
    int y = 0;
    
    //loop-body
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 1)) || (y <= 1024) ;
          loop invariant  ((y == 0)&&(x == 1)) || (x == 0) ;
          loop invariant  0 <= y && y <= 1024 ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
            

    //post-condition
    /*@ assert x == 0; */
}

2025-08-18 02:26:56,333 - INFO  - syntax Correct
2025-08-18 02:27:00,004 - INFO  - Validate:
2025-08-18 02:27:00,004 - INFO  - [True, True, True]
2025-08-18 02:27:00,005 - INFO  - 
2025-08-18 02:27:00,005 - INFO  - Verify:
2025-08-18 02:27:00,005 - INFO  - [True]
2025-08-18 02:27:00,005 - INFO  - 
2025-08-18 02:27:00,005 - INFO  - ACSL 格式的循环不变量
2025-08-18 02:27:00,005 - INFO  - /*@
          loop invariant  ((y == 0)&&(x == 1)) || (y <= 1024) ;
          loop invariant  ((y == 0)&&(x == 1)) || (x == 0) ;
          loop invariant  0 <= y && y <= 1024 ;
            */
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
2025-08-18 02:27:00,005 - INFO  - VST 格式的循环不变量
2025-08-18 02:27:00,005 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (y <= 1024) ) &&
(((y == 0)&&(x == 1)) || (x == 0) ) &&
(0 <= y && y <= 1024 )
    */
    
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
2025-08-18 02:27:00,005 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-18 02:27:00,006 - INFO  - 继续符号执行
2025-08-18 02:27:00,006 - INFO  - /*@ Inv
    (((y == 0)&&(x == 1)) || (y <= 1024) ) &&
(((y == 0)&&(x == 1)) || (x == 0) ) &&
(0 <= y && y <= 1024 )
    */
    
            while (y < 1024) {
        x = 0;
        y = y + 1;
    }
2025-08-18 02:27:10,882 - INFO  - syntax Correct
2025-08-18 02:27:14,554 - INFO  - Validate:
2025-08-18 02:27:14,554 - INFO  - [True, True, True]
2025-08-18 02:27:14,554 - INFO  - 
2025-08-18 02:27:14,554 - INFO  - Verify:
2025-08-18 02:27:14,554 - INFO  - [True]
2025-08-18 02:27:14,555 - INFO  - 
2025-08-18 02:27:14,555 - INFO  - CORRECT INVARIANT
2025-08-18 02:27:25,462 - INFO  - syntax Correct
2025-08-18 02:27:29,127 - INFO  - Validate:
2025-08-18 02:27:29,127 - INFO  - [True, True, True]
2025-08-18 02:27:29,128 - INFO  - 
2025-08-18 02:27:29,128 - INFO  - Verify:
2025-08-18 02:27:29,128 - INFO  - [True]
2025-08-18 02:27:29,128 - INFO  - 
2025-08-18 02:27:29,128 - INFO  - ========================================
2025-08-18 02:27:29,128 - INFO  - first_pass:
2025-08-18 02:27:29,128 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-18 02:27:29,128 - INFO  - ========================================
