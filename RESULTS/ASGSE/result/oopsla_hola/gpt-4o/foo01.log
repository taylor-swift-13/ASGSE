2025-08-14 14:30:58,806 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 14:30:58,806 - INFO  - ========================================

2025-08-14 14:30:58,845 - INFO  - 初始待处理函数: ['foo01', 'unknown']
2025-08-14 14:30:58,845 - INFO  - 现在处理函数 unknown

2025-08-14 14:30:58,845 - INFO  - 
GENERATE ANNOTATION FOR foo01
2025-08-14 14:30:58,846 - INFO  - ========================================

2025-08-14 14:30:58,846 - INFO  - 函数 foo01 已经初始化
2025-08-14 14:30:58,860 - INFO  - 
GENERATE LOOP INVARIANT FOR foo01
2025-08-14 14:30:58,860 - INFO  - ========================================

2025-08-14 14:30:58,874 - INFO  - file_name: foo01
2025-08-14 14:30:58,885 - DEBUG  - INNER_FLAG: False
2025-08-14 14:30:58,900 - INFO  - Variable Maps:[{'y': '1', 'x': '1'}]
2025-08-14 14:30:58,900 - INFO  - Path conditions: [None]
2025-08-14 14:30:58,900 - INFO  - Pre condition: (y == 1) * (x == 1)
2025-08-14 14:30:58,900 - INFO  - Loop Condition: unknown()
2025-08-14 14:30:58,901 - INFO  - Array Names: []
2025-08-14 14:30:58,901 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-14 14:30:58,901 - INFO  - Global Unchanged Variables: []
2025-08-14 14:30:58,901 - INFO  - Non Inductive Variables: ['x', 'y']
2025-08-14 14:31:14,903 - INFO  - after const
2025-08-14 14:31:14,904 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
2025-08-14 14:31:14,904 - INFO  - after not in
2025-08-14 14:31:14,904 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
2025-08-14 14:31:14,904 - INFO  - after vars
2025-08-14 14:31:14,904 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 1)&&(x == 1)) || (PLACE_HOLDER_x) ;
          loop invariant  ((y == 1)&&(x == 1)) || (PLACE_HOLDER_y) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
2025-08-14 14:31:14,904 - INFO  - after verification goal
2025-08-14 14:31:14,904 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 1)&&(x == 1)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((y == 1)&&(x == 1)) || (PLACE_HOLDER_x) ;
          loop invariant  ((y == 1)&&(x == 1)) || (PLACE_HOLDER_y) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
2025-08-14 14:31:17,331 - DEBUG  - invgen reasoning
2025-08-14 14:31:17,331 - DEBUG  - ```c
int unknown();

void foo01() {
 int x = 1;
 int y = 1;

 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((y == 1)&&(x == 1)) || (y >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (x >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (y == x) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
 /*@ assert y >= 1 ;*/
}
```
2025-08-14 14:31:17,331 - INFO  - 生成循环不变量
2025-08-14 14:31:17,331 - INFO  - 
int unknown();

void foo01() {
 int x = 1;
 int y = 1;

 
            
            /*@
          loop invariant  ((y == 1)&&(x == 1)) || (y >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (x >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (y == x) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
 /*@ assert y >= 1 ;*/
}

2025-08-14 14:31:27,995 - INFO  - syntax Correct
2025-08-14 14:31:31,635 - INFO  - Validate:
2025-08-14 14:31:31,635 - INFO  - [True, True, True]
2025-08-14 14:31:31,635 - INFO  - 
2025-08-14 14:31:31,635 - INFO  - Verify:
2025-08-14 14:31:31,635 - INFO  - [True]
2025-08-14 14:31:31,635 - INFO  - 
2025-08-14 14:31:31,635 - INFO  - 注释过不变量的代码
2025-08-14 14:31:31,635 - INFO  - 
int unknown();

void foo01() {
 int x = 1;
 int y = 1;

 
            
            /*@
          loop invariant  ((y == 1)&&(x == 1)) || (y >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (x >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (y == x) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
            
 /*@ assert y >= 1 ;*/
}

2025-08-14 14:31:42,308 - INFO  - syntax Correct
2025-08-14 14:31:45,911 - INFO  - Validate:
2025-08-14 14:31:45,912 - INFO  - [True, True, True]
2025-08-14 14:31:45,912 - INFO  - 
2025-08-14 14:31:45,912 - INFO  - Verify:
2025-08-14 14:31:45,912 - INFO  - [True]
2025-08-14 14:31:45,912 - INFO  - 
2025-08-14 14:31:45,912 - INFO  - ACSL 格式的循环不变量
2025-08-14 14:31:45,912 - INFO  - /*@
          loop invariant  ((y == 1)&&(x == 1)) || (y >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (x >= 1) ;
          loop invariant  ((y == 1)&&(x == 1)) || (y == x) ;
            */
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
2025-08-14 14:31:45,912 - INFO  - VST 格式的循环不变量
2025-08-14 14:31:45,912 - INFO  - /*@ Inv
    (((y == 1)&&(x == 1)) || (y >= 1) ) &&
(((y == 1)&&(x == 1)) || (x >= 1) ) &&
(((y == 1)&&(x == 1)) || (y == x) )
    */
    
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
2025-08-14 14:31:45,913 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 14:31:45,913 - INFO  - 继续符号执行
2025-08-14 14:31:45,913 - INFO  - /*@ Inv
    (((y == 1)&&(x == 1)) || (y >= 1) ) &&
(((y == 1)&&(x == 1)) || (x >= 1) ) &&
(((y == 1)&&(x == 1)) || (y == x) )
    */
    
            while(unknown()) {
   int t1 = x;
   int t2 = y;
   x = t1 + t2;
   y = t1 + t2;
 }
2025-08-14 14:31:56,563 - INFO  - syntax Correct
2025-08-14 14:32:00,181 - INFO  - Validate:
2025-08-14 14:32:00,181 - INFO  - [True, True, True]
2025-08-14 14:32:00,182 - INFO  - 
2025-08-14 14:32:00,182 - INFO  - Verify:
2025-08-14 14:32:00,182 - INFO  - [True]
2025-08-14 14:32:00,182 - INFO  - 
2025-08-14 14:32:00,182 - INFO  - CORRECT INVARIANT
2025-08-14 14:32:10,838 - INFO  - syntax Correct
2025-08-14 14:32:14,460 - INFO  - Validate:
2025-08-14 14:32:14,461 - INFO  - [True, True, True]
2025-08-14 14:32:14,461 - INFO  - 
2025-08-14 14:32:14,461 - INFO  - Verify:
2025-08-14 14:32:14,461 - INFO  - [True]
2025-08-14 14:32:14,461 - INFO  - 
2025-08-14 14:32:14,461 - INFO  - ========================================
2025-08-14 14:32:14,461 - INFO  - first_pass:
2025-08-14 14:32:14,461 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 14:32:14,461 - INFO  - ========================================
