2025-08-14 13:46:26,533 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 13:46:26,533 - INFO  - ========================================

2025-08-14 13:46:26,559 - INFO  - 初始待处理函数: ['foo011']
2025-08-14 13:46:26,560 - INFO  - 
GENERATE ANNOTATION FOR foo011
2025-08-14 13:46:26,560 - INFO  - ========================================

2025-08-14 13:46:26,560 - INFO  - 函数 foo011 已经初始化
2025-08-14 13:46:26,576 - INFO  - 
GENERATE LOOP INVARIANT FOR foo011
2025-08-14 13:46:26,576 - INFO  - ========================================

2025-08-14 13:46:26,591 - INFO  - file_name: foo011
2025-08-14 13:46:26,603 - DEBUG  - INNER_FLAG: False
2025-08-14 13:46:26,620 - INFO  - Variable Maps:[{'x': '100', 'i': '0', 'j': '0'}]
2025-08-14 13:46:26,620 - INFO  - Path conditions: [None]
2025-08-14 13:46:26,620 - INFO  - Pre condition: (x == 100) * (i == 0) * (j == 0)
2025-08-14 13:46:26,620 - INFO  - Loop Condition: i < x
2025-08-14 13:46:26,620 - INFO  - Array Names: []
2025-08-14 13:46:26,620 - INFO  - Updated Loop Conditions: ['0 < 100']
2025-08-14 13:46:26,620 - INFO  - Global Unchanged Variables: ['x']
2025-08-14 13:46:26,621 - INFO  - Non Inductive Variables: []
2025-08-14 13:46:44,918 - INFO  - after const
2025-08-14 13:46:44,918 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant x == 100;
            */
            for (i = 0; i < x ; i++){
    j = j + 2;
  }
            
2025-08-14 13:46:44,918 - INFO  - after not in
2025-08-14 13:46:44,918 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant x == 100;
            */
            for (i = 0; i < x ; i++){
    j = j + 2;
  }
            
2025-08-14 13:46:44,918 - INFO  - after vars
2025-08-14 13:46:44,918 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_j ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant x == 100;
            */
            for (i = 0; i < x ; i++){
    j = j + 2;
  }
            
2025-08-14 13:46:44,918 - INFO  - after verification goal
2025-08-14 13:46:44,918 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 100)&&(i == 0)&&(j == 0)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_j ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant x == 100;
            */
            for (i = 0; i < x ; i++){
    j = j + 2;
  }
            
2025-08-14 13:46:48,562 - DEBUG  - invgen reasoning
2025-08-14 13:46:48,562 - DEBUG  - ```c
void foo011() {
  int j = 0;
  int i = 0;
  int x = 100;
   
  /* >>> LOOP INVARIANT TO FILL <<< */
        
  /*@
    loop invariant  ((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ;
    loop invariant  j == 2 * i ;
    loop invariant  0 <= i <= x ;
    loop invariant x == 100;
  */
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
  
  /*@ assert j == 2*x; */
}
```
2025-08-14 13:46:48,562 - INFO  - 生成循环不变量
2025-08-14 13:46:48,562 - INFO  - 
void foo011() {
  int j = 0;
  int i = 0;
  int x = 100;
   
  /* >>> LOOP INVARIANT TO FILL <<< */
        
  /*@
    loop invariant  ((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ;
    loop invariant  j == 2 * i ;
    loop invariant  0 <= i <= x ;
    loop invariant x == 100;
  */
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
  
  /*@ assert j == 2*x; */
}

2025-08-14 13:46:59,170 - INFO  - syntax Correct
2025-08-14 13:47:02,753 - INFO  - Validate:
2025-08-14 13:47:02,753 - INFO  - [True, True, True, True]
2025-08-14 13:47:02,753 - INFO  - 
2025-08-14 13:47:02,753 - INFO  - Verify:
2025-08-14 13:47:02,753 - INFO  - [True]
2025-08-14 13:47:02,753 - INFO  - 
2025-08-14 13:47:02,753 - INFO  - 注释过不变量的代码
2025-08-14 13:47:02,753 - INFO  - 
void foo011() {
  int j = 0;
  int i = 0;
  int x = 100;
   
  /* >>> LOOP INVARIANT TO FILL <<< */
        
  /*@
    loop invariant  ((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ;
    loop invariant  j == 2 * i ;
    loop invariant  0 <= i <= x ;
    loop invariant x == 100;
  */
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
  
  /*@ assert j == 2*x; */
}

2025-08-14 13:47:13,362 - INFO  - syntax Correct
2025-08-14 13:47:16,925 - INFO  - Validate:
2025-08-14 13:47:16,926 - INFO  - [True, True, True, True]
2025-08-14 13:47:16,926 - INFO  - 
2025-08-14 13:47:16,926 - INFO  - Verify:
2025-08-14 13:47:16,926 - INFO  - [True]
2025-08-14 13:47:16,926 - INFO  - 
2025-08-14 13:47:16,926 - INFO  - ACSL 格式的循环不变量
2025-08-14 13:47:16,926 - INFO  - /*@
    loop invariant  ((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ;
    loop invariant  j == 2 * i ;
    loop invariant  0 <= i <= x ;
    loop invariant x == 100;
  */
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
2025-08-14 13:47:16,926 - INFO  - VST 格式的循环不变量
2025-08-14 13:47:16,926 - INFO  - /*@ Inv
    (((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ) &&
(j == 2 * i ) &&
(0 <= i && i <= x ) &&
(x == 100)
    */
    
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
2025-08-14 13:47:16,927 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 13:47:16,927 - INFO  - 继续符号执行
2025-08-14 13:47:16,927 - INFO  - /*@ Inv
    (((x == 100)&&(i == 0)&&(j == 0)) || (j == 2 * i) ) &&
(j == 2 * i ) &&
(0 <= i && i <= x ) &&
(x == 100)
    */
    
  for (i = 0; i < x ; i++){
    j = j + 2;
  }
2025-08-14 13:47:27,549 - INFO  - syntax Correct
2025-08-14 13:47:31,118 - INFO  - Validate:
2025-08-14 13:47:31,118 - INFO  - [True, True, True, True]
2025-08-14 13:47:31,119 - INFO  - 
2025-08-14 13:47:31,119 - INFO  - Verify:
2025-08-14 13:47:31,119 - INFO  - [True]
2025-08-14 13:47:31,119 - INFO  - 
2025-08-14 13:47:31,119 - INFO  - CORRECT INVARIANT
2025-08-14 13:47:41,757 - INFO  - syntax Correct
2025-08-14 13:47:45,319 - INFO  - Validate:
2025-08-14 13:47:45,319 - INFO  - [True, True, True, True]
2025-08-14 13:47:45,319 - INFO  - 
2025-08-14 13:47:45,319 - INFO  - Verify:
2025-08-14 13:47:45,320 - INFO  - [True]
2025-08-14 13:47:45,320 - INFO  - 
2025-08-14 13:47:45,320 - INFO  - ========================================
2025-08-14 13:47:45,320 - INFO  - first_pass:
2025-08-14 13:47:45,320 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 13:47:45,320 - INFO  - ========================================
