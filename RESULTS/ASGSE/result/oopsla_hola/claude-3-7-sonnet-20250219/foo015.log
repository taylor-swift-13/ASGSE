2025-08-14 14:10:00,331 - INFO  - 
FUNCTION INITIALIZATION
2025-08-14 14:10:00,331 - INFO  - ========================================

2025-08-14 14:10:00,366 - INFO  - 初始待处理函数: ['foo015']
2025-08-14 14:10:00,366 - INFO  - 
GENERATE ANNOTATION FOR foo015
2025-08-14 14:10:00,367 - INFO  - ========================================

2025-08-14 14:10:00,367 - INFO  - 函数 foo015 已经初始化
2025-08-14 14:10:00,382 - INFO  - 
GENERATE LOOP INVARIANT FOR foo015
2025-08-14 14:10:00,382 - INFO  - ========================================

2025-08-14 14:10:00,396 - INFO  - file_name: foo015
2025-08-14 14:10:00,408 - DEBUG  - INNER_FLAG: False
2025-08-14 14:10:00,425 - INFO  - Variable Maps:[{'j': '0', 'k': 'k@pre', 'n': 'n@pre'}]
2025-08-14 14:10:00,425 - INFO  - Path conditions: ['n@pre > 0 && k@pre > n@pre']
2025-08-14 14:10:00,425 - INFO  - Pre condition: n@pre > 0 && k@pre > n@pre && (j == 0) * (k == k@pre) * (n == n@pre)
2025-08-14 14:10:00,425 - INFO  - Loop Condition: j < n
2025-08-14 14:10:00,425 - INFO  - Array Names: []
2025-08-14 14:10:00,425 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-14 14:10:00,425 - INFO  - Global Unchanged Variables: ['n']
2025-08-14 14:10:00,425 - INFO  - Non Inductive Variables: []
2025-08-14 14:10:29,617 - INFO  - after const
2025-08-14 14:10:29,617 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
            
2025-08-14 14:10:29,617 - INFO  - after not in
2025-08-14 14:10:29,617 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
            
2025-08-14 14:10:29,617 - INFO  - after vars
2025-08-14 14:10:29,617 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_k) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_j) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
            
2025-08-14 14:10:29,617 - INFO  - after verification goal
2025-08-14 14:10:29,617 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_k) ;
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_j) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
            
2025-08-14 14:10:33,814 - DEBUG  - invgen reasoning
2025-08-14 14:10:33,814 - DEBUG  - ```c
/*@
requires n > 0;
requires k > n;
*/
void foo015(int n, int k) {

  int j = 0;

  
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre))) || (k >= 0));
          loop invariant (0 < \at(n,Pre)) ==> (k + j == \at(k,Pre)) ;
          loop invariant (0 < \at(n,Pre)) ==> (0 <= j <= n) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
             
  /*@ assert k>=0; */
}
```
2025-08-14 14:10:33,814 - INFO  - 生成循环不变量
2025-08-14 14:10:33,815 - INFO  - 
/*@
requires n > 0;
requires k > n;
*/
void foo015(int n, int k) {

  int j = 0;

  
            
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre))) || (k >= 0));
          loop invariant (0 < \at(n,Pre)) ==> (k + j == \at(k,Pre)) ;
          loop invariant (0 < \at(n,Pre)) ==> (0 <= j <= n) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
             
  /*@ assert k>=0; */
}

2025-08-14 14:10:44,471 - INFO  - syntax Correct
2025-08-14 14:10:48,142 - INFO  - Validate:
2025-08-14 14:10:48,143 - INFO  - [True, True, True, True, True]
2025-08-14 14:10:48,143 - INFO  - 
2025-08-14 14:10:48,143 - INFO  - Verify:
2025-08-14 14:10:48,143 - INFO  - [True]
2025-08-14 14:10:48,143 - INFO  - 
2025-08-14 14:10:48,143 - INFO  - 注释过不变量的代码
2025-08-14 14:10:48,143 - INFO  - 
/*@
requires n > 0;
requires k > n;
*/
void foo015(int n, int k) {

  int j = 0;

  
            
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre))) || (k >= 0));
          loop invariant (0 < \at(n,Pre)) ==> (k + j == \at(k,Pre)) ;
          loop invariant (0 < \at(n,Pre)) ==> (0 <= j <= n) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
             
  /*@ assert k>=0; */
}

2025-08-14 14:10:58,808 - INFO  - syntax Correct
2025-08-14 14:11:02,466 - INFO  - Validate:
2025-08-14 14:11:02,466 - INFO  - [True, True, True, True, True]
2025-08-14 14:11:02,466 - INFO  - 
2025-08-14 14:11:02,466 - INFO  - Verify:
2025-08-14 14:11:02,466 - INFO  - [True]
2025-08-14 14:11:02,467 - INFO  - 
2025-08-14 14:11:02,467 - INFO  - ACSL 格式的循环不变量
2025-08-14 14:11:02,467 - INFO  - /*@
          loop invariant (0 < \at(n,Pre)) ==> (((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre))) || (k >= 0));
          loop invariant (0 < \at(n,Pre)) ==> (k + j == \at(k,Pre)) ;
          loop invariant (0 < \at(n,Pre)) ==> (0 <= j <= n) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((j == 0)&&(k == \at(k,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while( j < n ) {
    j++;
    k--;
  }
2025-08-14 14:11:02,467 - INFO  - VST 格式的循环不变量
2025-08-14 14:11:02,467 - INFO  - /*@ Inv
    ((0 < n@pre) => (((j == 0)&&(k == k@pre)&&(n == n@pre)) || (k >= 0))) &&
((0 < n@pre) => (k + j == k@pre) ) &&
((0 < n@pre) => (0 <= j && j <= n) ) &&
((!(0 < n@pre)) => ((j == 0)&&(k == k@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while( j < n ) {
    j++;
    k--;
  }
2025-08-14 14:11:02,467 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-14 14:11:02,467 - INFO  - 继续符号执行
2025-08-14 14:11:02,468 - INFO  - /*@ Inv
    ((0 < n@pre) => (((j == 0)&&(k == k@pre)&&(n == n@pre)) || (k >= 0))) &&
((0 < n@pre) => (k + j == k@pre) ) &&
((0 < n@pre) => (0 <= j && j <= n) ) &&
((!(0 < n@pre)) => ((j == 0)&&(k == k@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while( j < n ) {
    j++;
    k--;
  }
2025-08-14 14:11:13,204 - INFO  - syntax Correct
2025-08-14 14:11:16,862 - INFO  - Validate:
2025-08-14 14:11:16,862 - INFO  - [True, True, True, True, True]
2025-08-14 14:11:16,862 - INFO  - 
2025-08-14 14:11:16,862 - INFO  - Verify:
2025-08-14 14:11:16,862 - INFO  - [True]
2025-08-14 14:11:16,862 - INFO  - 
2025-08-14 14:11:16,863 - INFO  - CORRECT INVARIANT
2025-08-14 14:11:27,542 - INFO  - syntax Correct
2025-08-14 14:11:31,180 - INFO  - Validate:
2025-08-14 14:11:31,180 - INFO  - [True, True, True, True, True]
2025-08-14 14:11:31,182 - INFO  - 
2025-08-14 14:11:31,182 - INFO  - Verify:
2025-08-14 14:11:31,183 - INFO  - [True]
2025-08-14 14:11:31,183 - INFO  - 
2025-08-14 14:11:31,183 - INFO  - ========================================
2025-08-14 14:11:31,183 - INFO  - first_pass:
2025-08-14 14:11:31,183 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-14 14:11:31,183 - INFO  - ========================================
