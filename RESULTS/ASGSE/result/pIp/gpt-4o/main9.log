2025-08-25 23:06:00,496 - INFO  - 
FUNCTION INITIALIZATION
2025-08-25 23:06:00,497 - INFO  - ========================================

2025-08-25 23:06:00,524 - INFO  - 初始待处理函数: ['main9', 'ThrABAutoChooseFun']
2025-08-25 23:06:00,524 - INFO  - 现在处理函数 ThrABAutoChooseFun

2025-08-25 23:06:00,531 - INFO  - 
GENERATE ANNOTATION FOR ThrABAutoChooseFun
2025-08-25 23:06:00,531 - INFO  - ========================================

2025-08-25 23:06:00,531 - INFO  - 函数 ThrABAutoChooseFun 已经初始化
2025-08-25 23:06:00,531 - INFO  - 开始生成 ThrABAutoChooseFun 的注释代码
2025-08-25 23:06:00,554 - INFO  - 
GENERATE FUNCTION SUMMARY FOR ThrABAutoChooseFun
2025-08-25 23:06:00,554 - INFO  - ========================================

2025-08-25 23:06:00,596 - INFO  - 开始生成完整的 ThrABAutoChooseFun 的注释代码
2025-08-25 23:06:00,601 - INFO  - 开始生成 ThrABAutoChooseFun 的 ACSL 规约
2025-08-25 23:06:00,610 - INFO  - 
GENERATE ANNOTATION FOR main9
2025-08-25 23:06:00,611 - INFO  - ========================================

2025-08-25 23:06:00,611 - INFO  - 函数 main9 已经初始化
2025-08-25 23:06:00,611 - INFO  - 开始生成 main9 的注释代码
2025-08-25 23:06:00,634 - INFO  - 
GENERATE FUNCTION SUMMARY FOR main9
2025-08-25 23:06:00,634 - INFO  - ========================================

2025-08-25 23:06:00,685 - INFO  - 开始生成完整的 main9 的注释代码
2025-08-25 23:06:00,694 - INFO  - 开始生成 main9 的 ACSL 规约
2025-08-25 23:06:00,705 - INFO  - 
SUMMARY FOR main9
2025-08-25 23:06:00,706 - INFO  - ========================================

2025-08-25 23:06:00,706 - INFO  - 
函数 main9 的 VST Summary 为:
/*@
With pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l
Require pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l)
Ensure (replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] != 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] != 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] == 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse)) || (replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[1] == 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 && store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp_mThrDistribute_stateFlag_l))) * (pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse))
*/
2025-08-25 23:06:00,706 - INFO  - 
函数 main9 的 ACSL Summary 为:
/*@
requires \valid(pIp) && \valid(pIp->mThrDistribute.stateFlag+ (0..2)) ;
requires \separated(pIp,pIp->mThrDistribute.stateFlag+(0..2)) ;

ensures replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] != 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[1] != 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] == 1 && pIp->mThrDistribute.flgABChoose == 0 ==> store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))) * (pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[1] != 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] == 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 ==> store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))) * (pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] != 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] != 1 && pIp->mThrDistribute.flgABChoose == 0 ==> store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))) * (pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[1] == 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] == 0 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] != 1 && pIp->mThrDistribute.flgABChoose == 51 ==> store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))) * (pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

ensures replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[1] == 1 && replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))[0] == 1 && pIp->mThrDistribute.flgABChoose == 204 ==> store_int_array(&pIp->mThrDistribute.stateFlag, 2, replace_Znth(1, 1, replace_Znth(0, 0, pIp->mThrDistribute.stateFlag))) * (pIp->mThrDistribute.wPulse == \old(pIp->mThrDistribute.wPulse);

*/

2025-08-25 23:06:00,915 - INFO  - 
VERIFICATION FOR main9
2025-08-25 23:06:00,916 - INFO  - ========================================

2025-08-25 23:06:11,823 - INFO  - syntax Correct
2025-08-25 23:06:15,628 - INFO  - Loop Invariant:
2025-08-25 23:06:15,629 - INFO  - []
2025-08-25 23:06:15,629 - INFO  - 
2025-08-25 23:06:15,629 - INFO  - Assertion:
2025-08-25 23:06:15,629 - INFO  - [True, True, True, True]
2025-08-25 23:06:15,629 - INFO  - 
2025-08-25 23:06:15,629 - INFO  - Post Condition:
2025-08-25 23:06:15,629 - INFO  - [True, True, True, True, True]
2025-08-25 23:06:15,629 - INFO  - 
2025-08-25 23:06:15,629 - INFO  - ========================================
2025-08-25 23:06:15,629 - INFO  - first_pass:
2025-08-25 23:06:15,629 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-25 23:06:15,629 - INFO  - ========================================
