2025-08-26 15:55:03,990 - INFO  - 
FUNCTION INITIALIZATION
2025-08-26 15:55:03,991 - INFO  - ========================================

2025-08-26 15:55:04,001 - INFO  - 初始待处理函数: ['main40', 'InitVarFun']
2025-08-26 15:55:04,002 - INFO  - 现在处理函数 InitVarFun

2025-08-26 15:55:04,008 - INFO  - 
GENERATE ANNOTATION FOR InitVarFun
2025-08-26 15:55:04,008 - INFO  - ========================================

2025-08-26 15:55:04,008 - INFO  - 函数 InitVarFun 已经初始化
2025-08-26 15:55:04,008 - INFO  - 开始生成 InitVarFun 的注释代码
2025-08-26 15:55:04,057 - INFO  - 
GENERATE FUNCTION SUMMARY FOR InitVarFun
2025-08-26 15:55:04,057 - INFO  - ========================================

2025-08-26 15:55:04,104 - INFO  - 开始生成完整的 InitVarFun 的注释代码
2025-08-26 15:55:04,109 - INFO  - 开始生成 InitVarFun 的 ACSL 规约
2025-08-26 15:55:04,121 - INFO  - 
GENERATE ANNOTATION FOR main40
2025-08-26 15:55:04,122 - INFO  - ========================================

2025-08-26 15:55:04,122 - INFO  - 函数 main40 已经初始化
2025-08-26 15:55:04,122 - INFO  - 开始生成 main40 的注释代码
2025-08-26 15:55:04,147 - INFO  - 
GENERATE FUNCTION SUMMARY FOR main40
2025-08-26 15:55:04,147 - INFO  - ========================================

2025-08-26 15:55:04,224 - INFO  - 开始生成完整的 main40 的注释代码
2025-08-26 15:55:04,234 - INFO  - 开始生成 main40 的 ACSL 规约
2025-08-26 15:55:04,246 - INFO  - 
SUMMARY FOR main40
2025-08-26 15:55:04,247 - INFO  - ========================================

2025-08-26 15:55:04,247 - INFO  - 
函数 main40 的 VST Summary 为:
/*@
With pIp_countInt32ms pIp_countSate pIp_countPublic pIp_countMode pIp_flgPRSAM pIp_flgGryoCalc pIp_flg160INT pIp_mGyroData_gyroStatus0 pIp_mGyroData_gyroStatus1 pIp_mModulator_u pIp_mModulator_r pIp_mModulator_Yp pIp_mModulator_Yn pIp_mThrDistribute_flgABChoose pIp_mThrDistribute_wPulse pIp_mThrDistribute_stateFlag_l pIp_mFWarning_countSPLost pIp_mFWarning_countSPSeen pIp_mFWarning_countSPset pIp_mFWarning_countUPSpc
Require pIp->countInt32ms == pIp_countInt32ms && pIp->countSate == pIp_countSate && pIp->countPublic == pIp_countPublic && pIp->countMode == pIp_countMode && pIp->flgPRSAM == pIp_flgPRSAM && pIp->flgGryoCalc == pIp_flgGryoCalc && pIp->flg160INT == pIp_flg160INT && pIp->mGyroData.gyroStatus0 == pIp_mGyroData_gyroStatus0 && pIp->mGyroData.gyroStatus1 == pIp_mGyroData_gyroStatus1 && pIp->mModulator.u == pIp_mModulator_u && pIp->mModulator.r == pIp_mModulator_r && pIp->mModulator.Yp == pIp_mModulator_Yp && pIp->mModulator.Yn == pIp_mModulator_Yn && pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose && pIp->mThrDistribute.wPulse == pIp_mThrDistribute_wPulse && store_int_array(pIp->mThrDistribute.stateFlag,2, pIp_mThrDistribute_stateFlag_l) && pIp->mFWarning.countSPLost == pIp_mFWarning_countSPLost && pIp->mFWarning.countSPSeen == pIp_mFWarning_countSPSeen && pIp->mFWarning.countSPset == pIp_mFWarning_countSPset && pIp->mFWarning.countUPSpc == pIp_mFWarning_countUPSpc
Ensure (pIp->countInt32ms == 0 && pIp->countSate == 0 && pIp->countPublic == 0 && pIp->countMode == 0 && pIp->flgPRSAM == 13107 && pIp->flgGryoCalc == 0 && pIp->flg160INT == 13107 && pIp->mGyroData.gyroStatus0 == 0 && pIp->mGyroData.gyroStatus1 == 0 && pIp->mModulator.r == 0 && pIp->mThrDistribute.wPulse == 0 && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == 0 && pIp->mFWarning.countSPset == 0 && pIp->mFWarning.countUPSpc == 0 && (pIp->mModulator.u == pIp_mModulator_u) * (pIp->mModulator.Yp == pIp_mModulator_Yp) * (pIp->mModulator.Yn == pIp_mModulator_Yn) * (pIp->mThrDistribute.flgABChoose == pIp_mThrDistribute_flgABChoose) * store_int_array(&pIp->mThrDistribute.stateFlag, 2, pIp_mThrDistribute_stateFlag_l))
*/
2025-08-26 15:55:04,247 - INFO  - 
函数 main40 的 ACSL Summary 为:
/*@
requires \valid(pIp);

ensures pIp->countInt32ms == 0 && pIp->countSate == 0 && pIp->countPublic == 0 && pIp->countMode == 0 && pIp->flgPRSAM == 13107 && pIp->flgGryoCalc == 0 && pIp->flg160INT == 13107 && pIp->mGyroData.gyroStatus0 == 0 && pIp->mGyroData.gyroStatus1 == 0 && pIp->mModulator.r == 0 && pIp->mThrDistribute.wPulse == 0 && pIp->mFWarning.countSPLost == 0 && pIp->mFWarning.countSPSeen == 0 && pIp->mFWarning.countSPset == 0 && pIp->mFWarning.countUPSpc == 0 ==> pIp->mModulator.u == \old(pIp->mModulator.u)&&pIp->mModulator.Yp == \old(pIp->mModulator.Yp)&&pIp->mModulator.Yn == \old(pIp->mModulator.Yn)&&pIp->mThrDistribute.flgABChoose == \old(pIp->mThrDistribute.flgABChoose);

*/

2025-08-26 15:55:04,527 - INFO  - 
VERIFICATION FOR main40
2025-08-26 15:55:04,527 - INFO  - ========================================

2025-08-26 15:55:05,047 - INFO  - syntax Correct
2025-08-26 15:55:05,541 - INFO  - Loop Invariant:
2025-08-26 15:55:05,541 - INFO  - []
2025-08-26 15:55:05,542 - INFO  - 
2025-08-26 15:55:05,542 - INFO  - Assertion:
2025-08-26 15:55:05,542 - INFO  - [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
2025-08-26 15:55:05,542 - INFO  - 
2025-08-26 15:55:05,542 - INFO  - Post Condition:
2025-08-26 15:55:05,542 - INFO  - [True]
2025-08-26 15:55:05,542 - INFO  - 
2025-08-26 15:55:05,542 - INFO  - ========================================
2025-08-26 15:55:05,542 - INFO  - first_pass:
2025-08-26 15:55:05,542 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-26 15:55:05,542 - INFO  - ========================================
