2025-08-13 15:56:45,682 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 15:56:45,682 - INFO  - ========================================

2025-08-13 15:56:45,702 - INFO  - 初始待处理函数: ['foo0014']
2025-08-13 15:56:45,702 - INFO  - 
GENERATE ANNOTATION FOR foo0014
2025-08-13 15:56:45,702 - INFO  - ========================================

2025-08-13 15:56:45,702 - INFO  - 函数 foo0014 已经初始化
2025-08-13 15:56:45,718 - INFO  - 
GENERATE LOOP INVARIANT FOR foo0014
2025-08-13 15:56:45,718 - INFO  - ========================================

2025-08-13 15:56:45,733 - INFO  - file_name: foo0014
2025-08-13 15:56:45,744 - DEBUG  - INNER_FLAG: False
2025-08-13 15:56:45,761 - INFO  - Variable Maps:[{'sn': '0', 'i': '0', 'n': 'n@pre'}]
2025-08-13 15:56:45,761 - INFO  - Path conditions: ['0 <= n@pre && n@pre < 1000']
2025-08-13 15:56:45,761 - INFO  - Pre condition: 0 <= n@pre && n@pre < 1000 && (sn == 0) * (i == 0) * (n == n@pre)
2025-08-13 15:56:45,762 - INFO  - Loop Condition: i <= n
2025-08-13 15:56:45,762 - INFO  - Array Names: []
2025-08-13 15:56:45,762 - INFO  - Updated Loop Conditions: ['0 <= n@pre']
2025-08-13 15:56:45,762 - INFO  - Global Unchanged Variables: ['n']
2025-08-13 15:56:45,762 - INFO  - Non Inductive Variables: []
2025-08-13 15:57:23,442 - INFO  - after const
2025-08-13 15:57:23,442 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(n,Pre) && \at(n,Pre) < 1000 && (sn == 0) * (i == 0) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
2025-08-13 15:57:23,442 - INFO  - after not in
2025-08-13 15:57:23,442 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(n,Pre) && \at(n,Pre) < 1000 && (sn == 0) * (i == 0) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
2025-08-13 15:57:23,442 - INFO  - after vars
2025-08-13 15:57:23,442 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(n,Pre) && \at(n,Pre) < 1000 && (sn == 0) * (i == 0) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (0 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (0 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
2025-08-13 15:57:23,442 - INFO  - after verification goal
2025-08-13 15:57:23,443 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(n,Pre) && \at(n,Pre) < 1000 && (sn == 0) * (i == 0) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (0 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (0 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
2025-08-13 15:57:29,678 - DEBUG  - invgen reasoning
2025-08-13 15:57:29,678 - DEBUG  - ```c
/*@
requires 0 <= n;
requires n < 1000;
*/
void foo0014(int n) {

    int i=0;
    int sn=0;
    
   
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : 0 <= \at(n,Pre) && \at(n,Pre) < 1000 && (sn == 0) * (i == 0) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (0 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 0)&&(n == \at(n,Pre))) || (sn == (i-1) * 2));
          loop invariant (0 <= \at(n,Pre)) ==> (1 <= i <= n+1) ;
          loop invariant (0 <= \at(n,Pre)) ==> (sn == (i-1) * 2) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
    
    /*@ assert sn == n * (2) || sn == 0; */
}
```
2025-08-13 15:57:29,678 - INFO  - 生成循环不变量
2025-08-13 15:57:29,678 - INFO  - 
/*@
requires 0 <= n;
requires n < 1000;
*/
void foo0014(int n) {

    int i=0;
    int sn=0;
    
   
    
            
            /*@
          loop invariant (0 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 0)&&(n == \at(n,Pre))) || (sn == (i-1) * 2));
          loop invariant (0 <= \at(n,Pre)) ==> (1 <= i <= n+1) ;
          loop invariant (0 <= \at(n,Pre)) ==> (sn == (i-1) * 2) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
    
    /*@ assert sn == n * (2) || sn == 0; */
}

2025-08-13 15:57:40,518 - INFO  - syntax Correct
2025-08-13 15:57:44,117 - INFO  - Validate:
2025-08-13 15:57:44,117 - INFO  - [True, True, True, True, True]
2025-08-13 15:57:44,117 - INFO  - 
2025-08-13 15:57:44,117 - INFO  - Verify:
2025-08-13 15:57:44,117 - INFO  - [True]
2025-08-13 15:57:44,117 - INFO  - 
2025-08-13 15:57:44,117 - INFO  - 注释过不变量的代码
2025-08-13 15:57:44,117 - INFO  - 
/*@
requires 0 <= n;
requires n < 1000;
*/
void foo0014(int n) {

    int i=0;
    int sn=0;
    
   
    
            
            /*@
          loop invariant (0 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 0)&&(n == \at(n,Pre))) || (sn == (i-1) * 2));
          loop invariant (0 <= \at(n,Pre)) ==> (1 <= i <= n+1) ;
          loop invariant (0 <= \at(n,Pre)) ==> (sn == (i-1) * 2) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
            
    
    /*@ assert sn == n * (2) || sn == 0; */
}

2025-08-13 15:57:54,894 - INFO  - syntax Correct
2025-08-13 15:57:58,504 - INFO  - Validate:
2025-08-13 15:57:58,504 - INFO  - [True, True, True, True, True]
2025-08-13 15:57:58,504 - INFO  - 
2025-08-13 15:57:58,505 - INFO  - Verify:
2025-08-13 15:57:58,505 - INFO  - [True]
2025-08-13 15:57:58,505 - INFO  - 
2025-08-13 15:57:58,505 - INFO  - ACSL 格式的循环不变量
2025-08-13 15:57:58,505 - INFO  - /*@
          loop invariant (0 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 0)&&(n == \at(n,Pre))) || (sn == (i-1) * 2));
          loop invariant (0 <= \at(n,Pre)) ==> (1 <= i <= n+1) ;
          loop invariant (0 <= \at(n,Pre)) ==> (sn == (i-1) * 2) ;
          loop invariant (!(0 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
2025-08-13 15:57:58,505 - INFO  - VST 格式的循环不变量
2025-08-13 15:57:58,505 - INFO  - /*@ Inv
    ((0 <= n@pre) => (((sn == 0)&&(i == 0)&&(n == n@pre)) || (sn == (i-1) * 2))) &&
((0 <= n@pre) => (1 <= i && i <= n+1) ) &&
((0 <= n@pre) => (sn == (i-1) * 2) ) &&
((!(0 <= n@pre)) => ((sn == 0)&&(i == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
2025-08-13 15:57:58,505 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 15:57:58,506 - INFO  - 继续符号执行
2025-08-13 15:57:58,506 - INFO  - /*@ Inv
    ((0 <= n@pre) => (((sn == 0)&&(i == 0)&&(n == n@pre)) || (sn == (i-1) * 2))) &&
((0 <= n@pre) => (1 <= i && i <= n+1) ) &&
((0 <= n@pre) => (sn == (i-1) * 2) ) &&
((!(0 <= n@pre)) => ((sn == 0)&&(i == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            for (i = 1; i <= n; i++) {
        sn = sn + (2);
    }
2025-08-13 15:58:09,350 - INFO  - syntax Correct
2025-08-13 15:58:12,958 - INFO  - Validate:
2025-08-13 15:58:12,958 - INFO  - [True, True, True, True, True]
2025-08-13 15:58:12,958 - INFO  - 
2025-08-13 15:58:12,958 - INFO  - Verify:
2025-08-13 15:58:12,959 - INFO  - [True]
2025-08-13 15:58:12,959 - INFO  - 
2025-08-13 15:58:12,959 - INFO  - CORRECT INVARIANT
2025-08-13 15:58:23,862 - INFO  - syntax Correct
2025-08-13 15:58:27,434 - INFO  - Validate:
2025-08-13 15:58:27,434 - INFO  - [True, True, True, True, True]
2025-08-13 15:58:27,435 - INFO  - 
2025-08-13 15:58:27,435 - INFO  - Verify:
2025-08-13 15:58:27,435 - INFO  - [True]
2025-08-13 15:58:27,435 - INFO  - 
2025-08-13 15:58:27,435 - INFO  - ========================================
2025-08-13 15:58:27,435 - INFO  - first_pass:
2025-08-13 15:58:27,435 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 15:58:27,435 - INFO  - ========================================
