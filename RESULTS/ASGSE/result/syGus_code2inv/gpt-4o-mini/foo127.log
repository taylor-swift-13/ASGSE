2025-08-13 03:13:02,301 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 03:13:02,301 - INFO  - ========================================

2025-08-13 03:13:02,711 - INFO  - 初始待处理函数: ['foo127']
2025-08-13 03:13:02,711 - INFO  - 
GENERATE ANNOTATION FOR foo127
2025-08-13 03:13:02,711 - INFO  - ========================================

2025-08-13 03:13:02,711 - INFO  - 函数 foo127 已经初始化
2025-08-13 03:13:02,745 - INFO  - 
GENERATE LOOP INVARIANT FOR foo127
2025-08-13 03:13:02,745 - INFO  - ========================================

2025-08-13 03:13:02,762 - INFO  - file_name: foo127
2025-08-13 03:13:02,777 - DEBUG  - INNER_FLAG: False
2025-08-13 03:13:02,796 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-13 03:13:02,796 - INFO  - Path conditions: [None]
2025-08-13 03:13:02,796 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
2025-08-13 03:13:02,797 - INFO  - Loop Condition: x != 0
2025-08-13 03:13:02,797 - INFO  - Array Names: []
2025-08-13 03:13:02,797 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-13 03:13:02,798 - INFO  - Global Unchanged Variables: ['j', 'i', 'z3', 'z2', 'z1']
2025-08-13 03:13:02,798 - INFO  - Non Inductive Variables: []
2025-08-13 03:13:16,639 - INFO  - after const
2025-08-13 03:13:16,640 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == \at(y,Pre)) * (i == \at(x,Pre)) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-13 03:13:16,640 - INFO  - after not in
2025-08-13 03:13:16,640 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == \at(y,Pre)) * (i == \at(x,Pre)) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-13 03:13:16,640 - INFO  - after vars
2025-08-13 03:13:16,640 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == \at(y,Pre)) * (i == \at(x,Pre)) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-13 03:13:16,640 - INFO  - after verification goal
2025-08-13 03:13:16,640 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == \at(y,Pre)) * (i == \at(x,Pre)) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-13 03:13:23,666 - DEBUG  - invgen reasoning
2025-08-13 03:13:23,666 - DEBUG  - ```c
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == \at(y,Pre)) * (i == \at(x,Pre)) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && y == \at(y,Pre) - (\at(x,Pre) - x));
          loop invariant (\at(x,Pre) != 0) ==> (y <= \at(y,Pre) && x >= 0);
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }
```
2025-08-13 03:13:23,666 - INFO  - 生成循环不变量
2025-08-13 03:13:23,666 - INFO  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && y == \at(y,Pre) - (\at(x,Pre) - x));
          loop invariant (\at(x,Pre) != 0) ==> (y <= \at(y,Pre) && x >= 0);
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:13:34,641 - INFO  - syntax Correct
2025-08-13 03:13:38,355 - INFO  - Validate:
2025-08-13 03:13:38,355 - INFO  - [True, False, True, True, True, True, True, True, True]
2025-08-13 03:13:38,355 - INFO  - 
2025-08-13 03:13:38,355 - INFO  - Verify:
2025-08-13 03:13:38,355 - INFO  - [True]
2025-08-13 03:13:38,355 - INFO  - 
2025-08-13 03:13:38,355 - DEBUG  - after mark
2025-08-13 03:13:38,355 - DEBUG  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && y == \at(y,Pre) - (\at(x,Pre) - x)) [INVARIANT FAILED] ;
          loop invariant (\at(x,Pre) != 0) ==> (y <= \at(y,Pre) && x >= 0);
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:13:48,485 - DEBUG  - after adjust
2025-08-13 03:13:48,485 - DEBUG  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0 && y >= 0); 
          loop invariant (\at(x,Pre) != 0) ==> (y <= \at(y,Pre) && x >= 0);
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:13:59,402 - INFO  - syntax Correct
2025-08-13 03:14:03,079 - INFO  - Validate:
2025-08-13 03:14:03,079 - INFO  - [True, False, True, True, True, True, True, True, True]
2025-08-13 03:14:03,079 - INFO  - 
2025-08-13 03:14:03,080 - INFO  - Verify:
2025-08-13 03:14:03,080 - INFO  - [True]
2025-08-13 03:14:03,080 - INFO  - 
2025-08-13 03:14:03,080 - DEBUG  - after hudini
2025-08-13 03:14:03,080 - DEBUG  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (y <= \at(y,Pre) && x >= 0);
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:14:14,035 - INFO  - syntax Correct
2025-08-13 03:14:17,728 - INFO  - Validate:
2025-08-13 03:14:17,728 - INFO  - [True, False, True, True, True, True, True, True]
2025-08-13 03:14:17,728 - INFO  - 
2025-08-13 03:14:17,729 - INFO  - Verify:
2025-08-13 03:14:17,729 - INFO  - [True]
2025-08-13 03:14:17,729 - INFO  - 
2025-08-13 03:14:17,729 - DEBUG  - after hudini
2025-08-13 03:14:17,729 - DEBUG  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:14:28,330 - INFO  - syntax Correct
2025-08-13 03:14:31,937 - INFO  - Validate:
2025-08-13 03:14:31,938 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 03:14:31,938 - INFO  - 
2025-08-13 03:14:31,938 - INFO  - Verify:
2025-08-13 03:14:31,938 - INFO  - [True]
2025-08-13 03:14:31,938 - INFO  - 
2025-08-13 03:14:31,938 - DEBUG  - after hudini
2025-08-13 03:14:31,938 - DEBUG  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:14:42,651 - INFO  - syntax Correct
2025-08-13 03:14:46,284 - INFO  - Validate:
2025-08-13 03:14:46,284 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 03:14:46,285 - INFO  - 
2025-08-13 03:14:46,285 - INFO  - Verify:
2025-08-13 03:14:46,285 - INFO  - [True]
2025-08-13 03:14:46,285 - INFO  - 
2025-08-13 03:14:46,285 - INFO  - 注释过不变量的代码
2025-08-13 03:14:46,285 - INFO  - 
void foo127(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
            
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-13 03:14:56,903 - INFO  - syntax Correct
2025-08-13 03:15:00,535 - INFO  - Validate:
2025-08-13 03:15:00,535 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 03:15:00,535 - INFO  - 
2025-08-13 03:15:00,535 - INFO  - Verify:
2025-08-13 03:15:00,535 - INFO  - [True]
2025-08-13 03:15:00,535 - INFO  - 
2025-08-13 03:15:00,535 - INFO  - ACSL 格式的循环不变量
2025-08-13 03:15:00,535 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == \at(y,Pre) - (\at(x,Pre) - x)));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-13 03:15:00,537 - INFO  - VST 格式的循环不变量
2025-08-13 03:15:00,537 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (y == y@pre - (x@pre - x)))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-13 03:15:00,537 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 03:15:00,537 - INFO  - 继续符号执行
2025-08-13 03:15:00,537 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (y == y@pre - (x@pre - x)))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-13 03:15:11,183 - INFO  - syntax Correct
2025-08-13 03:15:14,817 - INFO  - Validate:
2025-08-13 03:15:14,817 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 03:15:14,817 - INFO  - 
2025-08-13 03:15:14,817 - INFO  - Verify:
2025-08-13 03:15:14,817 - INFO  - [True]
2025-08-13 03:15:14,817 - INFO  - 
2025-08-13 03:15:14,817 - INFO  - CORRECT INVARIANT
2025-08-13 03:15:25,507 - INFO  - syntax Correct
2025-08-13 03:15:29,166 - INFO  - Validate:
2025-08-13 03:15:29,167 - INFO  - [True, True, True, True, True, True, True]
2025-08-13 03:15:29,167 - INFO  - 
2025-08-13 03:15:29,167 - INFO  - Verify:
2025-08-13 03:15:29,167 - INFO  - [True]
2025-08-13 03:15:29,167 - INFO  - 
2025-08-13 03:15:29,167 - INFO  - ========================================
2025-08-13 03:15:29,167 - INFO  - first_pass:
2025-08-13 03:15:29,167 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 03:15:29,167 - INFO  - ========================================
