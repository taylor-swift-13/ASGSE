2025-08-13 02:46:01,486 - INFO  - 
FUNCTION INITIALIZATION
2025-08-13 02:46:01,487 - INFO  - ========================================

2025-08-13 02:46:01,911 - INFO  - 初始待处理函数: ['foo99']
2025-08-13 02:46:01,911 - INFO  - 
GENERATE ANNOTATION FOR foo99
2025-08-13 02:46:01,911 - INFO  - ========================================

2025-08-13 02:46:01,911 - INFO  - 函数 foo99 已经初始化
2025-08-13 02:46:01,942 - INFO  - 
GENERATE LOOP INVARIANT FOR foo99
2025-08-13 02:46:01,942 - INFO  - ========================================

2025-08-13 02:46:01,959 - INFO  - file_name: foo99
2025-08-13 02:46:01,973 - DEBUG  - INNER_FLAG: False
2025-08-13 02:46:01,993 - INFO  - Variable Maps:[{'y': '0', 'x': 'n@pre', 'n': 'n@pre'}]
2025-08-13 02:46:01,993 - INFO  - Path conditions: [None]
2025-08-13 02:46:01,993 - INFO  - Pre condition: (y == 0) * (x == n@pre) * (n == n@pre)
2025-08-13 02:46:01,993 - INFO  - Loop Condition: x > 0
2025-08-13 02:46:01,993 - INFO  - Array Names: []
2025-08-13 02:46:01,994 - INFO  - Updated Loop Conditions: ['n@pre > 0']
2025-08-13 02:46:01,994 - INFO  - Global Unchanged Variables: ['n']
2025-08-13 02:46:01,994 - INFO  - Non Inductive Variables: []
2025-08-13 02:46:12,487 - INFO  - after const
2025-08-13 02:46:12,487 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-13 02:46:12,488 - INFO  - after not in
2025-08-13 02:46:12,488 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-13 02:46:12,488 - INFO  - after vars
2025-08-13 02:46:12,488 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-13 02:46:12,488 - INFO  - after verification goal
2025-08-13 02:46:12,488 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-13 02:46:17,123 - DEBUG  - invgen reasoning
2025-08-13 02:46:17,124 - DEBUG  - ```c
void foo99(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
        /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (n == x + y));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (\at(n,Pre) > 0) ==> (y >= 0 && y <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
        */
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
        
    /*@ assert n == x + y; */
  
}
```
2025-08-13 02:46:17,124 - INFO  - 生成循环不变量
2025-08-13 02:46:17,124 - INFO  - 
void foo99(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
        /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (n == x + y));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (\at(n,Pre) > 0) ==> (y >= 0 && y <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
        */
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
        
    /*@ assert n == x + y; */
  
}

2025-08-13 02:46:27,869 - INFO  - syntax Correct
2025-08-13 02:46:31,487 - INFO  - Validate:
2025-08-13 02:46:31,487 - INFO  - [True, True, True, True, True]
2025-08-13 02:46:31,487 - INFO  - 
2025-08-13 02:46:31,487 - INFO  - Verify:
2025-08-13 02:46:31,487 - INFO  - [True]
2025-08-13 02:46:31,488 - INFO  - 
2025-08-13 02:46:31,488 - INFO  - 注释过不变量的代码
2025-08-13 02:46:31,488 - INFO  - 
void foo99(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == \at(n,Pre)) * (n == \at(n,Pre)) <<< */
    
        /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (n == x + y));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (\at(n,Pre) > 0) ==> (y >= 0 && y <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
        */
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
        
    /*@ assert n == x + y; */
  
}

2025-08-13 02:46:42,192 - INFO  - syntax Correct
2025-08-13 02:46:45,828 - INFO  - Validate:
2025-08-13 02:46:45,829 - INFO  - [True, True, True, True, True]
2025-08-13 02:46:45,829 - INFO  - 
2025-08-13 02:46:45,829 - INFO  - Verify:
2025-08-13 02:46:45,829 - INFO  - [True]
2025-08-13 02:46:45,829 - INFO  - 
2025-08-13 02:46:45,829 - INFO  - ACSL 格式的循环不变量
2025-08-13 02:46:45,829 - INFO  - /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (n == x + y));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (\at(n,Pre) > 0) ==> (y >= 0 && y <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
        */
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
2025-08-13 02:46:45,831 - INFO  - VST 格式的循环不变量
2025-08-13 02:46:45,831 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (n == x + y))) &&
((n@pre > 0) => (x >= 0 && x <= n@pre)) &&
((n@pre > 0) => (y >= 0 && y <= n@pre)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
2025-08-13 02:46:45,831 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-13 02:46:45,832 - INFO  - 继续符号执行
2025-08-13 02:46:45,832 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (n == x + y))) &&
((n@pre > 0) => (x >= 0 && x <= n@pre)) &&
((n@pre > 0) => (y >= 0 && y <= n@pre)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
        while (x > 0) {
  
      y  = y + 1;
      x  = x - 1;
  
    }
2025-08-13 02:46:56,601 - INFO  - syntax Correct
2025-08-13 02:47:00,240 - INFO  - Validate:
2025-08-13 02:47:00,240 - INFO  - [True, True, True, True, True]
2025-08-13 02:47:00,240 - INFO  - 
2025-08-13 02:47:00,240 - INFO  - Verify:
2025-08-13 02:47:00,240 - INFO  - [True]
2025-08-13 02:47:00,240 - INFO  - 
2025-08-13 02:47:00,240 - INFO  - CORRECT INVARIANT
2025-08-13 02:47:10,917 - INFO  - syntax Correct
2025-08-13 02:47:14,516 - INFO  - Validate:
2025-08-13 02:47:14,516 - INFO  - [True, True, True, True, True]
2025-08-13 02:47:14,516 - INFO  - 
2025-08-13 02:47:14,516 - INFO  - Verify:
2025-08-13 02:47:14,517 - INFO  - [True]
2025-08-13 02:47:14,517 - INFO  - 
2025-08-13 02:47:14,517 - INFO  - ========================================
2025-08-13 02:47:14,517 - INFO  - first_pass:
2025-08-13 02:47:14,517 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-13 02:47:14,517 - INFO  - ========================================
