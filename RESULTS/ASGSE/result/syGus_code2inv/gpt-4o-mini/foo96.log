2025-08-12 21:01:49,474 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 21:01:49,474 - INFO  - ========================================

2025-08-12 21:01:49,584 - INFO  - 初始待处理函数: ['foo96']
2025-08-12 21:01:49,584 - INFO  - 
GENERATE ANNOTATION FOR foo96
2025-08-12 21:01:49,584 - INFO  - ========================================

2025-08-12 21:01:49,584 - INFO  - 函数 foo96 已经初始化
2025-08-12 21:01:49,599 - INFO  - 
GENERATE LOOP INVARIANT FOR foo96
2025-08-12 21:01:49,599 - INFO  - ========================================

2025-08-12 21:01:49,614 - INFO  - file_name: foo96
2025-08-12 21:01:49,625 - DEBUG  - INNER_FLAG: False
2025-08-12 21:01:49,640 - INFO  - Variable Maps:[{'y': '1', 'j': '0', 'i': '0', 'x': 'x@pre'}]
2025-08-12 21:01:49,640 - INFO  - Path conditions: [None]
2025-08-12 21:01:49,640 - INFO  - Pre condition: (y == 1) * (j == 0) * (i == 0) * (x == x@pre)
2025-08-12 21:01:49,640 - INFO  - Loop Condition: i <= x
2025-08-12 21:01:49,640 - INFO  - Array Names: []
2025-08-12 21:01:49,640 - INFO  - Updated Loop Conditions: ['0 <= x@pre']
2025-08-12 21:01:49,640 - INFO  - Global Unchanged Variables: ['y', 'x']
2025-08-12 21:01:49,641 - INFO  - Non Inductive Variables: []
2025-08-12 21:02:10,877 - INFO  - after const
2025-08-12 21:02:10,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
            */
            while (i <= x) {
      
      i  = i + 1;
      j  = j + y;
  
    }
            
2025-08-12 21:02:10,877 - INFO  - after not in
2025-08-12 21:02:10,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
            */
            while (i <= x) {
      
      i  = i + 1;
      j  = j + y;
  
    }
            
2025-08-12 21:02:10,877 - INFO  - after vars
2025-08-12 21:02:10,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (0 <= \at(x,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (0 <= \at(x,Pre)) ==> (PLACE_HOLDER_j) ;
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
            */
            while (i <= x) {
      
      i  = i + 1;
      j  = j + y;
  
    }
            
2025-08-12 21:02:10,877 - INFO  - after verification goal
2025-08-12 21:02:10,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (0 <= \at(x,Pre)) ==> (((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0 <= \at(x,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (0 <= \at(x,Pre)) ==> (PLACE_HOLDER_j) ;
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
            */
            while (i <= x) {
      
      i  = i + 1;
      j  = j + y;
  
    }
            
2025-08-12 21:02:14,467 - DEBUG  - invgen reasoning
2025-08-12 21:02:14,468 - DEBUG  - ```c
void foo96(int x) {
    int i = 0;
    int j = 0;
    int y = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
    
        /*@
          loop invariant (0 <= \at(x,Pre)) ==> (((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre))) || (i == j));
          loop invariant (0 <= \at(x,Pre)) ==> (0 <= i && i <= x + 1);
          loop invariant (0 <= \at(x,Pre)) ==> (j == i);
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
        */
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
        
    /*@ assert (i != j) ==> (y != 1) ;*/
}
```
2025-08-12 21:02:14,468 - INFO  - 生成循环不变量
2025-08-12 21:02:14,468 - INFO  - 
void foo96(int x) {
    int i = 0;
    int j = 0;
    int y = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
    
        /*@
          loop invariant (0 <= \at(x,Pre)) ==> (((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre))) || (i == j));
          loop invariant (0 <= \at(x,Pre)) ==> (0 <= i && i <= x + 1);
          loop invariant (0 <= \at(x,Pre)) ==> (j == i);
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
        */
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
        
    /*@ assert (i != j) ==> (y != 1) ;*/
}

2025-08-12 21:02:25,103 - INFO  - syntax Correct
2025-08-12 21:02:28,637 - INFO  - Validate:
2025-08-12 21:02:28,637 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:02:28,637 - INFO  - 
2025-08-12 21:02:28,637 - INFO  - Verify:
2025-08-12 21:02:28,637 - INFO  - [True]
2025-08-12 21:02:28,637 - INFO  - 
2025-08-12 21:02:28,637 - INFO  - 注释过不变量的代码
2025-08-12 21:02:28,637 - INFO  - 
void foo96(int x) {
    int i = 0;
    int j = 0;
    int y = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /* >>> PRECONDITION OF THE LOOP : (y == 1) * (j == 0) * (i == 0) * (x == \at(x,Pre)) <<< */
    
        /*@
          loop invariant (0 <= \at(x,Pre)) ==> (((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre))) || (i == j));
          loop invariant (0 <= \at(x,Pre)) ==> (0 <= i && i <= x + 1);
          loop invariant (0 <= \at(x,Pre)) ==> (j == i);
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
        */
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
        
    /*@ assert (i != j) ==> (y != 1) ;*/
}

2025-08-12 21:02:39,233 - INFO  - syntax Correct
2025-08-12 21:02:42,782 - INFO  - Validate:
2025-08-12 21:02:42,782 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:02:42,782 - INFO  - 
2025-08-12 21:02:42,782 - INFO  - Verify:
2025-08-12 21:02:42,782 - INFO  - [True]
2025-08-12 21:02:42,782 - INFO  - 
2025-08-12 21:02:42,783 - INFO  - ACSL 格式的循环不变量
2025-08-12 21:02:42,783 - INFO  - /*@
          loop invariant (0 <= \at(x,Pre)) ==> (((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre))) || (i == j));
          loop invariant (0 <= \at(x,Pre)) ==> (0 <= i && i <= x + 1);
          loop invariant (0 <= \at(x,Pre)) ==> (j == i);
          loop invariant (!(0 <= \at(x,Pre))) ==> ((y == 1)&&(j == 0)&&(i == 0)&&(x == \at(x,Pre)));
          loop invariant y == 1;
          loop invariant x == \at(x,Pre);
        */
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
2025-08-12 21:02:42,783 - INFO  - VST 格式的循环不变量
2025-08-12 21:02:42,783 - INFO  - /*@ Inv
    ((0 <= x@pre) => (((y == 1)&&(j == 0)&&(i == 0)&&(x == x@pre)) || (i == j))) &&
((0 <= x@pre) => (0 <= i && i <= x + 1)) &&
((0 <= x@pre) => (j == i)) &&
((!(0 <= x@pre)) => ((y == 1)&&(j == 0)&&(i == 0)&&(x == x@pre))) &&
(y == 1) &&
(x == x@pre)
    */
    
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
2025-08-12 21:02:42,783 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 21:02:42,783 - INFO  - 继续符号执行
2025-08-12 21:02:42,784 - INFO  - /*@ Inv
    ((0 <= x@pre) => (((y == 1)&&(j == 0)&&(i == 0)&&(x == x@pre)) || (i == j))) &&
((0 <= x@pre) => (0 <= i && i <= x + 1)) &&
((0 <= x@pre) => (j == i)) &&
((!(0 <= x@pre)) => ((y == 1)&&(j == 0)&&(i == 0)&&(x == x@pre))) &&
(y == 1) &&
(x == x@pre)
    */
    
        while (i <= x) {
            i  = i + 1;
            j  = j + y;
        }
2025-08-12 21:02:53,426 - INFO  - syntax Correct
2025-08-12 21:02:56,963 - INFO  - Validate:
2025-08-12 21:02:56,963 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:02:56,963 - INFO  - 
2025-08-12 21:02:56,963 - INFO  - Verify:
2025-08-12 21:02:56,963 - INFO  - [True]
2025-08-12 21:02:56,963 - INFO  - 
2025-08-12 21:02:56,963 - INFO  - CORRECT INVARIANT
2025-08-12 21:03:07,614 - INFO  - syntax Correct
2025-08-12 21:03:11,153 - INFO  - Validate:
2025-08-12 21:03:11,153 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:03:11,153 - INFO  - 
2025-08-12 21:03:11,153 - INFO  - Verify:
2025-08-12 21:03:11,153 - INFO  - [True]
2025-08-12 21:03:11,153 - INFO  - 
2025-08-12 21:03:11,153 - INFO  - ========================================
2025-08-12 21:03:11,153 - INFO  - first_pass:
2025-08-12 21:03:11,154 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 21:03:11,154 - INFO  - ========================================
