2025-08-12 21:07:11,682 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 21:07:11,682 - INFO  - ========================================

2025-08-12 21:07:11,792 - INFO  - 初始待处理函数: ['foo92']
2025-08-12 21:07:11,792 - INFO  - 
GENERATE ANNOTATION FOR foo92
2025-08-12 21:07:11,792 - INFO  - ========================================

2025-08-12 21:07:11,792 - INFO  - 函数 foo92 已经初始化
2025-08-12 21:07:11,806 - INFO  - 
GENERATE LOOP INVARIANT FOR foo92
2025-08-12 21:07:11,806 - INFO  - ========================================

2025-08-12 21:07:11,820 - INFO  - file_name: foo92
2025-08-12 21:07:11,831 - DEBUG  - INNER_FLAG: False
2025-08-12 21:07:11,846 - INFO  - Variable Maps:[{'y': '0', 'x': '0', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre'}]
2025-08-12 21:07:11,847 - INFO  - Path conditions: [None]
2025-08-12 21:07:11,847 - INFO  - Pre condition: (y == 0) * (x == 0) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre)
2025-08-12 21:07:11,847 - INFO  - Loop Condition: y >= 0
2025-08-12 21:07:11,847 - INFO  - Array Names: []
2025-08-12 21:07:11,847 - INFO  - Updated Loop Conditions: ['0 >= 0']
2025-08-12 21:07:11,847 - INFO  - Global Unchanged Variables: ['x', 'z3', 'z2', 'z1']
2025-08-12 21:07:11,847 - INFO  - Non Inductive Variables: []
2025-08-12 21:07:27,876 - INFO  - after const
2025-08-12 21:07:27,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) <<< */
        
            /*@
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
2025-08-12 21:07:27,877 - INFO  - after not in
2025-08-12 21:07:27,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) <<< */
        
            /*@
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
2025-08-12 21:07:27,877 - INFO  - after vars
2025-08-12 21:07:27,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_y ;
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
2025-08-12 21:07:27,877 - INFO  - after verification goal
2025-08-12 21:07:27,877 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_y ;
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
2025-08-12 21:07:32,549 - DEBUG  - invgen reasoning
2025-08-12 21:07:32,549 - DEBUG  - ```c
void foo92(int z1,int z2,int z3) {

    int x = 0;
    int y = 0;

    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (y == 0) * (x == 0) * (z3 == \at(z3,Pre)) * (z2 == \at(z2,Pre)) * (z1 == \at(z1,Pre)) <<< */
        
            /*@
          loop invariant  ((y == 0)&&(x == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))) || (y >= 0) ;
          loop invariant  (y == 0);
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
    /*@ assert y >= 0;*/

}
```
2025-08-12 21:07:32,549 - INFO  - 生成循环不变量
2025-08-12 21:07:32,549 - INFO  - 
void foo92(int z1,int z2,int z3) {

    int x = 0;
    int y = 0;

    
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))) || (y >= 0) ;
          loop invariant  (y == 0);
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
    /*@ assert y >= 0;*/

}

2025-08-12 21:07:43,189 - INFO  - syntax Correct
2025-08-12 21:07:46,734 - INFO  - Validate:
2025-08-12 21:07:46,734 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:07:46,734 - INFO  - 
2025-08-12 21:07:46,734 - INFO  - Verify:
2025-08-12 21:07:46,734 - INFO  - [True]
2025-08-12 21:07:46,734 - INFO  - 
2025-08-12 21:07:46,734 - INFO  - 注释过不变量的代码
2025-08-12 21:07:46,735 - INFO  - 
void foo92(int z1,int z2,int z3) {

    int x = 0;
    int y = 0;

    
    
            
            /*@
          loop invariant  ((y == 0)&&(x == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))) || (y >= 0) ;
          loop invariant  (y == 0);
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
            
    /*@ assert y >= 0;*/

}

2025-08-12 21:07:57,328 - INFO  - syntax Correct
2025-08-12 21:08:00,883 - INFO  - Validate:
2025-08-12 21:08:00,883 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:08:00,883 - INFO  - 
2025-08-12 21:08:00,883 - INFO  - Verify:
2025-08-12 21:08:00,884 - INFO  - [True]
2025-08-12 21:08:00,884 - INFO  - 
2025-08-12 21:08:00,884 - INFO  - ACSL 格式的循环不变量
2025-08-12 21:08:00,884 - INFO  - /*@
          loop invariant  ((y == 0)&&(x == 0)&&(z3 == \at(z3,Pre))&&(z2 == \at(z2,Pre))&&(z1 == \at(z1,Pre))) || (y >= 0) ;
          loop invariant  (y == 0);
          loop invariant x == 0;
          loop invariant z3 == \at(z3,Pre);
          loop invariant z2 == \at(z2,Pre);
          loop invariant z1 == \at(z1,Pre);
            */
            while(y >= 0) {
        y = y + x;
    }
2025-08-12 21:08:00,884 - INFO  - VST 格式的循环不变量
2025-08-12 21:08:00,884 - INFO  - /*@ Inv
    (((y == 0)&&(x == 0)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)) || (y >= 0) ) &&
((y == 0)) &&
(x == 0) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while(y >= 0) {
        y = y + x;
    }
2025-08-12 21:08:00,885 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 21:08:00,885 - INFO  - 继续符号执行
2025-08-12 21:08:00,885 - INFO  - /*@ Inv
    (((y == 0)&&(x == 0)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)) || (y >= 0) ) &&
((y == 0)) &&
(x == 0) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
            while(y >= 0) {
        y = y + x;
    }
2025-08-12 21:08:11,536 - INFO  - syntax Correct
2025-08-12 21:08:15,069 - INFO  - Validate:
2025-08-12 21:08:15,069 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:08:15,069 - INFO  - 
2025-08-12 21:08:15,069 - INFO  - Verify:
2025-08-12 21:08:15,069 - INFO  - [True]
2025-08-12 21:08:15,069 - INFO  - 
2025-08-12 21:08:15,069 - INFO  - CORRECT INVARIANT
2025-08-12 21:08:25,665 - INFO  - syntax Correct
2025-08-12 21:08:29,192 - INFO  - Validate:
2025-08-12 21:08:29,192 - INFO  - [True, True, True, True, True, True]
2025-08-12 21:08:29,192 - INFO  - 
2025-08-12 21:08:29,192 - INFO  - Verify:
2025-08-12 21:08:29,192 - INFO  - [True]
2025-08-12 21:08:29,192 - INFO  - 
2025-08-12 21:08:29,193 - INFO  - ========================================
2025-08-12 21:08:29,193 - INFO  - first_pass:
2025-08-12 21:08:29,193 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 21:08:29,193 - INFO  - ========================================
