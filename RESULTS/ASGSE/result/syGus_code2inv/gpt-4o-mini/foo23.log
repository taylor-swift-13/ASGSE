2025-08-12 22:44:42,584 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 22:44:42,584 - INFO  - ========================================

2025-08-12 22:44:42,791 - INFO  - 初始待处理函数: ['foo23']
2025-08-12 22:44:42,791 - INFO  - 
GENERATE ANNOTATION FOR foo23
2025-08-12 22:44:42,791 - INFO  - ========================================

2025-08-12 22:44:42,791 - INFO  - 函数 foo23 已经初始化
2025-08-12 22:44:42,806 - INFO  - 
GENERATE LOOP INVARIANT FOR foo23
2025-08-12 22:44:42,806 - INFO  - ========================================

2025-08-12 22:44:42,821 - INFO  - file_name: foo23
2025-08-12 22:44:42,833 - DEBUG  - INNER_FLAG: False
2025-08-12 22:44:42,850 - INFO  - Variable Maps:[{'j': '20', 'i': '1'}]
2025-08-12 22:44:42,850 - INFO  - Path conditions: [None]
2025-08-12 22:44:42,850 - INFO  - Pre condition: (j == 20) * (i == 1)
2025-08-12 22:44:42,850 - INFO  - Loop Condition: j >= i
2025-08-12 22:44:42,850 - INFO  - Array Names: []
2025-08-12 22:44:42,850 - INFO  - Updated Loop Conditions: ['20 >= 1']
2025-08-12 22:44:42,850 - INFO  - Global Unchanged Variables: []
2025-08-12 22:44:42,851 - INFO  - Non Inductive Variables: []
2025-08-12 22:44:54,288 - INFO  - after const
2025-08-12 22:44:54,288 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == 20) * (i == 1) <<< */
        
            /*@
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
2025-08-12 22:44:54,288 - INFO  - after not in
2025-08-12 22:44:54,288 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == 20) * (i == 1) <<< */
        
            /*@
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
2025-08-12 22:44:54,288 - INFO  - after vars
2025-08-12 22:44:54,288 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == 20) * (i == 1) <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant  PLACE_HOLDER_j ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
2025-08-12 22:44:54,288 - INFO  - after verification goal
2025-08-12 22:44:54,288 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == 20) * (i == 1) <<< */
        
            /*@
          loop invariant  ((j == 20)&&(i == 1)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_i ;
          loop invariant  PLACE_HOLDER_j ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
2025-08-12 22:44:57,448 - DEBUG  - invgen reasoning
2025-08-12 22:44:57,448 - DEBUG  - ```c
void foo23() {
  
    int i=1;
    int j=20;
   
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : (j == 20) * (i == 1) <<< */
        
            /*@
          loop invariant  ((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ;
          loop invariant  (i >= 1) && (i <= 2 * (20 - j + 1) + 1) ;
          loop invariant  (j >= 13) && (j <= 20) ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
  
    /*@ assert j == 13;*/
  
  }
```
2025-08-12 22:44:57,448 - INFO  - 生成循环不变量
2025-08-12 22:44:57,448 - INFO  - 
void foo23() {
  
    int i=1;
    int j=20;
   
    
    
            
            /*@
          loop invariant  ((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ;
          loop invariant  (i >= 1) && (i <= 2 * (20 - j + 1) + 1) ;
          loop invariant  (j >= 13) && (j <= 20) ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
  
    /*@ assert j == 13;*/
  
  }

2025-08-12 22:45:08,160 - INFO  - syntax Correct
2025-08-12 22:45:11,731 - INFO  - Validate:
2025-08-12 22:45:11,731 - INFO  - [True, True, True]
2025-08-12 22:45:11,731 - INFO  - 
2025-08-12 22:45:11,731 - INFO  - Verify:
2025-08-12 22:45:11,731 - INFO  - [True]
2025-08-12 22:45:11,731 - INFO  - 
2025-08-12 22:45:11,731 - INFO  - 注释过不变量的代码
2025-08-12 22:45:11,731 - INFO  - 
void foo23() {
  
    int i=1;
    int j=20;
   
    
    
            
            /*@
          loop invariant  ((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ;
          loop invariant  (i >= 1) && (i <= 2 * (20 - j + 1) + 1) ;
          loop invariant  (j >= 13) && (j <= 20) ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
            
  
    /*@ assert j == 13;*/
  
  }

2025-08-12 22:45:22,359 - INFO  - syntax Correct
2025-08-12 22:45:25,939 - INFO  - Validate:
2025-08-12 22:45:25,940 - INFO  - [True, True, True]
2025-08-12 22:45:25,940 - INFO  - 
2025-08-12 22:45:25,940 - INFO  - Verify:
2025-08-12 22:45:25,940 - INFO  - [True]
2025-08-12 22:45:25,940 - INFO  - 
2025-08-12 22:45:25,940 - INFO  - ACSL 格式的循环不变量
2025-08-12 22:45:25,940 - INFO  - /*@
          loop invariant  ((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ;
          loop invariant  (i >= 1) && (i <= 2 * (20 - j + 1) + 1) ;
          loop invariant  (j >= 13) && (j <= 20) ;
            */
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
2025-08-12 22:45:25,940 - INFO  - VST 格式的循环不变量
2025-08-12 22:45:25,941 - INFO  - /*@ Inv
    (((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ) &&
((i >= 1) && (i <= 2 * (20 - j + 1) + 1) ) &&
((j >= 13) && (j <= 20) )
    */
    
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
2025-08-12 22:45:25,941 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 22:45:25,941 - INFO  - 继续符号执行
2025-08-12 22:45:25,941 - INFO  - /*@ Inv
    (((j == 20)&&(i == 1)) || (j == 20 - (i - 1) / 2) ) &&
((i >= 1) && (i <= 2 * (20 - j + 1) + 1) ) &&
((j >= 13) && (j <= 20) )
    */
    
            while (j >= i) {
      
      i  = i + 2;
      j  = j - 1;
      
  
    }
2025-08-12 22:45:36,619 - INFO  - syntax Correct
2025-08-12 22:45:40,186 - INFO  - Validate:
2025-08-12 22:45:40,186 - INFO  - [True, True, True]
2025-08-12 22:45:40,186 - INFO  - 
2025-08-12 22:45:40,187 - INFO  - Verify:
2025-08-12 22:45:40,187 - INFO  - [True]
2025-08-12 22:45:40,187 - INFO  - 
2025-08-12 22:45:40,187 - INFO  - CORRECT INVARIANT
2025-08-12 22:45:50,805 - INFO  - syntax Correct
2025-08-12 22:45:54,377 - INFO  - Validate:
2025-08-12 22:45:54,378 - INFO  - [True, True, True]
2025-08-12 22:45:54,378 - INFO  - 
2025-08-12 22:45:54,378 - INFO  - Verify:
2025-08-12 22:45:54,378 - INFO  - [True]
2025-08-12 22:45:54,378 - INFO  - 
2025-08-12 22:45:54,378 - INFO  - ========================================
2025-08-12 22:45:54,378 - INFO  - first_pass:
2025-08-12 22:45:54,378 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 22:45:54,378 - INFO  - ========================================
