2025-08-11 20:53:55,591 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 20:53:55,591 - INFO  - ========================================

2025-08-11 20:53:55,721 - INFO  - 初始待处理函数: ['foo115', 'unknown']
2025-08-11 20:53:55,721 - INFO  - 现在处理函数 unknown

2025-08-11 20:53:55,721 - INFO  - 
GENERATE ANNOTATION FOR foo115
2025-08-11 20:53:55,721 - INFO  - ========================================

2025-08-11 20:53:55,721 - INFO  - 函数 foo115 已经初始化
2025-08-11 20:53:55,737 - INFO  - 
GENERATE LOOP INVARIANT FOR foo115
2025-08-11 20:53:55,737 - INFO  - ========================================

2025-08-11 20:53:55,752 - INFO  - file_name: foo115
2025-08-11 20:53:55,763 - DEBUG  - INNER_FLAG: False
2025-08-11 20:53:55,778 - INFO  - Variable Maps:[{'x': '0', 'sn': '0'}]
2025-08-11 20:53:55,779 - INFO  - Path conditions: [None]
2025-08-11 20:53:55,779 - INFO  - Pre condition: (x == 0) * (sn == 0)
2025-08-11 20:53:55,779 - INFO  - Loop Condition: unknown()
2025-08-11 20:53:55,779 - INFO  - Array Names: []
2025-08-11 20:53:55,779 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-11 20:53:55,779 - INFO  - Global Unchanged Variables: []
2025-08-11 20:53:55,779 - INFO  - Non Inductive Variables: []
2025-08-11 20:54:05,019 - INFO  - after const
2025-08-11 20:54:05,019 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 20:54:05,019 - INFO  - after not in
2025-08-11 20:54:05,019 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 20:54:05,019 - INFO  - after vars
2025-08-11 20:54:05,019 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 20:54:05,019 - INFO  - after verification goal
2025-08-11 20:54:05,019 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 20:54:06,746 - DEBUG  - invgen reasoning
2025-08-11 20:54:06,746 - DEBUG  - ```c
int unknown();
void foo115() {

    int sn = 0;
    int x = 0;
    
    
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
       /*@ assert (sn != -1) ==> (sn == x);*/
      
    
  
  }
```
2025-08-11 20:54:06,746 - INFO  - 生成循环不变量
2025-08-11 20:54:06,746 - INFO  - 
int unknown();
void foo115() {

    int sn = 0;
    int x = 0;
    
    
    
            
            /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
       /*@ assert (sn != -1) ==> (sn == x);*/
      
    
  
  }

2025-08-11 20:54:17,416 - INFO  - syntax Correct
2025-08-11 20:54:21,006 - INFO  - Validate:
2025-08-11 20:54:21,007 - INFO  - [True, True, True]
2025-08-11 20:54:21,007 - INFO  - 
2025-08-11 20:54:21,007 - INFO  - Verify:
2025-08-11 20:54:21,007 - INFO  - [True]
2025-08-11 20:54:21,007 - INFO  - 
2025-08-11 20:54:21,007 - INFO  - 注释过不变量的代码
2025-08-11 20:54:21,007 - INFO  - 
int unknown();
void foo115() {

    int sn = 0;
    int x = 0;
    
    
    
            
            /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
       /*@ assert (sn != -1) ==> (sn == x);*/
      
    
  
  }

2025-08-11 20:54:31,644 - INFO  - syntax Correct
2025-08-11 20:54:35,275 - INFO  - Validate:
2025-08-11 20:54:35,275 - INFO  - [True, True, True]
2025-08-11 20:54:35,275 - INFO  - 
2025-08-11 20:54:35,275 - INFO  - Verify:
2025-08-11 20:54:35,275 - INFO  - [True]
2025-08-11 20:54:35,276 - INFO  - 
2025-08-11 20:54:35,276 - INFO  - ACSL 格式的循环不变量
2025-08-11 20:54:35,276 - INFO  - /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (sn == x) ;
          loop invariant  sn >= 0 ;
          loop invariant  x >= 0 ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 20:54:35,276 - INFO  - VST 格式的循环不变量
2025-08-11 20:54:35,276 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)) || (sn == x) ) &&
(sn >= 0 ) &&
(x >= 0 )
    */
    
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 20:54:35,276 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 20:54:35,276 - INFO  - 继续符号执行
2025-08-11 20:54:35,276 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)) || (sn == x) ) &&
(sn >= 0 ) &&
(x >= 0 )
    */
    
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 20:54:45,934 - INFO  - syntax Correct
2025-08-11 20:54:49,533 - INFO  - Validate:
2025-08-11 20:54:49,533 - INFO  - [True, True, True]
2025-08-11 20:54:49,533 - INFO  - 
2025-08-11 20:54:49,534 - INFO  - Verify:
2025-08-11 20:54:49,534 - INFO  - [True]
2025-08-11 20:54:49,534 - INFO  - 
2025-08-11 20:54:49,534 - INFO  - CORRECT INVARIANT
2025-08-11 20:55:00,144 - INFO  - syntax Correct
2025-08-11 20:55:03,769 - INFO  - Validate:
2025-08-11 20:55:03,770 - INFO  - [True, True, True]
2025-08-11 20:55:03,770 - INFO  - 
2025-08-11 20:55:03,770 - INFO  - Verify:
2025-08-11 20:55:03,770 - INFO  - [True]
2025-08-11 20:55:03,770 - INFO  - 
2025-08-11 20:55:03,770 - INFO  - ========================================
2025-08-11 20:55:03,770 - INFO  - first_pass:
2025-08-11 20:55:03,770 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 20:55:03,770 - INFO  - ========================================
