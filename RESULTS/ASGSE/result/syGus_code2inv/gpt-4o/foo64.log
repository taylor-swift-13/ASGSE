2025-08-11 22:43:03,526 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 22:43:03,526 - INFO  - ========================================

2025-08-11 22:43:03,713 - INFO  - 初始待处理函数: ['foo64']
2025-08-11 22:43:03,713 - INFO  - 
GENERATE ANNOTATION FOR foo64
2025-08-11 22:43:03,714 - INFO  - ========================================

2025-08-11 22:43:03,714 - INFO  - 函数 foo64 已经初始化
2025-08-11 22:43:03,728 - INFO  - 
GENERATE LOOP INVARIANT FOR foo64
2025-08-11 22:43:03,729 - INFO  - ========================================

2025-08-11 22:43:03,741 - INFO  - file_name: foo64
2025-08-11 22:43:03,754 - DEBUG  - INNER_FLAG: False
2025-08-11 22:43:03,770 - INFO  - Variable Maps:[{'x': '1', 'y': 'y@pre'}]
2025-08-11 22:43:03,770 - INFO  - Path conditions: [None]
2025-08-11 22:43:03,770 - INFO  - Pre condition: (x == 1) * (y == y@pre)
2025-08-11 22:43:03,770 - INFO  - Loop Condition: x <= 10
2025-08-11 22:43:03,770 - INFO  - Array Names: []
2025-08-11 22:43:03,770 - INFO  - Updated Loop Conditions: ['1 <= 10']
2025-08-11 22:43:03,771 - INFO  - Global Unchanged Variables: []
2025-08-11 22:43:03,771 - INFO  - Non Inductive Variables: ['y']
2025-08-11 22:43:20,372 - INFO  - after const
2025-08-11 22:43:20,373 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-11 22:43:20,373 - INFO  - after not in
2025-08-11 22:43:20,373 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-11 22:43:20,373 - INFO  - after vars
2025-08-11 22:43:20,373 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-11 22:43:20,373 - INFO  - after verification goal
2025-08-11 22:43:20,373 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
            
2025-08-11 22:43:23,591 - DEBUG  - invgen reasoning
2025-08-11 22:43:23,591 - DEBUG  - ```c
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (x >= 2 && x <= 11 && y == 10 - x) ;
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}
```
2025-08-11 22:43:23,591 - INFO  - 生成循环不变量
2025-08-11 22:43:23,591 - INFO  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (x >= 2 && x <= 11 && y == 10 - x) ;
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:43:34,453 - INFO  - syntax Correct
2025-08-11 22:43:38,028 - INFO  - Validate:
2025-08-11 22:43:38,028 - INFO  - [False, True, True]
2025-08-11 22:43:38,028 - INFO  - 
2025-08-11 22:43:38,028 - INFO  - Verify:
2025-08-11 22:43:38,028 - INFO  - [True]
2025-08-11 22:43:38,028 - INFO  - 
2025-08-11 22:43:38,029 - DEBUG  - after mark
2025-08-11 22:43:38,029 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (x >= 2 && x <= 11 && y == 10 - x)  [INVARIANT FAILED] ;
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:43:43,047 - DEBUG  - after adjust
2025-08-11 22:43:43,047 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (x >= 2 && x <= 10 && y == 10 - x) ;
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:43:53,947 - INFO  - syntax Correct
2025-08-11 22:43:57,508 - INFO  - Validate:
2025-08-11 22:43:57,508 - INFO  - [False, True, True]
2025-08-11 22:43:57,508 - INFO  - 
2025-08-11 22:43:57,508 - INFO  - Verify:
2025-08-11 22:43:57,509 - INFO  - [True]
2025-08-11 22:43:57,509 - INFO  - 
2025-08-11 22:43:57,509 - DEBUG  - after hudini
2025-08-11 22:43:57,509 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 1)&&(y == \at(y,Pre))) || (y == 10 - x) ;
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:44:08,269 - INFO  - syntax Correct
2025-08-11 22:44:11,837 - INFO  - Validate:
2025-08-11 22:44:11,837 - INFO  - [False, True]
2025-08-11 22:44:11,837 - INFO  - 
2025-08-11 22:44:11,837 - INFO  - Verify:
2025-08-11 22:44:11,838 - INFO  - [True]
2025-08-11 22:44:11,838 - INFO  - 
2025-08-11 22:44:11,838 - DEBUG  - after hudini
2025-08-11 22:44:11,838 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:44:22,653 - INFO  - syntax Correct
2025-08-11 22:44:26,249 - INFO  - Validate:
2025-08-11 22:44:26,249 - INFO  - [True]
2025-08-11 22:44:26,249 - INFO  - 
2025-08-11 22:44:26,250 - INFO  - Verify:
2025-08-11 22:44:26,250 - INFO  - [False]
2025-08-11 22:44:26,250 - INFO  - 
2025-08-11 22:44:37,018 - INFO  - syntax Correct
2025-08-11 22:44:40,634 - INFO  - Validate:
2025-08-11 22:44:40,634 - INFO  - [True]
2025-08-11 22:44:40,634 - INFO  - 
2025-08-11 22:44:40,634 - INFO  - Verify:
2025-08-11 22:44:40,634 - INFO  - [False]
2025-08-11 22:44:40,634 - INFO  - 
2025-08-11 22:44:52,096 - DEBUG  - after strength
2025-08-11 22:44:52,097 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  y == 10 - x ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:45:02,978 - INFO  - syntax Correct
2025-08-11 22:45:06,657 - INFO  - Validate:
2025-08-11 22:45:06,658 - INFO  - [True, False]
2025-08-11 22:45:06,658 - INFO  - 
2025-08-11 22:45:06,658 - INFO  - Verify:
2025-08-11 22:45:06,658 - INFO  - [True]
2025-08-11 22:45:06,658 - INFO  - 
2025-08-11 22:45:06,658 - DEBUG  - after mark
2025-08-11 22:45:06,658 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  y == 10 - x  [INVARIANT FAILED] ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:45:14,083 - DEBUG  - after adjust
2025-08-11 22:45:14,083 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  (x == 1 && y == \at(y, Pre)) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:45:24,749 - INFO  - syntax Correct
2025-08-11 22:45:28,310 - INFO  - Validate:
2025-08-11 22:45:28,310 - INFO  - [True, True]
2025-08-11 22:45:28,310 - INFO  - 
2025-08-11 22:45:28,310 - INFO  - Verify:
2025-08-11 22:45:28,310 - INFO  - [True]
2025-08-11 22:45:28,310 - INFO  - 
2025-08-11 22:45:28,310 - DEBUG  - after hudini
2025-08-11 22:45:28,310 - DEBUG  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  (x == 1 && y == \at(y, Pre)) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:45:28,311 - INFO  - 注释过不变量的代码
2025-08-11 22:45:28,311 - INFO  - 
void foo64(int y) {
    int x = 1;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  (x == 1 && y == \at(y, Pre)) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
    
    /*@ assert (y < 10); */
}

2025-08-11 22:45:38,971 - INFO  - syntax Correct
2025-08-11 22:45:42,528 - INFO  - Validate:
2025-08-11 22:45:42,528 - INFO  - [True, True]
2025-08-11 22:45:42,528 - INFO  - 
2025-08-11 22:45:42,529 - INFO  - Verify:
2025-08-11 22:45:42,529 - INFO  - [True]
2025-08-11 22:45:42,529 - INFO  - 
2025-08-11 22:45:42,529 - INFO  - ACSL 格式的循环不变量
2025-08-11 22:45:42,529 - INFO  - /*@
      loop invariant  1 <= x <= 11 ;
      loop invariant  (x == 1 && y == \at(y, Pre)) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) ;
    */
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-11 22:45:42,529 - INFO  - VST 格式的循环不变量
2025-08-11 22:45:42,529 - INFO  - /*@ Inv
    (1 <= x && x <= 11 ) &&
((x == 1 && y == y@pre) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) )
    */
    
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-11 22:45:42,529 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 22:45:42,530 - INFO  - 继续符号执行
2025-08-11 22:45:42,530 - INFO  - /*@ Inv
    (1 <= x && x <= 11 ) &&
((x == 1 && y == y@pre) || (x >= 2 && x <= 11 && y == 10 - (x - 1)) )
    */
    
    while (x <= 10) {
        y = 10 - x;
        x = x +1;
    }
2025-08-11 22:45:53,139 - INFO  - syntax Correct
2025-08-11 22:45:56,695 - INFO  - Validate:
2025-08-11 22:45:56,695 - INFO  - [True, True]
2025-08-11 22:45:56,695 - INFO  - 
2025-08-11 22:45:56,695 - INFO  - Verify:
2025-08-11 22:45:56,695 - INFO  - [True]
2025-08-11 22:45:56,695 - INFO  - 
2025-08-11 22:45:56,695 - INFO  - CORRECT INVARIANT
2025-08-11 22:46:07,310 - INFO  - syntax Correct
2025-08-11 22:46:10,865 - INFO  - Validate:
2025-08-11 22:46:10,865 - INFO  - [True, True]
2025-08-11 22:46:10,865 - INFO  - 
2025-08-11 22:46:10,865 - INFO  - Verify:
2025-08-11 22:46:10,865 - INFO  - [True]
2025-08-11 22:46:10,865 - INFO  - 
2025-08-11 22:46:10,865 - INFO  - ========================================
2025-08-11 22:46:10,865 - INFO  - first_pass:
2025-08-11 22:46:10,865 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 22:46:10,865 - INFO  - ========================================
