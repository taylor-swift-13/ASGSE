2025-08-11 20:55:03,858 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 20:55:03,858 - INFO  - ========================================

2025-08-11 20:55:03,990 - INFO  - 初始待处理函数: ['foo71', 'unknown']
2025-08-11 20:55:03,991 - INFO  - 现在处理函数 unknown

2025-08-11 20:55:03,991 - INFO  - 
GENERATE ANNOTATION FOR foo71
2025-08-11 20:55:03,991 - INFO  - ========================================

2025-08-11 20:55:03,991 - INFO  - 函数 foo71 已经初始化
2025-08-11 20:55:04,007 - INFO  - 
GENERATE LOOP INVARIANT FOR foo71
2025-08-11 20:55:04,007 - INFO  - ========================================

2025-08-11 20:55:04,020 - INFO  - file_name: foo71
2025-08-11 20:55:04,032 - DEBUG  - INNER_FLAG: False
2025-08-11 20:55:04,047 - INFO  - Variable Maps:[{'z': '36 * y@pre', 'c': '0', 'y': 'y@pre'}]
2025-08-11 20:55:04,047 - INFO  - Path conditions: ['y@pre >= 0 && y@pre <= 127']
2025-08-11 20:55:04,047 - INFO  - Pre condition: y@pre >= 0 && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (y == y@pre)
2025-08-11 20:55:04,048 - INFO  - Loop Condition: unknown()
2025-08-11 20:55:04,048 - INFO  - Array Names: []
2025-08-11 20:55:04,048 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-11 20:55:04,048 - INFO  - Global Unchanged Variables: ['y']
2025-08-11 20:55:04,048 - INFO  - Non Inductive Variables: []
2025-08-11 20:55:20,424 - INFO  - after const
2025-08-11 20:55:20,424 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            
2025-08-11 20:55:20,424 - INFO  - after not in
2025-08-11 20:55:20,424 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            
2025-08-11 20:55:20,424 - INFO  - after vars
2025-08-11 20:55:20,424 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            
2025-08-11 20:55:20,425 - INFO  - after verification goal
2025-08-11 20:55:20,425 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_c ;
          loop invariant  PLACE_HOLDER_z ;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            
2025-08-11 20:55:40,458 - DEBUG  - invgen reasoning
2025-08-11 20:55:40,458 - DEBUG  - ```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo71(int y) {
    int c = 0;
    int z = 36 * y;
    
  
  
  
    
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((z == 36 * \at(y,Pre) + c) && (0 <= c && c <= 36));
          loop invariant  0 <= c && c <= 36;
          loop invariant  z == 36 * \at(y,Pre) + c;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            

    /*@ assert  ( c < 36 ) ==> ( z < 4608 ) ; */
  
  
  
  }
```
2025-08-11 20:55:40,458 - INFO  - 生成循环不变量
2025-08-11 20:55:40,458 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo71(int y) {
    int c = 0;
    int z = 36 * y;
    
  
  
  
    
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((z == 36 * \at(y,Pre) + c) && (0 <= c && c <= 36));
          loop invariant  0 <= c && c <= 36;
          loop invariant  z == 36 * \at(y,Pre) + c;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            

    /*@ assert  ( c < 36 ) ==> ( z < 4608 ) ; */
  
  
  
  }

2025-08-11 20:55:51,381 - INFO  - syntax Correct
2025-08-11 20:55:54,992 - INFO  - Validate:
2025-08-11 20:55:54,993 - INFO  - [True, True, True, True]
2025-08-11 20:55:54,993 - INFO  - 
2025-08-11 20:55:54,993 - INFO  - Verify:
2025-08-11 20:55:54,993 - INFO  - [True]
2025-08-11 20:55:54,993 - INFO  - 
2025-08-11 20:55:54,993 - INFO  - 注释过不变量的代码
2025-08-11 20:55:54,993 - INFO  - 
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo71(int y) {
    int c = 0;
    int z = 36 * y;
    
  
  
  
    
            
            /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((z == 36 * \at(y,Pre) + c) && (0 <= c && c <= 36));
          loop invariant  0 <= c && c <= 36;
          loop invariant  z == 36 * \at(y,Pre) + c;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
            

    /*@ assert  ( c < 36 ) ==> ( z < 4608 ) ; */
  
  
  
  }

2025-08-11 20:56:05,805 - INFO  - syntax Correct
2025-08-11 20:56:09,427 - INFO  - Validate:
2025-08-11 20:56:09,427 - INFO  - [True, True, True, True]
2025-08-11 20:56:09,427 - INFO  - 
2025-08-11 20:56:09,427 - INFO  - Verify:
2025-08-11 20:56:09,427 - INFO  - [True]
2025-08-11 20:56:09,427 - INFO  - 
2025-08-11 20:56:09,428 - INFO  - ACSL 格式的循环不变量
2025-08-11 20:56:09,428 - INFO  - /*@
          loop invariant  ((z == 36 * \at(y,Pre))&&(c == 0)&&(y == \at(y,Pre))) || ((z == 36 * \at(y,Pre) + c) && (0 <= c && c <= 36));
          loop invariant  0 <= c && c <= 36;
          loop invariant  z == 36 * \at(y,Pre) + c;
          loop invariant y == \at(y,Pre);
            */
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
2025-08-11 20:56:09,428 - INFO  - VST 格式的循环不变量
2025-08-11 20:56:09,428 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || ((z == 36 * y@pre + c) && (0 <= c && c <= 36))) &&
(0 <= c && c <= 36) &&
(z == 36 * y@pre + c) &&
(y == y@pre)
    */
    
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
2025-08-11 20:56:09,428 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 20:56:09,428 - INFO  - 继续符号执行
2025-08-11 20:56:09,428 - INFO  - /*@ Inv
    (((z == 36 * y@pre)&&(c == 0)&&(y == y@pre)) || ((z == 36 * y@pre + c) && (0 <= c && c <= 36))) &&
(0 <= c && c <= 36) &&
(z == 36 * y@pre + c) &&
(y == y@pre)
    */
    
            while (unknown()) {

      if ( c < 36 )
      {
      z  = z + 1;
      c  = c + 1;
      }
      
    }
2025-08-11 20:56:20,313 - INFO  - syntax Correct
2025-08-11 20:56:23,892 - INFO  - Validate:
2025-08-11 20:56:23,892 - INFO  - [True, True, True, True]
2025-08-11 20:56:23,893 - INFO  - 
2025-08-11 20:56:23,893 - INFO  - Verify:
2025-08-11 20:56:23,893 - INFO  - [True]
2025-08-11 20:56:23,893 - INFO  - 
2025-08-11 20:56:23,893 - INFO  - CORRECT INVARIANT
2025-08-11 20:56:34,777 - INFO  - syntax Correct
2025-08-11 20:56:38,369 - INFO  - Validate:
2025-08-11 20:56:38,369 - INFO  - [True, True, True, True]
2025-08-11 20:56:38,369 - INFO  - 
2025-08-11 20:56:38,369 - INFO  - Verify:
2025-08-11 20:56:38,369 - INFO  - [True]
2025-08-11 20:56:38,369 - INFO  - 
2025-08-11 20:56:38,370 - INFO  - ========================================
2025-08-11 20:56:38,370 - INFO  - first_pass:
2025-08-11 20:56:38,370 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 20:56:38,370 - INFO  - ========================================
