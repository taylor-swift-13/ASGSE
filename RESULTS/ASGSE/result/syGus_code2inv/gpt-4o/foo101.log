2025-08-11 18:40:20,643 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 18:40:20,643 - INFO  - ========================================

2025-08-11 18:40:20,693 - INFO  - 初始待处理函数: ['foo101']
2025-08-11 18:40:20,693 - INFO  - 
GENERATE ANNOTATION FOR foo101
2025-08-11 18:40:20,693 - INFO  - ========================================

2025-08-11 18:40:20,693 - INFO  - 函数 foo101 已经初始化
2025-08-11 18:40:20,707 - INFO  - 
GENERATE LOOP INVARIANT FOR foo101
2025-08-11 18:40:20,707 - INFO  - ========================================

2025-08-11 18:40:20,721 - INFO  - file_name: foo101
2025-08-11 18:40:20,732 - DEBUG  - INNER_FLAG: False
2025-08-11 18:40:20,747 - INFO  - Variable Maps:[{'x': '0', 'n': 'n@pre'}]
2025-08-11 18:40:20,747 - INFO  - Path conditions: [None]
2025-08-11 18:40:20,747 - INFO  - Pre condition: (x == 0) * (n == n@pre)
2025-08-11 18:40:20,747 - INFO  - Loop Condition: x < n
2025-08-11 18:40:20,747 - INFO  - Array Names: []
2025-08-11 18:40:20,747 - INFO  - Updated Loop Conditions: ['0 < n@pre']
2025-08-11 18:40:20,747 - INFO  - Global Unchanged Variables: ['n']
2025-08-11 18:40:20,747 - INFO  - Non Inductive Variables: []
2025-08-11 18:40:34,146 - INFO  - after const
2025-08-11 18:40:34,146 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x < n) {
      
      x  = (x + 1);
      
    }
            
2025-08-11 18:40:34,146 - INFO  - after not in
2025-08-11 18:40:34,146 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x < n) {
      
      x  = (x + 1);
      
    }
            
2025-08-11 18:40:34,146 - INFO  - after vars
2025-08-11 18:40:34,146 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x < n) {
      
      x  = (x + 1);
      
    }
            
2025-08-11 18:40:34,146 - INFO  - after verification goal
2025-08-11 18:40:34,146 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (0 < \at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (0 < \at(n,Pre)) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x < n) {
      
      x  = (x + 1);
      
    }
            
2025-08-11 18:40:35,940 - DEBUG  - invgen reasoning
2025-08-11 18:40:35,940 - DEBUG  - ```c
void foo101(int n) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (0 < \at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (0 <= x <= n));
      loop invariant (0 < \at(n,Pre)) ==> (0 <= x <= n);
      loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x < n) {
        x = (x + 1);
    }

    /*@ assert (x != n) ==> (n < 0); */
}
```
2025-08-11 18:40:35,940 - INFO  - 生成循环不变量
2025-08-11 18:40:35,940 - INFO  - 
void foo101(int n) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (0 < \at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (0 <= x <= n));
      loop invariant (0 < \at(n,Pre)) ==> (0 <= x <= n);
      loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x < n) {
        x = (x + 1);
    }

    /*@ assert (x != n) ==> (n < 0); */
}

2025-08-11 18:40:46,568 - INFO  - syntax Correct
2025-08-11 18:40:50,159 - INFO  - Validate:
2025-08-11 18:40:50,160 - INFO  - [True, True, True, True]
2025-08-11 18:40:50,160 - INFO  - 
2025-08-11 18:40:50,160 - INFO  - Verify:
2025-08-11 18:40:50,160 - INFO  - [True]
2025-08-11 18:40:50,160 - INFO  - 
2025-08-11 18:40:50,160 - INFO  - 注释过不变量的代码
2025-08-11 18:40:50,160 - INFO  - 
void foo101(int n) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (0 < \at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (0 <= x <= n));
      loop invariant (0 < \at(n,Pre)) ==> (0 <= x <= n);
      loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x < n) {
        x = (x + 1);
    }

    /*@ assert (x != n) ==> (n < 0); */
}

2025-08-11 18:41:00,788 - INFO  - syntax Correct
2025-08-11 18:41:04,373 - INFO  - Validate:
2025-08-11 18:41:04,373 - INFO  - [True, True, True, True]
2025-08-11 18:41:04,373 - INFO  - 
2025-08-11 18:41:04,374 - INFO  - Verify:
2025-08-11 18:41:04,374 - INFO  - [True]
2025-08-11 18:41:04,374 - INFO  - 
2025-08-11 18:41:04,374 - INFO  - ACSL 格式的循环不变量
2025-08-11 18:41:04,374 - INFO  - /*@
      loop invariant (0 < \at(n,Pre)) ==> (((x == 0)&&(n == \at(n,Pre))) || (0 <= x <= n));
      loop invariant (0 < \at(n,Pre)) ==> (0 <= x <= n);
      loop invariant (!(0 < \at(n,Pre))) ==> ((x == 0)&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x < n) {
        x = (x + 1);
    }
2025-08-11 18:41:04,374 - INFO  - VST 格式的循环不变量
2025-08-11 18:41:04,374 - INFO  - /*@ Inv
    ((0 < n@pre) => (((x == 0)&&(n == n@pre)) || (0 <= x && x <= n))) &&
((0 < n@pre) => (0 <= x && x <= n)) &&
((!(0 < n@pre)) => ((x == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x < n) {
        x = (x + 1);
    }
2025-08-11 18:41:04,375 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 18:41:04,375 - INFO  - 继续符号执行
2025-08-11 18:41:04,375 - INFO  - /*@ Inv
    ((0 < n@pre) => (((x == 0)&&(n == n@pre)) || (0 <= x && x <= n))) &&
((0 < n@pre) => (0 <= x && x <= n)) &&
((!(0 < n@pre)) => ((x == 0)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x < n) {
        x = (x + 1);
    }
2025-08-11 18:41:15,039 - INFO  - syntax Correct
2025-08-11 18:41:18,641 - INFO  - Validate:
2025-08-11 18:41:18,641 - INFO  - [True, True, True, True]
2025-08-11 18:41:18,641 - INFO  - 
2025-08-11 18:41:18,642 - INFO  - Verify:
2025-08-11 18:41:18,642 - INFO  - [True]
2025-08-11 18:41:18,642 - INFO  - 
2025-08-11 18:41:18,642 - INFO  - CORRECT INVARIANT
2025-08-11 18:41:29,293 - INFO  - syntax Correct
2025-08-11 18:41:32,863 - INFO  - Validate:
2025-08-11 18:41:32,863 - INFO  - [True, True, True, True]
2025-08-11 18:41:32,863 - INFO  - 
2025-08-11 18:41:32,863 - INFO  - Verify:
2025-08-11 18:41:32,864 - INFO  - [True]
2025-08-11 18:41:32,864 - INFO  - 
2025-08-11 18:41:32,864 - INFO  - ========================================
2025-08-11 18:41:32,864 - INFO  - first_pass:
2025-08-11 18:41:32,864 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 18:41:32,864 - INFO  - ========================================
