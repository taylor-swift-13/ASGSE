2025-08-11 21:06:08,411 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:06:08,411 - INFO  - ========================================

2025-08-11 21:06:08,549 - INFO  - 初始待处理函数: ['foo100']
2025-08-11 21:06:08,549 - INFO  - 
GENERATE ANNOTATION FOR foo100
2025-08-11 21:06:08,550 - INFO  - ========================================

2025-08-11 21:06:08,550 - INFO  - 函数 foo100 已经初始化
2025-08-11 21:06:08,564 - INFO  - 
GENERATE LOOP INVARIANT FOR foo100
2025-08-11 21:06:08,564 - INFO  - ========================================

2025-08-11 21:06:08,578 - INFO  - file_name: foo100
2025-08-11 21:06:08,590 - DEBUG  - INNER_FLAG: False
2025-08-11 21:06:08,605 - INFO  - Variable Maps:[{'y': '0', 'x': 'n@pre', 'n': 'n@pre'}]
2025-08-11 21:06:08,605 - INFO  - Path conditions: ['n@pre >= 0']
2025-08-11 21:06:08,605 - INFO  - Pre condition: n@pre >= 0 && (y == 0) * (x == n@pre) * (n == n@pre)
2025-08-11 21:06:08,605 - INFO  - Loop Condition: x > 0
2025-08-11 21:06:08,605 - INFO  - Array Names: []
2025-08-11 21:06:08,605 - INFO  - Updated Loop Conditions: ['n@pre > 0']
2025-08-11 21:06:08,606 - INFO  - Global Unchanged Variables: ['n']
2025-08-11 21:06:08,606 - INFO  - Non Inductive Variables: []
2025-08-11 21:06:26,839 - INFO  - after const
2025-08-11 21:06:26,839 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-11 21:06:26,839 - INFO  - after not in
2025-08-11 21:06:26,839 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-11 21:06:26,840 - INFO  - after vars
2025-08-11 21:06:26,840 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-11 21:06:26,840 - INFO  - after verification goal
2025-08-11 21:06:26,840 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
      y  = y + 1;
      x  = x - 1;
  
    }
            
2025-08-11 21:06:29,577 - DEBUG  - invgen reasoning
2025-08-11 21:06:29,577 - DEBUG  - ```c
/*@ requires n>=0; */
void foo100(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (y + x == \at(n,Pre)));
      loop invariant (\at(n,Pre) > 0) ==> (x >= 0);
      loop invariant (\at(n,Pre) > 0) ==> (y <= \at(n,Pre));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
            
    /*@ assert y == n ; */
  
}
```
2025-08-11 21:06:29,577 - INFO  - 生成循环不变量
2025-08-11 21:06:29,577 - INFO  - 
/*@ requires n>=0; */
void foo100(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (y + x == \at(n,Pre)));
      loop invariant (\at(n,Pre) > 0) ==> (x >= 0);
      loop invariant (\at(n,Pre) > 0) ==> (y <= \at(n,Pre));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
            
    /*@ assert y == n ; */
  
}

2025-08-11 21:06:40,350 - INFO  - syntax Correct
2025-08-11 21:06:43,935 - INFO  - Validate:
2025-08-11 21:06:43,935 - INFO  - [True, True, True, True, True]
2025-08-11 21:06:43,935 - INFO  - 
2025-08-11 21:06:43,935 - INFO  - Verify:
2025-08-11 21:06:43,935 - INFO  - [True]
2025-08-11 21:06:43,935 - INFO  - 
2025-08-11 21:06:43,935 - INFO  - 注释过不变量的代码
2025-08-11 21:06:43,936 - INFO  - 
/*@ requires n>=0; */
void foo100(int n) {

    int x = n;
    int y = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (y + x == \at(n,Pre)));
      loop invariant (\at(n,Pre) > 0) ==> (x >= 0);
      loop invariant (\at(n,Pre) > 0) ==> (y <= \at(n,Pre));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
            
    /*@ assert y == n ; */
  
}

2025-08-11 21:06:54,722 - INFO  - syntax Correct
2025-08-11 21:06:58,319 - INFO  - Validate:
2025-08-11 21:06:58,320 - INFO  - [True, True, True, True, True]
2025-08-11 21:06:58,320 - INFO  - 
2025-08-11 21:06:58,320 - INFO  - Verify:
2025-08-11 21:06:58,320 - INFO  - [True]
2025-08-11 21:06:58,320 - INFO  - 
2025-08-11 21:06:58,320 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:06:58,320 - INFO  - /*@
      loop invariant (\at(n,Pre) > 0) ==> (((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre))) || (y + x == \at(n,Pre)));
      loop invariant (\at(n,Pre) > 0) ==> (x >= 0);
      loop invariant (\at(n,Pre) > 0) ==> (y <= \at(n,Pre));
      loop invariant (!(\at(n,Pre) > 0)) ==> ((y == 0)&&(x == \at(n,Pre))&&(n == \at(n,Pre)));
      loop invariant n == \at(n,Pre);
    */
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
2025-08-11 21:06:58,320 - INFO  - VST 格式的循环不变量
2025-08-11 21:06:58,320 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (y + x == n@pre))) &&
((n@pre > 0) => (x >= 0)) &&
((n@pre > 0) => (y <= n@pre)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
2025-08-11 21:06:58,321 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:06:58,321 - INFO  - 继续符号执行
2025-08-11 21:06:58,321 - INFO  - /*@ Inv
    ((n@pre > 0) => (((y == 0)&&(x == n@pre)&&(n == n@pre)) || (y + x == n@pre))) &&
((n@pre > 0) => (x >= 0)) &&
((n@pre > 0) => (y <= n@pre)) &&
((!(n@pre > 0)) => ((y == 0)&&(x == n@pre)&&(n == n@pre))) &&
(n == n@pre)
    */
    
    while (x > 0) {
      
      y = y + 1;
      x = x - 1;
  
    }
2025-08-11 21:07:09,118 - INFO  - syntax Correct
2025-08-11 21:07:12,725 - INFO  - Validate:
2025-08-11 21:07:12,726 - INFO  - [True, True, True, True, True]
2025-08-11 21:07:12,726 - INFO  - 
2025-08-11 21:07:12,726 - INFO  - Verify:
2025-08-11 21:07:12,726 - INFO  - [True]
2025-08-11 21:07:12,726 - INFO  - 
2025-08-11 21:07:12,726 - INFO  - CORRECT INVARIANT
2025-08-11 21:07:23,417 - INFO  - syntax Correct
2025-08-11 21:07:27,013 - INFO  - Validate:
2025-08-11 21:07:27,013 - INFO  - [True, True, True, True, True]
2025-08-11 21:07:27,013 - INFO  - 
2025-08-11 21:07:27,013 - INFO  - Verify:
2025-08-11 21:07:27,013 - INFO  - [True]
2025-08-11 21:07:27,013 - INFO  - 
2025-08-11 21:07:27,013 - INFO  - ========================================
2025-08-11 21:07:27,014 - INFO  - first_pass:
2025-08-11 21:07:27,014 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:07:27,014 - INFO  - ========================================
