2025-08-11 19:57:32,406 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 19:57:32,406 - INFO  - ========================================

2025-08-11 19:57:32,472 - INFO  - 初始待处理函数: ['foo114', 'unknown']
2025-08-11 19:57:32,472 - INFO  - 现在处理函数 unknown

2025-08-11 19:57:32,473 - INFO  - 
GENERATE ANNOTATION FOR foo114
2025-08-11 19:57:32,473 - INFO  - ========================================

2025-08-11 19:57:32,473 - INFO  - 函数 foo114 已经初始化
2025-08-11 19:57:32,488 - INFO  - 
GENERATE LOOP INVARIANT FOR foo114
2025-08-11 19:57:32,488 - INFO  - ========================================

2025-08-11 19:57:32,503 - INFO  - file_name: foo114
2025-08-11 19:57:32,513 - DEBUG  - INNER_FLAG: False
2025-08-11 19:57:32,528 - INFO  - Variable Maps:[{'x': '0', 'sn': '0'}]
2025-08-11 19:57:32,528 - INFO  - Path conditions: [None]
2025-08-11 19:57:32,528 - INFO  - Pre condition: (x == 0) * (sn == 0)
2025-08-11 19:57:32,528 - INFO  - Loop Condition: unknown()
2025-08-11 19:57:32,528 - INFO  - Array Names: []
2025-08-11 19:57:32,528 - INFO  - Updated Loop Conditions: ['unknown()']
2025-08-11 19:57:32,529 - INFO  - Global Unchanged Variables: []
2025-08-11 19:57:32,529 - INFO  - Non Inductive Variables: []
2025-08-11 19:57:44,461 - INFO  - after const
2025-08-11 19:57:44,461 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 19:57:44,461 - INFO  - after not in
2025-08-11 19:57:44,461 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 19:57:44,461 - INFO  - after vars
2025-08-11 19:57:44,461 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 19:57:44,462 - INFO  - after verification goal
2025-08-11 19:57:44,462 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)&&(sn == 0)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_sn ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
2025-08-11 19:57:46,455 - DEBUG  - invgen reasoning
2025-08-11 19:57:46,456 - DEBUG  - ```c
int unknown();
void foo114() {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 0)&&(sn == 0)) || (x == sn) ;
      loop invariant  sn >= 0 ;
      loop invariant  x >= 0 ;
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != x) ==> (sn == -1);*/
  
}
```
2025-08-11 19:57:46,456 - INFO  - 生成循环不变量
2025-08-11 19:57:46,456 - INFO  - 
int unknown();
void foo114() {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 0)&&(sn == 0)) || (x == sn) ;
      loop invariant  sn >= 0 ;
      loop invariant  x >= 0 ;
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != x) ==> (sn == -1);*/
  
}

2025-08-11 19:57:57,149 - INFO  - syntax Correct
2025-08-11 19:58:00,721 - INFO  - Validate:
2025-08-11 19:58:00,721 - INFO  - [True, True, True]
2025-08-11 19:58:00,721 - INFO  - 
2025-08-11 19:58:00,721 - INFO  - Verify:
2025-08-11 19:58:00,721 - INFO  - [True]
2025-08-11 19:58:00,721 - INFO  - 
2025-08-11 19:58:00,721 - INFO  - 注释过不变量的代码
2025-08-11 19:58:00,722 - INFO  - 
int unknown();
void foo114() {

    int sn = 0;
    int x = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant  ((x == 0)&&(sn == 0)) || (x == sn) ;
      loop invariant  sn >= 0 ;
      loop invariant  x >= 0 ;
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != x) ==> (sn == -1);*/
  
}

2025-08-11 19:58:11,360 - INFO  - syntax Correct
2025-08-11 19:58:14,944 - INFO  - Validate:
2025-08-11 19:58:14,944 - INFO  - [True, True, True]
2025-08-11 19:58:14,944 - INFO  - 
2025-08-11 19:58:14,944 - INFO  - Verify:
2025-08-11 19:58:14,945 - INFO  - [True]
2025-08-11 19:58:14,945 - INFO  - 
2025-08-11 19:58:14,945 - INFO  - ACSL 格式的循环不变量
2025-08-11 19:58:14,945 - INFO  - /*@
      loop invariant  ((x == 0)&&(sn == 0)) || (x == sn) ;
      loop invariant  sn >= 0 ;
      loop invariant  x >= 0 ;
    */
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 19:58:14,945 - INFO  - VST 格式的循环不变量
2025-08-11 19:58:14,945 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)) || (x == sn) ) &&
(sn >= 0 ) &&
(x >= 0 )
    */
    
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 19:58:14,945 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 19:58:14,945 - INFO  - 继续符号执行
2025-08-11 19:58:14,945 - INFO  - /*@ Inv
    (((x == 0)&&(sn == 0)) || (x == sn) ) &&
(sn >= 0 ) &&
(x >= 0 )
    */
    
    while (unknown()) {
  
      x  = (x + 1);
      sn  = (sn + 1);
      
    }
2025-08-11 19:58:25,565 - INFO  - syntax Correct
2025-08-11 19:58:29,147 - INFO  - Validate:
2025-08-11 19:58:29,147 - INFO  - [True, True, True]
2025-08-11 19:58:29,147 - INFO  - 
2025-08-11 19:58:29,147 - INFO  - Verify:
2025-08-11 19:58:29,147 - INFO  - [True]
2025-08-11 19:58:29,147 - INFO  - 
2025-08-11 19:58:29,147 - INFO  - CORRECT INVARIANT
2025-08-11 19:58:39,806 - INFO  - syntax Correct
2025-08-11 19:58:43,377 - INFO  - Validate:
2025-08-11 19:58:43,378 - INFO  - [True, True, True]
2025-08-11 19:58:43,378 - INFO  - 
2025-08-11 19:58:43,378 - INFO  - Verify:
2025-08-11 19:58:43,378 - INFO  - [True]
2025-08-11 19:58:43,378 - INFO  - 
2025-08-11 19:58:43,378 - INFO  - ========================================
2025-08-11 19:58:43,378 - INFO  - first_pass:
2025-08-11 19:58:43,378 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 19:58:43,378 - INFO  - ========================================
