2025-08-11 21:00:53,016 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:00:53,016 - INFO  - ========================================

2025-08-11 21:00:53,140 - INFO  - 初始待处理函数: ['foo124']
2025-08-11 21:00:53,141 - INFO  - 
GENERATE ANNOTATION FOR foo124
2025-08-11 21:00:53,141 - INFO  - ========================================

2025-08-11 21:00:53,141 - INFO  - 函数 foo124 已经初始化
2025-08-11 21:00:53,155 - INFO  - 
GENERATE LOOP INVARIANT FOR foo124
2025-08-11 21:00:53,155 - INFO  - ========================================

2025-08-11 21:00:53,168 - INFO  - file_name: foo124
2025-08-11 21:00:53,179 - DEBUG  - INNER_FLAG: False
2025-08-11 21:00:53,195 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-11 21:00:53,195 - INFO  - Path conditions: [None]
2025-08-11 21:00:53,195 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-11 21:00:53,195 - INFO  - Loop Condition: x != 0
2025-08-11 21:00:53,195 - INFO  - Array Names: []
2025-08-11 21:00:53,195 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-11 21:00:53,196 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-11 21:00:53,196 - INFO  - Non Inductive Variables: []
2025-08-11 21:01:03,585 - INFO  - after const
2025-08-11 21:01:03,585 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 21:01:03,585 - INFO  - after not in
2025-08-11 21:01:03,586 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 21:01:03,586 - INFO  - after vars
2025-08-11 21:01:03,586 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 21:01:03,586 - INFO  - after verification goal
2025-08-11 21:01:03,586 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 21:01:07,094 - DEBUG  - invgen reasoning
2025-08-11 21:01:07,094 - DEBUG  - ```c
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant (\at(x,Pre) != 0) ==> ((x >= 0) && (x <= i));
      loop invariant (\at(x,Pre) != 0) ==> ((y >= j - i) && (y <= j));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}
```
2025-08-11 21:01:07,094 - INFO  - 生成循环不变量
2025-08-11 21:01:07,094 - INFO  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant (\at(x,Pre) != 0) ==> ((x >= 0) && (x <= i));
      loop invariant (\at(x,Pre) != 0) ==> ((y >= j - i) && (y <= j));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:01:17,997 - INFO  - syntax Correct
2025-08-11 21:01:21,672 - INFO  - Validate:
2025-08-11 21:01:21,673 - INFO  - [True, False, True, True, True, True]
2025-08-11 21:01:21,673 - INFO  - 
2025-08-11 21:01:21,673 - INFO  - Verify:
2025-08-11 21:01:21,673 - INFO  - [True]
2025-08-11 21:01:21,673 - INFO  - 
2025-08-11 21:01:21,673 - DEBUG  - after mark
2025-08-11 21:01:21,673 - DEBUG  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant (\at(x,Pre) != 0) ==> ((x >= 0) && (x <= i)) [INVARIANT FAILED] ;
      loop invariant (\at(x,Pre) != 0) ==> ((y >= j - i) && (y <= j));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:01:28,385 - DEBUG  - after adjust
2025-08-11 21:01:28,385 - DEBUG  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant (\at(x,Pre) != 0) ==> (x >= 0);
      loop invariant (\at(x,Pre) != 0) ==> ((y >= j - i) && (y <= j));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:01:39,240 - INFO  - syntax Correct
2025-08-11 21:01:42,914 - INFO  - Validate:
2025-08-11 21:01:42,914 - INFO  - [True, False, True, True, True, True]
2025-08-11 21:01:42,915 - INFO  - 
2025-08-11 21:01:42,915 - INFO  - Verify:
2025-08-11 21:01:42,915 - INFO  - [True]
2025-08-11 21:01:42,915 - INFO  - 
2025-08-11 21:01:42,915 - DEBUG  - after hudini
2025-08-11 21:01:42,915 - DEBUG  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant (\at(x,Pre) != 0) ==> ((y >= j - i) && (y <= j));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:01:53,760 - INFO  - syntax Correct
2025-08-11 21:01:57,419 - INFO  - Validate:
2025-08-11 21:01:57,420 - INFO  - [True, False, True, True, True]
2025-08-11 21:01:57,420 - INFO  - 
2025-08-11 21:01:57,420 - INFO  - Verify:
2025-08-11 21:01:57,420 - INFO  - [True]
2025-08-11 21:01:57,420 - INFO  - 
2025-08-11 21:01:57,420 - DEBUG  - after hudini
2025-08-11 21:01:57,420 - DEBUG  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:02:08,042 - INFO  - syntax Correct
2025-08-11 21:02:11,621 - INFO  - Validate:
2025-08-11 21:02:11,622 - INFO  - [True, True, True, True]
2025-08-11 21:02:11,622 - INFO  - 
2025-08-11 21:02:11,622 - INFO  - Verify:
2025-08-11 21:02:11,622 - INFO  - [True]
2025-08-11 21:02:11,622 - INFO  - 
2025-08-11 21:02:11,622 - DEBUG  - after hudini
2025-08-11 21:02:11,622 - DEBUG  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:02:22,239 - INFO  - syntax Correct
2025-08-11 21:02:25,806 - INFO  - Validate:
2025-08-11 21:02:25,806 - INFO  - [True, True, True, True]
2025-08-11 21:02:25,806 - INFO  - 
2025-08-11 21:02:25,806 - INFO  - Verify:
2025-08-11 21:02:25,806 - INFO  - [True]
2025-08-11 21:02:25,807 - INFO  - 
2025-08-11 21:02:25,807 - INFO  - 注释过不变量的代码
2025-08-11 21:02:25,807 - INFO  - 
void foo124(int x, int y) {

    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (i == j) ==> (y == 0); */
  
}

2025-08-11 21:02:36,418 - INFO  - syntax Correct
2025-08-11 21:02:40,000 - INFO  - Validate:
2025-08-11 21:02:40,001 - INFO  - [True, True, True, True]
2025-08-11 21:02:40,001 - INFO  - 
2025-08-11 21:02:40,001 - INFO  - Verify:
2025-08-11 21:02:40,001 - INFO  - [True]
2025-08-11 21:02:40,001 - INFO  - 
2025-08-11 21:02:40,001 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:02:40,001 - INFO  - /*@
      loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || ((x - y) == (i - j)));
      loop invariant !(\at(x,Pre) != 0) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
      loop invariant j == \at(y,Pre);
      loop invariant i == \at(x,Pre);
    */
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 21:02:40,001 - INFO  - VST 格式的循环不变量
2025-08-11 21:02:40,002 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre)) || ((x - y) == (i - j)))) &&
(!(x@pre != 0) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 21:02:40,002 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:02:40,002 - INFO  - 继续符号执行
2025-08-11 21:02:40,002 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre)) || ((x - y) == (i - j)))) &&
(!(x@pre != 0) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
    while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 21:02:50,710 - INFO  - syntax Correct
2025-08-11 21:02:54,308 - INFO  - Validate:
2025-08-11 21:02:54,309 - INFO  - [True, True, True, True]
2025-08-11 21:02:54,309 - INFO  - 
2025-08-11 21:02:54,309 - INFO  - Verify:
2025-08-11 21:02:54,309 - INFO  - [True]
2025-08-11 21:02:54,309 - INFO  - 
2025-08-11 21:02:54,309 - INFO  - CORRECT INVARIANT
2025-08-11 21:03:04,941 - INFO  - syntax Correct
2025-08-11 21:03:08,525 - INFO  - Validate:
2025-08-11 21:03:08,526 - INFO  - [True, True, True, True]
2025-08-11 21:03:08,526 - INFO  - 
2025-08-11 21:03:08,526 - INFO  - Verify:
2025-08-11 21:03:08,526 - INFO  - [True]
2025-08-11 21:03:08,526 - INFO  - 
2025-08-11 21:03:08,526 - INFO  - ========================================
2025-08-11 21:03:08,526 - INFO  - first_pass:
2025-08-11 21:03:08,526 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:03:08,526 - INFO  - ========================================
