2025-08-11 23:10:52,123 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 23:10:52,124 - INFO  - ========================================

2025-08-11 23:10:52,345 - INFO  - 初始待处理函数: ['foo103']
2025-08-11 23:10:52,345 - INFO  - 
GENERATE ANNOTATION FOR foo103
2025-08-11 23:10:52,345 - INFO  - ========================================

2025-08-11 23:10:52,345 - INFO  - 函数 foo103 已经初始化
2025-08-11 23:10:52,359 - INFO  - 
GENERATE LOOP INVARIANT FOR foo103
2025-08-11 23:10:52,359 - INFO  - ========================================

2025-08-11 23:10:52,372 - INFO  - file_name: foo103
2025-08-11 23:10:52,384 - DEBUG  - INNER_FLAG: False
2025-08-11 23:10:52,400 - INFO  - Variable Maps:[{'x': '0'}]
2025-08-11 23:10:52,400 - INFO  - Path conditions: [None]
2025-08-11 23:10:52,400 - INFO  - Pre condition: x == 0
2025-08-11 23:10:52,400 - INFO  - Loop Condition: x < 100
2025-08-11 23:10:52,400 - INFO  - Array Names: []
2025-08-11 23:10:52,401 - INFO  - Updated Loop Conditions: ['0 < 100']
2025-08-11 23:10:52,401 - INFO  - Global Unchanged Variables: []
2025-08-11 23:10:52,401 - INFO  - Non Inductive Variables: []
2025-08-11 23:11:02,523 - INFO  - after const
2025-08-11 23:11:02,523 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
2025-08-11 23:11:02,523 - INFO  - after not in
2025-08-11 23:11:02,524 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
2025-08-11 23:11:02,524 - INFO  - after vars
2025-08-11 23:11:02,524 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
2025-08-11 23:11:02,524 - INFO  - after verification goal
2025-08-11 23:11:02,524 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)) || (PLACE_HOLDER_VERFICATION_GOAL) ;
          loop invariant  PLACE_HOLDER_x ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
2025-08-11 23:11:05,647 - DEBUG  - invgen reasoning
2025-08-11 23:11:05,647 - DEBUG  - ```c
void foo103() {

    int x = 0 ;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant  ((x == 0)) || (x >= 1 && x <= 100) ;
          loop invariant  0 <= x <= 100 ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
   /*@ assert x == 100 ;*/
  }
```
2025-08-11 23:11:05,648 - INFO  - 生成循环不变量
2025-08-11 23:11:05,648 - INFO  - 
void foo103() {

    int x = 0 ;
    
            /*@
          loop invariant  ((x == 0)) || (x >= 1 && x <= 100) ;
          loop invariant  0 <= x <= 100 ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
   /*@ assert x == 100 ;*/
  }

2025-08-11 23:11:16,334 - INFO  - syntax Correct
2025-08-11 23:11:19,917 - INFO  - Validate:
2025-08-11 23:11:19,917 - INFO  - [True, True]
2025-08-11 23:11:19,917 - INFO  - 
2025-08-11 23:11:19,917 - INFO  - Verify:
2025-08-11 23:11:19,917 - INFO  - [True]
2025-08-11 23:11:19,918 - INFO  - 
2025-08-11 23:11:19,918 - INFO  - 注释过不变量的代码
2025-08-11 23:11:19,918 - INFO  - 
void foo103() {

    int x = 0 ;
    
            /*@
          loop invariant  ((x == 0)) || (x >= 1 && x <= 100) ;
          loop invariant  0 <= x <= 100 ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
            
   /*@ assert x == 100 ;*/
  }

2025-08-11 23:11:30,563 - INFO  - syntax Correct
2025-08-11 23:11:34,161 - INFO  - Validate:
2025-08-11 23:11:34,162 - INFO  - [True, True]
2025-08-11 23:11:34,162 - INFO  - 
2025-08-11 23:11:34,162 - INFO  - Verify:
2025-08-11 23:11:34,162 - INFO  - [True]
2025-08-11 23:11:34,162 - INFO  - 
2025-08-11 23:11:34,162 - INFO  - ACSL 格式的循环不变量
2025-08-11 23:11:34,162 - INFO  - /*@
          loop invariant  ((x == 0)) || (x >= 1 && x <= 100) ;
          loop invariant  0 <= x <= 100 ;
            */
            while (x < 100) {
      
      x  = (x + 1);
  
    }
2025-08-11 23:11:34,162 - INFO  - VST 格式的循环不变量
2025-08-11 23:11:34,162 - INFO  - /*@ Inv
    (((x == 0)) || (x >= 1 && x <= 100) ) &&
(0 <= x && x <= 100 )
    */
    
            while (x < 100) {
      
      x  = (x + 1);
  
    }
2025-08-11 23:11:34,163 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 23:11:34,163 - INFO  - 继续符号执行
2025-08-11 23:11:34,163 - INFO  - /*@ Inv
    (((x == 0)) || (x >= 1 && x <= 100) ) &&
(0 <= x && x <= 100 )
    */
    
            while (x < 100) {
      
      x  = (x + 1);
  
    }
2025-08-11 23:11:44,753 - INFO  - syntax Correct
2025-08-11 23:11:48,338 - INFO  - Validate:
2025-08-11 23:11:48,338 - INFO  - [True, True]
2025-08-11 23:11:48,338 - INFO  - 
2025-08-11 23:11:48,338 - INFO  - Verify:
2025-08-11 23:11:48,339 - INFO  - [True]
2025-08-11 23:11:48,339 - INFO  - 
2025-08-11 23:11:48,339 - INFO  - CORRECT INVARIANT
2025-08-11 23:11:58,980 - INFO  - syntax Correct
2025-08-11 23:12:02,562 - INFO  - Validate:
2025-08-11 23:12:02,562 - INFO  - [True, True]
2025-08-11 23:12:02,562 - INFO  - 
2025-08-11 23:12:02,562 - INFO  - Verify:
2025-08-11 23:12:02,562 - INFO  - [True]
2025-08-11 23:12:02,562 - INFO  - 
2025-08-11 23:12:02,562 - INFO  - ========================================
2025-08-11 23:12:02,562 - INFO  - first_pass:
2025-08-11 23:12:02,562 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 23:12:02,562 - INFO  - ========================================
