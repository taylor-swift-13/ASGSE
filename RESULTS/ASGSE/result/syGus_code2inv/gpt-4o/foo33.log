2025-08-20 00:21:57,001 - INFO  - 
FUNCTION INITIALIZATION
2025-08-20 00:21:57,001 - INFO  - ========================================

2025-08-20 00:21:57,058 - INFO  - 初始待处理函数: ['foo33']
2025-08-20 00:21:57,058 - INFO  - 
GENERATE ANNOTATION FOR foo33
2025-08-20 00:21:57,058 - INFO  - ========================================

2025-08-20 00:21:57,058 - INFO  - 函数 foo33 已经初始化
2025-08-20 00:21:57,074 - INFO  - 
GENERATE LOOP INVARIANT FOR foo33
2025-08-20 00:21:57,074 - INFO  - ========================================

2025-08-20 00:21:57,088 - INFO  - file_name: foo33
2025-08-20 00:21:57,099 - DEBUG  - INNER_FLAG: False
2025-08-20 00:21:57,113 - INFO  - Variable Maps:[{'x': 'n@pre', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'n': 'n@pre'}]
2025-08-20 00:21:57,114 - INFO  - Path conditions: [None]
2025-08-20 00:21:57,114 - INFO  - Pre condition: (x == n@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (n == n@pre)
2025-08-20 00:21:57,114 - INFO  - Loop Condition: x > 0
2025-08-20 00:21:57,114 - INFO  - Array Names: []
2025-08-20 00:21:57,114 - INFO  - Updated Loop Conditions: ['n@pre > 0']
2025-08-20 00:21:57,114 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1', 'n']
2025-08-20 00:21:57,115 - INFO  - Non Inductive Variables: []
2025-08-20 00:22:11,350 - INFO  - after const
2025-08-20 00:22:11,350 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-20 00:22:11,351 - INFO  - after not in
2025-08-20 00:22:11,351 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-20 00:22:11,351 - INFO  - after vars
2025-08-20 00:22:11,351 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-20 00:22:11,351 - INFO  - after verification goal
2025-08-20 00:22:11,351 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(n,Pre) > 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
2025-08-20 00:22:15,474 - DEBUG  - invgen reasoning
2025-08-20 00:22:15,475 - DEBUG  - ```c
void foo33(int n,int v1,int v2,int v3) {

    int x = n;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (x >= 0));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
  
   /*@ assert (x != 0) ==> (n < 0); */
  }
```
2025-08-20 00:22:15,475 - INFO  - 生成循环不变量
2025-08-20 00:22:15,475 - INFO  - 
void foo33(int n,int v1,int v2,int v3) {

    int x = n;
    
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (x >= 0));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
  
   /*@ assert (x != 0) ==> (n < 0); */
  }

2025-08-20 00:22:26,187 - INFO  - syntax Correct
2025-08-20 00:22:29,761 - INFO  - Validate:
2025-08-20 00:22:29,762 - INFO  - [True, True, True, True, True, True, True]
2025-08-20 00:22:29,762 - INFO  - 
2025-08-20 00:22:29,762 - INFO  - Verify:
2025-08-20 00:22:29,762 - INFO  - [True]
2025-08-20 00:22:29,762 - INFO  - 
2025-08-20 00:22:29,762 - INFO  - 注释过不变量的代码
2025-08-20 00:22:29,762 - INFO  - 
void foo33(int n,int v1,int v2,int v3) {

    int x = n;
    
            /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (x >= 0));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
            
  
   /*@ assert (x != 0) ==> (n < 0); */
  }

2025-08-20 00:22:40,429 - INFO  - syntax Correct
2025-08-20 00:22:43,997 - INFO  - Validate:
2025-08-20 00:22:43,997 - INFO  - [True, True, True, True, True, True, True]
2025-08-20 00:22:43,997 - INFO  - 
2025-08-20 00:22:43,997 - INFO  - Verify:
2025-08-20 00:22:43,997 - INFO  - [True]
2025-08-20 00:22:43,997 - INFO  - 
2025-08-20 00:22:43,997 - INFO  - ACSL 格式的循环不变量
2025-08-20 00:22:43,997 - INFO  - /*@
          loop invariant (\at(n,Pre) > 0) ==> (((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (x >= 0));
          loop invariant (\at(n,Pre) > 0) ==> (x >= 0 && x <= \at(n,Pre));
          loop invariant (!(\at(n,Pre) > 0)) ==> ((x == \at(n,Pre))&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (x > 0) {
      
       x  = x - 1;
  
    }
2025-08-20 00:22:43,998 - INFO  - VST 格式的循环不变量
2025-08-20 00:22:43,998 - INFO  - /*@ Inv
    ((n@pre > 0) => (((x == n@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre)) || (x >= 0))) &&
((n@pre > 0) => (x >= 0 && x <= n@pre)) &&
((!(n@pre > 0)) => ((x == n@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
            while (x > 0) {
      
       x  = x - 1;
  
    }
2025-08-20 00:22:43,998 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-20 00:22:43,998 - INFO  - 继续符号执行
2025-08-20 00:22:43,998 - INFO  - /*@ Inv
    ((n@pre > 0) => (((x == n@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre)) || (x >= 0))) &&
((n@pre > 0) => (x >= 0 && x <= n@pre)) &&
((!(n@pre > 0)) => ((x == n@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
            while (x > 0) {
      
       x  = x - 1;
  
    }
2025-08-20 00:22:54,705 - INFO  - syntax Correct
2025-08-20 00:22:58,270 - INFO  - Validate:
2025-08-20 00:22:58,270 - INFO  - [True, True, True, True, True, True, True]
2025-08-20 00:22:58,270 - INFO  - 
2025-08-20 00:22:58,271 - INFO  - Verify:
2025-08-20 00:22:58,271 - INFO  - [True]
2025-08-20 00:22:58,271 - INFO  - 
2025-08-20 00:22:58,271 - INFO  - CORRECT INVARIANT
2025-08-20 00:23:08,937 - INFO  - syntax Correct
2025-08-20 00:23:12,501 - INFO  - Validate:
2025-08-20 00:23:12,501 - INFO  - [True, True, True, True, True, True, True]
2025-08-20 00:23:12,501 - INFO  - 
2025-08-20 00:23:12,501 - INFO  - Verify:
2025-08-20 00:23:12,501 - INFO  - [True]
2025-08-20 00:23:12,501 - INFO  - 
2025-08-20 00:23:12,501 - INFO  - ========================================
2025-08-20 00:23:12,502 - INFO  - first_pass:
2025-08-20 00:23:12,502 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-20 00:23:12,502 - INFO  - ========================================
