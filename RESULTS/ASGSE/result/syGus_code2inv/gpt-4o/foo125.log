2025-08-11 22:40:59,228 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 22:40:59,228 - INFO  - ========================================

2025-08-11 22:40:59,419 - INFO  - 初始待处理函数: ['foo125']
2025-08-11 22:40:59,419 - INFO  - 
GENERATE ANNOTATION FOR foo125
2025-08-11 22:40:59,419 - INFO  - ========================================

2025-08-11 22:40:59,419 - INFO  - 函数 foo125 已经初始化
2025-08-11 22:40:59,433 - INFO  - 
GENERATE LOOP INVARIANT FOR foo125
2025-08-11 22:40:59,434 - INFO  - ========================================

2025-08-11 22:40:59,447 - INFO  - file_name: foo125
2025-08-11 22:40:59,460 - DEBUG  - INNER_FLAG: False
2025-08-11 22:40:59,476 - INFO  - Variable Maps:[{'j': 'y@pre', 'i': 'x@pre', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-11 22:40:59,476 - INFO  - Path conditions: [None]
2025-08-11 22:40:59,476 - INFO  - Pre condition: (j == y@pre) * (i == x@pre) * (y == y@pre) * (x == x@pre)
2025-08-11 22:40:59,476 - INFO  - Loop Condition: x != 0
2025-08-11 22:40:59,476 - INFO  - Array Names: []
2025-08-11 22:40:59,476 - INFO  - Updated Loop Conditions: ['x@pre != 0']
2025-08-11 22:40:59,476 - INFO  - Global Unchanged Variables: ['j', 'i']
2025-08-11 22:40:59,476 - INFO  - Non Inductive Variables: []
2025-08-11 22:41:11,687 - INFO  - after const
2025-08-11 22:41:11,687 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 22:41:11,687 - INFO  - after not in
2025-08-11 22:41:11,688 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 22:41:11,688 - INFO  - after vars
2025-08-11 22:41:11,688 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 22:41:11,688 - INFO  - after verification goal
2025-08-11 22:41:11,688 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(x,Pre) != 0) ==> (PLACE_HOLDER_y) ;
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
2025-08-11 22:41:15,485 - DEBUG  - invgen reasoning
2025-08-11 22:41:15,486 - DEBUG  - ```c
void foo125(int x, int y) {

    int i = x;
    int j = y;

        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x <= \at(x,Pre) && x >= 0);
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }
```
2025-08-11 22:41:15,486 - INFO  - 生成循环不变量
2025-08-11 22:41:15,486 - INFO  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x <= \at(x,Pre) && x >= 0);
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:41:26,386 - INFO  - syntax Correct
2025-08-11 22:41:30,027 - INFO  - Validate:
2025-08-11 22:41:30,027 - INFO  - [True, False, True, True, True, True]
2025-08-11 22:41:30,027 - INFO  - 
2025-08-11 22:41:30,028 - INFO  - Verify:
2025-08-11 22:41:30,028 - INFO  - [True]
2025-08-11 22:41:30,028 - INFO  - 
2025-08-11 22:41:30,028 - DEBUG  - after mark
2025-08-11 22:41:30,028 - DEBUG  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x <= \at(x,Pre) && x >= 0) [INVARIANT FAILED] ;
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:41:37,959 - DEBUG  - after adjust
2025-08-11 22:41:37,959 - DEBUG  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (x >= 0);
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:41:48,851 - INFO  - syntax Correct
2025-08-11 22:41:52,492 - INFO  - Validate:
2025-08-11 22:41:52,492 - INFO  - [True, False, True, True, True, True]
2025-08-11 22:41:52,492 - INFO  - 
2025-08-11 22:41:52,493 - INFO  - Verify:
2025-08-11 22:41:52,493 - INFO  - [True]
2025-08-11 22:41:52,493 - INFO  - 
2025-08-11 22:41:52,493 - DEBUG  - after hudini
2025-08-11 22:41:52,493 - DEBUG  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:42:03,111 - INFO  - syntax Correct
2025-08-11 22:42:06,684 - INFO  - Validate:
2025-08-11 22:42:06,684 - INFO  - [True, True, True, True, True]
2025-08-11 22:42:06,684 - INFO  - 
2025-08-11 22:42:06,684 - INFO  - Verify:
2025-08-11 22:42:06,684 - INFO  - [True]
2025-08-11 22:42:06,684 - INFO  - 
2025-08-11 22:42:06,684 - DEBUG  - after hudini
2025-08-11 22:42:06,684 - DEBUG  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:42:17,299 - INFO  - syntax Correct
2025-08-11 22:42:20,879 - INFO  - Validate:
2025-08-11 22:42:20,879 - INFO  - [True, True, True, True, True]
2025-08-11 22:42:20,879 - INFO  - 
2025-08-11 22:42:20,879 - INFO  - Verify:
2025-08-11 22:42:20,879 - INFO  - [True]
2025-08-11 22:42:20,879 - INFO  - 
2025-08-11 22:42:20,879 - INFO  - 注释过不变量的代码
2025-08-11 22:42:20,880 - INFO  - 
void foo125(int x, int y) {

    int i = x;
    int j = y;

            /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
            
  
    /*@ assert (y != 0) ==> (i != j); */
  
  }

2025-08-11 22:42:31,495 - INFO  - syntax Correct
2025-08-11 22:42:35,058 - INFO  - Validate:
2025-08-11 22:42:35,059 - INFO  - [True, True, True, True, True]
2025-08-11 22:42:35,059 - INFO  - 
2025-08-11 22:42:35,059 - INFO  - Verify:
2025-08-11 22:42:35,059 - INFO  - [True]
2025-08-11 22:42:35,059 - INFO  - 
2025-08-11 22:42:35,059 - INFO  - ACSL 格式的循环不变量
2025-08-11 22:42:35,059 - INFO  - /*@
          loop invariant (\at(x,Pre) != 0) ==> (((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (y == j - (\at(x,Pre) - x)));
          loop invariant (\at(x,Pre) != 0) ==> (y == j - (\at(x,Pre) - x));
          loop invariant (!(\at(x,Pre) != 0)) ==> ((j == \at(y,Pre))&&(i == \at(x,Pre))&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant j == \at(y,Pre);
          loop invariant i == \at(x,Pre);
            */
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 22:42:35,060 - INFO  - VST 格式的循环不变量
2025-08-11 22:42:35,060 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre)) || (y == j - (x@pre - x)))) &&
((x@pre != 0) => (y == j - (x@pre - x))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 22:42:35,060 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 22:42:35,060 - INFO  - 继续符号执行
2025-08-11 22:42:35,060 - INFO  - /*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre)) || (y == j - (x@pre - x)))) &&
((x@pre != 0) => (y == j - (x@pre - x))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre)
    */
    
            while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
2025-08-11 22:42:45,716 - INFO  - syntax Correct
2025-08-11 22:42:49,274 - INFO  - Validate:
2025-08-11 22:42:49,275 - INFO  - [True, True, True, True, True]
2025-08-11 22:42:49,275 - INFO  - 
2025-08-11 22:42:49,275 - INFO  - Verify:
2025-08-11 22:42:49,275 - INFO  - [True]
2025-08-11 22:42:49,275 - INFO  - 
2025-08-11 22:42:49,275 - INFO  - CORRECT INVARIANT
2025-08-11 22:42:59,885 - INFO  - syntax Correct
2025-08-11 22:43:03,447 - INFO  - Validate:
2025-08-11 22:43:03,447 - INFO  - [True, True, True, True, True]
2025-08-11 22:43:03,447 - INFO  - 
2025-08-11 22:43:03,448 - INFO  - Verify:
2025-08-11 22:43:03,448 - INFO  - [True]
2025-08-11 22:43:03,448 - INFO  - 
2025-08-11 22:43:03,448 - INFO  - ========================================
2025-08-11 22:43:03,448 - INFO  - first_pass:
2025-08-11 22:43:03,448 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 22:43:03,448 - INFO  - ========================================
