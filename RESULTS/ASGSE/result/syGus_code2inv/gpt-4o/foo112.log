2025-08-11 23:09:36,801 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 23:09:36,801 - INFO  - ========================================

2025-08-11 23:09:37,015 - INFO  - 初始待处理函数: ['foo112']
2025-08-11 23:09:37,015 - INFO  - 
GENERATE ANNOTATION FOR foo112
2025-08-11 23:09:37,015 - INFO  - ========================================

2025-08-11 23:09:37,015 - INFO  - 函数 foo112 已经初始化
2025-08-11 23:09:37,030 - INFO  - 
GENERATE LOOP INVARIANT FOR foo112
2025-08-11 23:09:37,030 - INFO  - ========================================

2025-08-11 23:09:37,043 - INFO  - file_name: foo112
2025-08-11 23:09:37,058 - DEBUG  - INNER_FLAG: False
2025-08-11 23:09:37,075 - INFO  - Variable Maps:[{'sn': '0', 'i': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'n': 'n@pre'}]
2025-08-11 23:09:37,075 - INFO  - Path conditions: ['n@pre >= 1']
2025-08-11 23:09:37,076 - INFO  - Pre condition: n@pre >= 1 && (sn == 0) * (i == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (n == n@pre)
2025-08-11 23:09:37,076 - INFO  - Loop Condition: i <= n
2025-08-11 23:09:37,076 - INFO  - Array Names: []
2025-08-11 23:09:37,076 - INFO  - Updated Loop Conditions: ['1 <= n@pre']
2025-08-11 23:09:37,076 - INFO  - Global Unchanged Variables: ['v3', 'v2', 'v1', 'n']
2025-08-11 23:09:37,076 - INFO  - Non Inductive Variables: []
2025-08-11 23:09:49,045 - INFO  - after const
2025-08-11 23:09:49,045 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:09:49,045 - INFO  - after not in
2025-08-11 23:09:49,045 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:09:49,045 - INFO  - after vars
2025-08-11 23:09:49,045 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:09:49,046 - INFO  - after verification goal
2025-08-11 23:09:49,046 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_i) ;
          loop invariant (1 <= \at(n,Pre)) ==> (PLACE_HOLDER_sn) ;
          loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
          loop invariant v3 == \at(v3,Pre);
          loop invariant v2 == \at(v2,Pre);
          loop invariant v1 == \at(v1,Pre);
          loop invariant n == \at(n,Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
2025-08-11 23:09:54,951 - DEBUG  - invgen reasoning
2025-08-11 23:09:54,952 - DEBUG  - Here's the C loop program with the `PLACE_HOLDER` sections filled in with appropriate loop invariants using ACSL:

```c
/*@ requires n >= 1;
*/
void foo112(int n,int v1,int v2,int v3) {

    int i = 1;
    int sn = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1);
      loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1);
      loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}
```

This provides the necessary loop invariants to verify the properties of the program using Frama-C, ensuring that they are inductively invariant and satisfy the program's post-condition.
2025-08-11 23:09:54,952 - INFO  - 生成循环不变量
2025-08-11 23:09:54,952 - INFO  - 
/*@ requires n >= 1;
*/
void foo112(int n,int v1,int v2,int v3) {

    int i = 1;
    int sn = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1);
      loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1);
      loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}

2025-08-11 23:10:05,685 - INFO  - syntax Correct
2025-08-11 23:10:09,270 - INFO  - Validate:
2025-08-11 23:10:09,270 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-11 23:10:09,271 - INFO  - 
2025-08-11 23:10:09,271 - INFO  - Verify:
2025-08-11 23:10:09,271 - INFO  - [True]
2025-08-11 23:10:09,271 - INFO  - 
2025-08-11 23:10:09,271 - INFO  - 注释过不变量的代码
2025-08-11 23:10:09,271 - INFO  - 
/*@ requires n >= 1;
*/
void foo112(int n,int v1,int v2,int v3) {

    int i = 1;
    int sn = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
        
    /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1);
      loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1);
      loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}

2025-08-11 23:10:19,904 - INFO  - syntax Correct
2025-08-11 23:10:23,494 - INFO  - Validate:
2025-08-11 23:10:23,494 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-11 23:10:23,494 - INFO  - 
2025-08-11 23:10:23,494 - INFO  - Verify:
2025-08-11 23:10:23,494 - INFO  - [True]
2025-08-11 23:10:23,494 - INFO  - 
2025-08-11 23:10:23,494 - INFO  - ACSL 格式的循环不变量
2025-08-11 23:10:23,494 - INFO  - /*@
      loop invariant (1 <= \at(n,Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(n,Pre)) ==> (1 <= i <= n + 1);
      loop invariant (1 <= \at(n,Pre)) ==> (sn == i - 1);
      loop invariant (!(1 <= \at(n,Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3,Pre))&&(v2 == \at(v2,Pre))&&(v1 == \at(v1,Pre))&&(n == \at(n,Pre)));
      loop invariant v3 == \at(v3,Pre);
      loop invariant v2 == \at(v2,Pre);
      loop invariant v1 == \at(v1,Pre);
      loop invariant n == \at(n,Pre);
    */
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
2025-08-11 23:10:23,495 - INFO  - VST 格式的循环不变量
2025-08-11 23:10:23,495 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre)) || (sn == i - 1))) &&
((1 <= n@pre) => (1 <= i && i <= n + 1)) &&
((1 <= n@pre) => (sn == i - 1)) &&
((!(1 <= n@pre)) => ((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
2025-08-11 23:10:23,495 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 23:10:23,495 - INFO  - 继续符号执行
2025-08-11 23:10:23,495 - INFO  - /*@ Inv
    ((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre)) || (sn == i - 1))) &&
((1 <= n@pre) => (1 <= i && i <= n + 1)) &&
((1 <= n@pre) => (sn == i - 1)) &&
((!(1 <= n@pre)) => ((sn == 0)&&(i == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    
    while (i <= n) {
      i = (i + 1);
      sn = (sn + 1);
    }
2025-08-11 23:10:34,209 - INFO  - syntax Correct
2025-08-11 23:10:37,792 - INFO  - Validate:
2025-08-11 23:10:37,792 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-11 23:10:37,792 - INFO  - 
2025-08-11 23:10:37,792 - INFO  - Verify:
2025-08-11 23:10:37,792 - INFO  - [True]
2025-08-11 23:10:37,792 - INFO  - 
2025-08-11 23:10:37,792 - INFO  - CORRECT INVARIANT
2025-08-11 23:10:48,472 - INFO  - syntax Correct
2025-08-11 23:10:52,053 - INFO  - Validate:
2025-08-11 23:10:52,054 - INFO  - [True, True, True, True, True, True, True, True]
2025-08-11 23:10:52,054 - INFO  - 
2025-08-11 23:10:52,054 - INFO  - Verify:
2025-08-11 23:10:52,054 - INFO  - [True]
2025-08-11 23:10:52,054 - INFO  - 
2025-08-11 23:10:52,054 - INFO  - ========================================
2025-08-11 23:10:52,054 - INFO  - first_pass:
2025-08-11 23:10:52,054 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 23:10:52,054 - INFO  - ========================================
