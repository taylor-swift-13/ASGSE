2025-08-11 21:27:14,153 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:27:14,153 - INFO  - ========================================

2025-08-11 21:27:14,202 - INFO  - 初始待处理函数: ['main3']
2025-08-11 21:27:14,202 - INFO  - 
GENERATE ANNOTATION FOR main3
2025-08-11 21:27:14,202 - INFO  - ========================================

2025-08-11 21:27:14,202 - INFO  - 函数 main3 已经初始化
2025-08-11 21:27:14,246 - INFO  - 
GENERATE LOOP INVARIANT FOR main3
2025-08-11 21:27:14,247 - INFO  - ========================================

2025-08-11 21:27:14,289 - INFO  - file_name: main3
2025-08-11 21:27:14,299 - DEBUG  - INNER_FLAG: False
2025-08-11 21:27:14,341 - INFO  - Variable Maps:[{'r': '0', 'q': '0', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-11 21:27:14,341 - INFO  - Path conditions: ['x@pre > 0 && y@pre > 0']
2025-08-11 21:27:14,341 - INFO  - Pre condition: x@pre > 0 && y@pre > 0 && (r == 0) * (q == 0) * (y == y@pre) * (x == x@pre)
2025-08-11 21:27:14,341 - INFO  - Loop Condition: x > y * q + r
2025-08-11 21:27:14,341 - INFO  - Array Names: []
2025-08-11 21:27:14,342 - INFO  - Updated Loop Conditions: ['x@pre > y@pre * 0 + 0']
2025-08-11 21:27:14,342 - INFO  - Global Unchanged Variables: ['y', 'x']
2025-08-11 21:27:14,342 - INFO  - Non Inductive Variables: ['r']
2025-08-11 21:27:30,705 - INFO  - after const
2025-08-11 21:27:30,705 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
2025-08-11 21:27:30,705 - INFO  - after not in
2025-08-11 21:27:30,705 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
2025-08-11 21:27:30,705 - INFO  - after vars
2025-08-11 21:27:30,705 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
2025-08-11 21:27:30,706 - INFO  - after verification goal
2025-08-11 21:27:30,706 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
2025-08-11 21:27:43,192 - INFO  - 生成循环不变量
2025-08-11 21:27:43,192 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main3(int x,int y){
 
    int q=0;
    int r=0;
    
    
            
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (x == q*y+r));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
    /*@ assert(x == q*y+r);*/
  }
2025-08-11 21:27:54,304 - INFO  - syntax Correct
2025-08-11 21:27:58,322 - INFO  - Validate:
2025-08-11 21:27:58,322 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:27:58,322 - INFO  - 
2025-08-11 21:27:58,323 - INFO  - Verify:
2025-08-11 21:27:58,323 - INFO  - [True]
2025-08-11 21:27:58,323 - INFO  - 
2025-08-11 21:27:58,323 - INFO  - 注释过不变量的代码
2025-08-11 21:27:58,323 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main3(int x,int y){
 
    int q=0;
    int r=0;
    
    
            
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (x == q*y+r));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
            
    /*@ assert(x == q*y+r);*/
  }
2025-08-11 21:28:09,373 - INFO  - syntax Correct
2025-08-11 21:28:13,383 - INFO  - Validate:
2025-08-11 21:28:13,383 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:28:13,383 - INFO  - 
2025-08-11 21:28:13,383 - INFO  - Verify:
2025-08-11 21:28:13,383 - INFO  - [True]
2025-08-11 21:28:13,383 - INFO  - 
2025-08-11 21:28:13,383 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:28:13,383 - INFO  - /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (x == q*y+r));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (q >= 0) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (0 <= r < y));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
2025-08-11 21:28:13,384 - INFO  - VST 格式的循环不变量
2025-08-11 21:28:13,384 - INFO  - /*@ Inv
    ((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (x == q*y+r))) &&
((x@pre > y@pre * 0 + 0) => (q >= 0) ) &&
((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y))) &&
((!(x@pre > y@pre * 0 + 0)) => ((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre))) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
2025-08-11 21:28:13,384 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:28:13,384 - INFO  - 继续符号执行
2025-08-11 21:28:13,384 - INFO  - /*@ Inv
    ((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (x == q*y+r))) &&
((x@pre > y@pre * 0 + 0) => (q >= 0) ) &&
((x@pre > y@pre * 0 + 0) => (((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre)) || (0 <= r && r < y))) &&
((!(x@pre > y@pre * 0 + 0)) => ((r == 0)&&(q == 0)&&(y == y@pre)&&(x == x@pre))) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
        if (r == y - 1){
            r = 0;
            q += 1;
        }
        else{
            r += 1;
        }
  
    }
2025-08-11 21:28:24,449 - INFO  - syntax Correct
2025-08-11 21:28:28,491 - INFO  - Validate:
2025-08-11 21:28:28,491 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:28:28,491 - INFO  - 
2025-08-11 21:28:28,491 - INFO  - Verify:
2025-08-11 21:28:28,491 - INFO  - [True]
2025-08-11 21:28:28,491 - INFO  - 
2025-08-11 21:28:28,491 - INFO  - CORRECT INVARIANT
2025-08-11 21:28:39,560 - INFO  - syntax Correct
2025-08-11 21:28:43,579 - INFO  - Validate:
2025-08-11 21:28:43,579 - INFO  - [True, True, True, True, True, True]
2025-08-11 21:28:43,579 - INFO  - 
2025-08-11 21:28:43,579 - INFO  - Verify:
2025-08-11 21:28:43,579 - INFO  - [True]
2025-08-11 21:28:43,579 - INFO  - 
2025-08-11 21:28:43,579 - INFO  - ========================================
2025-08-11 21:28:43,579 - INFO  - first_pass:
2025-08-11 21:28:43,580 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:28:43,580 - INFO  - ========================================
