2025-08-11 21:20:23,428 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 21:20:23,428 - INFO  - ========================================

2025-08-11 21:20:23,475 - INFO  - 初始待处理函数: ['main12']
2025-08-11 21:20:23,475 - INFO  - 
GENERATE ANNOTATION FOR main12
2025-08-11 21:20:23,475 - INFO  - ========================================

2025-08-11 21:20:23,475 - INFO  - 函数 main12 已经初始化
2025-08-11 21:20:23,520 - INFO  - 
GENERATE LOOP INVARIANT FOR main12
2025-08-11 21:20:23,520 - INFO  - ========================================

2025-08-11 21:20:23,562 - INFO  - file_name: main12
2025-08-11 21:20:23,571 - DEBUG  - INNER_FLAG: False
2025-08-11 21:20:23,615 - INFO  - Variable Maps:[{'t': 'A@pre', 'r': '0', 'q': '0', 'B': 'B@pre', 'A': 'A@pre'}]
2025-08-11 21:20:23,615 - INFO  - Path conditions: ['A@pre >= 0 && B@pre >= 1']
2025-08-11 21:20:23,615 - INFO  - Pre condition: A@pre >= 0 && B@pre >= 1 && (t == A@pre) * (r == 0) * (q == 0) * (B == B@pre) * (A == A@pre)
2025-08-11 21:20:23,615 - INFO  - Loop Condition: t != 0
2025-08-11 21:20:23,615 - INFO  - Array Names: []
2025-08-11 21:20:23,616 - INFO  - Updated Loop Conditions: ['A@pre != 0']
2025-08-11 21:20:23,616 - INFO  - Global Unchanged Variables: ['B', 'A']
2025-08-11 21:20:23,616 - INFO  - Non Inductive Variables: ['r']
2025-08-11 21:21:48,263 - INFO  - after const
2025-08-11 21:21:48,263 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
2025-08-11 21:21:48,263 - INFO  - after not in
2025-08-11 21:21:48,263 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
2025-08-11 21:21:48,263 - INFO  - after vars
2025-08-11 21:21:48,263 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(A,Pre) != 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (PLACE_HOLDER_r));
          loop invariant (\at(A,Pre) != 0) ==> (PLACE_HOLDER_t) ;
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
2025-08-11 21:21:48,263 - INFO  - after verification goal
2025-08-11 21:21:48,264 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(A,Pre) != 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (PLACE_HOLDER_r));
          loop invariant (\at(A,Pre) != 0) ==> (PLACE_HOLDER_t) ;
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
2025-08-11 21:23:27,762 - INFO  - 生成循环不变量
2025-08-11 21:23:27,762 - INFO  - /*@
requires A >= 0 && B >= 1;
*/
int main12(int A,int B){
    
   
    int q = 0;
    int r = 0;
    int t = A;
   
    
    
            
            /*@
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (A == q * B + r + t && 0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= q && q <= A / B) ;
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= t && t <= A) ;
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
    /*@ assert q == A / B; */
}
2025-08-11 21:23:39,005 - INFO  - syntax Correct
2025-08-11 21:23:43,056 - INFO  - Validate:
2025-08-11 21:23:43,056 - INFO  - [True, True, True, True, True, True, True]
2025-08-11 21:23:43,056 - INFO  - 
2025-08-11 21:23:43,056 - INFO  - Verify:
2025-08-11 21:23:43,056 - INFO  - [True]
2025-08-11 21:23:43,056 - INFO  - 
2025-08-11 21:23:43,056 - INFO  - 注释过不变量的代码
2025-08-11 21:23:43,056 - INFO  - /*@
requires A >= 0 && B >= 1;
*/
int main12(int A,int B){
    
   
    int q = 0;
    int r = 0;
    int t = A;
   
    
    
            
            /*@
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (A == q * B + r + t && 0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= q && q <= A / B) ;
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= t && t <= A) ;
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
            
    /*@ assert q == A / B; */
}
2025-08-11 21:23:54,302 - INFO  - syntax Correct
2025-08-11 21:23:58,354 - INFO  - Validate:
2025-08-11 21:23:58,354 - INFO  - [True, True, True, True, True, True, True]
2025-08-11 21:23:58,354 - INFO  - 
2025-08-11 21:23:58,354 - INFO  - Verify:
2025-08-11 21:23:58,354 - INFO  - [True]
2025-08-11 21:23:58,354 - INFO  - 
2025-08-11 21:23:58,354 - INFO  - ACSL 格式的循环不变量
2025-08-11 21:23:58,354 - INFO  - /*@
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (A == q * B + r + t && 0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= q && q <= A / B) ;
          loop invariant (\at(A,Pre) != 0) ==> (((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre))) || (0 <= r < B));
          loop invariant (\at(A,Pre) != 0) ==> (0 <= t && t <= A) ;
          loop invariant (!(\at(A,Pre) != 0)) ==> ((t == \at(A,Pre))&&(r == 0)&&(q == 0)&&(B == \at(B,Pre))&&(A == \at(A,Pre)));
          loop invariant B == \at(B,Pre);
          loop invariant A == \at(A,Pre);
            */
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
2025-08-11 21:23:58,355 - INFO  - VST 格式的循环不变量
2025-08-11 21:23:58,355 - INFO  - /*@ Inv
    ((A@pre != 0) => (((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre)) || (A == q * B + r + t && 0 <= r && r < B))) &&
((A@pre != 0) => (0 <= q && q <= A / B) ) &&
((A@pre != 0) => (((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre)) || (0 <= r && r < B))) &&
((A@pre != 0) => (0 <= t && t <= A) ) &&
((!(A@pre != 0)) => ((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre))) &&
(B == B@pre) &&
(A == A@pre)
    */
    
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
2025-08-11 21:23:58,355 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 21:23:58,355 - INFO  - 继续符号执行
2025-08-11 21:23:58,355 - INFO  - /*@ Inv
    ((A@pre != 0) => (((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre)) || (A == q * B + r + t && 0 <= r && r < B))) &&
((A@pre != 0) => (0 <= q && q <= A / B) ) &&
((A@pre != 0) => (((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre)) || (0 <= r && r < B))) &&
((A@pre != 0) => (0 <= t && t <= A) ) &&
((!(A@pre != 0)) => ((t == A@pre)&&(r == 0)&&(q == 0)&&(B == B@pre)&&(A == A@pre))) &&
(B == B@pre) &&
(A == A@pre)
    */
    
            while(t != 0) {
     if (r + 1 == B) {
          q = q + 1;
          r = 0;
          t = t - 1;
     }
     else {
          r = r + 1;
          t = t - 1;
     }
    }
2025-08-11 21:24:09,608 - INFO  - syntax Correct
2025-08-11 21:24:13,674 - INFO  - Validate:
2025-08-11 21:24:13,674 - INFO  - [True, True, True, True, True, True, True]
2025-08-11 21:24:13,674 - INFO  - 
2025-08-11 21:24:13,674 - INFO  - Verify:
2025-08-11 21:24:13,674 - INFO  - [True]
2025-08-11 21:24:13,674 - INFO  - 
2025-08-11 21:24:13,675 - INFO  - CORRECT INVARIANT
2025-08-11 21:24:24,870 - INFO  - syntax Correct
2025-08-11 21:24:28,905 - INFO  - Validate:
2025-08-11 21:24:28,905 - INFO  - [True, True, True, True, True, True, True]
2025-08-11 21:24:28,905 - INFO  - 
2025-08-11 21:24:28,905 - INFO  - Verify:
2025-08-11 21:24:28,905 - INFO  - [True]
2025-08-11 21:24:28,905 - INFO  - 
2025-08-11 21:24:28,905 - INFO  - ========================================
2025-08-11 21:24:28,905 - INFO  - first_pass:
2025-08-11 21:24:28,905 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 21:24:28,905 - INFO  - ========================================
