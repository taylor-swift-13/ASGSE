2025-08-11 19:56:16,743 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 19:56:16,744 - INFO  - ========================================

2025-08-11 19:56:16,770 - INFO  - 初始待处理函数: ['main14']
2025-08-11 19:56:16,770 - INFO  - 
GENERATE ANNOTATION FOR main14
2025-08-11 19:56:16,770 - INFO  - ========================================

2025-08-11 19:56:16,770 - INFO  - 函数 main14 已经初始化
2025-08-11 19:56:16,820 - INFO  - 
GENERATE LOOP INVARIANT FOR main14
2025-08-11 19:56:16,820 - INFO  - ========================================

2025-08-11 19:56:16,866 - INFO  - file_name: main14
2025-08-11 19:56:16,882 - DEBUG  - INNER_FLAG: False
2025-08-11 19:56:16,929 - INFO  - Variable Maps:[{'z': '0', 'y': 'b@pre', 'x': 'a@pre', 'b': 'b@pre', 'a': 'a@pre'}]
2025-08-11 19:56:16,930 - INFO  - Path conditions: ['a@pre >= 0 && b@pre >= 0']
2025-08-11 19:56:16,930 - INFO  - Pre condition: a@pre >= 0 && b@pre >= 0 && (z == 0) * (y == b@pre) * (x == a@pre) * (b == b@pre) * (a == a@pre)
2025-08-11 19:56:16,930 - INFO  - Loop Condition: y!=0
2025-08-11 19:56:16,930 - INFO  - Array Names: []
2025-08-11 19:56:16,930 - INFO  - Updated Loop Conditions: ['b@pre!=0']
2025-08-11 19:56:16,931 - INFO  - Global Unchanged Variables: ['b', 'a']
2025-08-11 19:56:16,931 - INFO  - Non Inductive Variables: []
2025-08-11 19:56:54,416 - INFO  - after const
2025-08-11 19:56:54,416 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-11 19:56:54,416 - INFO  - after not in
2025-08-11 19:56:54,416 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-11 19:56:54,416 - INFO  - after vars
2025-08-11 19:56:54,416 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-11 19:56:54,416 - INFO  - after verification goal
2025-08-11 19:56:54,416 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_x) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_y) ;
          loop invariant (\at(b,Pre)!=0) ==> (PLACE_HOLDER_z) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            
2025-08-11 19:57:00,936 - INFO  - 生成循环不变量
2025-08-11 19:57:00,936 - INFO  - /*@
requires a >= 0 && b >= 0;
*/
int main14(int a,int b){
   
    int x=a;
    int y=b;
    int z=0;

    // loop body
    
            
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + x * y == a * b));
          loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y) / \at(b,Pre))) ;
          loop invariant (\at(b,Pre)!=0) ==> (y >= 0) ;
          loop invariant (\at(b,Pre)!=0) ==> (z + x * y == a * b) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            

    /*@ assert z == a*b; */
}
2025-08-11 19:57:11,954 - INFO  - syntax Correct
2025-08-11 19:57:15,890 - INFO  - Validate:
2025-08-11 19:57:15,890 - INFO  - [True, True, True, True, True]
2025-08-11 19:57:15,890 - INFO  - 
2025-08-11 19:57:15,890 - INFO  - Verify:
2025-08-11 19:57:15,891 - INFO  - [True]
2025-08-11 19:57:15,891 - INFO  - 
2025-08-11 19:57:15,891 - INFO  - 注释过不变量的代码
2025-08-11 19:57:15,891 - INFO  - /*@
requires a >= 0 && b >= 0;
*/
int main14(int a,int b){
   
    int x=a;
    int y=b;
    int z=0;

    // loop body
    
            
            /*@
          loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + x * y == a * b));
          loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y) / \at(b,Pre))) ;
          loop invariant (\at(b,Pre)!=0) ==> (y >= 0) ;
          loop invariant (\at(b,Pre)!=0) ==> (z + x * y == a * b) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
            

    /*@ assert z == a*b; */
}
2025-08-11 19:57:26,937 - INFO  - syntax Correct
2025-08-11 19:57:30,878 - INFO  - Validate:
2025-08-11 19:57:30,878 - INFO  - [True, True, True, True, True]
2025-08-11 19:57:30,878 - INFO  - 
2025-08-11 19:57:30,879 - INFO  - Verify:
2025-08-11 19:57:30,879 - INFO  - [True]
2025-08-11 19:57:30,879 - INFO  - 
2025-08-11 19:57:30,879 - INFO  - ACSL 格式的循环不变量
2025-08-11 19:57:30,879 - INFO  - /*@
          loop invariant (\at(b,Pre)!=0) ==> (((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre))) || (z + x * y == a * b));
          loop invariant (\at(b,Pre)!=0) ==> (x == \at(a,Pre) * (1 << (\at(b,Pre) - y) / \at(b,Pre))) ;
          loop invariant (\at(b,Pre)!=0) ==> (y >= 0) ;
          loop invariant (\at(b,Pre)!=0) ==> (z + x * y == a * b) ;
          loop invariant (!(\at(b,Pre)!=0)) ==> ((z == 0)&&(y == \at(b,Pre))&&(x == \at(a,Pre))&&(b == \at(b,Pre))&&(a == \at(a,Pre)));
          loop invariant b == \at(b,Pre);
          loop invariant a == \at(a,Pre);
            */
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
2025-08-11 19:57:30,880 - INFO  - VST 格式的循环不变量
2025-08-11 19:57:30,880 - INFO  - /*@ Inv
    ((b@pre!=0) => (((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (z + x * y == a * b))) &&
((b@pre!=0) => (x == a@pre * (1 << (b@pre - y) / b@pre)) ) &&
((b@pre!=0) => (y >= 0) ) &&
((b@pre!=0) => (z + x * y == a * b) ) &&
((!(b@pre!=0)) => ((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(b == b@pre) &&
(a == a@pre)
    */
    
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
2025-08-11 19:57:30,880 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 19:57:30,880 - INFO  - 继续符号执行
2025-08-11 19:57:30,880 - INFO  - /*@ Inv
    ((b@pre!=0) => (((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre)) || (z + x * y == a * b))) &&
((b@pre!=0) => (x == a@pre * (1 << (b@pre - y) / b@pre)) ) &&
((b@pre!=0) => (y >= 0) ) &&
((b@pre!=0) => (z + x * y == a * b) ) &&
((!(b@pre!=0)) => ((z == 0)&&(y == b@pre)&&(x == a@pre)&&(b == b@pre)&&(a == a@pre))) &&
(b == b@pre) &&
(a == a@pre)
    */
    
            while(y!=0) {
     
     if (y%2 ==1 ){
          z = z+x;
          y = y-1;
     }
     x = 2*x;
     y = y/2;
    }
2025-08-11 19:57:41,874 - INFO  - syntax Correct
2025-08-11 19:57:45,763 - INFO  - Validate:
2025-08-11 19:57:45,763 - INFO  - [True, True, True, True, True]
2025-08-11 19:57:45,763 - INFO  - 
2025-08-11 19:57:45,764 - INFO  - Verify:
2025-08-11 19:57:45,764 - INFO  - [True]
2025-08-11 19:57:45,764 - INFO  - 
2025-08-11 19:57:45,764 - INFO  - CORRECT INVARIANT
2025-08-11 19:57:56,738 - INFO  - syntax Correct
2025-08-11 19:58:00,612 - INFO  - Validate:
2025-08-11 19:58:00,612 - INFO  - [True, True, True, True, True]
2025-08-11 19:58:00,613 - INFO  - 
2025-08-11 19:58:00,613 - INFO  - Verify:
2025-08-11 19:58:00,613 - INFO  - [True]
2025-08-11 19:58:00,613 - INFO  - 
2025-08-11 19:58:00,613 - INFO  - ========================================
2025-08-11 19:58:00,613 - INFO  - first_pass:
2025-08-11 19:58:00,613 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 19:58:00,613 - INFO  - ========================================
