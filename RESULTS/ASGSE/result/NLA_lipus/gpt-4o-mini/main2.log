2025-08-12 03:34:05,055 - INFO  - 
FUNCTION INITIALIZATION
2025-08-12 03:34:05,055 - INFO  - ========================================

2025-08-12 03:34:05,092 - INFO  - 初始待处理函数: ['main2']
2025-08-12 03:34:05,092 - INFO  - 
GENERATE ANNOTATION FOR main2
2025-08-12 03:34:05,092 - INFO  - ========================================

2025-08-12 03:34:05,092 - INFO  - 函数 main2 已经初始化
2025-08-12 03:34:05,137 - INFO  - 
GENERATE LOOP INVARIANT FOR main2
2025-08-12 03:34:05,137 - INFO  - ========================================

2025-08-12 03:34:05,178 - INFO  - file_name: main2
2025-08-12 03:34:05,188 - DEBUG  - INNER_FLAG: False
2025-08-12 03:34:05,230 - INFO  - Variable Maps:[{'r': '0', 'q': '0', 'y': 'y@pre', 'x': 'x@pre'}]
2025-08-12 03:34:05,230 - INFO  - Path conditions: ['x@pre > 0 && y@pre > 0']
2025-08-12 03:34:05,230 - INFO  - Pre condition: x@pre > 0 && y@pre > 0 && (r == 0) * (q == 0) * (y == y@pre) * (x == x@pre)
2025-08-12 03:34:05,230 - INFO  - Loop Condition: x > y * q + r
2025-08-12 03:34:05,230 - INFO  - Array Names: []
2025-08-12 03:34:05,230 - INFO  - Updated Loop Conditions: ['x@pre > y@pre * 0 + 0']
2025-08-12 03:34:05,230 - INFO  - Global Unchanged Variables: ['y', 'x']
2025-08-12 03:34:05,231 - INFO  - Non Inductive Variables: ['r']
2025-08-12 03:34:16,302 - INFO  - after const
2025-08-12 03:34:16,302 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(x,Pre) > 0 && \at(y,Pre) > 0 && (r == 0) * (q == 0) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-12 03:34:16,302 - INFO  - after not in
2025-08-12 03:34:16,302 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(x,Pre) > 0 && \at(y,Pre) > 0 && (r == 0) * (q == 0) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-12 03:34:16,302 - INFO  - after vars
2025-08-12 03:34:16,302 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(x,Pre) > 0 && \at(y,Pre) > 0 && (r == 0) * (q == 0) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-12 03:34:16,302 - INFO  - after verification goal
2025-08-12 03:34:16,303 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        /* >>> PRECONDITION OF THE LOOP : \at(x,Pre) > 0 && \at(y,Pre) > 0 && (r == 0) * (q == 0) * (y == \at(y,Pre)) * (x == \at(x,Pre)) <<< */
        
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (PLACE_HOLDER_q) ;
          loop invariant (\at(x,Pre) > \at(y,Pre) * 0 + 0) ==> (((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre))) || (PLACE_HOLDER_r));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * 0 + 0)) ==> ((r == 0)&&(q == 0)&&(y == \at(y,Pre))&&(x == \at(x,Pre)));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
2025-08-12 03:34:20,633 - INFO  - 生成循环不变量
2025-08-12 03:34:20,633 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main2(int x,int y){
 
  int q=0;
  int r=0;
  
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (q == \at(x,Pre) / \at(y,Pre) - 1 + \frac{r}{\at(y,Pre)}) || (q == 0 && r == 0);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= q);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= r < \at(y,Pre));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * q + r)) ==> (r == 0 && q == 0 && y == \at(y,Pre) && x == \at(x,Pre));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
  
  /*@ assert q == x / y;*/
  
}
2025-08-12 03:34:31,643 - INFO  - syntax Correct
2025-08-12 03:34:35,535 - INFO  - Validate:
2025-08-12 03:34:35,535 - INFO  - [True, True, True, True, True]
2025-08-12 03:34:35,535 - INFO  - 
2025-08-12 03:34:35,535 - INFO  - Verify:
2025-08-12 03:34:35,535 - INFO  - [True]
2025-08-12 03:34:35,536 - INFO  - 
2025-08-12 03:34:35,536 - INFO  - 注释过不变量的代码
2025-08-12 03:34:35,536 - INFO  - /*@ requires x>0;
    requires y>0;
*/
int main2(int x,int y){
 
  int q=0;
  int r=0;
  
            /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (q == \at(x,Pre) / \at(y,Pre) - 1 + \frac{r}{\at(y,Pre)}) || (q == 0 && r == 0);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= q);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= r < \at(y,Pre));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * q + r)) ==> (r == 0 && q == 0 && y == \at(y,Pre) && x == \at(x,Pre));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
            
  
  /*@ assert q == x / y;*/
  
}
2025-08-12 03:34:46,482 - INFO  - syntax Correct
2025-08-12 03:34:50,376 - INFO  - Validate:
2025-08-12 03:34:50,376 - INFO  - [True, True, True, True, True]
2025-08-12 03:34:50,376 - INFO  - 
2025-08-12 03:34:50,376 - INFO  - Verify:
2025-08-12 03:34:50,376 - INFO  - [True]
2025-08-12 03:34:50,376 - INFO  - 
2025-08-12 03:34:50,376 - INFO  - ACSL 格式的循环不变量
2025-08-12 03:34:50,376 - INFO  - /*@
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (q == \at(x,Pre) / \at(y,Pre) - 1 + \frac{r}{\at(y,Pre)}) || (q == 0 && r == 0);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= q);
          loop invariant (\at(x,Pre) > \at(y,Pre) * q + r) ==> (0 <= r < \at(y,Pre));
          loop invariant (!(\at(x,Pre) > \at(y,Pre) * q + r)) ==> (r == 0 && q == 0 && y == \at(y,Pre) && x == \at(x,Pre));
          loop invariant y == \at(y,Pre);
          loop invariant x == \at(x,Pre);
            */
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-12 03:34:50,377 - INFO  - VST 格式的循环不变量
2025-08-12 03:34:50,377 - INFO  - /*@ Inv
    ((x@pre > y@pre * q + r) => (q == x@pre / y@pre - 1 + \frac{r}{y@pre}) || (q == 0 && r == 0)) &&
((x@pre > y@pre * q + r) => (0 <= q)) &&
((x@pre > y@pre * q + r) => (0 <= r && r < y@pre)) &&
((!(x@pre > y@pre * q + r)) => (r == 0 && q == 0 && y == y@pre && x == x@pre)) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-12 03:34:50,377 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-12 03:34:50,377 - INFO  - 继续符号执行
2025-08-12 03:34:50,377 - INFO  - /*@ Inv
    ((x@pre > y@pre * q + r) => (q == x@pre / y@pre - 1 + \frac{r}{y@pre}) || (q == 0 && r == 0)) &&
((x@pre > y@pre * q + r) => (0 <= q)) &&
((x@pre > y@pre * q + r) => (0 <= r && r < y@pre)) &&
((!(x@pre > y@pre * q + r)) => (r == 0 && q == 0 && y == y@pre && x == x@pre)) &&
(y == y@pre) &&
(x == x@pre)
    */
    
            while(x > y * q + r) {
      if (r == y - 1){
          r = 0;
          q += 1;
      }
      else{
          r += 1;
      }

  }
2025-08-12 03:35:01,339 - INFO  - syntax Correct
2025-08-12 03:35:05,239 - INFO  - Validate:
2025-08-12 03:35:05,239 - INFO  - [True, True, True, True, True]
2025-08-12 03:35:05,239 - INFO  - 
2025-08-12 03:35:05,239 - INFO  - Verify:
2025-08-12 03:35:05,239 - INFO  - [True]
2025-08-12 03:35:05,239 - INFO  - 
2025-08-12 03:35:05,239 - INFO  - CORRECT INVARIANT
2025-08-12 03:35:16,190 - INFO  - syntax Correct
2025-08-12 03:35:20,093 - INFO  - Validate:
2025-08-12 03:35:20,093 - INFO  - [True, True, True, True, True]
2025-08-12 03:35:20,093 - INFO  - 
2025-08-12 03:35:20,093 - INFO  - Verify:
2025-08-12 03:35:20,093 - INFO  - [True]
2025-08-12 03:35:20,094 - INFO  - 
2025-08-12 03:35:20,094 - INFO  - ========================================
2025-08-12 03:35:20,094 - INFO  - first_pass:
2025-08-12 03:35:20,094 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-12 03:35:20,094 - INFO  - ========================================
