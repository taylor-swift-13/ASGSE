2025-08-11 11:29:41,725 - INFO  - 
FUNCTION INITIALIZATION
2025-08-11 11:29:41,725 - INFO  - ========================================

2025-08-11 11:29:41,817 - INFO  - 初始待处理函数: ['main30']
2025-08-11 11:29:41,817 - INFO  - 
GENERATE ANNOTATION FOR main30
2025-08-11 11:29:41,817 - INFO  - ========================================

2025-08-11 11:29:41,817 - INFO  - 函数 main30 已经初始化
2025-08-11 11:29:41,868 - INFO  - 
GENERATE LOOP INVARIANT FOR main30
2025-08-11 11:29:41,868 - INFO  - ========================================

2025-08-11 11:29:41,914 - INFO  - file_name: main30
2025-08-11 11:29:41,928 - DEBUG  - INNER_FLAG: False
2025-08-11 11:29:41,976 - INFO  - Variable Maps:[{}]
2025-08-11 11:29:41,976 - INFO  - Path conditions: [None]
2025-08-11 11:29:41,976 - INFO  - Pre condition: 
2025-08-11 11:29:41,976 - INFO  - Loop Condition: n > 0
2025-08-11 11:29:41,976 - INFO  - Array Names: []
2025-08-11 11:29:41,976 - INFO  - Updated Loop Conditions: ['n > 0']
2025-08-11 11:29:41,976 - INFO  - Global Unchanged Variables: []
2025-08-11 11:29:41,976 - INFO  - Non Inductive Variables: []
2025-08-11 11:29:59,176 - INFO  - after const
2025-08-11 11:29:59,176 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 11:29:59,176 - INFO  - after not in
2025-08-11 11:29:59,176 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 11:29:59,177 - INFO  - after vars
2025-08-11 11:29:59,177 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 11:29:59,177 - INFO  - after verification goal
2025-08-11 11:29:59,177 - INFO  - 
            
        /* >>> LOOP INVARIANT TO FILL <<< */
        
            /*@
          loop invariant (n > 0) ==> (() || (PLACE_HOLDER_VERFICATION_GOAL));
          loop invariant (!(n > 0)) ==> ();
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
2025-08-11 11:30:02,664 - INFO  - 生成循环不变量
2025-08-11 11:30:02,664 - INFO  - int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant n >= 0;
          loop invariant z == (n0 - n) * x * x;
          loop invariant w == (n0 - n) * y * y;
          loop invariant p == (n0 - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}

2025-08-11 11:30:03,150 - INFO  - syntax Error
[kernel] Parsing 3_output/NLA_lipus/main30.c (with preprocessing)
[kernel:annot-error] 3_output/NLA_lipus/main30.c:13: Warning: 
  unbound logic variable n0. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

2025-08-11 11:30:06,878 - DEBUG  - after repair
2025-08-11 11:30:06,878 - DEBUG  - 
int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant n >= 0;
          loop invariant z == (\at(n, Pre) - n) * x * x;
          loop invariant w == (\at(n, Pre) - n) * y * y;
          loop invariant p == (\at(n, Pre) - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}

2025-08-11 11:30:18,333 - INFO  - syntax Correct
2025-08-11 11:30:22,471 - INFO  - Validate:
2025-08-11 11:30:22,472 - INFO  - [False, True, True, True, True, True, True]
2025-08-11 11:30:22,472 - INFO  - 
2025-08-11 11:30:22,472 - INFO  - Verify:
2025-08-11 11:30:22,472 - INFO  - [True]
2025-08-11 11:30:22,472 - INFO  - 
2025-08-11 11:30:22,472 - DEBUG  - after hudini
2025-08-11 11:30:22,472 - DEBUG  - 
int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant z == (\at(n, Pre) - n) * x * x;
          loop invariant w == (\at(n, Pre) - n) * y * y;
          loop invariant p == (\at(n, Pre) - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}

2025-08-11 11:30:33,654 - INFO  - syntax Correct
2025-08-11 11:30:37,610 - INFO  - Validate:
2025-08-11 11:30:37,610 - INFO  - [True, True, True, True, True, True]
2025-08-11 11:30:37,610 - INFO  - 
2025-08-11 11:30:37,610 - INFO  - Verify:
2025-08-11 11:30:37,610 - INFO  - [True]
2025-08-11 11:30:37,610 - INFO  - 
2025-08-11 11:30:37,611 - DEBUG  - after hudini
2025-08-11 11:30:37,611 - DEBUG  - 
int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant z == (\at(n, Pre) - n) * x * x;
          loop invariant w == (\at(n, Pre) - n) * y * y;
          loop invariant p == (\at(n, Pre) - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}

2025-08-11 11:30:48,734 - INFO  - syntax Correct
2025-08-11 11:30:52,689 - INFO  - Validate:
2025-08-11 11:30:52,689 - INFO  - [True, True, True, True, True, True]
2025-08-11 11:30:52,689 - INFO  - 
2025-08-11 11:30:52,689 - INFO  - Verify:
2025-08-11 11:30:52,689 - INFO  - [True]
2025-08-11 11:30:52,690 - INFO  - 
2025-08-11 11:30:52,690 - INFO  - 注释过不变量的代码
2025-08-11 11:30:52,690 - INFO  - 
int main30(int x,int y,int n) {
    // variable declarations
	int z=0;
	int w=0;
	int p=0;

    //precondition
    // loop body
	
            
            /*@
          loop invariant z == (\at(n, Pre) - n) * x * x;
          loop invariant w == (\at(n, Pre) - n) * y * y;
          loop invariant p == (\at(n, Pre) - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
            
    // post-condition
	/*@ assert z * w >= p * p; */
}

2025-08-11 11:31:03,891 - INFO  - syntax Correct
2025-08-11 11:31:07,849 - INFO  - Validate:
2025-08-11 11:31:07,849 - INFO  - [True, True, True, True, True, True]
2025-08-11 11:31:07,849 - INFO  - 
2025-08-11 11:31:07,849 - INFO  - Verify:
2025-08-11 11:31:07,849 - INFO  - [True]
2025-08-11 11:31:07,849 - INFO  - 
2025-08-11 11:31:07,849 - INFO  - ACSL 格式的循环不变量
2025-08-11 11:31:07,849 - INFO  - /*@
          loop invariant z == (\at(n, Pre) - n) * x * x;
          loop invariant w == (\at(n, Pre) - n) * y * y;
          loop invariant p == (\at(n, Pre) - n) * x * y;
          loop invariant z * w >= p * p;
          loop assigns z, w, p, n;
          loop invariant (n > 0) ==> (z * w >= p * p);
          loop invariant (!(n > 0)) ==> (z * w >= p * p);
            */
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 11:31:07,850 - INFO  - VST 格式的循环不变量
2025-08-11 11:31:07,850 - INFO  - /*@ Inv
    (z == (n@pre - n) * x * x) &&
(w == (n@pre - n) * y * y) &&
(p == (n@pre - n) * x * y) &&
(z * w >= p * p
          loop assigns z, w, p, n) &&
((n > 0) => (z * w >= p * p)) &&
((!(n > 0)) => (z * w >= p * p))
    */
    
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 11:31:07,850 - INFO  - PARTIAL CORRECT INVARIANT
2025-08-11 11:31:07,850 - INFO  - 继续符号执行
2025-08-11 11:31:07,850 - INFO  - /*@ Inv
    (z == (n@pre - n) * x * x) &&
(w == (n@pre - n) * y * y) &&
(p == (n@pre - n) * x * y) &&
(z * w >= p * p
          loop assigns z, w, p, n) &&
((n > 0) => (z * w >= p * p)) &&
((!(n > 0)) => (z * w >= p * p))
    */
    
            while(n > 0) {
		z = z + x * x;
		w = w + y * y;
		p = p + x * y;
		n -= 1;
	}
2025-08-11 11:31:18,959 - INFO  - syntax Correct
2025-08-11 11:31:22,920 - INFO  - Validate:
2025-08-11 11:31:22,920 - INFO  - [True, True, True, True, True, True]
2025-08-11 11:31:22,920 - INFO  - 
2025-08-11 11:31:22,920 - INFO  - Verify:
2025-08-11 11:31:22,920 - INFO  - [True]
2025-08-11 11:31:22,920 - INFO  - 
2025-08-11 11:31:22,920 - INFO  - CORRECT INVARIANT
2025-08-11 11:31:34,074 - INFO  - syntax Correct
2025-08-11 11:31:38,042 - INFO  - Validate:
2025-08-11 11:31:38,043 - INFO  - [True, True, True, True, True, True]
2025-08-11 11:31:38,043 - INFO  - 
2025-08-11 11:31:38,043 - INFO  - Verify:
2025-08-11 11:31:38,043 - INFO  - [True]
2025-08-11 11:31:38,043 - INFO  - 
2025-08-11 11:31:38,043 - INFO  - ========================================
2025-08-11 11:31:38,043 - INFO  - first_pass:
2025-08-11 11:31:38,043 - INFO  - syntax=1, valid=1,satisfy=1
2025-08-11 11:31:38,043 - INFO  - ========================================
